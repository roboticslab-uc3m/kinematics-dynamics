/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sat Sep 13 16:50:26 2025


#include "BasicCartesianControl_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(BasicCartesianControlParamsCOMPONENT, "yarp.device.BasicCartesianControl")
}


BasicCartesianControl_ParamsParser::BasicCartesianControl_ParamsParser()
{
}


std::vector<std::string> BasicCartesianControl_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("controllerGain");
    params.push_back("trajectoryDuration");
    params.push_back("trajectoryRefSpeed");
    params.push_back("trajectoryRefAccel");
    params.push_back("cmcPeriodMs");
    params.push_back("waitPeriodMs");
    params.push_back("usePosdMovl");
    params.push_back("enableFailFast");
    params.push_back("referenceFrame");
    params.push_back("robot");
    params.push_back("solver");
    return params;
}


bool      BasicCartesianControl_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(BasicCartesianControlParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter controllerGain
    {
        if (config.check("controllerGain"))
        {
            m_controllerGain = config.find("controllerGain").asFloat64();
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'controllerGain' using value:" << m_controllerGain;
        }
        else
        {
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'controllerGain' using DEFAULT value:" << m_controllerGain;
        }
        prop_check.unput("controllerGain");
    }

    //Parser of parameter trajectoryDuration
    {
        if (config.check("trajectoryDuration"))
        {
            m_trajectoryDuration = config.find("trajectoryDuration").asFloat64();
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'trajectoryDuration' using value:" << m_trajectoryDuration;
        }
        else
        {
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'trajectoryDuration' using DEFAULT value:" << m_trajectoryDuration;
        }
        prop_check.unput("trajectoryDuration");
    }

    //Parser of parameter trajectoryRefSpeed
    {
        if (config.check("trajectoryRefSpeed"))
        {
            m_trajectoryRefSpeed = config.find("trajectoryRefSpeed").asFloat64();
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'trajectoryRefSpeed' using value:" << m_trajectoryRefSpeed;
        }
        else
        {
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'trajectoryRefSpeed' using DEFAULT value:" << m_trajectoryRefSpeed;
        }
        prop_check.unput("trajectoryRefSpeed");
    }

    //Parser of parameter trajectoryRefAccel
    {
        if (config.check("trajectoryRefAccel"))
        {
            m_trajectoryRefAccel = config.find("trajectoryRefAccel").asFloat64();
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'trajectoryRefAccel' using value:" << m_trajectoryRefAccel;
        }
        else
        {
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'trajectoryRefAccel' using DEFAULT value:" << m_trajectoryRefAccel;
        }
        prop_check.unput("trajectoryRefAccel");
    }

    //Parser of parameter cmcPeriodMs
    {
        if (config.check("cmcPeriodMs"))
        {
            m_cmcPeriodMs = config.find("cmcPeriodMs").asInt64();
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'cmcPeriodMs' using value:" << m_cmcPeriodMs;
        }
        else
        {
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'cmcPeriodMs' using DEFAULT value:" << m_cmcPeriodMs;
        }
        prop_check.unput("cmcPeriodMs");
    }

    //Parser of parameter waitPeriodMs
    {
        if (config.check("waitPeriodMs"))
        {
            m_waitPeriodMs = config.find("waitPeriodMs").asInt64();
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'waitPeriodMs' using value:" << m_waitPeriodMs;
        }
        else
        {
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'waitPeriodMs' using DEFAULT value:" << m_waitPeriodMs;
        }
        prop_check.unput("waitPeriodMs");
    }

    //Parser of parameter usePosdMovl
    {
        if (config.check("usePosdMovl"))
        {
            m_usePosdMovl = config.find("usePosdMovl").asBool();
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'usePosdMovl' using value:" << m_usePosdMovl;
        }
        else
        {
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'usePosdMovl' using DEFAULT value:" << m_usePosdMovl;
        }
        prop_check.unput("usePosdMovl");
    }

    //Parser of parameter enableFailFast
    {
        if (config.check("enableFailFast"))
        {
            m_enableFailFast = config.find("enableFailFast").asBool();
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'enableFailFast' using value:" << m_enableFailFast;
        }
        else
        {
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'enableFailFast' using DEFAULT value:" << m_enableFailFast;
        }
        prop_check.unput("enableFailFast");
    }

    //Parser of parameter referenceFrame
    {
        if (config.check("referenceFrame"))
        {
            m_referenceFrame = config.find("referenceFrame").asString();
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'referenceFrame' using value:" << m_referenceFrame;
        }
        else
        {
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'referenceFrame' using DEFAULT value:" << m_referenceFrame;
        }
        prop_check.unput("referenceFrame");
    }

    //Parser of parameter robot
    {
        if (config.check("robot"))
        {
            m_robot = config.find("robot").asString();
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'robot' using value:" << m_robot;
        }
        else
        {
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'robot' using DEFAULT value:" << m_robot;
        }
        prop_check.unput("robot");
    }

    //Parser of parameter solver
    {
        if (config.check("solver"))
        {
            m_solver = config.find("solver").asString();
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'solver' using value:" << m_solver;
        }
        else
        {
            yCInfo(BasicCartesianControlParamsCOMPONENT) << "Parameter 'solver' using DEFAULT value:" << m_solver;
        }
        prop_check.unput("solver");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(BasicCartesianControlParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(BasicCartesianControlParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      BasicCartesianControl_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: BasicCartesianControl\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'controllerGain': controller gain\n");
    doc = doc + std::string("'trajectoryDuration': trajectory duration\n");
    doc = doc + std::string("'trajectoryRefSpeed': trajectory reference linear speed\n");
    doc = doc + std::string("'trajectoryRefAccel': trajectory reference linear acceleration\n");
    doc = doc + std::string("'cmcPeriodMs': CMC rate\n");
    doc = doc + std::string("'waitPeriodMs': wait command period\n");
    doc = doc + std::string("'usePosdMovl': execute MOVL commands in POSD mode using IK\n");
    doc = doc + std::string("'enableFailFast': enable fail-fast mode for MOVL commands\n");
    doc = doc + std::string("'referenceFrame': reference frame\n");
    doc = doc + std::string("'robot': robot device\n");
    doc = doc + std::string("'solver': cartesian solver device\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device BasicCartesianControl --controllerGain 0.05 --trajectoryDuration 10.0 --trajectoryRefSpeed 10.0 --trajectoryRefAccel 10.0 --cmcPeriodMs 50 --waitPeriodMs 30 --usePosdMovl false --enableFailFast false --referenceFrame base --robot remote_controlboard --solver KdlSolver\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device BasicCartesianControl\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}

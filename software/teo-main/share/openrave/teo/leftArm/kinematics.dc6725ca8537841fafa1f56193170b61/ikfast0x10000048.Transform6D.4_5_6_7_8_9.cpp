/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-01-27 14:26:46.319745
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52;
x0=IKsin(j[5]);
x1=IKsin(j[0]);
x2=IKcos(j[1]);
x3=IKcos(j[3]);
x4=(x1*x2*x3);
x5=((1.0)*x4);
x6=IKsin(j[3]);
x7=IKcos(j[0]);
x8=IKcos(j[2]);
x9=(x7*x8);
x10=IKsin(j[1]);
x11=IKsin(j[2]);
x12=(x1*x11);
x13=((1.0)*x12);
x14=(x10*x13);
x15=(x6*((x14+(((-1.0)*(1.0)*x9)))));
x16=IKcos(j[5]);
x17=IKsin(j[4]);
x18=(x11*x7);
x19=((1.0)*x18);
x20=(x1*x8);
x21=((1.0)*x20);
x22=(x10*x21);
x23=(x17*(((((-1.0)*(1.0)*x19))+(((-1.0)*(1.0)*x22)))));
x24=IKcos(j[4]);
x25=(x1*x2*x6);
x26=(x3*(((((-1.0)*(1.0)*x14))+x9)));
x27=(x26+(((-1.0)*(1.0)*x25)));
x28=(x24*x27);
x29=(x23+x28);
x30=((0.32901)*x2);
x31=(x1*x10*x11);
x32=(x10*x3);
x33=(x11*x2);
x34=(x33*x6);
x35=(x17*x2*x8);
x36=(x10*x6);
x37=(x11*x2*x3);
x38=(x36+(((-1.0)*(1.0)*x37)));
x39=(x24*x38);
x40=(x39+(((-1.0)*(1.0)*x35)));
x41=(x2*x24*x8);
x42=(x2*x7);
x43=(x3*x42);
x44=(x6*(((((-1.0)*(1.0)*x10*x19))+(((-1.0)*(1.0)*x21)))));
x45=(x10*x9);
x46=((((-1.0)*(1.0)*x13))+x45);
x47=(x17*x46);
x48=(x42*x6);
x49=(x10*x18);
x50=(x3*((x20+x49)));
x51=(x24*((x48+x50)));
x52=((((-1.0)*(1.0)*x47))+(((-1.0)*(1.0)*x51)));
eerot[0]=(((x0*((x15+(((-1.0)*(1.0)*x5))))))+((x16*x29)));
eerot[1]=(((x24*((x19+x22))))+((x17*x27)));
eerot[2]=(((x0*x29))+((x16*((x5+(((-1.0)*(1.0)*x15)))))));
eetrans[0]=(((x16*(((((-1.0)*(0.00373)*x23))+(((-1.0)*(0.00373)*x28))))))+(((0.00036)*x9))+((x16*(((((-1.0)*(0.03431)*x15))+(((0.03431)*x4))))))+(((-1.0)*(0.202)*x4))+(((0.00337)*x7))+((x6*(((((-1.0)*(0.202)*x9))+(((0.202)*x31))))))+((x0*(((((0.03431)*x23))+(((0.03431)*x28))))))+(((-1.0)*(1.0)*x1*x30))+((x0*(((((-1.0)*(0.00373)*x15))+(((0.00373)*x4))))))+((x17*(((((-1.0)*(0.34692)*x26))+(((0.34692)*x25))))))+((x24*(((((-1.0)*(0.34692)*x18))+(((-1.0)*(0.34692)*x10*x20))))))+(((-1.0)*(0.00036)*x31)));
eerot[3]=(((x0*((x34+x32))))+((x16*x40)));
eerot[4]=(x41+((x17*x38)));
eerot[5]=(((x16*(((((-1.0)*(1.0)*x32))+(((-1.0)*(1.0)*x34))))))+((x0*x40)));
eetrans[1]=((0.34692)+((x16*(((((-1.0)*(0.03431)*x32))+(((-1.0)*(0.03431)*x34))))))+(((-1.0)*(0.00036)*x33))+((x17*(((((-1.0)*(0.34692)*x36))+(((0.34692)*x37))))))+(((-1.0)*(0.34692)*x41))+((x0*(((((-1.0)*(0.03431)*x35))+(((0.03431)*x39))))))+((x16*(((((-1.0)*(0.00373)*x39))+(((0.00373)*x35))))))+(((0.202)*x34))+((x0*(((((-1.0)*(0.00373)*x32))+(((-1.0)*(0.00373)*x34))))))+(((0.202)*x32))+(((0.32901)*x10)));
eerot[6]=(((x16*x52))+((x0*(((((-1.0)*(1.0)*x44))+(((-1.0)*(1.0)*x43)))))));
eerot[7]=(((x24*x46))+((x17*(((((-1.0)*(1.0)*x48))+(((-1.0)*(1.0)*x50)))))));
eerot[8]=(((x0*x52))+((x16*((x43+x44)))));
eetrans[2]=((0.4967)+((x0*(((((0.00373)*x44))+(((0.00373)*x43))))))+(((-1.0)*(0.00036)*x20))+(((-1.0)*(1.0)*x30*x7))+(((-1.0)*(0.00036)*x49))+((x6*(((((0.202)*x49))+(((0.202)*x20))))))+((x0*(((((-1.0)*(0.03431)*x47))+(((-1.0)*(0.03431)*x51))))))+((x16*(((((0.03431)*x43))+(((0.03431)*x44))))))+(((-1.0)*(0.202)*x43))+(((-1.0)*(0.00337)*x1))+((x16*(((((0.00373)*x47))+(((0.00373)*x51))))))+((x17*(((((0.34692)*x50))+(((0.34692)*x48))))))+((x24*(((((-1.0)*(0.34692)*x45))+(((0.34692)*x12)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*(((1.0)*r02)));
new_r02=r01;
new_px=((((-1.0)*(0.03431)*r02))+(((0.00373)*r00))+(((0.34692)*r01))+px);
new_r10=((-1.0)*(((1.0)*r20)));
new_r11=r22;
new_r12=((-1.0)*(((1.0)*r21)));
new_py=((0.4967)+(((0.03431)*r22))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.34692)*r21))+(((-1.0)*(0.00373)*r20)));
new_r20=r10;
new_r21=((-1.0)*(((1.0)*r12)));
new_r22=r11;
new_pz=((-0.34692)+(((-1.0)*(0.03431)*r12))+(((0.00373)*r10))+(((0.34692)*r11))+py);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*py);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x53)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x55))+((py*r00)));
rxp1_0=(((pz*r11))+(((-1.0)*r21*x53)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x55)));
rxp2_0=((((-1.0)*r22*x53))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x54))+((px*r22)));
rxp2_2=((((-1.0)*r12*x55))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[64]);
IkReal x56=((0.06862)*px);
IkReal x57=((0.06862)*py);
IkReal x58=((0.03431)*r00);
IkReal x59=((-1.0)*(((0.03431)*r10)));
IkReal x60=((0.0011771761)*r00);
IkReal x61=((2.0)*npx);
IkReal x62=(px*x61);
IkReal x63=((1.0)*r00);
IkReal x64=((((-1.0)*(0.0011771761)*r10))+((pp*r10))+(((-1.0)*py*x61)));
IkReal x65=((0.03431)*r01);
IkReal x66=((-1.0)*(((0.03431)*r11)));
IkReal x67=((0.0011771761)*r01);
IkReal x68=((2.0)*npy);
IkReal x69=(px*x68);
IkReal x70=((1.0)*r01);
IkReal x71=((((-1.0)*(0.0011771761)*r11))+(((-1.0)*py*x68))+((pp*r11)));
matrixinvcoeffs[0]=0;
matrixinvcoeffs[1]=0;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=r20;
matrixinvcoeffs[7]=rxp0_2;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=r21;
matrixinvcoeffs[15]=rxp1_2;
matrixinvcoeffs[16]=((-1.0)*(((1.0)*px)));
matrixinvcoeffs[17]=py;
matrixinvcoeffs[18]=((-1.0)*x56);
matrixinvcoeffs[19]=x57;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=x58;
matrixinvcoeffs[25]=x59;
matrixinvcoeffs[26]=(x60+x62+(((-1.0)*pp*x63)));
matrixinvcoeffs[27]=x64;
matrixinvcoeffs[28]=((-1.0)*x63);
matrixinvcoeffs[29]=r10;
matrixinvcoeffs[30]=0;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x65;
matrixinvcoeffs[33]=x66;
matrixinvcoeffs[34]=(x69+x67+(((-1.0)*pp*x70)));
matrixinvcoeffs[35]=x71;
matrixinvcoeffs[36]=((-1.0)*x70);
matrixinvcoeffs[37]=r11;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=py;
matrixinvcoeffs[41]=px;
matrixinvcoeffs[42]=x57;
matrixinvcoeffs[43]=x56;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=0;
matrixinvcoeffs[48]=x59;
matrixinvcoeffs[49]=((-1.0)*x58);
matrixinvcoeffs[50]=x64;
matrixinvcoeffs[51]=(((pp*r00))+(((-1.0)*x60))+(((-1.0)*x62)));
matrixinvcoeffs[52]=r10;
matrixinvcoeffs[53]=r00;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=x66;
matrixinvcoeffs[57]=((-1.0)*x65);
matrixinvcoeffs[58]=x71;
matrixinvcoeffs[59]=(((pp*r01))+(((-1.0)*x69))+(((-1.0)*x67)));
matrixinvcoeffs[60]=r11;
matrixinvcoeffs[61]=r01;
matrixinvcoeffs[62]=0;
matrixinvcoeffs[63]=0;
if( !matrixinverse<8>(matrixinvcoeffs) ) {
continue;
}
IkReal gconst0_0=matrixinvcoeffs[0], gconst0_1=matrixinvcoeffs[8], gconst0_2=matrixinvcoeffs[16], gconst0_3=matrixinvcoeffs[24], gconst0_4=matrixinvcoeffs[32], gconst0_5=matrixinvcoeffs[40], gconst0_6=matrixinvcoeffs[48], gconst0_7=matrixinvcoeffs[56], gconst1_0=matrixinvcoeffs[1], gconst1_1=matrixinvcoeffs[9], gconst1_2=matrixinvcoeffs[17], gconst1_3=matrixinvcoeffs[25], gconst1_4=matrixinvcoeffs[33], gconst1_5=matrixinvcoeffs[41], gconst1_6=matrixinvcoeffs[49], gconst1_7=matrixinvcoeffs[57], gconst2_0=matrixinvcoeffs[2], gconst2_1=matrixinvcoeffs[10], gconst2_2=matrixinvcoeffs[18], gconst2_3=matrixinvcoeffs[26], gconst2_4=matrixinvcoeffs[34], gconst2_5=matrixinvcoeffs[42], gconst2_6=matrixinvcoeffs[50], gconst2_7=matrixinvcoeffs[58], gconst3_0=matrixinvcoeffs[3], gconst3_1=matrixinvcoeffs[11], gconst3_2=matrixinvcoeffs[19], gconst3_3=matrixinvcoeffs[27], gconst3_4=matrixinvcoeffs[35], gconst3_5=matrixinvcoeffs[43], gconst3_6=matrixinvcoeffs[51], gconst3_7=matrixinvcoeffs[59], gconst4_0=matrixinvcoeffs[4], gconst4_1=matrixinvcoeffs[12], gconst4_2=matrixinvcoeffs[20], gconst4_3=matrixinvcoeffs[28], gconst4_4=matrixinvcoeffs[36], gconst4_5=matrixinvcoeffs[44], gconst4_6=matrixinvcoeffs[52], gconst4_7=matrixinvcoeffs[60], gconst5_0=matrixinvcoeffs[5], gconst5_1=matrixinvcoeffs[13], gconst5_2=matrixinvcoeffs[21], gconst5_3=matrixinvcoeffs[29], gconst5_4=matrixinvcoeffs[37], gconst5_5=matrixinvcoeffs[45], gconst5_6=matrixinvcoeffs[53], gconst5_7=matrixinvcoeffs[61], gconst6_0=matrixinvcoeffs[6], gconst6_1=matrixinvcoeffs[14], gconst6_2=matrixinvcoeffs[22], gconst6_3=matrixinvcoeffs[30], gconst6_4=matrixinvcoeffs[38], gconst6_5=matrixinvcoeffs[46], gconst6_6=matrixinvcoeffs[54], gconst6_7=matrixinvcoeffs[62], gconst7_0=matrixinvcoeffs[7], gconst7_1=matrixinvcoeffs[15], gconst7_2=matrixinvcoeffs[23], gconst7_3=matrixinvcoeffs[31], gconst7_4=matrixinvcoeffs[39], gconst7_5=matrixinvcoeffs[47], gconst7_6=matrixinvcoeffs[55], gconst7_7=matrixinvcoeffs[63];
IkReal op[162], zeror[48];
int numroots;;
IkReal x72=((1.0)*pp);
IkReal x73=((-1.0)*x72);
IkReal x74=(gconst0_0*npx);
IkReal x75=((0.034083554)*x74);
IkReal x76=(gconst0_4*npx);
IkReal x77=((0.06862)*x76);
IkReal x78=(gconst1_0*npy);
IkReal x79=((0.034083554)*x78);
IkReal x80=(gconst1_4*npy);
IkReal x81=((0.06862)*x80);
IkReal x82=(x81+x73+x75+x77+x79);
IkReal x83=(gconst0_1*npx);
IkReal x84=((0.0002559526)*x83);
IkReal x85=(gconst0_2*npx);
IkReal x86=((0.016928346568602)*x85);
IkReal x87=(gconst0_3*npx);
IkReal x88=((-0.00025426331284)*x87);
IkReal x89=(gconst0_7*npx);
IkReal x90=((0.0002559526)*x89);
IkReal x91=((-1.0)*x90);
IkReal x92=(gconst1_1*npy);
IkReal x93=((0.0002559526)*x92);
IkReal x94=(gconst1_2*npy);
IkReal x95=((0.016928346568602)*x94);
IkReal x96=(gconst1_3*npy);
IkReal x97=((-0.00025426331284)*x96);
IkReal x98=(gconst1_7*npy);
IkReal x99=((0.0002559526)*x98);
IkReal x100=((-1.0)*x99);
IkReal x101=((0.0451533324)*x89);
IkReal x102=((-1.0)*x101);
IkReal x103=((0.0451533324)*x98);
IkReal x104=((-1.0)*x103);
IkReal x105=((0.0230137756)*x83);
IkReal x106=((-1.0)*x105);
IkReal x107=((0.000336843859704)*x85);
IkReal x108=((-0.010994808456164)*x87);
IkReal x109=(gconst0_5*npx);
IkReal x110=((0.13724)*x109);
IkReal x111=((-1.0)*x110);
IkReal x112=((0.0230137756)*x92);
IkReal x113=((-1.0)*x112);
IkReal x114=((0.000336843859704)*x94);
IkReal x115=((-0.010994808456164)*x96);
IkReal x116=(gconst1_5*npy);
IkReal x117=((0.13724)*x116);
IkReal x118=((-1.0)*x117);
IkReal x119=((0.0110697784)*x74);
IkReal x120=((-1.0)*x77);
IkReal x121=((0.0110697784)*x78);
IkReal x122=((-1.0)*x81);
IkReal x123=(x120+x121+x122+x73+x119);
IkReal x124=((0.00178482194829)*x85);
IkReal x125=((8.2580546864e-5)*x87);
IkReal x126=((0.00178482194829)*x94);
IkReal x127=((8.2580546864e-5)*x96);
IkReal x128=(gconst0_6*npx);
IkReal x129=((0.27448)*x128);
IkReal x130=(gconst1_6*npy);
IkReal x131=((0.27448)*x130);
IkReal x132=((0.0002065462)*x83);
IkReal x133=((0.016928679567738)*x85);
IkReal x134=((-0.00020518299508)*x87);
IkReal x135=((0.0002065462)*x89);
IkReal x136=((-1.0)*x135);
IkReal x137=((0.0002065462)*x92);
IkReal x138=((0.016928679567738)*x94);
IkReal x139=((-0.00020518299508)*x96);
IkReal x140=((0.0002065462)*x98);
IkReal x141=((-1.0)*x140);
IkReal x142=((0.000271823061048)*x85);
IkReal x143=((0.000271823061048)*x94);
IkReal x144=((0.0020189876)+x105+(((0.010995474454436)*x87))+(((0.010995474454436)*x96))+x112+x117+x110);
IkReal x145=((0.001785154947426)*x85);
IkReal x146=((6.6640065968e-5)*x87);
IkReal x147=((0.001785154947426)*x94);
IkReal x148=((6.6640065968e-5)*x96);
IkReal x149=((0.53101)+(((-1.0)*x80))+(((-0.4967)*x78))+(((-1.0)*x76))+(((-0.4967)*x74)));
IkReal x150=((-0.00373)*x83);
IkReal x151=((0.00373)*x89);
IkReal x152=((-0.00373)*x92);
IkReal x153=((0.00373)*x98);
IkReal x154=((0.33538)*x83);
IkReal x155=((2.0)*x109);
IkReal x156=((0.65802)*x89);
IkReal x157=((0.33538)*x92);
IkReal x158=((2.0)*x116);
IkReal x159=((0.65802)*x98);
IkReal x160=((-0.16132)*x74);
IkReal x161=((-0.16132)*x78);
IkReal x162=((4.0)*x128);
IkReal x163=((4.0)*x130);
IkReal x164=((-0.00301)*x83);
IkReal x165=((0.00301)*x89);
IkReal x166=((-0.00301)*x92);
IkReal x167=((0.00301)*x98);
IkReal x168=(gconst3_4*rxp0_0);
IkReal x169=(gconst4_4*rxp1_0);
IkReal x170=(gconst3_0*rxp0_0);
IkReal x171=(gconst4_0*rxp1_0);
IkReal x172=(gconst6_0*rxp0_1);
IkReal x173=(gconst6_4*rxp0_1);
IkReal x174=(gconst7_0*rxp1_1);
IkReal x175=(gconst7_4*rxp1_1);
IkReal x176=((((-1.0)*x173))+(((-1.0)*x175))+(((-0.4967)*x172))+(((0.4967)*x170))+(((0.4967)*x171))+(((-0.4967)*x174))+x169+x168);
IkReal x177=(gconst3_1*rxp0_0);
IkReal x178=((0.00373)*x177);
IkReal x179=(gconst3_2*rxp0_0);
IkReal x180=(gconst3_3*rxp0_0);
IkReal x181=(gconst3_7*rxp0_0);
IkReal x182=((0.00373)*x181);
IkReal x183=(gconst4_1*rxp1_0);
IkReal x184=((0.00373)*x183);
IkReal x185=(gconst4_2*rxp1_0);
IkReal x186=(gconst4_3*rxp1_0);
IkReal x187=(gconst4_7*rxp1_0);
IkReal x188=((0.00373)*x187);
IkReal x189=(gconst6_1*rxp0_1);
IkReal x190=((-0.00373)*x189);
IkReal x191=(gconst6_2*rxp0_1);
IkReal x192=(gconst6_3*rxp0_1);
IkReal x193=(gconst6_7*rxp0_1);
IkReal x194=((0.00373)*x193);
IkReal x195=(gconst7_1*rxp1_1);
IkReal x196=((-0.00373)*x195);
IkReal x197=(gconst7_2*rxp1_1);
IkReal x198=(gconst7_3*rxp1_1);
IkReal x199=(gconst7_7*rxp1_1);
IkReal x200=((0.00373)*x199);
IkReal x201=((0.33538)*x177);
IkReal x202=((2.0)*gconst3_5);
IkReal x203=(rxp0_0*x202);
IkReal x204=((0.65802)*x181);
IkReal x205=((0.33538)*x183);
IkReal x206=((2.0)*gconst4_5);
IkReal x207=(rxp1_0*x206);
IkReal x208=((0.65802)*x187);
IkReal x209=((0.33538)*x189);
IkReal x210=((2.0)*gconst6_5);
IkReal x211=(rxp0_1*x210);
IkReal x212=((0.65802)*x193);
IkReal x213=((0.33538)*x195);
IkReal x214=((2.0)*gconst7_5);
IkReal x215=(rxp1_1*x214);
IkReal x216=((0.65802)*x199);
IkReal x217=((0.16132)*x170);
IkReal x218=((-1.0)*x168);
IkReal x219=((0.16132)*x171);
IkReal x220=((-1.0)*x169);
IkReal x221=((-0.16132)*x172);
IkReal x222=((-0.16132)*x174);
IkReal x223=(gconst3_6*rxp0_0);
IkReal x224=(gconst4_6*rxp1_0);
IkReal x225=(gconst6_6*rxp0_1);
IkReal x226=(gconst7_6*rxp1_1);
IkReal x227=((0.00301)*x177);
IkReal x228=((0.00301)*x181);
IkReal x229=((0.00301)*x183);
IkReal x230=((0.00301)*x187);
IkReal x231=((-0.00301)*x189);
IkReal x232=((0.00301)*x193);
IkReal x233=((-0.00301)*x195);
IkReal x234=((0.00301)*x199);
IkReal x235=(gconst3_0*rxp0_1);
IkReal x236=(gconst3_4*rxp0_1);
IkReal x237=(gconst4_0*rxp1_1);
IkReal x238=(gconst4_4*rxp1_1);
IkReal x239=(gconst6_0*rxp0_0);
IkReal x240=(gconst6_4*rxp0_0);
IkReal x241=(gconst7_0*rxp1_0);
IkReal x242=(gconst7_4*rxp1_0);
IkReal x243=((((-0.4967)*x235))+(((-0.4967)*x237))+(((-1.0)*x238))+(((-1.0)*x242))+(((-1.0)*x236))+(((-0.4967)*x241))+(((-1.0)*x240))+(((-0.4967)*x239)));
IkReal x244=(gconst3_1*rxp0_1);
IkReal x245=((-0.00373)*x244);
IkReal x246=(gconst3_2*rxp0_1);
IkReal x247=(gconst3_3*rxp0_1);
IkReal x248=(gconst3_7*rxp0_1);
IkReal x249=((0.00373)*x248);
IkReal x250=(gconst4_1*rxp1_1);
IkReal x251=((-0.00373)*x250);
IkReal x252=(gconst4_2*rxp1_1);
IkReal x253=(gconst4_3*rxp1_1);
IkReal x254=(gconst4_7*rxp1_1);
IkReal x255=((0.00373)*x254);
IkReal x256=(gconst6_1*rxp0_0);
IkReal x257=((-0.00373)*x256);
IkReal x258=(gconst6_2*rxp0_0);
IkReal x259=(gconst6_3*rxp0_0);
IkReal x260=(gconst6_7*rxp0_0);
IkReal x261=((0.00373)*x260);
IkReal x262=(gconst7_1*rxp1_0);
IkReal x263=((-0.00373)*x262);
IkReal x264=(gconst7_2*rxp1_0);
IkReal x265=(gconst7_3*rxp1_0);
IkReal x266=(gconst7_7*rxp1_0);
IkReal x267=((0.00373)*x266);
IkReal x268=((0.33538)*x244);
IkReal x269=(rxp0_1*x202);
IkReal x270=((0.65802)*x248);
IkReal x271=((0.33538)*x250);
IkReal x272=(rxp1_1*x206);
IkReal x273=((0.65802)*x254);
IkReal x274=((0.33538)*x256);
IkReal x275=(rxp0_0*x210);
IkReal x276=((0.65802)*x260);
IkReal x277=((0.33538)*x262);
IkReal x278=(rxp1_0*x214);
IkReal x279=((0.65802)*x266);
IkReal x280=((-0.16132)*x235);
IkReal x281=((-0.16132)*x237);
IkReal x282=((-0.16132)*x239);
IkReal x283=((-0.16132)*x241);
IkReal x284=(gconst3_6*rxp0_1);
IkReal x285=(gconst4_6*rxp1_1);
IkReal x286=(gconst6_6*rxp0_0);
IkReal x287=(gconst7_6*rxp1_0);
IkReal x288=((-0.00301)*x244);
IkReal x289=((0.00301)*x248);
IkReal x290=((-0.00301)*x250);
IkReal x291=((0.00301)*x254);
IkReal x292=((-0.00301)*x256);
IkReal x293=((0.00301)*x260);
IkReal x294=((-0.00301)*x262);
IkReal x295=((0.00301)*x266);
IkReal x296=((-1.0)*(((1.0)*pz)));
IkReal x297=(gconst0_0*r20);
IkReal x298=(gconst0_4*r20);
IkReal x299=((0.03431)*x298);
IkReal x300=(gconst1_0*r21);
IkReal x301=(gconst1_4*r21);
IkReal x302=((0.03431)*x301);
IkReal x303=(x296+x299+x302+(((0.017041777)*x300))+(((0.017041777)*x297)));
IkReal x304=(gconst0_1*r20);
IkReal x305=((0.0001279763)*x304);
IkReal x306=(gconst0_2*r20);
IkReal x307=(gconst0_3*r20);
IkReal x308=(gconst0_7*r20);
IkReal x309=((0.0001279763)*x308);
IkReal x310=(gconst1_1*r21);
IkReal x311=((0.0001279763)*x310);
IkReal x312=(gconst1_2*r21);
IkReal x313=(gconst1_3*r21);
IkReal x314=(gconst1_7*r21);
IkReal x315=((0.0001279763)*x314);
IkReal x316=((0.0115068878)*x304);
IkReal x317=(gconst0_5*r20);
IkReal x318=((0.06862)*x317);
IkReal x319=((0.0225766662)*x308);
IkReal x320=((0.0115068878)*x310);
IkReal x321=(gconst1_5*r21);
IkReal x322=((0.06862)*x321);
IkReal x323=((0.0225766662)*x314);
IkReal x324=((0.0055348892)*x297);
IkReal x325=((-1.0)*x299);
IkReal x326=((0.0055348892)*x300);
IkReal x327=((-1.0)*x302);
IkReal x328=(gconst0_6*r20);
IkReal x329=(gconst1_6*r21);
IkReal x330=((0.0001032731)*x304);
IkReal x331=((0.0001032731)*x308);
IkReal x332=((0.0001032731)*x310);
IkReal x333=((0.0001032731)*x314);
IkReal x334=((-1.0)*(((0.06862)*pz)));
IkReal x335=((0.0011771761)*x298);
IkReal x336=((0.0011771761)*x301);
IkReal x337=(gconst0_0*npx*pz);
IkReal x338=(gconst0_0*pp*r20);
IkReal x339=(gconst0_4*npx*pz);
IkReal x340=((2.0)*x339);
IkReal x341=(gconst1_0*npy*pz);
IkReal x342=(gconst1_0*pp*r21);
IkReal x343=(gconst1_4*npy*pz);
IkReal x344=((2.0)*x343);
IkReal x345=((((0.9934)*x341))+(((-1.0)*x301*x72))+(((0.00058470336887)*x300))+(((0.00058470336887)*x297))+(((0.9934)*x337))+x335+x334+x336+x344+x340+(((-0.4967)*x342))+(((-1.0)*x298*x72))+(((-0.4967)*x338)));
IkReal x346=((4.390866853e-6)*x304);
IkReal x347=((4.390866853e-6)*x308);
IkReal x348=((4.390866853e-6)*x310);
IkReal x349=((4.390866853e-6)*x314);
IkReal x350=(gconst0_1*npx*pz);
IkReal x351=((0.00746)*x350);
IkReal x352=(gconst0_1*pp*r20);
IkReal x353=((-0.00373)*x352);
IkReal x354=(gconst0_2*npx*pz);
IkReal x355=(gconst0_2*pp*r20);
IkReal x356=(gconst0_3*npx*pz);
IkReal x357=(gconst0_3*pp*r20);
IkReal x358=(gconst0_7*npx*pz);
IkReal x359=((0.00746)*x358);
IkReal x360=(gconst0_7*pp*r20);
IkReal x361=((0.00373)*x360);
IkReal x362=(gconst1_1*npy*pz);
IkReal x363=((0.00746)*x362);
IkReal x364=(gconst1_1*pp*r21);
IkReal x365=((-0.00373)*x364);
IkReal x366=(gconst1_2*npy*pz);
IkReal x367=(gconst1_2*pp*r21);
IkReal x368=(gconst1_3*npy*pz);
IkReal x369=(gconst1_3*pp*r21);
IkReal x370=(gconst1_7*npy*pz);
IkReal x371=((0.00746)*x370);
IkReal x372=(gconst1_7*pp*r21);
IkReal x373=((0.00373)*x372);
IkReal x374=((0.000394801320418)*x304);
IkReal x375=((0.0023543522)*x317);
IkReal x376=((0.000774605417322)*x308);
IkReal x377=((0.000394801320418)*x310);
IkReal x378=((0.0023543522)*x321);
IkReal x379=((0.000774605417322)*x314);
IkReal x380=((0.67076)*x350);
IkReal x381=((0.33538)*x352);
IkReal x382=((4.0)*pz);
IkReal x383=(x109*x382);
IkReal x384=((2.0)*pp);
IkReal x385=(x317*x384);
IkReal x386=((1.31604)*x358);
IkReal x387=((0.65802)*x360);
IkReal x388=((0.67076)*x362);
IkReal x389=((0.33538)*x364);
IkReal x390=(x116*x382);
IkReal x391=(x321*x384);
IkReal x392=((1.31604)*x370);
IkReal x393=((0.65802)*x372);
IkReal x394=((0.000189902048452)*x297);
IkReal x395=((-1.0)*x335);
IkReal x396=((0.000189902048452)*x300);
IkReal x397=((-1.0)*x336);
IkReal x398=(pp*x298);
IkReal x399=(pp*x301);
IkReal x400=((0.32264)*x337);
IkReal x401=((-0.16132)*x338);
IkReal x402=((-1.0)*x340);
IkReal x403=((0.32264)*x341);
IkReal x404=((-0.16132)*x342);
IkReal x405=((-1.0)*x344);
IkReal x406=((8.0)*pz);
IkReal x407=((4.0)*pp);
IkReal x408=((3.543300061e-6)*x304);
IkReal x409=((3.543300061e-6)*x308);
IkReal x410=((3.543300061e-6)*x310);
IkReal x411=((3.543300061e-6)*x314);
IkReal x412=((0.00602)*x350);
IkReal x413=((-0.00301)*x352);
IkReal x414=((0.00602)*x358);
IkReal x415=((0.00301)*x360);
IkReal x416=((0.00602)*x362);
IkReal x417=((-0.00301)*x364);
IkReal x418=((0.00602)*x370);
IkReal x419=((0.00301)*x372);
IkReal x420=((0.13724)*x128);
IkReal x421=((0.13724)*x130);
IkReal x422=(x421+x420);
IkReal x423=((((-1.0)*x420))+(((-1.0)*x421)));
IkReal x424=((((9.88128e-5)*x78))+(((9.88128e-5)*x74)));
IkReal x425=((2.0)*x128);
IkReal x426=((2.0)*x130);
IkReal x427=((((-1.0)*x425))+(((-1.0)*x426)));
IkReal x428=(x426+x425);
IkReal x429=((((-0.00144)*x78))+(((-0.00144)*x74)));
IkReal x430=((2.0)*x223);
IkReal x431=((2.0)*x224);
IkReal x432=((2.0)*x225);
IkReal x433=((2.0)*x226);
IkReal x434=((((-1.0)*x433))+(((-1.0)*x432))+x430+x431);
IkReal x435=((((-1.0)*x431))+(((-1.0)*x430))+x432+x433);
IkReal x436=((((-0.00144)*x174))+(((0.00144)*x171))+(((0.00144)*x170))+(((-0.00144)*x172)));
IkReal x437=((2.0)*x284);
IkReal x438=((2.0)*x285);
IkReal x439=((2.0)*x286);
IkReal x440=((2.0)*x287);
IkReal x441=((((-1.0)*x439))+(((-1.0)*x437))+(((-1.0)*x438))+(((-1.0)*x440)));
IkReal x442=(x440+x439+x438+x437);
IkReal x443=((((-0.00144)*x235))+(((-0.00144)*x237))+(((-0.00144)*x241))+(((-0.00144)*x239)));
IkReal x444=((0.06862)*x328);
IkReal x445=((0.06862)*x329);
IkReal x446=((0.9934)+x444+x445);
IkReal x447=((0.32264)+(((-1.0)*x444))+(((-1.0)*x445)));
IkReal x448=((((4.94064e-5)*x297))+(((4.94064e-5)*x300)));
IkReal x449=((0.0023543522)*x328);
IkReal x450=((0.0023543522)*x329);
IkReal x451=(pz*x162);
IkReal x452=(x328*x384);
IkReal x453=(pz*x163);
IkReal x454=(x329*x384);
IkReal x455=(x453+x450+x451+x449+(((-1.0)*x452))+(((-1.0)*x454)));
IkReal x456=((((-1.0)*x451))+(((-1.0)*x450))+(((-1.0)*x453))+x452+x454+(((-1.0)*x449)));
IkReal x457=((((-0.00144)*x342))+(((0.00288)*x337))+(((1.695133584e-6)*x300))+(((-0.00144)*x338))+(((0.00288)*x341))+(((1.695133584e-6)*x297)));
IkReal x458=((-1.0)*x75);
IkReal x459=((-1.0)*x79);
IkReal x460=((-1.0)*x119);
IkReal x461=((-1.0)*x121);
op[0]=((0.2455476268)+x100+x91+x93+x97+(((-1.0)*x86))+x84+x88+x82+(((-1.0)*x95)));
op[1]=((-0.0025019348)+x102+x106+x104+x107+x108+x115+x114+x118+x113+x111);
op[2]=((0.0248608792)+x124+x125+x126+x127+x123+x99+x90+x93+x84);
op[3]=0;
op[4]=(x131+x129);
op[5]=0;
op[6]=((0.245542774)+x139+x132+x137+x136+x134+x141+x82+(((-1.0)*x138))+(((-1.0)*x133)));
op[7]=(x103+x101+(((-1.0)*x142))+x144+(((-1.0)*x143)));
op[8]=((0.0248560264)+x132+x137+x135+x123+x147+x148+x140+x145+x146);
op[9]=((((0.003705382)*x87))+x150+x152+x151+x153+(((0.2466969771)*x85))+x149+(((0.003705382)*x96))+(((0.2466969771)*x94)));
op[10]=((-0.00746)+(((0.1602274622)*x96))+x159+x158+x156+x155+x157+x154+(((-0.0049088292)*x85))+(((-0.0049088292)*x94))+(((0.1602274622)*x87)));
op[11]=((-0.12701)+x150+x152+(((-1.0)*x151))+(((-0.0260102295)*x94))+(((-0.0260102295)*x85))+x80+(((-0.0012034472)*x96))+(((-0.0012034472)*x87))+(((-1.0)*x153))+x76+x160+x161);
op[12]=0;
op[13]=((((-1.0)*x162))+(((-1.0)*x163)));
op[14]=0;
op[15]=((((0.2467018299)*x94))+x149+(((0.2467018299)*x85))+(((0.002990134)*x96))+x164+x165+x166+x167+(((0.002990134)*x87)));
op[16]=((0.00602)+(((-1.0)*x154))+(((-0.1602371678)*x87))+(((0.0039612804)*x94))+(((0.0039612804)*x85))+(((-1.0)*x158))+(((-0.1602371678)*x96))+(((-1.0)*x157))+(((-1.0)*x159))+(((-1.0)*x155))+(((-1.0)*x156)));
op[17]=((-0.12701)+(((-0.0009711464)*x87))+(((-0.0009711464)*x96))+(((-0.0260150823)*x85))+x80+x76+x160+x161+x164+x166+(((-0.0260150823)*x94))+(((-1.0)*x167))+(((-1.0)*x165)));
op[18]=((((0.003705382)*x192))+(((-0.2466969771)*x185))+(((-0.2466969771)*x179))+(((-0.003705382)*x186))+(((0.2466969771)*x191))+(((-1.0)*x188))+(((-0.003705382)*x180))+(((0.2466969771)*x197))+x178+x176+x200+(((0.003705382)*x198))+x194+x196+x190+(((-1.0)*x182))+x184);
op[19]=((((-1.0)*x207))+(((0.0049088292)*x185))+(((-0.0049088292)*x191))+(((0.1602274622)*x198))+(((-1.0)*x205))+(((0.0049088292)*x179))+(((-1.0)*x201))+(((-0.1602274622)*x186))+(((-1.0)*x208))+(((-0.1602274622)*x180))+(((0.1602274622)*x192))+x213+x211+x212+x215+x216+x209+(((-0.0049088292)*x197))+(((-1.0)*x203))+(((-1.0)*x204)));
op[20]=((((0.0012034472)*x186))+(((0.0260102295)*x179))+(((-1.0)*x200))+(((-1.0)*x194))+(((-0.0260102295)*x191))+(((-0.0012034472)*x192))+(((-0.0012034472)*x198))+(((-0.0260102295)*x197))+x219+x217+x218+x173+x178+x175+(((0.0012034472)*x180))+x196+x190+(((0.0260102295)*x185))+x221+x220+x222+x188+x182+x184);
op[21]=0;
op[22]=((0.01348)+(((-4.0)*x226))+(((4.0)*x224))+(((4.0)*x223))+(((-4.0)*x225)));
op[23]=0;
op[24]=((((-0.002990134)*x180))+(((0.002990134)*x192))+(((0.2467018299)*x191))+(((-0.002990134)*x186))+(((-1.0)*x230))+(((-0.2467018299)*x185))+(((-0.2467018299)*x179))+(((0.2467018299)*x197))+x176+(((-1.0)*x228))+x227+x229+(((0.002990134)*x198))+x231+x234+x232+x233);
op[25]=((((0.0039612804)*x191))+(((-1.0)*x216))+(((-1.0)*x215))+(((-1.0)*x213))+(((-0.0039612804)*x179))+(((0.1602371678)*x186))+(((-0.0039612804)*x185))+(((-0.1602371678)*x192))+(((-1.0)*x209))+(((0.0039612804)*x197))+x208+x204+x203+x205+x201+x207+(((-0.1602371678)*x198))+(((0.1602371678)*x180))+(((-1.0)*x212))+(((-1.0)*x211)));
op[26]=((((-0.0260150823)*x191))+(((-1.0)*x232))+(((0.0260150823)*x179))+(((-1.0)*x234))+(((0.0260150823)*x185))+(((-0.0009711464)*x198))+(((-0.0260150823)*x197))+x219+x217+x218+(((-0.0009711464)*x192))+x173+x175+(((0.0009711464)*x180))+x227+x221+x220+x222+x229+x228+(((0.0009711464)*x186))+x230+x231+x233);
op[27]=((((0.003705382)*x259))+(((0.003705382)*x247))+x263+x261+x267+x249+x243+x245+x257+x255+x251+(((0.2466969771)*x252))+(((0.2466969771)*x258))+(((0.003705382)*x265))+(((0.2466969771)*x246))+(((0.2466969771)*x264))+(((0.003705382)*x253)));
op[28]=((((0.1602274622)*x265))+x268+x269+(((-0.0049088292)*x246))+(((-0.0049088292)*x258))+x279+x278+x272+x273+x274+x275+x270+x271+x276+x277+(((0.1602274622)*x259))+(((-0.0049088292)*x252))+(((0.1602274622)*x247))+(((-0.0049088292)*x264))+(((0.1602274622)*x253)));
op[29]=((((-1.0)*x261))+(((-0.0260102295)*x258))+x263+(((-0.0260102295)*x246))+(((-1.0)*x255))+x242+x245+x240+(((-0.0012034472)*x247))+(((-0.0260102295)*x264))+(((-0.0012034472)*x259))+x257+x251+(((-1.0)*x249))+(((-0.0260102295)*x252))+(((-0.0012034472)*x253))+(((-0.0012034472)*x265))+x281+x280+x283+x282+x236+x238+(((-1.0)*x267)));
op[30]=-0.00072;
op[31]=((-1.31604)+(((-4.0)*x286))+(((-4.0)*x284))+(((-4.0)*x287))+(((-4.0)*x285)));
op[32]=0.00072;
op[33]=((((0.2467018299)*x252))+(((0.2467018299)*x246))+(((0.002990134)*x265))+x291+x292+x290+x295+x293+x294+(((0.002990134)*x259))+x243+(((0.2467018299)*x264))+(((0.002990134)*x253))+(((0.2467018299)*x258))+(((0.002990134)*x247))+x288+x289);
op[34]=((((-1.0)*x277))+(((0.0039612804)*x258))+(((0.0039612804)*x246))+(((0.0039612804)*x264))+(((-1.0)*x276))+(((-1.0)*x275))+(((-1.0)*x269))+(((-1.0)*x274))+(((-1.0)*x273))+(((-1.0)*x268))+(((-1.0)*x271))+(((0.0039612804)*x252))+(((-0.1602371678)*x259))+(((-1.0)*x279))+(((-1.0)*x270))+(((-0.1602371678)*x265))+(((-1.0)*x272))+(((-0.1602371678)*x247))+(((-1.0)*x278))+(((-0.1602371678)*x253)));
op[35]=(x292+x290+x294+(((-1.0)*x295))+(((-1.0)*x289))+(((-0.0009711464)*x265))+(((-0.0260150823)*x258))+x242+x240+(((-0.0009711464)*x247))+(((-0.0260150823)*x252))+(((-1.0)*x293))+(((-0.0260150823)*x246))+(((-0.0009711464)*x259))+(((-1.0)*x291))+x288+x281+x280+x283+x282+(((-0.0260150823)*x264))+x236+x238+(((-0.0009711464)*x253)));
op[36]=((((-1.0)*x315))+x303+x305+(((-0.00012713165642)*x313))+(((-1.0)*x309))+(((-0.00012713165642)*x307))+(((-0.008464173284301)*x312))+x311+(((-0.008464173284301)*x306)));
op[37]=((((-1.0)*x323))+(((-0.005497404228082)*x307))+(((0.000168421929852)*x306))+(((0.000168421929852)*x312))+(((-1.0)*x318))+(((-1.0)*x322))+(((-1.0)*x319))+(((-1.0)*x316))+(((-0.005497404228082)*x313))+(((-1.0)*x320)));
op[38]=(x296+x309+x305+(((0.000892410974145)*x312))+x326+x327+x324+x325+x315+x311+(((4.1290273432e-5)*x307))+(((4.1290273432e-5)*x313))+(((0.000892410974145)*x306)));
op[39]=-0.00072;
op[40]=((0.67076)+(((0.13724)*x329))+(((0.13724)*x328)));
op[41]=-0.00072;
op[42]=(x303+(((-0.00010259149754)*x313))+(((-1.0)*x333))+(((-0.008464339783869)*x312))+x330+x332+(((-0.008464339783869)*x306))+(((-1.0)*x331))+(((-0.00010259149754)*x307)));
op[43]=((((0.005497737227218)*x307))+(((-0.000135911530524)*x306))+(((0.005497737227218)*x313))+x322+x323+x320+x316+x319+x318+(((-0.000135911530524)*x312)));
op[44]=(x296+(((3.3320032984e-5)*x307))+(((0.000892577473713)*x312))+x331+x330+x333+x332+(((0.000892577473713)*x306))+x326+x327+x324+x325+(((3.3320032984e-5)*x313)));
op[45]=((((0.003705382)*x357))+(((-1.0)*x349))+(((-0.000290405785384367)*x306))+(((0.2466969771)*x367))+(((-0.007410764)*x368))+(((-1.0)*x371))+(((0.003705382)*x369))+x351+x353+(((0.2466969771)*x355))+(((-1.0)*x347))+(((-1.0)*x359))+x363+x361+x365+(((-0.4933939542)*x366))+(((-0.007410764)*x356))+x345+x348+x346+x373+(((-4.3618871317702e-6)*x313))+(((-0.4933939542)*x354))+(((-0.000290405785384367)*x312))+(((-4.3618871317702e-6)*x307)));
op[46]=((((-1.0)*x386))+(((-1.0)*x388))+(((-0.000188615939065493)*x307))+x393+x391+(((5.77855641322212e-6)*x312))+(((-1.0)*x374))+(((-0.000188615939065493)*x313))+(((-0.3204549244)*x368))+(((-1.0)*x392))+(((-1.0)*x380))+(((-1.0)*x383))+(((-1.0)*x375))+(((5.77855641322212e-6)*x306))+x389+x381+x387+x385+(((-0.0049088292)*x367))+(((-1.0)*x379))+(((-1.0)*x390))+(((0.0098176584)*x354))+(((-1.0)*x377))+(((0.1602274622)*x369))+(((-1.0)*x378))+(((0.0098176584)*x366))+(((-0.0049088292)*x355))+(((0.1602274622)*x357))+(((-1.0)*x376))+(((-0.3204549244)*x356)));
op[47]=(x398+x399+x394+x397+x395+x396+(((-0.0260102295)*x355))+(((3.06186205229149e-5)*x306))+(((-0.0012034472)*x357))+(((0.0024068944)*x368))+(((0.052020459)*x354))+x359+x351+x353+(((1.41666928145192e-6)*x307))+(((-0.0260102295)*x367))+(((0.0024068944)*x356))+x334+x403+x402+x401+x400+x405+x404+(((3.06186205229149e-5)*x312))+x363+x365+(((1.41666928145192e-6)*x313))+x348+x349+x346+x347+x371+(((-0.0012034472)*x369))+(((0.052020459)*x366))+(((-1.0)*x361))+(((-1.0)*x373)));
op[48]=0.000715248;
op[49]=((0.3205554852)+((x130*x406))+(((-1.0)*x328*x407))+(((-1.0)*x329*x407))+(((0.0047087044)*x328))+((x128*x406))+(((0.0047087044)*x329)));
op[50]=-0.0002323008;
op[51]=((((-1.0)*x414))+(((-0.4934036598)*x354))+(((-0.4934036598)*x366))+(((-0.005980268)*x356))+(((-1.0)*x418))+(((-3.5199142805974e-6)*x313))+(((0.2467018299)*x355))+x419+x410+x412+x413+x415+x416+x417+(((-1.0)*x409))+(((-0.000290411497984545)*x312))+(((0.002990134)*x357))+x408+(((-0.005980268)*x368))+(((-3.5199142805974e-6)*x307))+(((0.002990134)*x369))+x345+(((-1.0)*x411))+(((0.2467018299)*x367))+(((-0.000290411497984545)*x306)));
op[52]=((((0.3204743356)*x368))+x392+x390+(((-4.66312461227844e-6)*x306))+(((0.0039612804)*x355))+(((-0.1602371678)*x357))+(((-1.0)*x385))+(((0.00018862736426585)*x313))+(((-0.0079225608)*x354))+x388+x386+x383+x380+(((-1.0)*x381))+(((0.00018862736426585)*x307))+(((-4.66312461227844e-6)*x312))+(((-1.0)*x387))+(((-0.0079225608)*x366))+(((-1.0)*x391))+x378+x377+x379+x374+x376+x375+(((0.3204743356)*x356))+(((0.0039612804)*x367))+(((-1.0)*x389))+(((-1.0)*x393))+(((-0.1602371678)*x369)));
op[53]=(x398+x399+x394+x397+x395+x396+(((-0.0009711464)*x369))+(((-1.0)*x419))+(((0.0019422928)*x356))+x418+x410+x411+x412+x413+x414+x416+x417+(((3.0624333123093e-5)*x312))+(((3.0624333123093e-5)*x306))+x334+x409+x408+x403+x402+x401+x400+x405+x404+(((-0.0009711464)*x357))+(((0.0019422928)*x368))+(((1.14321033168104e-6)*x313))+(((-0.0260150823)*x367))+(((0.0520301646)*x366))+(((1.14321033168104e-6)*x307))+(((-1.0)*x415))+(((0.0520301646)*x354))+(((-0.0260150823)*x355)));
op[54]=x422;
op[55]=0;
op[56]=x423;
op[57]=((((-9.816063552e-5)*x85))+x424+(((-9.816063552e-5)*x94)));
op[58]=((((-0.54896)*x80))+(((0.0018499952)*x98))+(((-0.0920551024)*x74))+(((-0.54896)*x76))+(((-0.043993034788848)*x85))+(((-0.043993034788848)*x94))+(((-0.0920551024)*x78))+(((0.0018499952)*x89)));
op[59]=(x424+(((3.1880961792e-5)*x85))+(((3.1880961792e-5)*x94)));
op[60]=x422;
op[61]=0;
op[62]=x423;
op[63]=x427;
op[64]=0;
op[65]=x428;
op[66]=((((0.001430496)*x94))+(((0.001430496)*x85))+x429);
op[67]=((((-0.02696)*x89))+(((8.0)*x76))+(((8.0)*x80))+(((0.6411109704)*x85))+(((-0.02696)*x98))+(((0.6411109704)*x94))+(((1.34152)*x78))+(((1.34152)*x74)));
op[68]=(x429+(((-0.0004646016)*x94))+(((-0.0004646016)*x85)));
op[69]=x427;
op[70]=0;
op[71]=x428;
op[72]=((0.00746)+x434);
op[73]=1.31604;
op[74]=((-0.00746)+x435);
op[75]=((((0.001430496)*x191))+(((-0.001430496)*x185))+(((0.001430496)*x197))+x436+(((-0.001430496)*x179)));
op[76]=((((-1.34152)*x170))+(((0.6411109704)*x197))+(((8.0)*x173))+(((8.0)*x175))+(((-0.6411109704)*x179))+(((-8.0)*x169))+(((-0.02696)*x199))+(((1.34152)*x172))+(((0.6411109704)*x191))+(((0.02696)*x181))+(((1.34152)*x174))+(((0.02696)*x187))+(((-0.02696)*x193))+(((-0.6411109704)*x185))+(((-8.0)*x168))+(((-1.34152)*x171)));
op[77]=((((-0.0004646016)*x197))+(((0.0004646016)*x185))+x436+(((0.0004646016)*x179))+(((-0.0004646016)*x191)));
op[78]=((0.00602)+x434);
op[79]=-1.31604;
op[80]=((-0.00602)+x435);
op[81]=x441;
op[82]=0;
op[83]=x442;
op[84]=((((0.001430496)*x264))+(((0.001430496)*x252))+x443+(((0.001430496)*x246))+(((0.001430496)*x258)));
op[85]=((((0.6411109704)*x264))+(((1.34152)*x235))+(((8.0)*x242))+(((-0.02696)*x248))+(((8.0)*x238))+(((1.34152)*x239))+(((8.0)*x240))+(((1.34152)*x241))+(((0.6411109704)*x246))+(((0.6411109704)*x252))+(((8.0)*x236))+(((-0.02696)*x260))+(((0.6411109704)*x258))+(((-0.02696)*x254))+(((-0.02696)*x266))+(((1.34152)*x237)));
op[86]=((((-0.0004646016)*x258))+(((-0.0004646016)*x246))+x443+(((-0.0004646016)*x264))+(((-0.0004646016)*x252)));
op[87]=x441;
op[88]=0;
op[89]=x442;
op[90]=x446;
op[91]=0;
op[92]=x447;
op[93]=((((-4.908031776e-5)*x312))+x448+(((-4.908031776e-5)*x306)));
op[94]=((((-0.0460275512)*x300))+(((0.0009249976)*x308))+(((-0.021996517394424)*x306))+(((0.0009249976)*x314))+(((-0.0460275512)*x297))+(((-0.021996517394424)*x312))+(((-0.27448)*x298))+(((-0.27448)*x301)));
op[95]=((((1.5940480896e-5)*x312))+x448+(((1.5940480896e-5)*x306)));
op[96]=x446;
op[97]=0;
op[98]=x447;
op[99]=((-0.4933939542)+x455);
op[100]=0.0098176584;
op[101]=((0.052020459)+x456);
op[102]=((((-0.002860992)*x354))+(((-1.6839457023456e-6)*x312))+(((-0.002860992)*x366))+(((0.001430496)*x355))+(((-1.6839457023456e-6)*x306))+(((0.001430496)*x367))+x457);
op[103]=((((8.0)*x399))+(((0.6411109704)*x355))+(((-0.001579205281672)*x300))+(((-0.0094174088)*x301))+(((3.1736667656e-5)*x308))+(((0.05392)*x370))+(((0.05392)*x358))+(((3.1736667656e-5)*x314))+(((1.34152)*x342))+(((-0.02696)*x360))+(((8.0)*x398))+(((0.6411109704)*x367))+(((-1.2822219408)*x354))+(((-0.000754700511802687)*x312))+(((-0.0094174088)*x298))+(((-2.68304)*x337))+(((-16.0)*x343))+(((-16.0)*x339))+(((-1.2822219408)*x366))+(((-0.001579205281672)*x297))+(((1.34152)*x338))+(((-0.000754700511802687)*x306))+(((-2.68304)*x341))+(((-0.02696)*x372)));
op[104]=((((0.0009292032)*x354))+(((5.4691789954176e-7)*x306))+(((-0.0004646016)*x355))+x457+(((0.0009292032)*x366))+(((5.4691789954176e-7)*x312))+(((-0.0004646016)*x367)));
op[105]=((-0.4934036598)+x455);
op[106]=-0.0079225608;
op[107]=((0.0520301646)+x456);
op[108]=((0.2455476268)+x120+x122+x99+x95+x90+x93+x97+x86+x84+x88+x458+x459+x73);
op[109]=((-0.0025019348)+x103+x106+x101+x108+(((-1.0)*x114))+(((-1.0)*x107))+x115+x118+x113+x111);
op[110]=((0.0248608792)+x100+x125+x127+x91+x93+(((-1.0)*x124))+x81+x84+x73+x77+(((-1.0)*x126))+x460+x461);
op[111]=0;
op[112]=((((-1.0)*x131))+(((-1.0)*x129)));
op[113]=0;
op[114]=((0.245542774)+x138+x139+x133+x132+x137+x135+x134+x120+x122+x140+x458+x459+x73);
op[115]=(x102+x104+x142+x143+x144);
op[116]=((0.0248560264)+x132+x137+x136+x148+x141+x146+x81+(((-1.0)*x145))+(((-1.0)*x147))+x73+x77+x460+x461);
IkReal x462=(gconst0_1*npx);
IkReal x463=((-0.00373)*x462);
IkReal x464=(gconst1_1*npy);
IkReal x465=((-0.00373)*x464);
IkReal x466=(gconst0_4*npx);
IkReal x467=(gconst1_4*npy);
IkReal x468=(gconst0_0*npx);
IkReal x469=((0.4967)*x468);
IkReal x470=(gconst0_2*npx);
IkReal x471=(gconst0_3*npx);
IkReal x472=(gconst0_7*npx);
IkReal x473=((0.00373)*x472);
IkReal x474=(gconst1_0*npy);
IkReal x475=((0.4967)*x474);
IkReal x476=(gconst1_2*npy);
IkReal x477=(gconst1_3*npy);
IkReal x478=(gconst1_7*npy);
IkReal x479=((0.00373)*x478);
IkReal x480=((0.33538)*x462);
IkReal x481=(gconst0_5*npx);
IkReal x482=((2.0)*x481);
IkReal x483=((0.65802)*x472);
IkReal x484=((0.33538)*x464);
IkReal x485=(gconst1_5*npy);
IkReal x486=((2.0)*x485);
IkReal x487=((0.65802)*x478);
IkReal x488=((-0.12701)+(((-1.0)*x466))+(((-1.0)*x467))+(((0.16132)*x468))+(((0.16132)*x474)));
IkReal x489=(gconst0_6*npx);
IkReal x490=(gconst1_6*npy);
IkReal x491=((-0.00301)*x462);
IkReal x492=((-0.00301)*x464);
IkReal x493=((0.00301)*x472);
IkReal x494=((0.00301)*x478);
IkReal x495=(gconst3_1*rxp0_0);
IkReal x496=((0.00373)*x495);
IkReal x497=(gconst4_1*rxp1_0);
IkReal x498=((0.00373)*x497);
IkReal x499=(gconst6_1*rxp0_1);
IkReal x500=((-0.00373)*x499);
IkReal x501=(gconst7_1*rxp1_1);
IkReal x502=((-0.00373)*x501);
IkReal x503=(gconst6_4*rxp0_1);
IkReal x504=(gconst7_4*rxp1_1);
IkReal x505=(gconst3_0*rxp0_0);
IkReal x506=((-0.4967)*x505);
IkReal x507=(gconst3_2*rxp0_0);
IkReal x508=(gconst3_3*rxp0_0);
IkReal x509=(gconst3_4*rxp0_0);
IkReal x510=((-1.0)*x509);
IkReal x511=(gconst3_7*rxp0_0);
IkReal x512=((0.00373)*x511);
IkReal x513=(gconst4_0*rxp1_0);
IkReal x514=((-0.4967)*x513);
IkReal x515=(gconst4_2*rxp1_0);
IkReal x516=(gconst4_3*rxp1_0);
IkReal x517=(gconst4_4*rxp1_0);
IkReal x518=((-1.0)*x517);
IkReal x519=(gconst4_7*rxp1_0);
IkReal x520=((0.00373)*x519);
IkReal x521=(gconst6_0*rxp0_1);
IkReal x522=((0.4967)*x521);
IkReal x523=(gconst6_2*rxp0_1);
IkReal x524=(gconst6_3*rxp0_1);
IkReal x525=(gconst6_7*rxp0_1);
IkReal x526=((0.00373)*x525);
IkReal x527=(gconst7_0*rxp1_1);
IkReal x528=((0.4967)*x527);
IkReal x529=(gconst7_2*rxp1_1);
IkReal x530=(gconst7_3*rxp1_1);
IkReal x531=(gconst7_7*rxp1_1);
IkReal x532=((0.00373)*x531);
IkReal x533=((0.33538)*x495);
IkReal x534=((2.0)*gconst3_5);
IkReal x535=(rxp0_0*x534);
IkReal x536=((0.65802)*x511);
IkReal x537=((0.33538)*x497);
IkReal x538=((2.0)*gconst4_5);
IkReal x539=(rxp1_0*x538);
IkReal x540=((0.65802)*x519);
IkReal x541=((0.33538)*x499);
IkReal x542=((2.0)*gconst6_5);
IkReal x543=(rxp0_1*x542);
IkReal x544=((0.65802)*x525);
IkReal x545=((0.33538)*x501);
IkReal x546=((2.0)*gconst7_5);
IkReal x547=(rxp1_1*x546);
IkReal x548=((0.65802)*x531);
IkReal x549=((((-0.16132)*x513))+x509+(((-0.16132)*x505))+(((0.16132)*x521))+(((0.16132)*x527))+x517+(((-1.0)*x503))+(((-1.0)*x504)));
IkReal x550=((4.0)*gconst3_6);
IkReal x551=((4.0)*gconst4_6);
IkReal x552=((4.0)*gconst6_6);
IkReal x553=((4.0)*gconst7_6);
IkReal x554=((0.00301)*x495);
IkReal x555=((0.00301)*x497);
IkReal x556=((-0.00301)*x499);
IkReal x557=((-0.00301)*x501);
IkReal x558=((0.00301)*x511);
IkReal x559=((0.00301)*x519);
IkReal x560=((0.00301)*x525);
IkReal x561=((0.00301)*x531);
IkReal x562=(gconst3_1*rxp0_1);
IkReal x563=((-0.00373)*x562);
IkReal x564=(gconst4_1*rxp1_1);
IkReal x565=((-0.00373)*x564);
IkReal x566=(gconst6_1*rxp0_0);
IkReal x567=((-0.00373)*x566);
IkReal x568=(gconst7_1*rxp1_0);
IkReal x569=((-0.00373)*x568);
IkReal x570=(gconst3_4*rxp0_1);
IkReal x571=(gconst4_4*rxp1_1);
IkReal x572=(gconst6_4*rxp0_0);
IkReal x573=(gconst7_4*rxp1_0);
IkReal x574=(gconst3_0*rxp0_1);
IkReal x575=((0.4967)*x574);
IkReal x576=(gconst3_2*rxp0_1);
IkReal x577=(gconst3_3*rxp0_1);
IkReal x578=(gconst3_7*rxp0_1);
IkReal x579=((0.00373)*x578);
IkReal x580=(gconst4_0*rxp1_1);
IkReal x581=((0.4967)*x580);
IkReal x582=(gconst4_2*rxp1_1);
IkReal x583=(gconst4_3*rxp1_1);
IkReal x584=(gconst4_7*rxp1_1);
IkReal x585=((0.00373)*x584);
IkReal x586=(gconst6_0*rxp0_0);
IkReal x587=((0.4967)*x586);
IkReal x588=(gconst6_2*rxp0_0);
IkReal x589=(gconst6_3*rxp0_0);
IkReal x590=(gconst6_7*rxp0_0);
IkReal x591=((0.00373)*x590);
IkReal x592=(gconst7_0*rxp1_0);
IkReal x593=((0.4967)*x592);
IkReal x594=(gconst7_2*rxp1_0);
IkReal x595=(gconst7_3*rxp1_0);
IkReal x596=(gconst7_7*rxp1_0);
IkReal x597=((0.00373)*x596);
IkReal x598=((0.33538)*x562);
IkReal x599=(rxp0_1*x534);
IkReal x600=((0.65802)*x578);
IkReal x601=((0.33538)*x564);
IkReal x602=(rxp1_1*x538);
IkReal x603=((0.65802)*x584);
IkReal x604=((0.33538)*x566);
IkReal x605=(rxp0_0*x542);
IkReal x606=((0.65802)*x590);
IkReal x607=((0.33538)*x568);
IkReal x608=(rxp1_0*x546);
IkReal x609=((0.65802)*x596);
IkReal x610=((((0.16132)*x592))+(((-1.0)*x573))+(((-1.0)*x572))+(((0.16132)*x574))+(((-1.0)*x571))+(((-1.0)*x570))+(((0.16132)*x586))+(((0.16132)*x580)));
IkReal x611=((-0.00301)*x562);
IkReal x612=((-0.00301)*x564);
IkReal x613=((-0.00301)*x566);
IkReal x614=((-0.00301)*x568);
IkReal x615=((0.00301)*x578);
IkReal x616=((0.00301)*x584);
IkReal x617=((0.00301)*x590);
IkReal x618=((0.00301)*x596);
IkReal x619=(gconst0_1*r20);
IkReal x620=((0.0001279763)*x619);
IkReal x621=(gconst1_1*r21);
IkReal x622=((0.0001279763)*x621);
IkReal x623=((-1.0)*(((1.0)*pz)));
IkReal x624=(gconst0_0*r20);
IkReal x625=((-0.017041777)*x624);
IkReal x626=(gconst0_2*r20);
IkReal x627=(gconst0_3*r20);
IkReal x628=(gconst0_4*r20);
IkReal x629=((0.03431)*x628);
IkReal x630=((-1.0)*x629);
IkReal x631=(gconst0_7*r20);
IkReal x632=((0.0001279763)*x631);
IkReal x633=(gconst1_0*r21);
IkReal x634=((-0.017041777)*x633);
IkReal x635=(gconst1_2*r21);
IkReal x636=(gconst1_3*r21);
IkReal x637=(gconst1_4*r21);
IkReal x638=((0.03431)*x637);
IkReal x639=((-1.0)*x638);
IkReal x640=(gconst1_7*r21);
IkReal x641=((0.0001279763)*x640);
IkReal x642=((0.0115068878)*x619);
IkReal x643=(gconst0_5*r20);
IkReal x644=((0.06862)*x643);
IkReal x645=((0.0225766662)*x631);
IkReal x646=((0.0115068878)*x621);
IkReal x647=(gconst1_5*r21);
IkReal x648=((0.06862)*x647);
IkReal x649=((0.0225766662)*x640);
IkReal x650=(x638+x623+x629+(((-0.0055348892)*x633))+(((-0.0055348892)*x624)));
IkReal x651=(gconst0_6*r20);
IkReal x652=(gconst1_6*r21);
IkReal x653=((0.0001032731)*x619);
IkReal x654=((0.0001032731)*x621);
IkReal x655=((0.0001032731)*x631);
IkReal x656=((0.0001032731)*x640);
IkReal x657=((4.390866853e-6)*x619);
IkReal x658=((4.390866853e-6)*x621);
IkReal x659=(gconst0_1*npx*pz);
IkReal x660=((0.00746)*x659);
IkReal x661=(gconst0_1*pp*r20);
IkReal x662=((-0.00373)*x661);
IkReal x663=(gconst1_1*npy*pz);
IkReal x664=((0.00746)*x663);
IkReal x665=(gconst1_1*pp*r21);
IkReal x666=((-0.00373)*x665);
IkReal x667=((-1.0)*(((0.06862)*pz)));
IkReal x668=((-0.00058470336887)*x624);
IkReal x669=((0.0011771761)*x628);
IkReal x670=((-1.0)*x669);
IkReal x671=((4.390866853e-6)*x631);
IkReal x672=((-0.00058470336887)*x633);
IkReal x673=((0.0011771761)*x637);
IkReal x674=((-1.0)*x673);
IkReal x675=((4.390866853e-6)*x640);
IkReal x676=(pp*x628);
IkReal x677=(pp*x637);
IkReal x678=(gconst0_0*npx*pz);
IkReal x679=((-0.9934)*x678);
IkReal x680=(gconst0_0*pp*r20);
IkReal x681=((0.4967)*x680);
IkReal x682=(gconst0_2*npx*pz);
IkReal x683=(gconst0_2*pp*r20);
IkReal x684=(gconst0_3*npx*pz);
IkReal x685=(gconst0_3*pp*r20);
IkReal x686=((2.0)*pz);
IkReal x687=(x466*x686);
IkReal x688=((-1.0)*x687);
IkReal x689=(gconst0_7*npx*pz);
IkReal x690=((0.00746)*x689);
IkReal x691=(gconst0_7*pp*r20);
IkReal x692=((0.00373)*x691);
IkReal x693=(gconst1_0*npy*pz);
IkReal x694=((-0.9934)*x693);
IkReal x695=(gconst1_0*pp*r21);
IkReal x696=((0.4967)*x695);
IkReal x697=(gconst1_2*npy*pz);
IkReal x698=(gconst1_2*pp*r21);
IkReal x699=(gconst1_3*npy*pz);
IkReal x700=(gconst1_3*pp*r21);
IkReal x701=(x467*x686);
IkReal x702=((-1.0)*x701);
IkReal x703=(gconst1_7*npy*pz);
IkReal x704=((0.00746)*x703);
IkReal x705=(gconst1_7*pp*r21);
IkReal x706=((0.00373)*x705);
IkReal x707=((0.000394801320418)*x619);
IkReal x708=((0.0023543522)*x643);
IkReal x709=((0.000774605417322)*x631);
IkReal x710=((0.000394801320418)*x621);
IkReal x711=((0.0023543522)*x647);
IkReal x712=((0.000774605417322)*x640);
IkReal x713=((0.67076)*x659);
IkReal x714=((0.33538)*x661);
IkReal x715=((4.0)*pz);
IkReal x716=(x481*x715);
IkReal x717=((2.0)*pp);
IkReal x718=(x643*x717);
IkReal x719=((1.31604)*x689);
IkReal x720=((0.65802)*x691);
IkReal x721=((0.67076)*x663);
IkReal x722=((0.33538)*x665);
IkReal x723=(x485*x715);
IkReal x724=(x647*x717);
IkReal x725=((1.31604)*x703);
IkReal x726=((0.65802)*x705);
IkReal x727=((((-0.000189902048452)*x624))+(((-0.000189902048452)*x633))+(((-1.0)*x676))+(((-1.0)*x677))+(((0.16132)*x695))+(((-0.32264)*x693))+x701+(((-0.32264)*x678))+(((0.16132)*x680))+x667+x669+x673+x687);
IkReal x728=((8.0)*pz);
IkReal x729=((4.0)*pp);
IkReal x730=((3.543300061e-6)*x619);
IkReal x731=((3.543300061e-6)*x621);
IkReal x732=((0.00602)*x659);
IkReal x733=((-0.00301)*x661);
IkReal x734=((0.00602)*x663);
IkReal x735=((-0.00301)*x665);
IkReal x736=((3.543300061e-6)*x631);
IkReal x737=((3.543300061e-6)*x640);
IkReal x738=((0.00602)*x689);
IkReal x739=((0.00301)*x691);
IkReal x740=((0.00602)*x703);
IkReal x741=((0.00301)*x705);
op[117]=((0.53101)+x475+(((-1.0)*x479))+(((-0.2466969771)*x470))+(((0.003705382)*x471))+(((-1.0)*x473))+(((0.003705382)*x477))+(((-0.2466969771)*x476))+x466+x467+x465+x463+x469);
op[118]=((-0.00746)+(((-1.0)*x483))+(((0.0049088292)*x476))+(((0.1602274622)*x477))+(((-1.0)*x487))+(((0.1602274622)*x471))+x486+x484+x482+x480+(((0.0049088292)*x470)));
op[119]=(x479+x473+(((-0.0012034472)*x477))+(((0.0260102295)*x470))+(((-0.0012034472)*x471))+x488+(((0.0260102295)*x476))+x465+x463);
op[120]=0;
op[121]=((((4.0)*x490))+(((4.0)*x489)));
op[122]=0;
op[123]=((0.53101)+x475+(((-1.0)*x494))+(((0.002990134)*x471))+(((0.002990134)*x477))+(((-1.0)*x493))+x492+x491+(((-0.2467018299)*x476))+x466+x467+x469+(((-0.2467018299)*x470)));
op[124]=((0.00602)+(((-1.0)*x486))+(((-0.0039612804)*x476))+(((-0.1602371678)*x471))+(((-0.0039612804)*x470))+(((-1.0)*x480))+(((-1.0)*x482))+(((-0.1602371678)*x477))+x487+x483+(((-1.0)*x484)));
op[125]=((((0.0260150823)*x476))+(((-0.0009711464)*x471))+(((-0.0009711464)*x477))+(((0.0260150823)*x470))+x488+x494+x492+x491+x493);
op[126]=((((0.2466969771)*x507))+(((0.2466969771)*x515))+(((-0.003705382)*x516))+(((0.003705382)*x530))+x503+x504+x502+x506+x500+(((-0.2466969771)*x529))+(((-0.2466969771)*x523))+(((-0.003705382)*x508))+(((-1.0)*x526))+(((0.003705382)*x524))+x510+x512+x518+x514+(((-1.0)*x532))+x498+x496+x528+x522+x520);
op[127]=(x536+(((-1.0)*x539))+(((-1.0)*x544))+(((-1.0)*x533))+(((-0.1602274622)*x516))+(((-0.0049088292)*x515))+(((0.1602274622)*x524))+(((0.0049088292)*x529))+(((-1.0)*x535))+(((-0.1602274622)*x508))+(((-1.0)*x537))+(((-0.0049088292)*x507))+(((0.1602274622)*x530))+(((0.0049088292)*x523))+x547+x540+x545+x543+x541+(((-1.0)*x548)));
op[128]=(x532+(((-0.0012034472)*x524))+(((0.0260102295)*x523))+(((0.0012034472)*x508))+x502+x500+(((-0.0260102295)*x515))+(((-1.0)*x520))+(((-1.0)*x512))+(((0.0260102295)*x529))+(((-0.0260102295)*x507))+(((-0.0012034472)*x530))+x498+x496+x549+x526+(((0.0012034472)*x516)));
op[129]=0;
op[130]=((-0.01348)+((rxp0_1*x552))+(((-1.0)*rxp1_0*x551))+((rxp1_1*x553))+(((-1.0)*rxp0_0*x550)));
op[131]=0;
op[132]=((((0.002990134)*x530))+(((-0.2467018299)*x523))+(((0.2467018299)*x507))+(((0.2467018299)*x515))+x503+x504+x506+(((0.002990134)*x524))+(((-1.0)*x560))+(((-0.002990134)*x508))+x556+x557+x555+x554+x558+x559+(((-0.2467018299)*x529))+(((-0.002990134)*x516))+x510+x518+x514+(((-1.0)*x561))+x528+x522);
op[133]=(x539+x537+x535+x533+(((0.0039612804)*x507))+(((-1.0)*x536))+(((0.1602371678)*x508))+(((0.0039612804)*x515))+(((-0.0039612804)*x529))+(((-1.0)*x545))+(((-0.1602371678)*x524))+(((-1.0)*x540))+(((-0.1602371678)*x530))+(((-0.0039612804)*x523))+(((-1.0)*x547))+(((-1.0)*x541))+(((-1.0)*x543))+(((0.1602371678)*x516))+x544+x548);
op[134]=((((-0.0260150823)*x507))+(((0.0260150823)*x523))+(((0.0260150823)*x529))+(((-1.0)*x558))+(((-1.0)*x559))+(((-0.0260150823)*x515))+(((-0.0009711464)*x524))+x556+x557+x555+x554+(((0.0009711464)*x516))+(((-0.0009711464)*x530))+(((0.0009711464)*x508))+x549+x560+x561);
op[135]=((((-1.0)*x585))+(((-0.2466969771)*x588))+x573+x572+x571+x570+x575+(((-0.2466969771)*x576))+(((-0.2466969771)*x594))+(((0.003705382)*x589))+(((0.003705382)*x577))+(((0.003705382)*x595))+(((-1.0)*x579))+(((-1.0)*x597))+(((0.003705382)*x583))+x587+x581+x593+(((-0.2466969771)*x582))+(((-1.0)*x591))+x563+x565+x567+x569);
op[136]=((((0.1602274622)*x595))+(((0.0049088292)*x588))+(((-1.0)*x606))+(((-1.0)*x609))+(((0.1602274622)*x577))+(((-1.0)*x603))+(((0.1602274622)*x589))+(((-1.0)*x600))+(((0.0049088292)*x582))+(((0.0049088292)*x576))+(((0.0049088292)*x594))+(((0.1602274622)*x583))+x599+x598+x608+x607+x602+x601+x604+x605);
op[137]=(x610+x579+(((-0.0012034472)*x589))+(((0.0260102295)*x576))+(((0.0260102295)*x588))+(((-0.0012034472)*x583))+(((0.0260102295)*x582))+(((-0.0012034472)*x577))+x585+(((0.0260102295)*x594))+x591+x597+x563+x565+x567+x569+(((-0.0012034472)*x595)));
op[138]=-0.00072;
op[139]=((-1.31604)+((rxp0_0*x552))+((rxp1_0*x553))+((rxp1_1*x551))+((rxp0_1*x550)));
op[140]=0.00072;
op[141]=(x614+x612+x613+x611+(((0.002990134)*x577))+(((-0.2467018299)*x588))+(((-1.0)*x615))+x573+x572+x571+x570+x575+(((0.002990134)*x589))+(((-1.0)*x617))+(((-0.2467018299)*x594))+(((-1.0)*x616))+(((0.002990134)*x583))+(((-0.2467018299)*x582))+(((-0.2467018299)*x576))+(((-1.0)*x618))+x587+x581+x593+(((0.002990134)*x595)));
op[142]=((((-1.0)*x598))+(((-1.0)*x599))+(((-0.0039612804)*x582))+(((-0.1602371678)*x589))+(((-0.0039612804)*x588))+(((-0.1602371678)*x577))+(((-0.1602371678)*x583))+(((-1.0)*x604))+(((-1.0)*x601))+(((-0.0039612804)*x594))+(((-1.0)*x602))+(((-0.1602371678)*x595))+(((-1.0)*x608))+(((-0.0039612804)*x576))+(((-1.0)*x607))+x603+x609+x600+x606+(((-1.0)*x605)));
op[143]=(x616+x617+x614+x615+x612+x613+x610+x611+x618+(((-0.0009711464)*x577))+(((0.0260150823)*x582))+(((-0.0009711464)*x583))+(((-0.0009711464)*x595))+(((0.0260150823)*x594))+(((0.0260150823)*x576))+(((-0.0009711464)*x589))+(((0.0260150823)*x588)));
op[144]=((((-0.00012713165642)*x636))+x639+x630+x632+x634+x622+x620+x623+x625+(((0.008464173284301)*x635))+(((0.008464173284301)*x626))+(((-0.00012713165642)*x627))+x641);
op[145]=((((-0.005497404228082)*x627))+(((-0.000168421929852)*x626))+(((-1.0)*x644))+(((-1.0)*x646))+(((-0.000168421929852)*x635))+(((-1.0)*x642))+(((-0.005497404228082)*x636))+x649+x645+(((-1.0)*x648)));
op[146]=((((4.1290273432e-5)*x636))+(((-1.0)*x641))+(((-0.000892410974145)*x626))+x622+x620+x650+(((-1.0)*x632))+(((4.1290273432e-5)*x627))+(((-0.000892410974145)*x635)));
op[147]=0.00072;
op[148]=((-0.67076)+(((-0.13724)*x652))+(((-0.13724)*x651)));
op[149]=0.00072;
op[150]=(x639+x630+x634+x623+x625+(((-0.00010259149754)*x627))+x653+x656+x654+x655+(((-0.00010259149754)*x636))+(((0.008464339783869)*x626))+(((0.008464339783869)*x635)));
op[151]=((((-1.0)*x645))+(((0.005497737227218)*x636))+(((0.005497737227218)*x627))+(((0.000135911530524)*x635))+x648+x642+x644+x646+(((0.000135911530524)*x626))+(((-1.0)*x649)));
op[152]=((((-0.000892577473713)*x626))+(((3.3320032984e-5)*x636))+(((3.3320032984e-5)*x627))+(((-0.000892577473713)*x635))+(((-1.0)*x656))+x653+x650+x654+(((-1.0)*x655)));
op[153]=((((0.003705382)*x700))+(((-1.0)*x692))+(((0.4933939542)*x697))+(((0.000290405785384367)*x626))+(((0.000290405785384367)*x635))+(((0.4933939542)*x682))+(((-0.2466969771)*x683))+(((0.003705382)*x685))+(((-4.3618871317702e-6)*x636))+x704+x702+(((-0.007410764)*x699))+(((-4.3618871317702e-6)*x627))+x658+x657+x694+x690+x696+(((-1.0)*x706))+x667+x666+x664+x662+x660+x668+(((-0.2466969771)*x698))+x676+x677+x670+x671+x674+x675+x679+x672+x681+x688+(((-0.007410764)*x684)));
op[154]=((((-1.0)*x721))+(((-0.0098176584)*x697))+(((-5.77855641322212e-6)*x635))+(((-1.0)*x723))+(((-1.0)*x726))+(((-1.0)*x711))+(((-0.0098176584)*x682))+(((-0.000188615939065493)*x627))+(((0.0049088292)*x698))+(((-0.3204549244)*x699))+(((0.1602274622)*x685))+(((0.1602274622)*x700))+(((-1.0)*x708))+x709+(((-1.0)*x713))+x714+x712+x719+x718+(((-1.0)*x710))+(((-0.000188615939065493)*x636))+(((-1.0)*x716))+(((-1.0)*x707))+(((0.0049088292)*x683))+x725+x724+x722+(((-5.77855641322212e-6)*x626))+(((-0.3204549244)*x684))+(((-1.0)*x720)));
op[155]=((((-0.0012034472)*x700))+(((-1.0)*x704))+(((-1.0)*x675))+(((-0.052020459)*x697))+(((-1.0)*x690))+(((0.0260102295)*x698))+(((0.0024068944)*x684))+(((-3.06186205229149e-5)*x626))+(((-0.0012034472)*x685))+x706+(((-0.052020459)*x682))+x658+x657+(((1.41666928145192e-6)*x627))+(((0.0024068944)*x699))+x692+(((1.41666928145192e-6)*x636))+x666+x664+x662+x660+(((0.0260102295)*x683))+(((-1.0)*x671))+(((-3.06186205229149e-5)*x635))+x727);
op[156]=-0.000715248;
op[157]=((-0.3205554852)+((x651*x729))+(((-0.0047087044)*x651))+(((-1.0)*x489*x728))+((x652*x729))+(((-1.0)*x490*x728))+(((-0.0047087044)*x652)));
op[158]=0.0002323008;
op[159]=((((-0.2467018299)*x683))+(((-1.0)*x739))+(((0.4934036598)*x697))+(((-3.5199142805974e-6)*x627))+(((0.002990134)*x685))+(((-1.0)*x741))+(((-0.2467018299)*x698))+(((0.000290411497984545)*x626))+x702+x738+x730+x735+x737+x736+x732+x731+x734+x733+x694+x696+(((-0.005980268)*x699))+(((0.000290411497984545)*x635))+(((0.4934036598)*x682))+x740+x667+x668+(((-0.005980268)*x684))+x676+x677+x670+x674+x679+x672+(((-3.5199142805974e-6)*x636))+x681+x688+(((0.002990134)*x700)));
op[160]=((((-0.0039612804)*x698))+(((0.00018862736426585)*x627))+(((-1.0)*x709))+(((-1.0)*x724))+(((4.66312461227844e-6)*x635))+(((4.66312461227844e-6)*x626))+(((-1.0)*x714))+(((-1.0)*x718))+(((-1.0)*x725))+x707+x708+(((0.0079225608)*x682))+x716+x710+x713+x711+(((0.00018862736426585)*x636))+(((0.3204743356)*x684))+(((-0.0039612804)*x683))+(((-1.0)*x722))+(((-1.0)*x712))+(((-0.1602371678)*x700))+(((-1.0)*x719))+(((-0.1602371678)*x685))+(((0.3204743356)*x699))+(((0.0079225608)*x697))+x726+x720+x723+x721);
op[161]=((((-3.0624333123093e-5)*x626))+(((-1.0)*x737))+(((0.0019422928)*x699))+(((-0.0520301646)*x682))+(((-0.0009711464)*x685))+(((-1.0)*x738))+(((0.0019422928)*x684))+(((-0.0520301646)*x697))+(((-1.0)*x740))+x730+x739+x735+x732+x731+x734+x733+(((-3.0624333123093e-5)*x635))+(((-0.0009711464)*x700))+(((1.14321033168104e-6)*x627))+(((0.0260150823)*x683))+x741+(((0.0260150823)*x698))+x727+(((1.14321033168104e-6)*x636))+(((-1.0)*x736)));
solvedialyticpoly12qep(op,zeror,numroots);
IkReal j5array[16], cj5array[16], sj5array[16], j6array[16], cj6array[16], sj6array[16], j7array[16], cj7array[16], sj7array[16];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ij5 += 3)
{
IkReal htj5 = zeror[ij5+0], htj6 = zeror[ij5+1], htj7 = zeror[ij5+2];
if(isnan(htj5)||isnan(htj6)||isnan(htj7)){
continue;
}
j5array[numsolutions]=((2.0)*(atan(htj5)));
j6array[numsolutions]=((2.0)*(atan(htj6)));
j7array[numsolutions]=((2.0)*(atan(htj7)));
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x742=htj5*htj5;
CheckValue<IkReal> x743=IKPowWithIntegerCheck(((1.0)+x742),-1);
if(!x743.valid){
continue;
}
cj5array[numsolutions]=((x743.value)*(((1.0)+(((-1.0)*x742)))));
CheckValue<IkReal> x744=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x744.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x744.value));
}
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x745=htj6*htj6;
CheckValue<IkReal> x746=IKPowWithIntegerCheck(((1.0)+x745),-1);
if(!x746.valid){
continue;
}
cj6array[numsolutions]=((x746.value)*(((1.0)+(((-1.0)*x745)))));
CheckValue<IkReal> x747=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x747.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x747.value));
}
if(isinf(htj7)){
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
}
else{
IkReal x748=htj7*htj7;
CheckValue<IkReal> x749=IKPowWithIntegerCheck(((1.0)+x748),-1);
if(!x749.valid){
continue;
}
cj7array[numsolutions]=((x749.value)*(((1.0)+(((-1.0)*x748)))));
CheckValue<IkReal> x750=IKPowWithIntegerCheck(((1.0)+(htj7*htj7)),-1);
if(!x750.valid){
continue;
}
sj7array[numsolutions]=((2.0)*htj7*(x750.value));
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j5valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj5 = 16;
_nj6 = 1;
_nj7 = 1;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
_ij7[0] = 0; _ij7[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( !j5valid[iij5] ) { continue; }
if( IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij5]-cj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij5]-sj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj7array[ij5]-cj7array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij5]-sj7array[iij5]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j5valid[iij5]=false; _ij5[1] = iij5; _ij6[1] = 0; _ij7[1] = 0;  break; 
}
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

    j6 = j6array[ij5]; cj6 = cj6array[ij5]; sj6 = sj6array[ij5];

    j7 = j7array[ij5]; cj7 = cj7array[ij5]; sj7 = sj7array[ij5];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}

static inline bool checkconsistency12(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 11; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-6*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[0]-Breal[1]) < tol && IKabs(Breal[0]*Breal[2]-Breal[3]) < tol && IKabs(Breal[1]*Breal[2]-Breal[4]) < tol && IKabs(Breal[2]*Breal[2]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol && IKabs(Breal[1]*Breal[5]-Breal[7]) < tol && IKabs(Breal[2]*Breal[5]-Breal[8]) < tol && IKabs(Breal[0]*Breal[8]-Breal[9]) < tol && IKabs(Breal[1]*Breal[8]-Breal[10]) < tol;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j9eval[2];
j9eval[0]=((IKabs(r20))+(IKabs(r21)));
j9eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=((1.0)+(((-1.0)*(1.0)*(r22*r22))));
j9eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x751=(cj7*sj5);
IkReal x752=(cj5*sj6);
IkReal x753=(sj7*x752);
evalcond[0]=((r20*r20)+(r21*r21));
evalcond[1]=(x753+x751);
evalcond[2]=((((0.16769)*x751))+(((-1.0)*(1.0)*pz))+(((0.16769)*x753))+(((-0.00036)*x752))+(((0.32901)*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
IkReal x754=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x754);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x754);
j8eval[0]=r22;
j8eval[1]=IKsign(r22);
j8eval[2]=((IKabs((cj5*cj6)))+(IKabs(((((-1.0)*(1.0)*cj5*cj7*sj6))+((sj5*sj7))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=1.0;
evalcond[2]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
j8array[0]=-1.5707963267949;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j4eval[2];
IkReal x755=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x755);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x755);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x756=cj8*cj8;
IkReal x757=(r11*x756);
IkReal x758=sj8*sj8;
IkReal x759=(r11*x758);
IkReal x760=r02*r02;
IkReal x761=r11*r11;
IkReal x762=(x761*(cj8*cj8*cj8*cj8));
IkReal x763=r12*r12;
IkReal x764=(x761*(sj8*sj8*sj8*sj8));
IkReal x765=((2.0)*x756*x758*x761);
j4eval[0]=((IKabs((((r02*x759))+((r02*x757)))))+(IKabs((((r12*x757))+((r12*x759))))));
j4eval[1]=(((x760*x762))+((x763*x764))+((x763*x765))+((x762*x763))+((x760*x764))+((x760*x765)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x766=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x766);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x766);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x767=cj8*cj8;
IkReal x768=(r01*x767);
IkReal x769=sj8*sj8;
IkReal x770=(r01*x769);
IkReal x771=r02*r02;
IkReal x772=r01*r01;
IkReal x773=(x772*(cj8*cj8*cj8*cj8));
IkReal x774=r12*r12;
IkReal x775=(x772*(sj8*sj8*sj8*sj8));
IkReal x776=((2.0)*x767*x769*x772);
j4eval[0]=((IKabs((((r02*x770))+((r02*x768)))))+(IKabs((((r12*x768))+((r12*x770))))));
j4eval[1]=(((x773*x774))+((x771*x775))+((x771*x773))+((x774*x775))+((x774*x776))+((x771*x776)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x777=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x777);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x777);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x778=cj8*cj8;
IkReal x779=(r10*x778);
IkReal x780=sj8*sj8;
IkReal x781=(r10*x780);
IkReal x782=r02*r02;
IkReal x783=r10*r10;
IkReal x784=(x783*(cj8*cj8*cj8*cj8));
IkReal x785=r12*r12;
IkReal x786=(x783*(sj8*sj8*sj8*sj8));
IkReal x787=((2.0)*x778*x780*x783);
j4eval[0]=((IKabs((((r12*x781))+((r12*x779)))))+(IKabs((((r02*x781))+((r02*x779))))));
j4eval[1]=(((x782*x784))+((x782*x787))+((x782*x786))+((x785*x786))+((x785*x787))+((x784*x785)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x788=((1.0)*r10*(cj8*cj8));
IkReal x789=((1.0)*r10*(sj8*sj8));
IkReal x790=((((-1.0)*r02*x788))+(((-1.0)*r02*x789)));
IkReal x791=((((-1.0)*r12*x789))+(((-1.0)*r12*x788)));
CheckValue<IkReal> x794 = IKatan2WithCheck(IkReal(x790),x791,IKFAST_ATAN2_MAGTHRESH);
if(!x794.valid){
continue;
}
IkReal x792=((-1.0)*(x794.value));
if((((x790*x790)+(x791*x791))) < -0.00001)
continue;
CheckValue<IkReal> x795=IKPowWithIntegerCheck(IKabs(IKsqrt(((x790*x790)+(x791*x791)))),-1);
if(!x795.valid){
continue;
}
if( (((x795.value)*((((cj8*r10*sj6))+((cj6*r10*sj8)))))) < -1-IKFAST_SINCOS_THRESH || (((x795.value)*((((cj8*r10*sj6))+((cj6*r10*sj8)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x793=IKasin(((x795.value)*((((cj8*r10*sj6))+((cj6*r10*sj8))))));
j4array[0]=((((-1.0)*x793))+x792);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x793+x792);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x796=((1.0)*cj6*sj8);
IkReal x797=((1.0)*cj8*sj6);
IkReal x798=IKcos(j4);
IkReal x799=cj8*cj8;
IkReal x800=(r11*x799);
IkReal x801=sj8*sj8;
IkReal x802=(r11*x801);
IkReal x803=IKsin(j4);
IkReal x804=(r01*x799);
IkReal x805=(r01*x801);
IkReal x806=((1.0)*r00*x799);
IkReal x807=((1.0)*r00*x801);
evalcond[0]=(((x798*((((r02*x800))+((r02*x802))))))+((x803*((((r12*x802))+((r12*x800))))))+(((-1.0)*r11*x796))+(((-1.0)*r11*x797)));
evalcond[1]=((((-1.0)*r01*x796))+((x803*((((r12*x804))+((r12*x805))))))+(((-1.0)*r01*x797))+((x798*((((r02*x805))+((r02*x804)))))));
evalcond[2]=(((r00*((cj8*sj6))))+((r00*((cj6*sj8))))+((x798*(((((-1.0)*r02*x806))+(((-1.0)*r02*x807))))))+((x803*(((((-1.0)*r12*x807))+(((-1.0)*r12*x806)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x808=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x808);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x808);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x809=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x809);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x809);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x810=((1.0)*sj8);
IkReal x811=r02*r02;
IkReal x812=cj4*cj4;
IkReal x813=((((-1.0)*(2.0)*cj4*r02*r12*sj4*sj8))+((sj8*x812*(r12*r12)))+((sj8*x811))+(((-1.0)*x810))+(((-1.0)*x810*x811*x812)));
j9eval[0]=x813;
j9eval[1]=IKsign(x813);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x814=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x814);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x814);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x815=((1.0)*cj8);
IkReal x816=r02*r02;
IkReal x817=cj4*cj4;
IkReal x818=((((-1.0)*(2.0)*cj4*cj8*r02*r12*sj4))+(((-1.0)*x815*x816*x817))+(((-1.0)*x815))+((cj8*x816))+((cj8*x817*(r12*r12))));
j9eval[0]=x818;
j9eval[1]=IKsign(x818);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x819=((1.0)*cj8);
IkReal x820=cj4*cj4;
IkReal x821=(cj4*sj6);
IkReal x822=((1.0)*r01);
IkReal x823=(r02*sj8);
IkReal x824=(sj4*sj6);
IkReal x825=(cj4*r12*sj4*sj8);
IkReal x826=(cj4*r02*sj4*sj8);
IkReal x827=(r12*sj8*x820);
IkReal x828=(r00*x823);
IkReal x829=((1.0)*r10);
CheckValue<IkReal> x830=IKPowWithIntegerCheck(IKsign(((((r02*r02)*(((((-1.0)*x819*x820))+cj8))))+(((-1.0)*x819))+((cj8*x820*(r12*r12)))+(((-2.0)*cj4*cj8*r02*r12*sj4)))),-1);
if(!x830.valid){
continue;
}
CheckValue<IkReal> x831 = IKatan2WithCheck(IkReal(((((-1.0)*x822*x824))+(((-1.0)*r11*x827))+((r01*x825))+(((-1.0)*x822*x823))+((r11*x821))+((r11*x826))+((r01*x820*x823)))),(((r00*x824))+((r10*x827))+(((-1.0)*x821*x829))+(((-1.0)*x826*x829))+(((-1.0)*r00*x825))+x828+(((-1.0)*x820*x828))),IKFAST_ATAN2_MAGTHRESH);
if(!x831.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x830.value)))+(x831.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x832=IKsin(j9);
IkReal x833=(r00*x832);
IkReal x834=(sj4*x833);
IkReal x835=IKcos(j9);
IkReal x836=(r01*x835);
IkReal x837=(sj4*x836);
IkReal x838=((1.0)*cj4);
IkReal x839=(r10*x832);
IkReal x840=(r11*x835);
IkReal x841=((1.0)*sj4);
IkReal x842=((0.03431)*cj4);
IkReal x843=((0.03431)*sj4);
IkReal x844=(cj4*cj8);
IkReal x845=((1.0)*cj8*sj4);
IkReal x846=(cj4*sj8*x832);
IkReal x847=(sj4*sj8);
IkReal x848=(r00*x835);
IkReal x849=((1.0)*cj4*sj8);
IkReal x850=(r10*x835);
IkReal x851=(r01*x832);
IkReal x852=((1.0)*sj4*sj8);
IkReal x853=(r02*sj8);
IkReal x854=(r12*sj8);
IkReal x855=(cj4*cj8*x832);
IkReal x856=(cj8*sj4);
IkReal x857=((1.0)*cj4*cj8);
IkReal x858=(r11*x832);
evalcond[0]=(x837+x834+(((-1.0)*x838*x839))+(((-1.0)*x838*x840)));
evalcond[1]=((((-1.0)*x840*x841))+(((-1.0)*x836*x838))+(((-1.0)*x833*x838))+(((-1.0)*x839*x841)));
evalcond[2]=(((px*sj4))+((x839*x842))+(((-0.03431)*x837))+(((-1.0)*py*x838))+((x840*x842))+(((0.00036)*sj6))+(((-0.03431)*x834)));
evalcond[3]=((0.00337)+((x840*x843))+(((0.00036)*cj6))+((x836*x842))+((x833*x842))+((x839*x843))+(((-1.0)*px*x838))+(((-1.0)*py*x841)));
evalcond[4]=((((-1.0)*r02*x845))+((x847*x848))+((r12*x844))+(((-1.0)*x851*x852))+((r11*x846))+cj6+(((-1.0)*x849*x850)));
evalcond[5]=(((sj4*x853))+(((-1.0)*x838*x854))+(((-1.0)*x845*x851))+sj6+((x848*x856))+(((-1.0)*x850*x857))+((r11*x855)));
evalcond[6]=((((-1.0)*x848*x849))+((x847*x858))+((r12*x856))+(((-1.0)*x850*x852))+((r01*x846))+((r02*x844))+(((-1.0)*(1.0)*sj6)));
evalcond[7]=((((-1.0)*x838*x853))+((r01*x855))+((x856*x858))+(((-1.0)*x841*x854))+cj6+(((-1.0)*x845*x850))+(((-1.0)*x848*x857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x859=((1.0)*sj8);
IkReal x860=cj4*cj4;
IkReal x861=(cj4*cj6);
IkReal x862=(r01*((cj8*r02)));
IkReal x863=((1.0)*r01);
IkReal x864=(cj6*sj4);
IkReal x865=(cj8*r12*x860);
IkReal x866=(cj4*cj8*r12*sj4);
IkReal x867=(cj4*cj8*r02*sj4);
IkReal x868=((1.0)*r10);
IkReal x869=(cj8*r00*r02);
CheckValue<IkReal> x870 = IKatan2WithCheck(IkReal(((((-1.0)*x860*x862))+(((-1.0)*x863*x864))+(((-1.0)*r11*x867))+x862+(((-1.0)*x863*x866))+((r11*x865))+((r11*x861)))),(((r00*x866))+(((-1.0)*x869))+((r10*x867))+((r00*x864))+(((-1.0)*x861*x868))+((x860*x869))+(((-1.0)*x865*x868))),IKFAST_ATAN2_MAGTHRESH);
if(!x870.valid){
continue;
}
CheckValue<IkReal> x871=IKPowWithIntegerCheck(IKsign((((sj8*x860*(r12*r12)))+(((-2.0)*cj4*r02*r12*sj4*sj8))+(((-1.0)*x859))+(((r02*r02)*(((((-1.0)*x859*x860))+sj8)))))),-1);
if(!x871.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x870.value)+(((1.5707963267949)*(x871.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x872=IKsin(j9);
IkReal x873=(r00*x872);
IkReal x874=(sj4*x873);
IkReal x875=IKcos(j9);
IkReal x876=(r01*x875);
IkReal x877=(sj4*x876);
IkReal x878=((1.0)*cj4);
IkReal x879=(r10*x872);
IkReal x880=(r11*x875);
IkReal x881=((1.0)*sj4);
IkReal x882=((0.03431)*cj4);
IkReal x883=((0.03431)*sj4);
IkReal x884=(cj4*cj8);
IkReal x885=((1.0)*cj8*sj4);
IkReal x886=(cj4*sj8*x872);
IkReal x887=(sj4*sj8);
IkReal x888=(r00*x875);
IkReal x889=((1.0)*cj4*sj8);
IkReal x890=(r10*x875);
IkReal x891=(r01*x872);
IkReal x892=((1.0)*sj4*sj8);
IkReal x893=(r02*sj8);
IkReal x894=(r12*sj8);
IkReal x895=(cj4*cj8*x872);
IkReal x896=(cj8*sj4);
IkReal x897=((1.0)*cj4*cj8);
IkReal x898=(r11*x872);
evalcond[0]=((((-1.0)*x878*x879))+(((-1.0)*x878*x880))+x877+x874);
evalcond[1]=((((-1.0)*x873*x878))+(((-1.0)*x876*x878))+(((-1.0)*x879*x881))+(((-1.0)*x880*x881)));
evalcond[2]=(((px*sj4))+((x880*x882))+(((-0.03431)*x874))+(((-0.03431)*x877))+(((-1.0)*py*x878))+((x879*x882))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+(((0.00036)*cj6))+((x879*x883))+((x876*x882))+(((-1.0)*px*x878))+((x880*x883))+(((-1.0)*py*x881))+((x873*x882)));
evalcond[4]=((((-1.0)*r02*x885))+(((-1.0)*x891*x892))+((x887*x888))+((r12*x884))+(((-1.0)*x889*x890))+((r11*x886))+cj6);
evalcond[5]=((((-1.0)*x890*x897))+(((-1.0)*x885*x891))+sj6+((x888*x896))+(((-1.0)*x878*x894))+((sj4*x893))+((r11*x895)));
evalcond[6]=((((-1.0)*x888*x889))+((r02*x884))+((r12*x896))+(((-1.0)*x890*x892))+((x887*x898))+((r01*x886))+(((-1.0)*(1.0)*sj6)));
evalcond[7]=((((-1.0)*x881*x894))+(((-1.0)*x878*x893))+(((-1.0)*x885*x890))+((x896*x898))+cj6+((r01*x895))+(((-1.0)*x888*x897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x899=(px*r11);
IkReal x900=((0.00036)*cj4*sj6);
IkReal x901=((0.00036)*sj4*sj6);
IkReal x902=(cj4*px*sj4);
IkReal x903=(cj4*py*sj4);
IkReal x904=cj4*cj4;
IkReal x905=(py*x904);
IkReal x906=(px*r10);
CheckValue<IkReal> x907=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x907.valid){
continue;
}
CheckValue<IkReal> x908 = IKatan2WithCheck(IkReal(((((-1.0)*x899*x904))+((r01*x900))+((r11*x901))+(((-1.0)*r01*x905))+x899+(((-1.0)*r11*x903))+((r01*x902)))),(((x904*x906))+(((-1.0)*r00*x900))+((r00*x905))+(((-1.0)*r10*x901))+((r10*x903))+(((-1.0)*x906))+(((-1.0)*r00*x902))),IKFAST_ATAN2_MAGTHRESH);
if(!x908.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x907.value)))+(x908.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x909=IKsin(j9);
IkReal x910=(r00*x909);
IkReal x911=(sj4*x910);
IkReal x912=IKcos(j9);
IkReal x913=(r01*x912);
IkReal x914=(sj4*x913);
IkReal x915=((1.0)*cj4);
IkReal x916=(r10*x909);
IkReal x917=(r11*x912);
IkReal x918=((1.0)*sj4);
IkReal x919=((0.03431)*cj4);
IkReal x920=((0.03431)*sj4);
IkReal x921=(cj4*cj8);
IkReal x922=((1.0)*cj8*sj4);
IkReal x923=(cj4*sj8*x909);
IkReal x924=(sj4*sj8);
IkReal x925=(r00*x912);
IkReal x926=((1.0)*cj4*sj8);
IkReal x927=(r10*x912);
IkReal x928=(r01*x909);
IkReal x929=((1.0)*sj4*sj8);
IkReal x930=(r02*sj8);
IkReal x931=(r12*sj8);
IkReal x932=(cj4*cj8*x909);
IkReal x933=(cj8*sj4);
IkReal x934=((1.0)*cj4*cj8);
IkReal x935=(r11*x909);
evalcond[0]=((((-1.0)*x915*x916))+(((-1.0)*x915*x917))+x911+x914);
evalcond[1]=((((-1.0)*x913*x915))+(((-1.0)*x917*x918))+(((-1.0)*x910*x915))+(((-1.0)*x916*x918)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x914))+(((-0.03431)*x911))+((x917*x919))+(((-1.0)*py*x915))+((x916*x919))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+((x910*x919))+((x917*x920))+(((0.00036)*cj6))+((x916*x920))+((x913*x919))+(((-1.0)*px*x915))+(((-1.0)*py*x918)));
evalcond[4]=(((x924*x925))+((r11*x923))+(((-1.0)*r02*x922))+(((-1.0)*x926*x927))+((r12*x921))+cj6+(((-1.0)*x928*x929)));
evalcond[5]=(((x925*x933))+((sj4*x930))+((r11*x932))+sj6+(((-1.0)*x922*x928))+(((-1.0)*x915*x931))+(((-1.0)*x927*x934)));
evalcond[6]=(((r01*x923))+(((-1.0)*x925*x926))+((r12*x933))+((r02*x921))+(((-1.0)*(1.0)*sj6))+((x924*x935))+(((-1.0)*x927*x929)));
evalcond[7]=((((-1.0)*x922*x927))+((r01*x932))+(((-1.0)*x915*x930))+cj6+(((-1.0)*x918*x931))+(((-1.0)*x925*x934))+((x933*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x936=(r01*(cj8*cj8));
IkReal x937=(r01*(sj8*sj8));
IkReal x938=(((r02*x937))+((r02*x936)));
IkReal x939=(((r12*x937))+((r12*x936)));
CheckValue<IkReal> x943 = IKatan2WithCheck(IkReal(x938),x939,IKFAST_ATAN2_MAGTHRESH);
if(!x943.valid){
continue;
}
IkReal x940=((-1.0)*(x943.value));
IkReal x941=((1.0)*r01);
if((((x938*x938)+(x939*x939))) < -0.00001)
continue;
CheckValue<IkReal> x944=IKPowWithIntegerCheck(IKabs(IKsqrt(((x938*x938)+(x939*x939)))),-1);
if(!x944.valid){
continue;
}
if( (((-1.0)*(x944.value)*(((((-1.0)*cj8*sj6*x941))+(((-1.0)*cj6*sj8*x941)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x944.value)*(((((-1.0)*cj8*sj6*x941))+(((-1.0)*cj6*sj8*x941)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x942=IKasin(((-1.0)*(x944.value)*(((((-1.0)*cj8*sj6*x941))+(((-1.0)*cj6*sj8*x941))))));
j4array[0]=(x942+x940);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x942))+x940);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x945=((1.0)*r11);
IkReal x946=(cj6*sj8);
IkReal x947=(cj8*sj6);
IkReal x948=IKcos(j4);
IkReal x949=cj8*cj8;
IkReal x950=(r11*x949);
IkReal x951=sj8*sj8;
IkReal x952=(r11*x951);
IkReal x953=IKsin(j4);
IkReal x954=((1.0)*r10*x949);
IkReal x955=((1.0)*r10*x951);
IkReal x956=((1.0)*r00*x949);
IkReal x957=((1.0)*r00*x951);
evalcond[0]=(((x953*((((r12*x952))+((r12*x950))))))+(((-1.0)*x945*x946))+(((-1.0)*x945*x947))+((x948*((((r02*x950))+((r02*x952)))))));
evalcond[1]=(((r10*x946))+((x948*(((((-1.0)*r02*x954))+(((-1.0)*r02*x955))))))+((r10*x947))+((x953*(((((-1.0)*r12*x955))+(((-1.0)*r12*x954)))))));
evalcond[2]=(((r00*x947))+((x953*(((((-1.0)*r12*x956))+(((-1.0)*r12*x957))))))+((x948*(((((-1.0)*r02*x957))+(((-1.0)*r02*x956))))))+((r00*x946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x958=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x958);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x958);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x959=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x959);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x959);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x960=((1.0)*sj8);
IkReal x961=r02*r02;
IkReal x962=cj4*cj4;
IkReal x963=((((-1.0)*x960*x961*x962))+(((-1.0)*(2.0)*cj4*r02*r12*sj4*sj8))+((sj8*x962*(r12*r12)))+((sj8*x961))+(((-1.0)*x960)));
j9eval[0]=x963;
j9eval[1]=IKsign(x963);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x964=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x964);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x964);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x965=((1.0)*cj8);
IkReal x966=r02*r02;
IkReal x967=cj4*cj4;
IkReal x968=(((cj8*x967*(r12*r12)))+(((-1.0)*(2.0)*cj4*cj8*r02*r12*sj4))+((cj8*x966))+(((-1.0)*x965*x966*x967))+(((-1.0)*x965)));
j9eval[0]=x968;
j9eval[1]=IKsign(x968);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x969=((1.0)*cj8);
IkReal x970=cj4*cj4;
IkReal x971=(cj4*sj6);
IkReal x972=((1.0)*r01);
IkReal x973=(r02*sj8);
IkReal x974=(sj4*sj6);
IkReal x975=(cj4*r12*sj4*sj8);
IkReal x976=(cj4*r02*sj4*sj8);
IkReal x977=(r12*sj8*x970);
IkReal x978=(r00*x973);
IkReal x979=((1.0)*r10);
CheckValue<IkReal> x980=IKPowWithIntegerCheck(IKsign(((((-1.0)*x969))+((cj8*x970*(r12*r12)))+(((r02*r02)*(((((-1.0)*x969*x970))+cj8))))+(((-2.0)*cj4*cj8*r02*r12*sj4)))),-1);
if(!x980.valid){
continue;
}
CheckValue<IkReal> x981 = IKatan2WithCheck(IkReal(((((-1.0)*x972*x974))+((r01*x975))+(((-1.0)*r11*x977))+((r01*x970*x973))+((r11*x976))+(((-1.0)*x972*x973))+((r11*x971)))),((((-1.0)*x971*x979))+((r10*x977))+(((-1.0)*x970*x978))+(((-1.0)*x976*x979))+x978+(((-1.0)*r00*x975))+((r00*x974))),IKFAST_ATAN2_MAGTHRESH);
if(!x981.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x980.value)))+(x981.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x982=IKsin(j9);
IkReal x983=(r00*x982);
IkReal x984=(sj4*x983);
IkReal x985=IKcos(j9);
IkReal x986=(r01*x985);
IkReal x987=(sj4*x986);
IkReal x988=((1.0)*cj4);
IkReal x989=(r10*x982);
IkReal x990=(r11*x985);
IkReal x991=((1.0)*sj4);
IkReal x992=((0.03431)*cj4);
IkReal x993=((0.03431)*sj4);
IkReal x994=(cj4*cj8);
IkReal x995=((1.0)*cj8*sj4);
IkReal x996=(cj4*sj8*x982);
IkReal x997=(sj4*sj8);
IkReal x998=(r00*x985);
IkReal x999=((1.0)*cj4*sj8);
IkReal x1000=(r10*x985);
IkReal x1001=(r01*x982);
IkReal x1002=((1.0)*sj4*sj8);
IkReal x1003=(r02*sj8);
IkReal x1004=(r12*sj8);
IkReal x1005=(cj4*cj8*x982);
IkReal x1006=(cj8*sj4);
IkReal x1007=((1.0)*cj4*cj8);
IkReal x1008=(r11*x982);
evalcond[0]=((((-1.0)*x988*x990))+(((-1.0)*x988*x989))+x987+x984);
evalcond[1]=((((-1.0)*x983*x988))+(((-1.0)*x989*x991))+(((-1.0)*x986*x988))+(((-1.0)*x990*x991)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x988))+((x990*x992))+((x989*x992))+(((-0.03431)*x987))+(((-0.03431)*x984))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+((x990*x993))+((x989*x993))+(((-1.0)*px*x988))+(((0.00036)*cj6))+((x986*x992))+(((-1.0)*py*x991))+((x983*x992)));
evalcond[4]=(((r11*x996))+((x997*x998))+(((-1.0)*r02*x995))+cj6+(((-1.0)*x1000*x999))+((r12*x994))+(((-1.0)*x1001*x1002)));
evalcond[5]=((((-1.0)*x1004*x988))+sj6+((r11*x1005))+((sj4*x1003))+(((-1.0)*x1001*x995))+((x1006*x998))+(((-1.0)*x1000*x1007)));
evalcond[6]=(((r12*x1006))+(((-1.0)*x998*x999))+(((-1.0)*x1000*x1002))+((r02*x994))+((r01*x996))+((x1008*x997))+(((-1.0)*(1.0)*sj6)));
evalcond[7]=((((-1.0)*x1003*x988))+((r01*x1005))+(((-1.0)*x1004*x991))+(((-1.0)*x1000*x995))+((x1006*x1008))+cj6+(((-1.0)*x1007*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1009=((1.0)*sj8);
IkReal x1010=cj4*cj4;
IkReal x1011=(cj4*cj6);
IkReal x1012=(r01*((cj8*r02)));
IkReal x1013=((1.0)*r01);
IkReal x1014=(cj6*sj4);
IkReal x1015=(cj8*r12*x1010);
IkReal x1016=(cj4*cj8*r12*sj4);
IkReal x1017=(cj4*cj8*r02*sj4);
IkReal x1018=((1.0)*r10);
IkReal x1019=(cj8*r00*r02);
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1009))+(((-2.0)*cj4*r02*r12*sj4*sj8))+((sj8*x1010*(r12*r12)))+(((r02*r02)*(((((-1.0)*x1009*x1010))+sj8)))))),-1);
if(!x1020.valid){
continue;
}
CheckValue<IkReal> x1021 = IKatan2WithCheck(IkReal((((r11*x1015))+x1012+(((-1.0)*x1013*x1014))+(((-1.0)*x1013*x1016))+(((-1.0)*r11*x1017))+(((-1.0)*x1010*x1012))+((r11*x1011)))),((((-1.0)*x1019))+((r00*x1016))+((r10*x1017))+(((-1.0)*x1015*x1018))+((r00*x1014))+(((-1.0)*x1011*x1018))+((x1010*x1019))),IKFAST_ATAN2_MAGTHRESH);
if(!x1021.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1020.value)))+(x1021.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1022=IKsin(j9);
IkReal x1023=(r00*x1022);
IkReal x1024=(sj4*x1023);
IkReal x1025=IKcos(j9);
IkReal x1026=(r01*x1025);
IkReal x1027=(sj4*x1026);
IkReal x1028=((1.0)*cj4);
IkReal x1029=(r10*x1022);
IkReal x1030=(r11*x1025);
IkReal x1031=((1.0)*sj4);
IkReal x1032=((0.03431)*cj4);
IkReal x1033=((0.03431)*sj4);
IkReal x1034=(cj4*cj8);
IkReal x1035=((1.0)*cj8*sj4);
IkReal x1036=(cj4*sj8*x1022);
IkReal x1037=(sj4*sj8);
IkReal x1038=(r00*x1025);
IkReal x1039=((1.0)*cj4*sj8);
IkReal x1040=(r10*x1025);
IkReal x1041=(r01*x1022);
IkReal x1042=((1.0)*sj4*sj8);
IkReal x1043=(r02*sj8);
IkReal x1044=(r12*sj8);
IkReal x1045=(cj4*cj8*x1022);
IkReal x1046=(cj8*sj4);
IkReal x1047=((1.0)*cj4*cj8);
IkReal x1048=(r11*x1022);
evalcond[0]=((((-1.0)*x1028*x1030))+(((-1.0)*x1028*x1029))+x1024+x1027);
evalcond[1]=((((-1.0)*x1029*x1031))+(((-1.0)*x1023*x1028))+(((-1.0)*x1026*x1028))+(((-1.0)*x1030*x1031)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x1027))+(((-0.03431)*x1024))+((x1029*x1032))+(((-1.0)*py*x1028))+(((0.00036)*sj6))+((x1030*x1032)));
evalcond[3]=((0.00337)+((x1029*x1033))+(((-1.0)*px*x1028))+((x1023*x1032))+(((0.00036)*cj6))+((x1026*x1032))+((x1030*x1033))+(((-1.0)*py*x1031)));
evalcond[4]=((((-1.0)*x1039*x1040))+((r11*x1036))+cj6+((r12*x1034))+(((-1.0)*r02*x1035))+((x1037*x1038))+(((-1.0)*x1041*x1042)));
evalcond[5]=((((-1.0)*x1028*x1044))+((sj4*x1043))+(((-1.0)*x1035*x1041))+(((-1.0)*x1040*x1047))+sj6+((x1038*x1046))+((r11*x1045)));
evalcond[6]=(((r02*x1034))+((r12*x1046))+((r01*x1036))+(((-1.0)*x1040*x1042))+(((-1.0)*x1038*x1039))+((x1037*x1048))+(((-1.0)*(1.0)*sj6)));
evalcond[7]=((((-1.0)*x1035*x1040))+(((-1.0)*x1038*x1047))+((r01*x1045))+cj6+(((-1.0)*x1028*x1043))+(((-1.0)*x1031*x1044))+((x1046*x1048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1049=(px*r11);
IkReal x1050=((0.00036)*cj4*sj6);
IkReal x1051=((0.00036)*sj4*sj6);
IkReal x1052=(cj4*px*sj4);
IkReal x1053=(cj4*py*sj4);
IkReal x1054=cj4*cj4;
IkReal x1055=(py*x1054);
IkReal x1056=(px*r10);
CheckValue<IkReal> x1057=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1057.valid){
continue;
}
CheckValue<IkReal> x1058 = IKatan2WithCheck(IkReal((((r01*x1050))+x1049+(((-1.0)*r01*x1055))+((r11*x1051))+(((-1.0)*x1049*x1054))+((r01*x1052))+(((-1.0)*r11*x1053)))),((((-1.0)*x1056))+(((-1.0)*r00*x1052))+((x1054*x1056))+(((-1.0)*r00*x1050))+(((-1.0)*r10*x1051))+((r10*x1053))+((r00*x1055))),IKFAST_ATAN2_MAGTHRESH);
if(!x1058.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1057.value)))+(x1058.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1059=IKsin(j9);
IkReal x1060=(r00*x1059);
IkReal x1061=(sj4*x1060);
IkReal x1062=IKcos(j9);
IkReal x1063=(r01*x1062);
IkReal x1064=(sj4*x1063);
IkReal x1065=((1.0)*cj4);
IkReal x1066=(r10*x1059);
IkReal x1067=(r11*x1062);
IkReal x1068=((1.0)*sj4);
IkReal x1069=((0.03431)*cj4);
IkReal x1070=((0.03431)*sj4);
IkReal x1071=(cj4*cj8);
IkReal x1072=((1.0)*cj8*sj4);
IkReal x1073=(cj4*sj8*x1059);
IkReal x1074=(sj4*sj8);
IkReal x1075=(r00*x1062);
IkReal x1076=((1.0)*cj4*sj8);
IkReal x1077=(r10*x1062);
IkReal x1078=(r01*x1059);
IkReal x1079=((1.0)*sj4*sj8);
IkReal x1080=(r02*sj8);
IkReal x1081=(r12*sj8);
IkReal x1082=(cj4*cj8*x1059);
IkReal x1083=(cj8*sj4);
IkReal x1084=((1.0)*cj4*cj8);
IkReal x1085=(r11*x1059);
evalcond[0]=(x1064+x1061+(((-1.0)*x1065*x1067))+(((-1.0)*x1065*x1066)));
evalcond[1]=((((-1.0)*x1067*x1068))+(((-1.0)*x1060*x1065))+(((-1.0)*x1063*x1065))+(((-1.0)*x1066*x1068)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x1065))+((x1066*x1069))+(((-0.03431)*x1061))+(((-0.03431)*x1064))+((x1067*x1069))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+((x1066*x1070))+((x1063*x1069))+(((0.00036)*cj6))+(((-1.0)*py*x1068))+(((-1.0)*px*x1065))+((x1060*x1069))+((x1067*x1070)));
evalcond[4]=((((-1.0)*r02*x1072))+(((-1.0)*x1076*x1077))+((r12*x1071))+((x1074*x1075))+cj6+((r11*x1073))+(((-1.0)*x1078*x1079)));
evalcond[5]=((((-1.0)*x1065*x1081))+(((-1.0)*x1077*x1084))+sj6+((sj4*x1080))+((x1075*x1083))+((r11*x1082))+(((-1.0)*x1072*x1078)));
evalcond[6]=((((-1.0)*x1075*x1076))+((r02*x1071))+(((-1.0)*x1077*x1079))+((r12*x1083))+((x1074*x1085))+((r01*x1073))+(((-1.0)*(1.0)*sj6)));
evalcond[7]=((((-1.0)*x1068*x1081))+(((-1.0)*x1075*x1084))+((x1083*x1085))+((r01*x1082))+(((-1.0)*x1065*x1080))+cj6+(((-1.0)*x1072*x1077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x1086=(r11*(cj8*cj8));
IkReal x1087=(r11*(sj8*sj8));
IkReal x1088=(((r02*x1086))+((r02*x1087)));
IkReal x1089=(((r12*x1087))+((r12*x1086)));
CheckValue<IkReal> x1093 = IKatan2WithCheck(IkReal(x1088),x1089,IKFAST_ATAN2_MAGTHRESH);
if(!x1093.valid){
continue;
}
IkReal x1090=((-1.0)*(x1093.value));
IkReal x1091=((1.0)*r11);
if((((x1089*x1089)+(x1088*x1088))) < -0.00001)
continue;
CheckValue<IkReal> x1094=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1089*x1089)+(x1088*x1088)))),-1);
if(!x1094.valid){
continue;
}
if( (((-1.0)*(x1094.value)*(((((-1.0)*cj8*sj6*x1091))+(((-1.0)*cj6*sj8*x1091)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1094.value)*(((((-1.0)*cj8*sj6*x1091))+(((-1.0)*cj6*sj8*x1091)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1092=IKasin(((-1.0)*(x1094.value)*(((((-1.0)*cj8*sj6*x1091))+(((-1.0)*cj6*sj8*x1091))))));
j4array[0]=(x1092+x1090);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x1092))+x1090);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1095=((1.0)*r01);
IkReal x1096=(cj6*sj8);
IkReal x1097=(cj8*sj6);
IkReal x1098=IKcos(j4);
IkReal x1099=cj8*cj8;
IkReal x1100=(r01*x1099);
IkReal x1101=sj8*sj8;
IkReal x1102=(r01*x1101);
IkReal x1103=IKsin(j4);
IkReal x1104=((1.0)*r10*x1099);
IkReal x1105=((1.0)*r10*x1101);
IkReal x1106=((1.0)*r00*x1099);
IkReal x1107=((1.0)*r00*x1101);
evalcond[0]=((((-1.0)*x1095*x1097))+(((-1.0)*x1095*x1096))+((x1098*((((r02*x1102))+((r02*x1100))))))+((x1103*((((r12*x1102))+((r12*x1100)))))));
evalcond[1]=(((x1103*(((((-1.0)*r12*x1104))+(((-1.0)*r12*x1105))))))+((x1098*(((((-1.0)*r02*x1105))+(((-1.0)*r02*x1104))))))+((r10*x1096))+((r10*x1097)));
evalcond[2]=(((r00*x1096))+((x1098*(((((-1.0)*r02*x1106))+(((-1.0)*r02*x1107))))))+((x1103*(((((-1.0)*r12*x1107))+(((-1.0)*r12*x1106))))))+((r00*x1097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x1108=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1108);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1108);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1109=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1109);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1109);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x1110=((1.0)*sj8);
IkReal x1111=r02*r02;
IkReal x1112=cj4*cj4;
IkReal x1113=(((sj8*x1112*(r12*r12)))+(((-1.0)*x1110))+(((-1.0)*x1110*x1111*x1112))+(((-1.0)*(2.0)*cj4*r02*r12*sj4*sj8))+((sj8*x1111)));
j9eval[0]=x1113;
j9eval[1]=IKsign(x1113);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1114=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1114);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1114);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x1115=((1.0)*cj8);
IkReal x1116=r02*r02;
IkReal x1117=cj4*cj4;
IkReal x1118=((((-1.0)*x1115))+(((-1.0)*(2.0)*cj4*cj8*r02*r12*sj4))+((cj8*x1117*(r12*r12)))+((cj8*x1116))+(((-1.0)*x1115*x1116*x1117)));
j9eval[0]=x1118;
j9eval[1]=IKsign(x1118);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1119=((1.0)*cj8);
IkReal x1120=cj4*cj4;
IkReal x1121=(cj4*sj6);
IkReal x1122=((1.0)*r01);
IkReal x1123=(r02*sj8);
IkReal x1124=(sj4*sj6);
IkReal x1125=(cj4*r12*sj4*sj8);
IkReal x1126=(cj4*r02*sj4*sj8);
IkReal x1127=(r12*sj8*x1120);
IkReal x1128=(r00*x1123);
IkReal x1129=((1.0)*r10);
CheckValue<IkReal> x1130=IKPowWithIntegerCheck(IKsign(((((r02*r02)*(((((-1.0)*x1119*x1120))+cj8))))+(((-1.0)*x1119))+((cj8*x1120*(r12*r12)))+(((-2.0)*cj4*cj8*r02*r12*sj4)))),-1);
if(!x1130.valid){
continue;
}
CheckValue<IkReal> x1131 = IKatan2WithCheck(IkReal((((r01*x1120*x1123))+((r11*x1126))+(((-1.0)*r11*x1127))+(((-1.0)*x1122*x1123))+(((-1.0)*x1122*x1124))+((r11*x1121))+((r01*x1125)))),((((-1.0)*x1120*x1128))+(((-1.0)*x1121*x1129))+(((-1.0)*x1126*x1129))+x1128+(((-1.0)*r00*x1125))+((r00*x1124))+((r10*x1127))),IKFAST_ATAN2_MAGTHRESH);
if(!x1131.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1130.value)))+(x1131.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1132=IKsin(j9);
IkReal x1133=(r00*x1132);
IkReal x1134=(sj4*x1133);
IkReal x1135=IKcos(j9);
IkReal x1136=(r01*x1135);
IkReal x1137=(sj4*x1136);
IkReal x1138=((1.0)*cj4);
IkReal x1139=(r10*x1132);
IkReal x1140=(r11*x1135);
IkReal x1141=((1.0)*sj4);
IkReal x1142=((0.03431)*cj4);
IkReal x1143=((0.03431)*sj4);
IkReal x1144=(cj4*cj8);
IkReal x1145=((1.0)*cj8*sj4);
IkReal x1146=(cj4*sj8*x1132);
IkReal x1147=(sj4*sj8);
IkReal x1148=(r00*x1135);
IkReal x1149=((1.0)*cj4*sj8);
IkReal x1150=(r10*x1135);
IkReal x1151=(r01*x1132);
IkReal x1152=((1.0)*sj4*sj8);
IkReal x1153=(r02*sj8);
IkReal x1154=(r12*sj8);
IkReal x1155=(cj4*cj8*x1132);
IkReal x1156=(cj8*sj4);
IkReal x1157=((1.0)*cj4*cj8);
IkReal x1158=(r11*x1132);
evalcond[0]=(x1134+x1137+(((-1.0)*x1138*x1139))+(((-1.0)*x1138*x1140)));
evalcond[1]=((((-1.0)*x1140*x1141))+(((-1.0)*x1136*x1138))+(((-1.0)*x1139*x1141))+(((-1.0)*x1133*x1138)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x1138))+(((-0.03431)*x1137))+((x1140*x1142))+(((-0.03431)*x1134))+((x1139*x1142))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+(((-1.0)*px*x1138))+(((-1.0)*py*x1141))+(((0.00036)*cj6))+((x1133*x1142))+((x1139*x1143))+((x1136*x1142))+((x1140*x1143)));
evalcond[4]=((((-1.0)*r02*x1145))+((x1147*x1148))+(((-1.0)*x1149*x1150))+((r11*x1146))+((r12*x1144))+cj6+(((-1.0)*x1151*x1152)));
evalcond[5]=((((-1.0)*x1138*x1154))+((r11*x1155))+sj6+(((-1.0)*x1145*x1151))+((x1148*x1156))+((sj4*x1153))+(((-1.0)*x1150*x1157)));
evalcond[6]=(((r02*x1144))+(((-1.0)*x1148*x1149))+((r12*x1156))+(((-1.0)*x1150*x1152))+(((-1.0)*(1.0)*sj6))+((r01*x1146))+((x1147*x1158)));
evalcond[7]=((((-1.0)*x1138*x1153))+((r01*x1155))+(((-1.0)*x1148*x1157))+cj6+((x1156*x1158))+(((-1.0)*x1141*x1154))+(((-1.0)*x1145*x1150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1159=((1.0)*sj8);
IkReal x1160=cj4*cj4;
IkReal x1161=(cj4*cj6);
IkReal x1162=(r01*((cj8*r02)));
IkReal x1163=((1.0)*r01);
IkReal x1164=(cj6*sj4);
IkReal x1165=(cj8*r12*x1160);
IkReal x1166=(cj4*cj8*r12*sj4);
IkReal x1167=(cj4*cj8*r02*sj4);
IkReal x1168=((1.0)*r10);
IkReal x1169=(cj8*r00*r02);
CheckValue<IkReal> x1170 = IKatan2WithCheck(IkReal((((r11*x1165))+((r11*x1161))+x1162+(((-1.0)*x1163*x1164))+(((-1.0)*r11*x1167))+(((-1.0)*x1163*x1166))+(((-1.0)*x1160*x1162)))),((((-1.0)*x1161*x1168))+(((-1.0)*x1169))+(((-1.0)*x1165*x1168))+((r00*x1164))+((r10*x1167))+((x1160*x1169))+((r00*x1166))),IKFAST_ATAN2_MAGTHRESH);
if(!x1170.valid){
continue;
}
CheckValue<IkReal> x1171=IKPowWithIntegerCheck(IKsign((((sj8*x1160*(r12*r12)))+(((-1.0)*x1159))+(((-2.0)*cj4*r02*r12*sj4*sj8))+(((r02*r02)*(((((-1.0)*x1159*x1160))+sj8)))))),-1);
if(!x1171.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1170.value)+(((1.5707963267949)*(x1171.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1172=IKsin(j9);
IkReal x1173=(r00*x1172);
IkReal x1174=(sj4*x1173);
IkReal x1175=IKcos(j9);
IkReal x1176=(r01*x1175);
IkReal x1177=(sj4*x1176);
IkReal x1178=((1.0)*cj4);
IkReal x1179=(r10*x1172);
IkReal x1180=(r11*x1175);
IkReal x1181=((1.0)*sj4);
IkReal x1182=((0.03431)*cj4);
IkReal x1183=((0.03431)*sj4);
IkReal x1184=(cj4*cj8);
IkReal x1185=((1.0)*cj8*sj4);
IkReal x1186=(cj4*sj8*x1172);
IkReal x1187=(sj4*sj8);
IkReal x1188=(r00*x1175);
IkReal x1189=((1.0)*cj4*sj8);
IkReal x1190=(r10*x1175);
IkReal x1191=(r01*x1172);
IkReal x1192=((1.0)*sj4*sj8);
IkReal x1193=(r02*sj8);
IkReal x1194=(r12*sj8);
IkReal x1195=(cj4*cj8*x1172);
IkReal x1196=(cj8*sj4);
IkReal x1197=((1.0)*cj4*cj8);
IkReal x1198=(r11*x1172);
evalcond[0]=(x1174+x1177+(((-1.0)*x1178*x1179))+(((-1.0)*x1178*x1180)));
evalcond[1]=((((-1.0)*x1173*x1178))+(((-1.0)*x1179*x1181))+(((-1.0)*x1180*x1181))+(((-1.0)*x1176*x1178)));
evalcond[2]=(((px*sj4))+((x1179*x1182))+(((-0.03431)*x1177))+(((-0.03431)*x1174))+(((-1.0)*py*x1178))+((x1180*x1182))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+(((-1.0)*px*x1178))+((x1180*x1183))+((x1179*x1183))+(((0.00036)*cj6))+(((-1.0)*py*x1181))+((x1176*x1182))+((x1173*x1182)));
evalcond[4]=((((-1.0)*r02*x1185))+(((-1.0)*x1189*x1190))+((r12*x1184))+((r11*x1186))+cj6+((x1187*x1188))+(((-1.0)*x1191*x1192)));
evalcond[5]=(((r11*x1195))+((sj4*x1193))+(((-1.0)*x1190*x1197))+(((-1.0)*x1178*x1194))+sj6+(((-1.0)*x1185*x1191))+((x1188*x1196)));
evalcond[6]=(((x1187*x1198))+(((-1.0)*x1188*x1189))+((r12*x1196))+((r01*x1186))+(((-1.0)*x1190*x1192))+((r02*x1184))+(((-1.0)*(1.0)*sj6)));
evalcond[7]=(((x1196*x1198))+(((-1.0)*x1178*x1193))+(((-1.0)*x1185*x1190))+(((-1.0)*x1181*x1194))+(((-1.0)*x1188*x1197))+cj6+((r01*x1195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1199=(px*r11);
IkReal x1200=((0.00036)*cj4*sj6);
IkReal x1201=((0.00036)*sj4*sj6);
IkReal x1202=(cj4*px*sj4);
IkReal x1203=(cj4*py*sj4);
IkReal x1204=cj4*cj4;
IkReal x1205=(py*x1204);
IkReal x1206=(px*r10);
CheckValue<IkReal> x1207=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1207.valid){
continue;
}
CheckValue<IkReal> x1208 = IKatan2WithCheck(IkReal((((r01*x1200))+(((-1.0)*r11*x1203))+((r11*x1201))+((r01*x1202))+(((-1.0)*r01*x1205))+x1199+(((-1.0)*x1199*x1204)))),((((-1.0)*r00*x1200))+((x1204*x1206))+((r00*x1205))+(((-1.0)*r00*x1202))+(((-1.0)*r10*x1201))+((r10*x1203))+(((-1.0)*x1206))),IKFAST_ATAN2_MAGTHRESH);
if(!x1208.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1207.value)))+(x1208.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1209=IKsin(j9);
IkReal x1210=(r00*x1209);
IkReal x1211=(sj4*x1210);
IkReal x1212=IKcos(j9);
IkReal x1213=(r01*x1212);
IkReal x1214=(sj4*x1213);
IkReal x1215=((1.0)*cj4);
IkReal x1216=(r10*x1209);
IkReal x1217=(r11*x1212);
IkReal x1218=((1.0)*sj4);
IkReal x1219=((0.03431)*cj4);
IkReal x1220=((0.03431)*sj4);
IkReal x1221=(cj4*cj8);
IkReal x1222=((1.0)*cj8*sj4);
IkReal x1223=(cj4*sj8*x1209);
IkReal x1224=(sj4*sj8);
IkReal x1225=(r00*x1212);
IkReal x1226=((1.0)*cj4*sj8);
IkReal x1227=(r10*x1212);
IkReal x1228=(r01*x1209);
IkReal x1229=((1.0)*sj4*sj8);
IkReal x1230=(r02*sj8);
IkReal x1231=(r12*sj8);
IkReal x1232=(cj4*cj8*x1209);
IkReal x1233=(cj8*sj4);
IkReal x1234=((1.0)*cj4*cj8);
IkReal x1235=(r11*x1209);
evalcond[0]=((((-1.0)*x1215*x1216))+(((-1.0)*x1215*x1217))+x1214+x1211);
evalcond[1]=((((-1.0)*x1217*x1218))+(((-1.0)*x1216*x1218))+(((-1.0)*x1210*x1215))+(((-1.0)*x1213*x1215)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x1214))+((x1216*x1219))+(((-0.03431)*x1211))+(((-1.0)*py*x1215))+((x1217*x1219))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+(((0.00036)*cj6))+(((-1.0)*py*x1218))+((x1210*x1219))+((x1217*x1220))+(((-1.0)*px*x1215))+((x1213*x1219))+((x1216*x1220)));
evalcond[4]=((((-1.0)*x1228*x1229))+((r11*x1223))+(((-1.0)*x1226*x1227))+cj6+((r12*x1221))+((x1224*x1225))+(((-1.0)*r02*x1222)));
evalcond[5]=((((-1.0)*x1215*x1231))+((sj4*x1230))+(((-1.0)*x1227*x1234))+sj6+((r11*x1232))+((x1225*x1233))+(((-1.0)*x1222*x1228)));
evalcond[6]=(((r01*x1223))+(((-1.0)*x1227*x1229))+((r02*x1221))+((x1224*x1235))+(((-1.0)*x1225*x1226))+((r12*x1233))+(((-1.0)*(1.0)*sj6)));
evalcond[7]=(((x1233*x1235))+(((-1.0)*x1215*x1230))+(((-1.0)*x1218*x1231))+cj6+(((-1.0)*x1222*x1227))+(((-1.0)*x1225*x1234))+((r01*x1232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=-1.0;
evalcond[2]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
j8array[0]=-1.5707963267949;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j4eval[2];
IkReal x1236=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1236);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1236);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x1237=r02*r02;
IkReal x1238=r11*r11;
IkReal x1239=(x1238*(cj8*cj8*cj8*cj8));
IkReal x1240=r12*r12;
IkReal x1241=(x1238*(sj8*sj8*sj8*sj8));
IkReal x1242=cj8*cj8;
IkReal x1243=sj8*sj8;
IkReal x1244=((2.0)*x1238*x1242*x1243);
IkReal x1245=(r11*x1242);
IkReal x1246=(r11*x1243);
j4eval[0]=(((x1240*x1244))+((x1240*x1241))+((x1237*x1244))+((x1239*x1240))+((x1237*x1241))+((x1237*x1239)));
j4eval[1]=((IKabs((((r12*x1245))+((r12*x1246)))))+(IKabs((((r02*x1245))+((r02*x1246))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1247=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1247);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1247);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x1248=cj8*cj8;
IkReal x1249=(r01*x1248);
IkReal x1250=sj8*sj8;
IkReal x1251=(r01*x1250);
IkReal x1252=r02*r02;
IkReal x1253=r01*r01;
IkReal x1254=(x1253*(cj8*cj8*cj8*cj8));
IkReal x1255=r12*r12;
IkReal x1256=(x1253*(sj8*sj8*sj8*sj8));
IkReal x1257=((2.0)*x1248*x1250*x1253);
j4eval[0]=((IKabs((((r12*x1251))+((r12*x1249)))))+(IKabs((((r02*x1249))+((r02*x1251))))));
j4eval[1]=(((x1255*x1257))+((x1254*x1255))+((x1255*x1256))+((x1252*x1256))+((x1252*x1254))+((x1252*x1257)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1258=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1258);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1258);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x1259=cj8*cj8;
IkReal x1260=(r10*x1259);
IkReal x1261=sj8*sj8;
IkReal x1262=(r10*x1261);
IkReal x1263=r02*r02;
IkReal x1264=r10*r10;
IkReal x1265=(x1264*(cj8*cj8*cj8*cj8));
IkReal x1266=r12*r12;
IkReal x1267=(x1264*(sj8*sj8*sj8*sj8));
IkReal x1268=((2.0)*x1259*x1261*x1264);
j4eval[0]=((IKabs((((r12*x1260))+((r12*x1262)))))+(IKabs((((r02*x1262))+((r02*x1260))))));
j4eval[1]=(((x1266*x1268))+((x1265*x1266))+((x1266*x1267))+((x1263*x1265))+((x1263*x1267))+((x1263*x1268)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x1269=((1.0)*r10*(cj8*cj8));
IkReal x1270=((1.0)*r10*(sj8*sj8));
IkReal x1271=((((-1.0)*r02*x1270))+(((-1.0)*r02*x1269)));
IkReal x1272=((((-1.0)*r12*x1269))+(((-1.0)*r12*x1270)));
CheckValue<IkReal> x1275 = IKatan2WithCheck(IkReal(x1271),x1272,IKFAST_ATAN2_MAGTHRESH);
if(!x1275.valid){
continue;
}
IkReal x1273=((-1.0)*(x1275.value));
if((((x1271*x1271)+(x1272*x1272))) < -0.00001)
continue;
CheckValue<IkReal> x1276=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1271*x1271)+(x1272*x1272)))),-1);
if(!x1276.valid){
continue;
}
if( (((x1276.value)*((((cj8*r10*sj6))+(((-1.0)*cj6*r10*sj8)))))) < -1-IKFAST_SINCOS_THRESH || (((x1276.value)*((((cj8*r10*sj6))+(((-1.0)*cj6*r10*sj8)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1274=IKasin(((x1276.value)*((((cj8*r10*sj6))+(((-1.0)*cj6*r10*sj8))))));
j4array[0]=(x1273+(((-1.0)*x1274)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x1273+x1274);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1277=(cj6*sj8);
IkReal x1278=((1.0)*cj8*sj6);
IkReal x1279=IKcos(j4);
IkReal x1280=cj8*cj8;
IkReal x1281=(r11*x1280);
IkReal x1282=sj8*sj8;
IkReal x1283=(r11*x1282);
IkReal x1284=IKsin(j4);
IkReal x1285=(r01*x1280);
IkReal x1286=(r01*x1282);
IkReal x1287=((1.0)*r00*x1280);
IkReal x1288=((1.0)*r00*x1282);
evalcond[0]=(((r11*x1277))+((x1279*((((r02*x1283))+((r02*x1281))))))+((x1284*((((r12*x1283))+((r12*x1281))))))+(((-1.0)*r11*x1278)));
evalcond[1]=(((x1279*((((r02*x1286))+((r02*x1285))))))+((x1284*((((r12*x1285))+((r12*x1286))))))+((r01*x1277))+(((-1.0)*r01*x1278)));
evalcond[2]=(((r00*((cj8*sj6))))+((x1284*(((((-1.0)*r12*x1288))+(((-1.0)*r12*x1287))))))+((x1279*(((((-1.0)*r02*x1287))+(((-1.0)*r02*x1288))))))+(((-1.0)*r00*x1277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x1289=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1289);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1289);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1290=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1290);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1290);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x1291=(r02*r12);
IkReal x1292=(cj4*sj4);
IkReal x1293=((((-1.0)*sj8*x1292*(r02*r02)))+(((-1.0)*sj8*x1291))+(((2.0)*sj8*x1291*(cj4*cj4)))+((sj8*x1292*(r12*r12))));
j9eval[0]=x1293;
j9eval[1]=IKsign(x1293);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1294=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1294);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1294);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x1295=((1.0)*sj8);
IkReal x1296=r02*r02;
IkReal x1297=cj4*cj4;
IkReal x1298=((((-1.0)*(2.0)*cj4*r02*r12*sj4*sj8))+(((-1.0)*x1295*x1296*x1297))+((sj8*x1296))+((sj8*x1297*(r12*r12)))+(((-1.0)*x1295)));
j9eval[0]=x1298;
j9eval[1]=IKsign(x1298);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1299=((1.0)*sj8);
IkReal x1300=cj4*cj4;
IkReal x1301=(cj4*cj6);
IkReal x1302=(r01*((cj8*r02)));
IkReal x1303=((1.0)*r01);
IkReal x1304=(cj6*sj4);
IkReal x1305=(cj8*r12*x1300);
IkReal x1306=(cj4*cj8*r12*sj4);
IkReal x1307=(cj4*cj8*r02*sj4);
IkReal x1308=((1.0)*r10);
IkReal x1309=(cj8*r00*r02);
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1299))+((sj8*x1300*(r12*r12)))+(((r02*r02)*(((((-1.0)*x1299*x1300))+sj8))))+(((-2.0)*cj4*r02*r12*sj4*sj8)))),-1);
if(!x1310.valid){
continue;
}
CheckValue<IkReal> x1311 = IKatan2WithCheck(IkReal(((((-1.0)*x1303*x1306))+x1302+(((-1.0)*x1303*x1304))+((r11*x1301))+(((-1.0)*x1300*x1302))+(((-1.0)*r11*x1307))+((r11*x1305)))),(((r00*x1304))+(((-1.0)*x1301*x1308))+((x1300*x1309))+(((-1.0)*x1309))+((r00*x1306))+(((-1.0)*x1305*x1308))+((r10*x1307))),IKFAST_ATAN2_MAGTHRESH);
if(!x1311.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1310.value)))+(x1311.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1312=IKsin(j9);
IkReal x1313=(r00*x1312);
IkReal x1314=(sj4*x1313);
IkReal x1315=IKcos(j9);
IkReal x1316=(r01*x1315);
IkReal x1317=(sj4*x1316);
IkReal x1318=((1.0)*cj4);
IkReal x1319=(r10*x1312);
IkReal x1320=(r11*x1315);
IkReal x1321=((1.0)*sj4);
IkReal x1322=((0.03431)*cj4);
IkReal x1323=((0.03431)*sj4);
IkReal x1324=(cj4*cj8);
IkReal x1325=((1.0)*cj8*sj4);
IkReal x1326=(cj4*sj8*x1312);
IkReal x1327=(sj4*sj8);
IkReal x1328=(r00*x1315);
IkReal x1329=((1.0)*cj4*sj8);
IkReal x1330=(r10*x1315);
IkReal x1331=(r01*x1312);
IkReal x1332=((1.0)*sj4*sj8);
IkReal x1333=((-1.0)*(((1.0)*sj6)));
IkReal x1334=(cj8*sj4);
IkReal x1335=(r11*x1312);
IkReal x1336=(r02*sj8);
IkReal x1337=(r12*sj8);
IkReal x1338=(cj4*cj8*x1312);
IkReal x1339=((1.0)*cj4*cj8);
evalcond[0]=((((-1.0)*x1318*x1319))+x1314+x1317+(((-1.0)*x1318*x1320)));
evalcond[1]=((((-1.0)*x1313*x1318))+(((-1.0)*x1320*x1321))+(((-1.0)*x1319*x1321))+(((-1.0)*x1316*x1318)));
evalcond[2]=(((px*sj4))+((x1319*x1322))+(((-0.03431)*x1314))+(((-0.03431)*x1317))+(((-1.0)*py*x1318))+((x1320*x1322))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+((x1320*x1323))+((x1316*x1322))+((x1319*x1323))+(((-1.0)*px*x1318))+(((0.00036)*cj6))+(((-1.0)*py*x1321))+((x1313*x1322)));
evalcond[4]=((((-1.0)*r02*x1325))+(((-1.0)*x1331*x1332))+((x1327*x1328))+cj6+(((-1.0)*x1329*x1330))+((r11*x1326))+((r12*x1324)));
evalcond[5]=(((r12*x1334))+((x1327*x1335))+((r02*x1324))+x1333+(((-1.0)*x1328*x1329))+(((-1.0)*x1330*x1332))+((r01*x1326)));
evalcond[6]=(((sj4*x1336))+((x1328*x1334))+x1333+(((-1.0)*x1330*x1339))+(((-1.0)*x1325*x1331))+((r11*x1338))+(((-1.0)*x1318*x1337)));
evalcond[7]=((((-1.0)*x1321*x1337))+((r01*x1338))+((x1334*x1335))+(((-1.0)*x1328*x1339))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x1318*x1336))+(((-1.0)*x1325*x1330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1340=(cj4*sj4);
IkReal x1341=cj4*cj4;
IkReal x1342=(sj4*sj6);
IkReal x1343=(cj4*sj6);
IkReal x1344=(cj8*r01*r12);
IkReal x1345=(cj4*cj8*r12*sj4);
IkReal x1346=(cj8*r02*x1341);
IkReal x1347=(cj4*cj8*r02*sj4);
IkReal x1348=(r00*((cj8*r12)));
IkReal x1349=((1.0)*r10);
CheckValue<IkReal> x1350=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj8*x1340*(r02*r02)))+((r02*r12*(((((2.0)*sj8*x1341))+(((-1.0)*(1.0)*sj8))))))+((sj8*x1340*(r12*r12))))),-1);
if(!x1350.valid){
continue;
}
CheckValue<IkReal> x1351 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1343))+((r11*x1345))+((r01*x1342))+(((-1.0)*x1344))+(((-1.0)*r01*x1347))+((x1341*x1344))+((r11*x1346)))),((((-1.0)*x1341*x1348))+((r10*x1343))+(((-1.0)*r00*x1342))+(((-1.0)*x1346*x1349))+(((-1.0)*x1345*x1349))+((r00*x1347))+x1348),IKFAST_ATAN2_MAGTHRESH);
if(!x1351.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1350.value)))+(x1351.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1352=IKsin(j9);
IkReal x1353=(r00*x1352);
IkReal x1354=(sj4*x1353);
IkReal x1355=IKcos(j9);
IkReal x1356=(r01*x1355);
IkReal x1357=(sj4*x1356);
IkReal x1358=((1.0)*cj4);
IkReal x1359=(r10*x1352);
IkReal x1360=(r11*x1355);
IkReal x1361=((1.0)*sj4);
IkReal x1362=((0.03431)*cj4);
IkReal x1363=((0.03431)*sj4);
IkReal x1364=(cj4*cj8);
IkReal x1365=((1.0)*cj8*sj4);
IkReal x1366=(cj4*sj8*x1352);
IkReal x1367=(sj4*sj8);
IkReal x1368=(r00*x1355);
IkReal x1369=((1.0)*cj4*sj8);
IkReal x1370=(r10*x1355);
IkReal x1371=(r01*x1352);
IkReal x1372=((1.0)*sj4*sj8);
IkReal x1373=((-1.0)*(((1.0)*sj6)));
IkReal x1374=(cj8*sj4);
IkReal x1375=(r11*x1352);
IkReal x1376=(r02*sj8);
IkReal x1377=(r12*sj8);
IkReal x1378=(cj4*cj8*x1352);
IkReal x1379=((1.0)*cj4*cj8);
evalcond[0]=((((-1.0)*x1358*x1360))+(((-1.0)*x1358*x1359))+x1354+x1357);
evalcond[1]=((((-1.0)*x1356*x1358))+(((-1.0)*x1359*x1361))+(((-1.0)*x1360*x1361))+(((-1.0)*x1353*x1358)));
evalcond[2]=(((px*sj4))+((x1360*x1362))+((x1359*x1362))+(((-0.03431)*x1354))+(((-1.0)*py*x1358))+(((-0.03431)*x1357))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+((x1360*x1363))+(((-1.0)*py*x1361))+((x1356*x1362))+(((0.00036)*cj6))+((x1353*x1362))+((x1359*x1363))+(((-1.0)*px*x1358)));
evalcond[4]=((((-1.0)*x1371*x1372))+cj6+(((-1.0)*x1369*x1370))+(((-1.0)*r02*x1365))+((r11*x1366))+((r12*x1364))+((x1367*x1368)));
evalcond[5]=((((-1.0)*x1368*x1369))+x1373+(((-1.0)*x1370*x1372))+((r01*x1366))+((x1367*x1375))+((r02*x1364))+((r12*x1374)));
evalcond[6]=((((-1.0)*x1358*x1377))+x1373+((r11*x1378))+((sj4*x1376))+((x1368*x1374))+(((-1.0)*x1370*x1379))+(((-1.0)*x1365*x1371)));
evalcond[7]=((((-1.0)*x1365*x1370))+(((-1.0)*(1.0)*cj6))+((x1374*x1375))+(((-1.0)*x1368*x1379))+(((-1.0)*x1361*x1377))+(((-1.0)*x1358*x1376))+((r01*x1378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1380=(px*r11);
IkReal x1381=((0.00036)*cj4*sj6);
IkReal x1382=((0.00036)*sj4*sj6);
IkReal x1383=(cj4*px*sj4);
IkReal x1384=(cj4*py*sj4);
IkReal x1385=cj4*cj4;
IkReal x1386=(py*x1385);
IkReal x1387=(px*r10);
CheckValue<IkReal> x1388=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1388.valid){
continue;
}
CheckValue<IkReal> x1389 = IKatan2WithCheck(IkReal((((r01*x1381))+((r11*x1382))+((r01*x1383))+(((-1.0)*x1380*x1385))+x1380+(((-1.0)*r01*x1386))+(((-1.0)*r11*x1384)))),((((-1.0)*r00*x1383))+((r00*x1386))+(((-1.0)*r10*x1382))+(((-1.0)*r00*x1381))+((r10*x1384))+((x1385*x1387))+(((-1.0)*x1387))),IKFAST_ATAN2_MAGTHRESH);
if(!x1389.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1388.value)))+(x1389.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1390=IKsin(j9);
IkReal x1391=(r00*x1390);
IkReal x1392=(sj4*x1391);
IkReal x1393=IKcos(j9);
IkReal x1394=(r01*x1393);
IkReal x1395=(sj4*x1394);
IkReal x1396=((1.0)*cj4);
IkReal x1397=(r10*x1390);
IkReal x1398=(r11*x1393);
IkReal x1399=((1.0)*sj4);
IkReal x1400=((0.03431)*cj4);
IkReal x1401=((0.03431)*sj4);
IkReal x1402=(cj4*cj8);
IkReal x1403=((1.0)*cj8*sj4);
IkReal x1404=(cj4*sj8*x1390);
IkReal x1405=(sj4*sj8);
IkReal x1406=(r00*x1393);
IkReal x1407=((1.0)*cj4*sj8);
IkReal x1408=(r10*x1393);
IkReal x1409=(r01*x1390);
IkReal x1410=((1.0)*sj4*sj8);
IkReal x1411=((-1.0)*(((1.0)*sj6)));
IkReal x1412=(cj8*sj4);
IkReal x1413=(r11*x1390);
IkReal x1414=(r02*sj8);
IkReal x1415=(r12*sj8);
IkReal x1416=(cj4*cj8*x1390);
IkReal x1417=((1.0)*cj4*cj8);
evalcond[0]=((((-1.0)*x1396*x1397))+x1392+x1395+(((-1.0)*x1396*x1398)));
evalcond[1]=((((-1.0)*x1394*x1396))+(((-1.0)*x1391*x1396))+(((-1.0)*x1397*x1399))+(((-1.0)*x1398*x1399)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x1392))+(((-0.03431)*x1395))+(((-1.0)*py*x1396))+((x1398*x1400))+(((0.00036)*sj6))+((x1397*x1400)));
evalcond[3]=((0.00337)+(((-1.0)*py*x1399))+((x1391*x1400))+((x1398*x1401))+((x1397*x1401))+(((0.00036)*cj6))+((x1394*x1400))+(((-1.0)*px*x1396)));
evalcond[4]=((((-1.0)*x1407*x1408))+((x1405*x1406))+((r11*x1404))+(((-1.0)*x1409*x1410))+(((-1.0)*r02*x1403))+cj6+((r12*x1402)));
evalcond[5]=(((r02*x1402))+x1411+((r01*x1404))+((r12*x1412))+((x1405*x1413))+(((-1.0)*x1408*x1410))+(((-1.0)*x1406*x1407)));
evalcond[6]=((((-1.0)*x1396*x1415))+(((-1.0)*x1403*x1409))+((r11*x1416))+(((-1.0)*x1408*x1417))+x1411+((sj4*x1414))+((x1406*x1412)));
evalcond[7]=(((x1412*x1413))+(((-1.0)*x1403*x1408))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x1406*x1417))+(((-1.0)*x1396*x1414))+(((-1.0)*x1399*x1415))+((r01*x1416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x1418=(r01*(cj8*cj8));
IkReal x1419=(r01*(sj8*sj8));
IkReal x1420=(((r02*x1418))+((r02*x1419)));
IkReal x1421=(((r12*x1419))+((r12*x1418)));
CheckValue<IkReal> x1424 = IKatan2WithCheck(IkReal(x1420),x1421,IKFAST_ATAN2_MAGTHRESH);
if(!x1424.valid){
continue;
}
IkReal x1422=((-1.0)*(x1424.value));
if((((x1421*x1421)+(x1420*x1420))) < -0.00001)
continue;
CheckValue<IkReal> x1425=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1421*x1421)+(x1420*x1420)))),-1);
if(!x1425.valid){
continue;
}
if( (((x1425.value)*(((((-1.0)*(1.0)*cj8*r01*sj6))+((cj6*r01*sj8)))))) < -1-IKFAST_SINCOS_THRESH || (((x1425.value)*(((((-1.0)*(1.0)*cj8*r01*sj6))+((cj6*r01*sj8)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1423=IKasin(((x1425.value)*(((((-1.0)*(1.0)*cj8*r01*sj6))+((cj6*r01*sj8))))));
j4array[0]=(x1422+(((-1.0)*x1423)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x1422+x1423);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1426=(cj8*sj6);
IkReal x1427=IKcos(j4);
IkReal x1428=cj8*cj8;
IkReal x1429=(r11*x1428);
IkReal x1430=sj8*sj8;
IkReal x1431=(r11*x1430);
IkReal x1432=IKsin(j4);
IkReal x1433=((1.0)*cj6*sj8);
IkReal x1434=((1.0)*r10*x1428);
IkReal x1435=((1.0)*r10*x1430);
IkReal x1436=((1.0)*r00*x1428);
IkReal x1437=((1.0)*r00*x1430);
evalcond[0]=(((x1427*((((r02*x1431))+((r02*x1429))))))+(((-1.0)*r11*x1426))+((r11*((cj6*sj8))))+((x1432*((((r12*x1431))+((r12*x1429)))))));
evalcond[1]=(((x1432*(((((-1.0)*r12*x1435))+(((-1.0)*r12*x1434))))))+((x1427*(((((-1.0)*r02*x1434))+(((-1.0)*r02*x1435))))))+(((-1.0)*r10*x1433))+((r10*x1426)));
evalcond[2]=((((-1.0)*r00*x1433))+((x1432*(((((-1.0)*r12*x1436))+(((-1.0)*r12*x1437))))))+((r00*x1426))+((x1427*(((((-1.0)*r02*x1436))+(((-1.0)*r02*x1437)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x1438=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1438);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1438);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1439=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1439);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1439);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x1440=(r02*r12);
IkReal x1441=(cj4*sj4);
IkReal x1442=((((-1.0)*sj8*x1441*(r02*r02)))+(((2.0)*sj8*x1440*(cj4*cj4)))+(((-1.0)*sj8*x1440))+((sj8*x1441*(r12*r12))));
j9eval[0]=x1442;
j9eval[1]=IKsign(x1442);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1443=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1443);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1443);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x1444=((1.0)*sj8);
IkReal x1445=r02*r02;
IkReal x1446=cj4*cj4;
IkReal x1447=((((-1.0)*x1444*x1445*x1446))+(((-1.0)*(2.0)*cj4*r02*r12*sj4*sj8))+((sj8*x1445))+(((-1.0)*x1444))+((sj8*x1446*(r12*r12))));
j9eval[0]=x1447;
j9eval[1]=IKsign(x1447);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1448=((1.0)*sj8);
IkReal x1449=cj4*cj4;
IkReal x1450=(cj4*cj6);
IkReal x1451=(r01*((cj8*r02)));
IkReal x1452=((1.0)*r01);
IkReal x1453=(cj6*sj4);
IkReal x1454=(cj8*r12*x1449);
IkReal x1455=(cj4*cj8*r12*sj4);
IkReal x1456=(cj4*cj8*r02*sj4);
IkReal x1457=((1.0)*r10);
IkReal x1458=(cj8*r00*r02);
CheckValue<IkReal> x1459 = IKatan2WithCheck(IkReal((((r11*x1450))+(((-1.0)*x1452*x1455))+((r11*x1454))+(((-1.0)*x1452*x1453))+(((-1.0)*r11*x1456))+(((-1.0)*x1449*x1451))+x1451)),(((r10*x1456))+(((-1.0)*x1450*x1457))+((x1449*x1458))+(((-1.0)*x1454*x1457))+((r00*x1455))+(((-1.0)*x1458))+((r00*x1453))),IKFAST_ATAN2_MAGTHRESH);
if(!x1459.valid){
continue;
}
CheckValue<IkReal> x1460=IKPowWithIntegerCheck(IKsign(((((r02*r02)*((sj8+(((-1.0)*x1448*x1449))))))+((sj8*x1449*(r12*r12)))+(((-1.0)*x1448))+(((-2.0)*cj4*r02*r12*sj4*sj8)))),-1);
if(!x1460.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1459.value)+(((1.5707963267949)*(x1460.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1461=IKsin(j9);
IkReal x1462=(r00*x1461);
IkReal x1463=(sj4*x1462);
IkReal x1464=IKcos(j9);
IkReal x1465=(r01*x1464);
IkReal x1466=(sj4*x1465);
IkReal x1467=((1.0)*cj4);
IkReal x1468=(r10*x1461);
IkReal x1469=(r11*x1464);
IkReal x1470=((1.0)*sj4);
IkReal x1471=((0.03431)*cj4);
IkReal x1472=((0.03431)*sj4);
IkReal x1473=(cj4*cj8);
IkReal x1474=((1.0)*cj8*sj4);
IkReal x1475=(cj4*sj8*x1461);
IkReal x1476=(sj4*sj8);
IkReal x1477=(r00*x1464);
IkReal x1478=((1.0)*cj4*sj8);
IkReal x1479=(r10*x1464);
IkReal x1480=(r01*x1461);
IkReal x1481=((1.0)*sj4*sj8);
IkReal x1482=((-1.0)*(((1.0)*sj6)));
IkReal x1483=(cj8*sj4);
IkReal x1484=(r11*x1461);
IkReal x1485=(r02*sj8);
IkReal x1486=(r12*sj8);
IkReal x1487=(cj4*cj8*x1461);
IkReal x1488=((1.0)*cj4*cj8);
evalcond[0]=((((-1.0)*x1467*x1469))+(((-1.0)*x1467*x1468))+x1466+x1463);
evalcond[1]=((((-1.0)*x1462*x1467))+(((-1.0)*x1469*x1470))+(((-1.0)*x1465*x1467))+(((-1.0)*x1468*x1470)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x1467))+(((-0.03431)*x1466))+((x1468*x1471))+(((-0.03431)*x1463))+((x1469*x1471))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+((x1465*x1471))+(((0.00036)*cj6))+((x1468*x1472))+(((-1.0)*px*x1467))+((x1469*x1472))+((x1462*x1471))+(((-1.0)*py*x1470)));
evalcond[4]=(((r12*x1473))+(((-1.0)*x1480*x1481))+(((-1.0)*r02*x1474))+cj6+((x1476*x1477))+(((-1.0)*x1478*x1479))+((r11*x1475)));
evalcond[5]=((((-1.0)*x1479*x1481))+(((-1.0)*x1477*x1478))+((x1476*x1484))+((r01*x1475))+((r02*x1473))+x1482+((r12*x1483)));
evalcond[6]=(((r11*x1487))+(((-1.0)*x1479*x1488))+(((-1.0)*x1467*x1486))+((x1477*x1483))+x1482+(((-1.0)*x1474*x1480))+((sj4*x1485)));
evalcond[7]=(((r01*x1487))+(((-1.0)*x1470*x1486))+((x1483*x1484))+(((-1.0)*x1474*x1479))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x1477*x1488))+(((-1.0)*x1467*x1485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1489=(cj4*sj4);
IkReal x1490=cj4*cj4;
IkReal x1491=(sj4*sj6);
IkReal x1492=(cj4*sj6);
IkReal x1493=(cj8*r01*r12);
IkReal x1494=(cj4*cj8*r12*sj4);
IkReal x1495=(cj8*r02*x1490);
IkReal x1496=(cj4*cj8*r02*sj4);
IkReal x1497=(r00*((cj8*r12)));
IkReal x1498=((1.0)*r10);
CheckValue<IkReal> x1499 = IKatan2WithCheck(IkReal(((((-1.0)*x1493))+((x1490*x1493))+(((-1.0)*r11*x1492))+(((-1.0)*r01*x1496))+((r11*x1494))+((r11*x1495))+((r01*x1491)))),(x1497+((r00*x1496))+((r10*x1492))+(((-1.0)*x1495*x1498))+(((-1.0)*x1494*x1498))+(((-1.0)*r00*x1491))+(((-1.0)*x1490*x1497))),IKFAST_ATAN2_MAGTHRESH);
if(!x1499.valid){
continue;
}
CheckValue<IkReal> x1500=IKPowWithIntegerCheck(IKsign((((sj8*x1489*(r12*r12)))+(((-1.0)*sj8*x1489*(r02*r02)))+((r02*r12*(((((-1.0)*(1.0)*sj8))+(((2.0)*sj8*x1490)))))))),-1);
if(!x1500.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1499.value)+(((1.5707963267949)*(x1500.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1501=IKsin(j9);
IkReal x1502=(r00*x1501);
IkReal x1503=(sj4*x1502);
IkReal x1504=IKcos(j9);
IkReal x1505=(r01*x1504);
IkReal x1506=(sj4*x1505);
IkReal x1507=((1.0)*cj4);
IkReal x1508=(r10*x1501);
IkReal x1509=(r11*x1504);
IkReal x1510=((1.0)*sj4);
IkReal x1511=((0.03431)*cj4);
IkReal x1512=((0.03431)*sj4);
IkReal x1513=(cj4*cj8);
IkReal x1514=((1.0)*cj8*sj4);
IkReal x1515=(cj4*sj8*x1501);
IkReal x1516=(sj4*sj8);
IkReal x1517=(r00*x1504);
IkReal x1518=((1.0)*cj4*sj8);
IkReal x1519=(r10*x1504);
IkReal x1520=(r01*x1501);
IkReal x1521=((1.0)*sj4*sj8);
IkReal x1522=((-1.0)*(((1.0)*sj6)));
IkReal x1523=(cj8*sj4);
IkReal x1524=(r11*x1501);
IkReal x1525=(r02*sj8);
IkReal x1526=(r12*sj8);
IkReal x1527=(cj4*cj8*x1501);
IkReal x1528=((1.0)*cj4*cj8);
evalcond[0]=((((-1.0)*x1507*x1509))+x1503+x1506+(((-1.0)*x1507*x1508)));
evalcond[1]=((((-1.0)*x1502*x1507))+(((-1.0)*x1509*x1510))+(((-1.0)*x1505*x1507))+(((-1.0)*x1508*x1510)));
evalcond[2]=(((px*sj4))+((x1509*x1511))+(((-0.03431)*x1506))+((x1508*x1511))+(((-0.03431)*x1503))+(((-1.0)*py*x1507))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+((x1502*x1511))+(((0.00036)*cj6))+((x1508*x1512))+(((-1.0)*py*x1510))+((x1505*x1511))+((x1509*x1512))+(((-1.0)*px*x1507)));
evalcond[4]=(((r12*x1513))+(((-1.0)*x1518*x1519))+((x1516*x1517))+((r11*x1515))+cj6+(((-1.0)*r02*x1514))+(((-1.0)*x1520*x1521)));
evalcond[5]=(((r12*x1523))+(((-1.0)*x1519*x1521))+((r01*x1515))+((r02*x1513))+((x1516*x1524))+x1522+(((-1.0)*x1517*x1518)));
evalcond[6]=((((-1.0)*x1514*x1520))+(((-1.0)*x1507*x1526))+((sj4*x1525))+((x1517*x1523))+((r11*x1527))+x1522+(((-1.0)*x1519*x1528)));
evalcond[7]=(((x1523*x1524))+(((-1.0)*x1514*x1519))+(((-1.0)*(1.0)*cj6))+((r01*x1527))+(((-1.0)*x1510*x1526))+(((-1.0)*x1517*x1528))+(((-1.0)*x1507*x1525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1529=(px*r11);
IkReal x1530=((0.00036)*cj4*sj6);
IkReal x1531=((0.00036)*sj4*sj6);
IkReal x1532=(cj4*px*sj4);
IkReal x1533=(cj4*py*sj4);
IkReal x1534=cj4*cj4;
IkReal x1535=(py*x1534);
IkReal x1536=(px*r10);
CheckValue<IkReal> x1537 = IKatan2WithCheck(IkReal((((r11*x1531))+(((-1.0)*r01*x1535))+(((-1.0)*x1529*x1534))+(((-1.0)*r11*x1533))+((r01*x1530))+x1529+((r01*x1532)))),((((-1.0)*r00*x1532))+((x1534*x1536))+(((-1.0)*x1536))+((r00*x1535))+(((-1.0)*r00*x1530))+((r10*x1533))+(((-1.0)*r10*x1531))),IKFAST_ATAN2_MAGTHRESH);
if(!x1537.valid){
continue;
}
CheckValue<IkReal> x1538=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1538.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1537.value)+(((1.5707963267949)*(x1538.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1539=IKsin(j9);
IkReal x1540=(r00*x1539);
IkReal x1541=(sj4*x1540);
IkReal x1542=IKcos(j9);
IkReal x1543=(r01*x1542);
IkReal x1544=(sj4*x1543);
IkReal x1545=((1.0)*cj4);
IkReal x1546=(r10*x1539);
IkReal x1547=(r11*x1542);
IkReal x1548=((1.0)*sj4);
IkReal x1549=((0.03431)*cj4);
IkReal x1550=((0.03431)*sj4);
IkReal x1551=(cj4*cj8);
IkReal x1552=((1.0)*cj8*sj4);
IkReal x1553=(cj4*sj8*x1539);
IkReal x1554=(sj4*sj8);
IkReal x1555=(r00*x1542);
IkReal x1556=((1.0)*cj4*sj8);
IkReal x1557=(r10*x1542);
IkReal x1558=(r01*x1539);
IkReal x1559=((1.0)*sj4*sj8);
IkReal x1560=((-1.0)*(((1.0)*sj6)));
IkReal x1561=(cj8*sj4);
IkReal x1562=(r11*x1539);
IkReal x1563=(r02*sj8);
IkReal x1564=(r12*sj8);
IkReal x1565=(cj4*cj8*x1539);
IkReal x1566=((1.0)*cj4*cj8);
evalcond[0]=((((-1.0)*x1545*x1547))+(((-1.0)*x1545*x1546))+x1541+x1544);
evalcond[1]=((((-1.0)*x1543*x1545))+(((-1.0)*x1546*x1548))+(((-1.0)*x1540*x1545))+(((-1.0)*x1547*x1548)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x1545))+((x1546*x1549))+(((-0.03431)*x1544))+((x1547*x1549))+(((-0.03431)*x1541))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+((x1547*x1550))+(((0.00036)*cj6))+(((-1.0)*px*x1545))+((x1546*x1550))+(((-1.0)*py*x1548))+((x1540*x1549))+((x1543*x1549)));
evalcond[4]=((((-1.0)*r02*x1552))+((r11*x1553))+((x1554*x1555))+(((-1.0)*x1556*x1557))+((r12*x1551))+cj6+(((-1.0)*x1558*x1559)));
evalcond[5]=((((-1.0)*x1557*x1559))+((r01*x1553))+((r02*x1551))+(((-1.0)*x1555*x1556))+((r12*x1561))+x1560+((x1554*x1562)));
evalcond[6]=(((x1555*x1561))+((sj4*x1563))+x1560+(((-1.0)*x1545*x1564))+(((-1.0)*x1557*x1566))+(((-1.0)*x1552*x1558))+((r11*x1565)));
evalcond[7]=(((r01*x1565))+(((-1.0)*x1548*x1564))+(((-1.0)*x1552*x1557))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x1555*x1566))+(((-1.0)*x1545*x1563))+((x1561*x1562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x1567=(r11*(cj8*cj8));
IkReal x1568=(r11*(sj8*sj8));
IkReal x1569=(((r02*x1568))+((r02*x1567)));
IkReal x1570=(((r12*x1568))+((r12*x1567)));
CheckValue<IkReal> x1573 = IKatan2WithCheck(IkReal(x1569),x1570,IKFAST_ATAN2_MAGTHRESH);
if(!x1573.valid){
continue;
}
IkReal x1571=((-1.0)*(x1573.value));
if((((x1570*x1570)+(x1569*x1569))) < -0.00001)
continue;
CheckValue<IkReal> x1574=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1570*x1570)+(x1569*x1569)))),-1);
if(!x1574.valid){
continue;
}
if( (((x1574.value)*(((((-1.0)*(1.0)*cj8*r11*sj6))+((cj6*r11*sj8)))))) < -1-IKFAST_SINCOS_THRESH || (((x1574.value)*(((((-1.0)*(1.0)*cj8*r11*sj6))+((cj6*r11*sj8)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1572=IKasin(((x1574.value)*(((((-1.0)*(1.0)*cj8*r11*sj6))+((cj6*r11*sj8))))));
j4array[0]=((((-1.0)*x1572))+x1571);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x1572+x1571);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1575=(cj8*sj6);
IkReal x1576=IKcos(j4);
IkReal x1577=cj8*cj8;
IkReal x1578=(r01*x1577);
IkReal x1579=sj8*sj8;
IkReal x1580=(r01*x1579);
IkReal x1581=IKsin(j4);
IkReal x1582=((1.0)*cj6*sj8);
IkReal x1583=((1.0)*r10*x1577);
IkReal x1584=((1.0)*r10*x1579);
IkReal x1585=((1.0)*r00*x1577);
IkReal x1586=((1.0)*r00*x1579);
evalcond[0]=(((x1576*((((r02*x1578))+((r02*x1580))))))+(((-1.0)*r01*x1575))+((x1581*((((r12*x1580))+((r12*x1578))))))+((r01*((cj6*sj8)))));
evalcond[1]=((((-1.0)*r10*x1582))+((r10*x1575))+((x1576*(((((-1.0)*r02*x1583))+(((-1.0)*r02*x1584))))))+((x1581*(((((-1.0)*r12*x1583))+(((-1.0)*r12*x1584)))))));
evalcond[2]=((((-1.0)*r00*x1582))+((x1576*(((((-1.0)*r02*x1586))+(((-1.0)*r02*x1585))))))+((x1581*(((((-1.0)*r12*x1586))+(((-1.0)*r12*x1585))))))+((r00*x1575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x1587=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1587);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1587);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1588=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1588);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1588);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x1589=(r02*r12);
IkReal x1590=(cj4*sj4);
IkReal x1591=(((sj8*x1590*(r12*r12)))+(((2.0)*sj8*x1589*(cj4*cj4)))+(((-1.0)*sj8*x1590*(r02*r02)))+(((-1.0)*sj8*x1589)));
j9eval[0]=x1591;
j9eval[1]=IKsign(x1591);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1592=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1592);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1592);
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x1593=((1.0)*sj8);
IkReal x1594=r02*r02;
IkReal x1595=cj4*cj4;
IkReal x1596=(((sj8*x1594))+(((-1.0)*x1593*x1594*x1595))+(((-1.0)*(2.0)*cj4*r02*r12*sj4*sj8))+(((-1.0)*x1593))+((sj8*x1595*(r12*r12))));
j9eval[0]=x1596;
j9eval[1]=IKsign(x1596);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1597=((1.0)*sj8);
IkReal x1598=cj4*cj4;
IkReal x1599=(cj4*cj6);
IkReal x1600=(r01*((cj8*r02)));
IkReal x1601=((1.0)*r01);
IkReal x1602=(cj6*sj4);
IkReal x1603=(cj8*r12*x1598);
IkReal x1604=(cj4*cj8*r12*sj4);
IkReal x1605=(cj4*cj8*r02*sj4);
IkReal x1606=((1.0)*r10);
IkReal x1607=(cj8*r00*r02);
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(IKsign((((sj8*x1598*(r12*r12)))+(((-1.0)*x1597))+(((-2.0)*cj4*r02*r12*sj4*sj8))+(((r02*r02)*(((((-1.0)*x1597*x1598))+sj8)))))),-1);
if(!x1608.valid){
continue;
}
CheckValue<IkReal> x1609 = IKatan2WithCheck(IkReal((((r11*x1599))+(((-1.0)*x1601*x1604))+(((-1.0)*x1601*x1602))+x1600+(((-1.0)*x1598*x1600))+(((-1.0)*r11*x1605))+((r11*x1603)))),(((r00*x1602))+(((-1.0)*x1607))+(((-1.0)*x1603*x1606))+(((-1.0)*x1599*x1606))+((r10*x1605))+((r00*x1604))+((x1598*x1607))),IKFAST_ATAN2_MAGTHRESH);
if(!x1609.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1608.value)))+(x1609.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1610=IKsin(j9);
IkReal x1611=(r00*x1610);
IkReal x1612=(sj4*x1611);
IkReal x1613=IKcos(j9);
IkReal x1614=(r01*x1613);
IkReal x1615=(sj4*x1614);
IkReal x1616=((1.0)*cj4);
IkReal x1617=(r10*x1610);
IkReal x1618=(r11*x1613);
IkReal x1619=((1.0)*sj4);
IkReal x1620=((0.03431)*cj4);
IkReal x1621=((0.03431)*sj4);
IkReal x1622=(cj4*cj8);
IkReal x1623=((1.0)*cj8*sj4);
IkReal x1624=(cj4*sj8*x1610);
IkReal x1625=(sj4*sj8);
IkReal x1626=(r00*x1613);
IkReal x1627=((1.0)*cj4*sj8);
IkReal x1628=(r10*x1613);
IkReal x1629=(r01*x1610);
IkReal x1630=((1.0)*sj4*sj8);
IkReal x1631=((-1.0)*(((1.0)*sj6)));
IkReal x1632=(cj8*sj4);
IkReal x1633=(r11*x1610);
IkReal x1634=(r02*sj8);
IkReal x1635=(r12*sj8);
IkReal x1636=(cj4*cj8*x1610);
IkReal x1637=((1.0)*cj4*cj8);
evalcond[0]=((((-1.0)*x1616*x1618))+x1615+x1612+(((-1.0)*x1616*x1617)));
evalcond[1]=((((-1.0)*x1614*x1616))+(((-1.0)*x1617*x1619))+(((-1.0)*x1611*x1616))+(((-1.0)*x1618*x1619)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x1616))+((x1618*x1620))+(((-0.03431)*x1612))+(((-0.03431)*x1615))+((x1617*x1620))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+((x1618*x1621))+((x1614*x1620))+((x1611*x1620))+(((0.00036)*cj6))+((x1617*x1621))+(((-1.0)*px*x1616))+(((-1.0)*py*x1619)));
evalcond[4]=(((r12*x1622))+((r11*x1624))+(((-1.0)*x1627*x1628))+cj6+(((-1.0)*r02*x1623))+(((-1.0)*x1629*x1630))+((x1625*x1626)));
evalcond[5]=(((x1625*x1633))+((r01*x1624))+(((-1.0)*x1628*x1630))+((r12*x1632))+((r02*x1622))+(((-1.0)*x1626*x1627))+x1631);
evalcond[6]=(((r11*x1636))+(((-1.0)*x1616*x1635))+(((-1.0)*x1628*x1637))+(((-1.0)*x1623*x1629))+x1631+((x1626*x1632))+((sj4*x1634)));
evalcond[7]=((((-1.0)*x1619*x1635))+((x1632*x1633))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x1616*x1634))+(((-1.0)*x1623*x1628))+((r01*x1636))+(((-1.0)*x1626*x1637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1638=(cj4*sj4);
IkReal x1639=cj4*cj4;
IkReal x1640=(sj4*sj6);
IkReal x1641=(cj4*sj6);
IkReal x1642=(cj8*r01*r12);
IkReal x1643=(cj4*cj8*r12*sj4);
IkReal x1644=(cj8*r02*x1639);
IkReal x1645=(cj4*cj8*r02*sj4);
IkReal x1646=(r00*((cj8*r12)));
IkReal x1647=((1.0)*r10);
CheckValue<IkReal> x1648 = IKatan2WithCheck(IkReal((((r11*x1643))+(((-1.0)*r11*x1641))+((x1639*x1642))+((r11*x1644))+(((-1.0)*r01*x1645))+(((-1.0)*x1642))+((r01*x1640)))),(((r10*x1641))+((r00*x1645))+(((-1.0)*x1643*x1647))+(((-1.0)*r00*x1640))+(((-1.0)*x1639*x1646))+x1646+(((-1.0)*x1644*x1647))),IKFAST_ATAN2_MAGTHRESH);
if(!x1648.valid){
continue;
}
CheckValue<IkReal> x1649=IKPowWithIntegerCheck(IKsign((((sj8*x1638*(r12*r12)))+((r02*r12*(((((-1.0)*(1.0)*sj8))+(((2.0)*sj8*x1639))))))+(((-1.0)*sj8*x1638*(r02*r02))))),-1);
if(!x1649.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1648.value)+(((1.5707963267949)*(x1649.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1650=IKsin(j9);
IkReal x1651=(r00*x1650);
IkReal x1652=(sj4*x1651);
IkReal x1653=IKcos(j9);
IkReal x1654=(r01*x1653);
IkReal x1655=(sj4*x1654);
IkReal x1656=((1.0)*cj4);
IkReal x1657=(r10*x1650);
IkReal x1658=(r11*x1653);
IkReal x1659=((1.0)*sj4);
IkReal x1660=((0.03431)*cj4);
IkReal x1661=((0.03431)*sj4);
IkReal x1662=(cj4*cj8);
IkReal x1663=((1.0)*cj8*sj4);
IkReal x1664=(cj4*sj8*x1650);
IkReal x1665=(sj4*sj8);
IkReal x1666=(r00*x1653);
IkReal x1667=((1.0)*cj4*sj8);
IkReal x1668=(r10*x1653);
IkReal x1669=(r01*x1650);
IkReal x1670=((1.0)*sj4*sj8);
IkReal x1671=((-1.0)*(((1.0)*sj6)));
IkReal x1672=(cj8*sj4);
IkReal x1673=(r11*x1650);
IkReal x1674=(r02*sj8);
IkReal x1675=(r12*sj8);
IkReal x1676=(cj4*cj8*x1650);
IkReal x1677=((1.0)*cj4*cj8);
evalcond[0]=((((-1.0)*x1656*x1657))+(((-1.0)*x1656*x1658))+x1655+x1652);
evalcond[1]=((((-1.0)*x1658*x1659))+(((-1.0)*x1654*x1656))+(((-1.0)*x1657*x1659))+(((-1.0)*x1651*x1656)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x1652))+(((-0.03431)*x1655))+((x1658*x1660))+((x1657*x1660))+(((-1.0)*py*x1656))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+((x1654*x1660))+((x1658*x1661))+((x1657*x1661))+((x1651*x1660))+(((0.00036)*cj6))+(((-1.0)*py*x1659))+(((-1.0)*px*x1656)));
evalcond[4]=(((r12*x1662))+(((-1.0)*x1669*x1670))+(((-1.0)*r02*x1663))+((x1665*x1666))+cj6+((r11*x1664))+(((-1.0)*x1667*x1668)));
evalcond[5]=(x1671+((r01*x1664))+((x1665*x1673))+(((-1.0)*x1666*x1667))+((r12*x1672))+(((-1.0)*x1668*x1670))+((r02*x1662)));
evalcond[6]=(x1671+(((-1.0)*x1656*x1675))+(((-1.0)*x1668*x1677))+((x1666*x1672))+(((-1.0)*x1663*x1669))+((sj4*x1674))+((r11*x1676)));
evalcond[7]=(((x1672*x1673))+(((-1.0)*x1659*x1675))+(((-1.0)*x1656*x1674))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x1666*x1677))+(((-1.0)*x1663*x1668))+((r01*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1678=(px*r11);
IkReal x1679=((0.00036)*cj4*sj6);
IkReal x1680=((0.00036)*sj4*sj6);
IkReal x1681=(cj4*px*sj4);
IkReal x1682=(cj4*py*sj4);
IkReal x1683=cj4*cj4;
IkReal x1684=(py*x1683);
IkReal x1685=(px*r10);
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal((x1678+(((-1.0)*r11*x1682))+(((-1.0)*x1678*x1683))+(((-1.0)*r01*x1684))+((r01*x1681))+((r11*x1680))+((r01*x1679)))),(((x1683*x1685))+((r10*x1682))+(((-1.0)*x1685))+(((-1.0)*r00*x1681))+(((-1.0)*r10*x1680))+((r00*x1684))+(((-1.0)*r00*x1679))),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
CheckValue<IkReal> x1687=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1687.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1686.value)+(((1.5707963267949)*(x1687.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1688=IKsin(j9);
IkReal x1689=(r00*x1688);
IkReal x1690=(sj4*x1689);
IkReal x1691=IKcos(j9);
IkReal x1692=(r01*x1691);
IkReal x1693=(sj4*x1692);
IkReal x1694=((1.0)*cj4);
IkReal x1695=(r10*x1688);
IkReal x1696=(r11*x1691);
IkReal x1697=((1.0)*sj4);
IkReal x1698=((0.03431)*cj4);
IkReal x1699=((0.03431)*sj4);
IkReal x1700=(cj4*cj8);
IkReal x1701=((1.0)*cj8*sj4);
IkReal x1702=(cj4*sj8*x1688);
IkReal x1703=(sj4*sj8);
IkReal x1704=(r00*x1691);
IkReal x1705=((1.0)*cj4*sj8);
IkReal x1706=(r10*x1691);
IkReal x1707=(r01*x1688);
IkReal x1708=((1.0)*sj4*sj8);
IkReal x1709=((-1.0)*(((1.0)*sj6)));
IkReal x1710=(cj8*sj4);
IkReal x1711=(r11*x1688);
IkReal x1712=(r02*sj8);
IkReal x1713=(r12*sj8);
IkReal x1714=(cj4*cj8*x1688);
IkReal x1715=((1.0)*cj4*cj8);
evalcond[0]=((((-1.0)*x1694*x1695))+x1690+x1693+(((-1.0)*x1694*x1696)));
evalcond[1]=((((-1.0)*x1696*x1697))+(((-1.0)*x1692*x1694))+(((-1.0)*x1689*x1694))+(((-1.0)*x1695*x1697)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x1690))+(((-0.03431)*x1693))+(((-1.0)*py*x1694))+((x1695*x1698))+(((0.00036)*sj6))+((x1696*x1698)));
evalcond[3]=((0.00337)+((x1692*x1698))+((x1696*x1699))+(((0.00036)*cj6))+(((-1.0)*py*x1697))+((x1689*x1698))+((x1695*x1699))+(((-1.0)*px*x1694)));
evalcond[4]=(((r12*x1700))+(((-1.0)*x1707*x1708))+((x1703*x1704))+cj6+(((-1.0)*x1705*x1706))+(((-1.0)*r02*x1701))+((r11*x1702)));
evalcond[5]=((((-1.0)*x1704*x1705))+((r12*x1710))+(((-1.0)*x1706*x1708))+x1709+((r01*x1702))+((x1703*x1711))+((r02*x1700)));
evalcond[6]=(((x1704*x1710))+((sj4*x1712))+x1709+((r11*x1714))+(((-1.0)*x1694*x1713))+(((-1.0)*x1706*x1715))+(((-1.0)*x1701*x1707)));
evalcond[7]=((((-1.0)*x1704*x1715))+((x1710*x1711))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x1694*x1712))+(((-1.0)*x1701*x1706))+((r01*x1714))+(((-1.0)*x1697*x1713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
evalcond[1]=-1.0;
evalcond[2]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
j8array[0]=-1.5707963267949;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j4eval[2];
IkReal x1716=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1716);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1716);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x1717=r02*r02;
IkReal x1718=r00*r00;
IkReal x1719=(x1718*(cj8*cj8*cj8*cj8));
IkReal x1720=r12*r12;
IkReal x1721=(x1718*(sj8*sj8*sj8*sj8));
IkReal x1722=cj8*cj8;
IkReal x1723=sj8*sj8;
IkReal x1724=((2.0)*x1718*x1722*x1723);
IkReal x1725=(r00*x1722);
IkReal x1726=(r00*x1723);
j4eval[0]=(((x1717*x1721))+((x1720*x1724))+((x1717*x1719))+((x1717*x1724))+((x1720*x1721))+((x1719*x1720)));
j4eval[1]=((IKabs((((r02*x1725))+((r02*x1726)))))+(IKabs((((r12*x1726))+((r12*x1725))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1727=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1727);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1727);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x1728=r02*r02;
IkReal x1729=r01*r01;
IkReal x1730=(x1729*(cj8*cj8*cj8*cj8));
IkReal x1731=r12*r12;
IkReal x1732=(x1729*(sj8*sj8*sj8*sj8));
IkReal x1733=cj8*cj8;
IkReal x1734=sj8*sj8;
IkReal x1735=((2.0)*x1729*x1733*x1734);
IkReal x1736=(r01*x1733);
IkReal x1737=(r01*x1734);
j4eval[0]=(((x1728*x1730))+((x1731*x1735))+((x1728*x1732))+((x1730*x1731))+((x1731*x1732))+((x1728*x1735)));
j4eval[1]=((IKabs((((r02*x1737))+((r02*x1736)))))+(IKabs((((r12*x1736))+((r12*x1737))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1738=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1738);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1738);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x1739=r02*r02;
IkReal x1740=r10*r10;
IkReal x1741=(x1740*(cj8*cj8*cj8*cj8));
IkReal x1742=r12*r12;
IkReal x1743=(x1740*(sj8*sj8*sj8*sj8));
IkReal x1744=cj8*cj8;
IkReal x1745=sj8*sj8;
IkReal x1746=((2.0)*x1740*x1744*x1745);
IkReal x1747=(r10*x1744);
IkReal x1748=(r10*x1745);
j4eval[0]=(((x1739*x1746))+((x1739*x1741))+((x1739*x1743))+((x1742*x1746))+((x1741*x1742))+((x1742*x1743)));
j4eval[1]=((IKabs((((r02*x1747))+((r02*x1748)))))+(IKabs((((r12*x1747))+((r12*x1748))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x1749=cj8*cj8;
IkReal x1750=((1.0)*r10*r12);
IkReal x1751=sj8*sj8;
IkReal x1752=((((-1.0)*x1749*x1750))+(((-1.0)*x1750*x1751)));
IkReal x1753=(r02*r10);
IkReal x1754=(((x1749*x1753))+((x1751*x1753)));
CheckValue<IkReal> x1757 = IKatan2WithCheck(IkReal(x1752),x1754,IKFAST_ATAN2_MAGTHRESH);
if(!x1757.valid){
continue;
}
IkReal x1755=((-1.0)*(x1757.value));
if((((x1752*x1752)+(x1754*x1754))) < -0.00001)
continue;
CheckValue<IkReal> x1758=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1752*x1752)+(x1754*x1754)))),-1);
if(!x1758.valid){
continue;
}
if( (((x1758.value)*((((cj6*cj8*r10))+(((-1.0)*r10*sj6*sj8)))))) < -1-IKFAST_SINCOS_THRESH || (((x1758.value)*((((cj6*cj8*r10))+(((-1.0)*r10*sj6*sj8)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1756=IKasin(((x1758.value)*((((cj6*cj8*r10))+(((-1.0)*r10*sj6*sj8))))));
j4array[0]=((((-1.0)*x1756))+x1755);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x1755+x1756);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1759=(sj6*sj8);
IkReal x1760=((1.0)*cj6*cj8);
IkReal x1761=IKcos(j4);
IkReal x1762=cj8*cj8;
IkReal x1763=(r12*x1762);
IkReal x1764=sj8*sj8;
IkReal x1765=(r12*x1764);
IkReal x1766=IKsin(j4);
IkReal x1767=((1.0)*r02*x1762);
IkReal x1768=((1.0)*r02*x1764);
IkReal x1769=((1.0)*r01);
IkReal x1770=(r01*r02);
evalcond[0]=(((x1761*((((r00*x1763))+((r00*x1765))))))+((x1766*(((((-1.0)*r00*x1768))+(((-1.0)*r00*x1767))))))+(((-1.0)*r00*x1760))+((r00*x1759)));
evalcond[1]=(((r01*((cj6*cj8))))+(((-1.0)*x1759*x1769))+((x1766*((((x1762*x1770))+((x1764*x1770))))))+((x1761*(((((-1.0)*x1763*x1769))+(((-1.0)*x1765*x1769)))))));
evalcond[2]=((((-1.0)*r11*x1760))+((r11*x1759))+((x1766*(((((-1.0)*r11*x1768))+(((-1.0)*r11*x1767))))))+((x1761*((((r11*x1765))+((r11*x1763)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x1771=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1771);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1771);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1772=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1772);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1772);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x1773=(r02*r12);
IkReal x1774=(cj4*sj4);
IkReal x1775=(((sj8*x1774*(r12*r12)))+(((2.0)*sj8*x1773*(cj4*cj4)))+(((-1.0)*sj8*x1774*(r02*r02)))+(((-1.0)*sj8*x1773)));
j9eval[0]=x1775;
j9eval[1]=IKsign(x1775);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1776=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1776);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1776);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x1777=(r02*r12);
IkReal x1778=(cj4*sj4);
IkReal x1779=((((-1.0)*cj8*x1777))+(((-1.0)*cj8*x1778*(r02*r02)))+(((2.0)*cj8*x1777*(cj4*cj4)))+((cj8*x1778*(r12*r12))));
j9eval[0]=x1779;
j9eval[1]=IKsign(x1779);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1780=(cj4*sj4);
IkReal x1781=cj4*cj4;
IkReal x1782=(cj4*cj6);
IkReal x1783=(r01*((r12*sj8)));
IkReal x1784=(cj6*sj4);
IkReal x1785=(cj4*r02*sj4*sj8);
IkReal x1786=((1.0)*r11);
IkReal x1787=(cj4*r12*sj4*sj8);
IkReal x1788=(r02*sj8*x1781);
IkReal x1789=(r00*r12*sj8);
CheckValue<IkReal> x1790=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj8*x1780*(r02*r02)))+((r02*r12*(((((2.0)*cj8*x1781))+(((-1.0)*(1.0)*cj8))))))+((cj8*x1780*(r12*r12))))),-1);
if(!x1790.valid){
continue;
}
CheckValue<IkReal> x1791 = IKatan2WithCheck(IkReal((((r11*x1782))+(((-1.0)*x1786*x1788))+(((-1.0)*x1781*x1783))+(((-1.0)*x1786*x1787))+x1783+((r01*x1785))+(((-1.0)*r01*x1784)))),((((-1.0)*r10*x1782))+(((-1.0)*x1789))+((x1781*x1789))+((r00*x1784))+((r10*x1787))+((r10*x1788))+(((-1.0)*r00*x1785))),IKFAST_ATAN2_MAGTHRESH);
if(!x1791.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1790.value)))+(x1791.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1792=IKsin(j9);
IkReal x1793=(r00*x1792);
IkReal x1794=(sj4*x1793);
IkReal x1795=IKcos(j9);
IkReal x1796=(r01*x1795);
IkReal x1797=(sj4*x1796);
IkReal x1798=((1.0)*cj4);
IkReal x1799=(r10*x1792);
IkReal x1800=(r11*x1795);
IkReal x1801=((1.0)*sj4);
IkReal x1802=((0.03431)*cj4);
IkReal x1803=((0.03431)*sj4);
IkReal x1804=((-1.0)*(((1.0)*sj6)));
IkReal x1805=(cj4*cj8);
IkReal x1806=(cj8*sj4);
IkReal x1807=(cj4*sj8*x1792);
IkReal x1808=(sj4*sj8);
IkReal x1809=(r11*x1792);
IkReal x1810=((1.0)*cj4*sj8);
IkReal x1811=(r00*x1795);
IkReal x1812=(r10*x1795);
IkReal x1813=((1.0)*sj4*sj8);
IkReal x1814=(r02*sj8);
IkReal x1815=(r12*sj8);
IkReal x1816=(cj4*cj8*x1792);
IkReal x1817=((1.0)*cj4*cj8);
IkReal x1818=((1.0)*cj8*sj4);
IkReal x1819=(r01*x1792);
evalcond[0]=((((-1.0)*x1798*x1799))+(((-1.0)*x1798*x1800))+x1797+x1794);
evalcond[1]=((((-1.0)*x1793*x1798))+(((-1.0)*x1796*x1798))+(((-1.0)*x1799*x1801))+(((-1.0)*x1800*x1801)));
evalcond[2]=(((px*sj4))+(((-1.0)*(0.00036)*sj6))+((x1800*x1802))+(((-1.0)*py*x1798))+((x1799*x1802))+(((-0.03431)*x1797))+(((-0.03431)*x1794)));
evalcond[3]=((0.00337)+((x1799*x1803))+((x1796*x1802))+((x1800*x1803))+(((0.00036)*cj6))+(((-1.0)*px*x1798))+(((-1.0)*py*x1801))+((x1793*x1802)));
evalcond[4]=(((r12*x1806))+((r01*x1807))+x1804+((x1808*x1809))+(((-1.0)*x1810*x1811))+((r02*x1805))+(((-1.0)*x1812*x1813)));
evalcond[5]=((((-1.0)*x1811*x1817))+(((-1.0)*x1801*x1815))+((r01*x1816))+(((-1.0)*x1812*x1818))+((x1806*x1809))+cj6+(((-1.0)*x1798*x1814)));
evalcond[6]=(((r11*x1807))+(((-1.0)*x1813*x1819))+(((-1.0)*(1.0)*cj6))+(((-1.0)*r02*x1818))+((r12*x1805))+((x1808*x1811))+(((-1.0)*x1810*x1812)));
evalcond[7]=(((sj4*x1814))+(((-1.0)*x1812*x1817))+((x1806*x1811))+x1804+(((-1.0)*x1798*x1815))+((r11*x1816))+(((-1.0)*x1818*x1819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1820=(cj4*sj4);
IkReal x1821=cj4*cj4;
IkReal x1822=(sj4*sj6);
IkReal x1823=(cj4*sj6);
IkReal x1824=(cj8*r01*r12);
IkReal x1825=(cj4*cj8*r12*sj4);
IkReal x1826=(cj8*r02*x1821);
IkReal x1827=(cj4*cj8*r02*sj4);
IkReal x1828=(r00*((cj8*r12)));
IkReal x1829=((1.0)*r10);
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal((((r11*x1825))+((x1821*x1824))+(((-1.0)*r11*x1823))+(((-1.0)*x1824))+(((-1.0)*r01*x1827))+((r11*x1826))+((r01*x1822)))),((((-1.0)*r00*x1822))+x1828+(((-1.0)*x1825*x1829))+((r00*x1827))+((r10*x1823))+(((-1.0)*x1826*x1829))+(((-1.0)*x1821*x1828))),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
CheckValue<IkReal> x1831=IKPowWithIntegerCheck(IKsign((((r02*r12*(((((-1.0)*(1.0)*sj8))+(((2.0)*sj8*x1821))))))+(((-1.0)*sj8*x1820*(r02*r02)))+((sj8*x1820*(r12*r12))))),-1);
if(!x1831.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1830.value)+(((1.5707963267949)*(x1831.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1832=IKsin(j9);
IkReal x1833=(r00*x1832);
IkReal x1834=(sj4*x1833);
IkReal x1835=IKcos(j9);
IkReal x1836=(r01*x1835);
IkReal x1837=(sj4*x1836);
IkReal x1838=((1.0)*cj4);
IkReal x1839=(r10*x1832);
IkReal x1840=(r11*x1835);
IkReal x1841=((1.0)*sj4);
IkReal x1842=((0.03431)*cj4);
IkReal x1843=((0.03431)*sj4);
IkReal x1844=((-1.0)*(((1.0)*sj6)));
IkReal x1845=(cj4*cj8);
IkReal x1846=(cj8*sj4);
IkReal x1847=(cj4*sj8*x1832);
IkReal x1848=(sj4*sj8);
IkReal x1849=(r11*x1832);
IkReal x1850=((1.0)*cj4*sj8);
IkReal x1851=(r00*x1835);
IkReal x1852=(r10*x1835);
IkReal x1853=((1.0)*sj4*sj8);
IkReal x1854=(r02*sj8);
IkReal x1855=(r12*sj8);
IkReal x1856=(cj4*cj8*x1832);
IkReal x1857=((1.0)*cj4*cj8);
IkReal x1858=((1.0)*cj8*sj4);
IkReal x1859=(r01*x1832);
evalcond[0]=((((-1.0)*x1838*x1840))+(((-1.0)*x1838*x1839))+x1837+x1834);
evalcond[1]=((((-1.0)*x1836*x1838))+(((-1.0)*x1839*x1841))+(((-1.0)*x1840*x1841))+(((-1.0)*x1833*x1838)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x1834))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x1837))+(((-1.0)*py*x1838))+((x1840*x1842))+((x1839*x1842)));
evalcond[3]=((0.00337)+((x1839*x1843))+(((-1.0)*py*x1841))+((x1833*x1842))+(((0.00036)*cj6))+((x1840*x1843))+(((-1.0)*px*x1838))+((x1836*x1842)));
evalcond[4]=((((-1.0)*x1852*x1853))+((r01*x1847))+((r02*x1845))+x1844+((x1848*x1849))+((r12*x1846))+(((-1.0)*x1850*x1851)));
evalcond[5]=(((x1846*x1849))+(((-1.0)*x1838*x1854))+cj6+((r01*x1856))+(((-1.0)*x1851*x1857))+(((-1.0)*x1852*x1858))+(((-1.0)*x1841*x1855)));
evalcond[6]=((((-1.0)*x1853*x1859))+((r11*x1847))+(((-1.0)*(1.0)*cj6))+(((-1.0)*r02*x1858))+((r12*x1845))+((x1848*x1851))+(((-1.0)*x1850*x1852)));
evalcond[7]=(((r11*x1856))+x1844+((x1846*x1851))+((sj4*x1854))+(((-1.0)*x1838*x1855))+(((-1.0)*x1858*x1859))+(((-1.0)*x1852*x1857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1860=(px*r11);
IkReal x1861=((0.00036)*cj4*sj6);
IkReal x1862=((0.00036)*sj4*sj6);
IkReal x1863=(cj4*px*sj4);
IkReal x1864=(cj4*py*sj4);
IkReal x1865=cj4*cj4;
IkReal x1866=(py*x1865);
IkReal x1867=(px*r10);
CheckValue<IkReal> x1868 = IKatan2WithCheck(IkReal((((r01*x1863))+(((-1.0)*r01*x1866))+x1860+(((-1.0)*r01*x1861))+(((-1.0)*r11*x1862))+(((-1.0)*r11*x1864))+(((-1.0)*x1860*x1865)))),(((r00*x1861))+((r10*x1864))+((r10*x1862))+((r00*x1866))+(((-1.0)*x1867))+((x1865*x1867))+(((-1.0)*r00*x1863))),IKFAST_ATAN2_MAGTHRESH);
if(!x1868.valid){
continue;
}
CheckValue<IkReal> x1869=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1869.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1868.value)+(((1.5707963267949)*(x1869.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1870=IKsin(j9);
IkReal x1871=(r00*x1870);
IkReal x1872=(sj4*x1871);
IkReal x1873=IKcos(j9);
IkReal x1874=(r01*x1873);
IkReal x1875=(sj4*x1874);
IkReal x1876=((1.0)*cj4);
IkReal x1877=(r10*x1870);
IkReal x1878=(r11*x1873);
IkReal x1879=((1.0)*sj4);
IkReal x1880=((0.03431)*cj4);
IkReal x1881=((0.03431)*sj4);
IkReal x1882=((-1.0)*(((1.0)*sj6)));
IkReal x1883=(cj4*cj8);
IkReal x1884=(cj8*sj4);
IkReal x1885=(cj4*sj8*x1870);
IkReal x1886=(sj4*sj8);
IkReal x1887=(r11*x1870);
IkReal x1888=((1.0)*cj4*sj8);
IkReal x1889=(r00*x1873);
IkReal x1890=(r10*x1873);
IkReal x1891=((1.0)*sj4*sj8);
IkReal x1892=(r02*sj8);
IkReal x1893=(r12*sj8);
IkReal x1894=(cj4*cj8*x1870);
IkReal x1895=((1.0)*cj4*cj8);
IkReal x1896=((1.0)*cj8*sj4);
IkReal x1897=(r01*x1870);
evalcond[0]=((((-1.0)*x1876*x1877))+(((-1.0)*x1876*x1878))+x1872+x1875);
evalcond[1]=((((-1.0)*x1877*x1879))+(((-1.0)*x1874*x1876))+(((-1.0)*x1871*x1876))+(((-1.0)*x1878*x1879)));
evalcond[2]=((((-0.03431)*x1875))+((px*sj4))+(((-1.0)*(0.00036)*sj6))+((x1878*x1880))+((x1877*x1880))+(((-0.03431)*x1872))+(((-1.0)*py*x1876)));
evalcond[3]=((0.00337)+((x1877*x1881))+(((-1.0)*py*x1879))+((x1874*x1880))+(((0.00036)*cj6))+(((-1.0)*px*x1876))+((x1871*x1880))+((x1878*x1881)));
evalcond[4]=((((-1.0)*x1890*x1891))+((x1886*x1887))+((r01*x1885))+((r12*x1884))+x1882+((r02*x1883))+(((-1.0)*x1888*x1889)));
evalcond[5]=((((-1.0)*x1876*x1892))+(((-1.0)*x1889*x1895))+(((-1.0)*x1890*x1896))+((r01*x1894))+cj6+((x1884*x1887))+(((-1.0)*x1879*x1893)));
evalcond[6]=(((r11*x1885))+((x1886*x1889))+(((-1.0)*(1.0)*cj6))+((r12*x1883))+(((-1.0)*r02*x1896))+(((-1.0)*x1891*x1897))+(((-1.0)*x1888*x1890)));
evalcond[7]=((((-1.0)*x1890*x1895))+((x1884*x1889))+(((-1.0)*x1896*x1897))+(((-1.0)*x1876*x1893))+x1882+((r11*x1894))+((sj4*x1892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x1898=cj8*cj8;
IkReal x1899=((1.0)*r01*r12);
IkReal x1900=sj8*sj8;
IkReal x1901=((((-1.0)*x1898*x1899))+(((-1.0)*x1899*x1900)));
IkReal x1902=(r01*r02);
IkReal x1903=(((x1898*x1902))+((x1900*x1902)));
CheckValue<IkReal> x1906 = IKatan2WithCheck(IkReal(x1901),x1903,IKFAST_ATAN2_MAGTHRESH);
if(!x1906.valid){
continue;
}
IkReal x1904=((-1.0)*(x1906.value));
if((((x1901*x1901)+(x1903*x1903))) < -0.00001)
continue;
CheckValue<IkReal> x1907=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1901*x1901)+(x1903*x1903)))),-1);
if(!x1907.valid){
continue;
}
if( (((x1907.value)*(((((-1.0)*r01*sj6*sj8))+((cj6*cj8*r01)))))) < -1-IKFAST_SINCOS_THRESH || (((x1907.value)*(((((-1.0)*r01*sj6*sj8))+((cj6*cj8*r01)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1905=IKasin(((x1907.value)*(((((-1.0)*r01*sj6*sj8))+((cj6*cj8*r01))))));
j4array[0]=(x1904+(((-1.0)*x1905)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x1905+x1904);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1908=(sj6*sj8);
IkReal x1909=((1.0)*cj6*cj8);
IkReal x1910=IKcos(j4);
IkReal x1911=cj8*cj8;
IkReal x1912=(r12*x1911);
IkReal x1913=sj8*sj8;
IkReal x1914=(r12*x1913);
IkReal x1915=IKsin(j4);
IkReal x1916=((1.0)*r02*x1911);
IkReal x1917=((1.0)*r02*x1913);
IkReal x1918=((1.0)*r10);
IkReal x1919=(r02*r10);
evalcond[0]=((((-1.0)*r00*x1909))+((x1915*(((((-1.0)*r00*x1916))+(((-1.0)*r00*x1917))))))+((r00*x1908))+((x1910*((((r00*x1912))+((r00*x1914)))))));
evalcond[1]=(((x1910*(((((-1.0)*x1914*x1918))+(((-1.0)*x1912*x1918))))))+(((-1.0)*x1908*x1918))+((x1915*((((x1913*x1919))+((x1911*x1919))))))+((r10*((cj6*cj8)))));
evalcond[2]=((((-1.0)*r11*x1909))+((x1910*((((r11*x1912))+((r11*x1914))))))+((x1915*(((((-1.0)*r11*x1916))+(((-1.0)*r11*x1917))))))+((r11*x1908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x1920=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1920);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1920);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1921=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1921);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1921);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x1922=(r02*r12);
IkReal x1923=(cj4*sj4);
IkReal x1924=((((-1.0)*sj8*x1923*(r02*r02)))+(((2.0)*sj8*x1922*(cj4*cj4)))+((sj8*x1923*(r12*r12)))+(((-1.0)*sj8*x1922)));
j9eval[0]=x1924;
j9eval[1]=IKsign(x1924);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x1925=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x1925);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x1925);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x1926=(r02*r12);
IkReal x1927=(cj4*sj4);
IkReal x1928=((((-1.0)*cj8*x1926))+((cj8*x1927*(r12*r12)))+(((-1.0)*cj8*x1927*(r02*r02)))+(((2.0)*cj8*x1926*(cj4*cj4))));
j9eval[0]=x1928;
j9eval[1]=IKsign(x1928);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1929=(cj4*sj4);
IkReal x1930=cj4*cj4;
IkReal x1931=(cj4*cj6);
IkReal x1932=(r01*((r12*sj8)));
IkReal x1933=(cj6*sj4);
IkReal x1934=(cj4*r02*sj4*sj8);
IkReal x1935=((1.0)*r11);
IkReal x1936=(cj4*r12*sj4*sj8);
IkReal x1937=(r02*sj8*x1930);
IkReal x1938=(r00*r12*sj8);
CheckValue<IkReal> x1939=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj8*x1929*(r02*r02)))+((cj8*x1929*(r12*r12)))+((r02*r12*(((((2.0)*cj8*x1930))+(((-1.0)*(1.0)*cj8)))))))),-1);
if(!x1939.valid){
continue;
}
CheckValue<IkReal> x1940 = IKatan2WithCheck(IkReal(((((-1.0)*x1930*x1932))+(((-1.0)*r01*x1933))+(((-1.0)*x1935*x1936))+x1932+((r01*x1934))+(((-1.0)*x1935*x1937))+((r11*x1931)))),((((-1.0)*r00*x1934))+((x1930*x1938))+((r10*x1936))+(((-1.0)*x1938))+((r00*x1933))+((r10*x1937))+(((-1.0)*r10*x1931))),IKFAST_ATAN2_MAGTHRESH);
if(!x1940.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1939.value)))+(x1940.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1941=IKsin(j9);
IkReal x1942=(r00*x1941);
IkReal x1943=(sj4*x1942);
IkReal x1944=IKcos(j9);
IkReal x1945=(r01*x1944);
IkReal x1946=(sj4*x1945);
IkReal x1947=((1.0)*cj4);
IkReal x1948=(r10*x1941);
IkReal x1949=(r11*x1944);
IkReal x1950=((1.0)*sj4);
IkReal x1951=((0.03431)*cj4);
IkReal x1952=((0.03431)*sj4);
IkReal x1953=((-1.0)*(((1.0)*sj6)));
IkReal x1954=(cj4*cj8);
IkReal x1955=(cj8*sj4);
IkReal x1956=(cj4*sj8*x1941);
IkReal x1957=(sj4*sj8);
IkReal x1958=(r11*x1941);
IkReal x1959=((1.0)*cj4*sj8);
IkReal x1960=(r00*x1944);
IkReal x1961=(r10*x1944);
IkReal x1962=((1.0)*sj4*sj8);
IkReal x1963=(r02*sj8);
IkReal x1964=(r12*sj8);
IkReal x1965=(cj4*cj8*x1941);
IkReal x1966=((1.0)*cj4*cj8);
IkReal x1967=((1.0)*cj8*sj4);
IkReal x1968=(r01*x1941);
evalcond[0]=(x1946+x1943+(((-1.0)*x1947*x1949))+(((-1.0)*x1947*x1948)));
evalcond[1]=((((-1.0)*x1942*x1947))+(((-1.0)*x1945*x1947))+(((-1.0)*x1948*x1950))+(((-1.0)*x1949*x1950)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x1943))+((x1949*x1951))+(((-0.03431)*x1946))+(((-1.0)*(0.00036)*sj6))+(((-1.0)*py*x1947))+((x1948*x1951)));
evalcond[3]=((0.00337)+(((-1.0)*py*x1950))+(((-1.0)*px*x1947))+((x1945*x1951))+((x1942*x1951))+((x1949*x1952))+(((0.00036)*cj6))+((x1948*x1952)));
evalcond[4]=((((-1.0)*x1961*x1962))+(((-1.0)*x1959*x1960))+((r01*x1956))+((r12*x1955))+x1953+((x1957*x1958))+((r02*x1954)));
evalcond[5]=(((x1955*x1958))+(((-1.0)*x1950*x1964))+(((-1.0)*x1961*x1967))+(((-1.0)*x1947*x1963))+(((-1.0)*x1960*x1966))+cj6+((r01*x1965)));
evalcond[6]=((((-1.0)*x1959*x1961))+(((-1.0)*(1.0)*cj6))+((x1957*x1960))+((r11*x1956))+(((-1.0)*x1962*x1968))+(((-1.0)*r02*x1967))+((r12*x1954)));
evalcond[7]=((((-1.0)*x1967*x1968))+(((-1.0)*x1961*x1966))+((sj4*x1963))+((r11*x1965))+(((-1.0)*x1947*x1964))+x1953+((x1955*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1969=(cj4*sj4);
IkReal x1970=cj4*cj4;
IkReal x1971=(sj4*sj6);
IkReal x1972=(cj4*sj6);
IkReal x1973=(cj8*r01*r12);
IkReal x1974=(cj4*cj8*r12*sj4);
IkReal x1975=(cj8*r02*x1970);
IkReal x1976=(cj4*cj8*r02*sj4);
IkReal x1977=(r00*((cj8*r12)));
IkReal x1978=((1.0)*r10);
CheckValue<IkReal> x1979 = IKatan2WithCheck(IkReal((((r01*x1971))+(((-1.0)*r11*x1972))+(((-1.0)*x1973))+((x1970*x1973))+((r11*x1974))+(((-1.0)*r01*x1976))+((r11*x1975)))),((((-1.0)*x1975*x1978))+((r10*x1972))+(((-1.0)*x1974*x1978))+(((-1.0)*r00*x1971))+((r00*x1976))+(((-1.0)*x1970*x1977))+x1977),IKFAST_ATAN2_MAGTHRESH);
if(!x1979.valid){
continue;
}
CheckValue<IkReal> x1980=IKPowWithIntegerCheck(IKsign((((sj8*x1969*(r12*r12)))+(((-1.0)*sj8*x1969*(r02*r02)))+((r02*r12*(((((-1.0)*(1.0)*sj8))+(((2.0)*sj8*x1970)))))))),-1);
if(!x1980.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1979.value)+(((1.5707963267949)*(x1980.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1981=IKsin(j9);
IkReal x1982=(r00*x1981);
IkReal x1983=(sj4*x1982);
IkReal x1984=IKcos(j9);
IkReal x1985=(r01*x1984);
IkReal x1986=(sj4*x1985);
IkReal x1987=((1.0)*cj4);
IkReal x1988=(r10*x1981);
IkReal x1989=(r11*x1984);
IkReal x1990=((1.0)*sj4);
IkReal x1991=((0.03431)*cj4);
IkReal x1992=((0.03431)*sj4);
IkReal x1993=((-1.0)*(((1.0)*sj6)));
IkReal x1994=(cj4*cj8);
IkReal x1995=(cj8*sj4);
IkReal x1996=(cj4*sj8*x1981);
IkReal x1997=(sj4*sj8);
IkReal x1998=(r11*x1981);
IkReal x1999=((1.0)*cj4*sj8);
IkReal x2000=(r00*x1984);
IkReal x2001=(r10*x1984);
IkReal x2002=((1.0)*sj4*sj8);
IkReal x2003=(r02*sj8);
IkReal x2004=(r12*sj8);
IkReal x2005=(cj4*cj8*x1981);
IkReal x2006=((1.0)*cj4*cj8);
IkReal x2007=((1.0)*cj8*sj4);
IkReal x2008=(r01*x1981);
evalcond[0]=(x1983+x1986+(((-1.0)*x1987*x1988))+(((-1.0)*x1987*x1989)));
evalcond[1]=((((-1.0)*x1982*x1987))+(((-1.0)*x1988*x1990))+(((-1.0)*x1985*x1987))+(((-1.0)*x1989*x1990)));
evalcond[2]=(((px*sj4))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x1983))+((x1989*x1991))+((x1988*x1991))+(((-0.03431)*x1986))+(((-1.0)*py*x1987)));
evalcond[3]=((0.00337)+((x1982*x1991))+(((0.00036)*cj6))+((x1989*x1992))+(((-1.0)*py*x1990))+((x1985*x1991))+((x1988*x1992))+(((-1.0)*px*x1987)));
evalcond[4]=(x1993+((r12*x1995))+((x1997*x1998))+((r02*x1994))+(((-1.0)*x2001*x2002))+(((-1.0)*x1999*x2000))+((r01*x1996)));
evalcond[5]=((((-1.0)*x2000*x2006))+((x1995*x1998))+((r01*x2005))+cj6+(((-1.0)*x2001*x2007))+(((-1.0)*x1990*x2004))+(((-1.0)*x1987*x2003)));
evalcond[6]=(((r11*x1996))+((x1997*x2000))+(((-1.0)*(1.0)*cj6))+((r12*x1994))+(((-1.0)*x1999*x2001))+(((-1.0)*r02*x2007))+(((-1.0)*x2002*x2008)));
evalcond[7]=(((sj4*x2003))+x1993+((r11*x2005))+((x1995*x2000))+(((-1.0)*x2001*x2006))+(((-1.0)*x2007*x2008))+(((-1.0)*x1987*x2004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2009=(px*r11);
IkReal x2010=((0.00036)*cj4*sj6);
IkReal x2011=((0.00036)*sj4*sj6);
IkReal x2012=(cj4*px*sj4);
IkReal x2013=(cj4*py*sj4);
IkReal x2014=cj4*cj4;
IkReal x2015=(py*x2014);
IkReal x2016=(px*r10);
CheckValue<IkReal> x2017=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2017.valid){
continue;
}
CheckValue<IkReal> x2018 = IKatan2WithCheck(IkReal(((((-1.0)*x2009*x2014))+(((-1.0)*r11*x2013))+x2009+(((-1.0)*r01*x2010))+((r01*x2012))+(((-1.0)*r01*x2015))+(((-1.0)*r11*x2011)))),(((x2014*x2016))+((r00*x2015))+(((-1.0)*r00*x2012))+(((-1.0)*x2016))+((r10*x2013))+((r10*x2011))+((r00*x2010))),IKFAST_ATAN2_MAGTHRESH);
if(!x2018.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2017.value)))+(x2018.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2019=IKsin(j9);
IkReal x2020=(r00*x2019);
IkReal x2021=(sj4*x2020);
IkReal x2022=IKcos(j9);
IkReal x2023=(r01*x2022);
IkReal x2024=(sj4*x2023);
IkReal x2025=((1.0)*cj4);
IkReal x2026=(r10*x2019);
IkReal x2027=(r11*x2022);
IkReal x2028=((1.0)*sj4);
IkReal x2029=((0.03431)*cj4);
IkReal x2030=((0.03431)*sj4);
IkReal x2031=((-1.0)*(((1.0)*sj6)));
IkReal x2032=(cj4*cj8);
IkReal x2033=(cj8*sj4);
IkReal x2034=(cj4*sj8*x2019);
IkReal x2035=(sj4*sj8);
IkReal x2036=(r11*x2019);
IkReal x2037=((1.0)*cj4*sj8);
IkReal x2038=(r00*x2022);
IkReal x2039=(r10*x2022);
IkReal x2040=((1.0)*sj4*sj8);
IkReal x2041=(r02*sj8);
IkReal x2042=(r12*sj8);
IkReal x2043=(cj4*cj8*x2019);
IkReal x2044=((1.0)*cj4*cj8);
IkReal x2045=((1.0)*cj8*sj4);
IkReal x2046=(r01*x2019);
evalcond[0]=((((-1.0)*x2025*x2026))+x2021+x2024+(((-1.0)*x2025*x2027)));
evalcond[1]=((((-1.0)*x2023*x2025))+(((-1.0)*x2020*x2025))+(((-1.0)*x2026*x2028))+(((-1.0)*x2027*x2028)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x2021))+((x2026*x2029))+(((-1.0)*py*x2025))+(((-1.0)*(0.00036)*sj6))+((x2027*x2029))+(((-0.03431)*x2024)));
evalcond[3]=((0.00337)+((x2023*x2029))+(((-1.0)*py*x2028))+((x2027*x2030))+(((0.00036)*cj6))+((x2020*x2029))+(((-1.0)*px*x2025))+((x2026*x2030)));
evalcond[4]=(((r01*x2034))+((x2035*x2036))+(((-1.0)*x2039*x2040))+(((-1.0)*x2037*x2038))+((r02*x2032))+x2031+((r12*x2033)));
evalcond[5]=((((-1.0)*x2038*x2044))+(((-1.0)*x2039*x2045))+((x2033*x2036))+((r01*x2043))+(((-1.0)*x2028*x2042))+(((-1.0)*x2025*x2041))+cj6);
evalcond[6]=((((-1.0)*r02*x2045))+(((-1.0)*(1.0)*cj6))+((r12*x2032))+((r11*x2034))+(((-1.0)*x2040*x2046))+(((-1.0)*x2037*x2039))+((x2035*x2038)));
evalcond[7]=((((-1.0)*x2039*x2044))+((x2033*x2038))+(((-1.0)*x2025*x2042))+((r11*x2043))+x2031+((sj4*x2041))+(((-1.0)*x2045*x2046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x2047=cj8*cj8;
IkReal x2048=(r00*r12);
IkReal x2049=sj8*sj8;
IkReal x2050=(((x2047*x2048))+((x2048*x2049)));
IkReal x2051=((1.0)*r00*r02);
IkReal x2052=((((-1.0)*x2047*x2051))+(((-1.0)*x2049*x2051)));
CheckValue<IkReal> x2055 = IKatan2WithCheck(IkReal(x2050),x2052,IKFAST_ATAN2_MAGTHRESH);
if(!x2055.valid){
continue;
}
IkReal x2053=((-1.0)*(x2055.value));
if((((x2050*x2050)+(x2052*x2052))) < -0.00001)
continue;
CheckValue<IkReal> x2056=IKPowWithIntegerCheck(IKabs(IKsqrt(((x2050*x2050)+(x2052*x2052)))),-1);
if(!x2056.valid){
continue;
}
if( (((x2056.value)*((((r00*sj6*sj8))+(((-1.0)*cj6*cj8*r00)))))) < -1-IKFAST_SINCOS_THRESH || (((x2056.value)*((((r00*sj6*sj8))+(((-1.0)*cj6*cj8*r00)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2054=IKasin(((x2056.value)*((((r00*sj6*sj8))+(((-1.0)*cj6*cj8*r00))))));
j4array[0]=(x2053+(((-1.0)*x2054)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x2054+x2053);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2057=(cj6*cj8);
IkReal x2058=((1.0)*sj6*sj8);
IkReal x2059=IKsin(j4);
IkReal x2060=cj8*cj8;
IkReal x2061=(r02*x2060);
IkReal x2062=sj8*sj8;
IkReal x2063=(r02*x2062);
IkReal x2064=IKcos(j4);
IkReal x2065=((1.0)*r12*x2060);
IkReal x2066=((1.0)*r12*x2062);
IkReal x2067=((1.0)*r11);
IkReal x2068=(r11*r12);
evalcond[0]=((((-1.0)*r01*x2058))+((x2064*(((((-1.0)*r01*x2065))+(((-1.0)*r01*x2066))))))+((x2059*((((r01*x2063))+((r01*x2061))))))+((r01*x2057)));
evalcond[1]=(((x2064*(((((-1.0)*r10*x2066))+(((-1.0)*r10*x2065))))))+((x2059*((((r10*x2061))+((r10*x2063))))))+((r10*x2057))+(((-1.0)*r10*x2058)));
evalcond[2]=(((x2059*(((((-1.0)*x2061*x2067))+(((-1.0)*x2063*x2067))))))+(((-1.0)*x2057*x2067))+((r11*((sj6*sj8))))+((x2064*((((x2060*x2068))+((x2062*x2068)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x2069=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2069);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2069);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2070=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2070);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2070);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x2071=(r02*r12);
IkReal x2072=(cj4*sj4);
IkReal x2073=((((2.0)*sj8*x2071*(cj4*cj4)))+(((-1.0)*sj8*x2071))+(((-1.0)*sj8*x2072*(r02*r02)))+((sj8*x2072*(r12*r12))));
j9eval[0]=x2073;
j9eval[1]=IKsign(x2073);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2074=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2074);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2074);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x2075=(r02*r12);
IkReal x2076=(cj4*sj4);
IkReal x2077=((((-1.0)*cj8*x2076*(r02*r02)))+((cj8*x2076*(r12*r12)))+(((2.0)*cj8*x2075*(cj4*cj4)))+(((-1.0)*cj8*x2075)));
j9eval[0]=x2077;
j9eval[1]=IKsign(x2077);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2078=(cj4*sj4);
IkReal x2079=cj4*cj4;
IkReal x2080=(cj4*cj6);
IkReal x2081=(r01*((r12*sj8)));
IkReal x2082=(cj6*sj4);
IkReal x2083=(cj4*r02*sj4*sj8);
IkReal x2084=((1.0)*r11);
IkReal x2085=(cj4*r12*sj4*sj8);
IkReal x2086=(r02*sj8*x2079);
IkReal x2087=(r00*r12*sj8);
CheckValue<IkReal> x2088=IKPowWithIntegerCheck(IKsign((((cj8*x2078*(r12*r12)))+(((-1.0)*cj8*x2078*(r02*r02)))+((r02*r12*(((((2.0)*cj8*x2079))+(((-1.0)*(1.0)*cj8)))))))),-1);
if(!x2088.valid){
continue;
}
CheckValue<IkReal> x2089 = IKatan2WithCheck(IkReal(((((-1.0)*x2079*x2081))+(((-1.0)*x2084*x2085))+(((-1.0)*x2084*x2086))+((r11*x2080))+((r01*x2083))+(((-1.0)*r01*x2082))+x2081)),((((-1.0)*r10*x2080))+((r00*x2082))+((r10*x2085))+(((-1.0)*x2087))+((r10*x2086))+(((-1.0)*r00*x2083))+((x2079*x2087))),IKFAST_ATAN2_MAGTHRESH);
if(!x2089.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2088.value)))+(x2089.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2090=IKsin(j9);
IkReal x2091=(r00*x2090);
IkReal x2092=(sj4*x2091);
IkReal x2093=IKcos(j9);
IkReal x2094=(r01*x2093);
IkReal x2095=(sj4*x2094);
IkReal x2096=((1.0)*cj4);
IkReal x2097=(r10*x2090);
IkReal x2098=(r11*x2093);
IkReal x2099=((1.0)*sj4);
IkReal x2100=((0.03431)*cj4);
IkReal x2101=((0.03431)*sj4);
IkReal x2102=((-1.0)*(((1.0)*sj6)));
IkReal x2103=(cj4*cj8);
IkReal x2104=(cj8*sj4);
IkReal x2105=(cj4*sj8*x2090);
IkReal x2106=(sj4*sj8);
IkReal x2107=(r11*x2090);
IkReal x2108=((1.0)*cj4*sj8);
IkReal x2109=(r00*x2093);
IkReal x2110=(r10*x2093);
IkReal x2111=((1.0)*sj4*sj8);
IkReal x2112=(r02*sj8);
IkReal x2113=(r12*sj8);
IkReal x2114=(cj4*cj8*x2090);
IkReal x2115=((1.0)*cj4*cj8);
IkReal x2116=((1.0)*cj8*sj4);
IkReal x2117=(r01*x2090);
evalcond[0]=(x2092+x2095+(((-1.0)*x2096*x2097))+(((-1.0)*x2096*x2098)));
evalcond[1]=((((-1.0)*x2094*x2096))+(((-1.0)*x2097*x2099))+(((-1.0)*x2091*x2096))+(((-1.0)*x2098*x2099)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x2092))+((x2097*x2100))+(((-1.0)*(0.00036)*sj6))+((x2098*x2100))+(((-1.0)*py*x2096))+(((-0.03431)*x2095)));
evalcond[3]=((0.00337)+((x2098*x2101))+((x2094*x2100))+((x2097*x2101))+(((0.00036)*cj6))+(((-1.0)*py*x2099))+(((-1.0)*px*x2096))+((x2091*x2100)));
evalcond[4]=((((-1.0)*x2110*x2111))+((r02*x2103))+x2102+(((-1.0)*x2108*x2109))+((x2106*x2107))+((r12*x2104))+((r01*x2105)));
evalcond[5]=((((-1.0)*x2109*x2115))+((r01*x2114))+(((-1.0)*x2110*x2116))+(((-1.0)*x2096*x2112))+((x2104*x2107))+cj6+(((-1.0)*x2099*x2113)));
evalcond[6]=((((-1.0)*x2111*x2117))+((r11*x2105))+((r12*x2103))+(((-1.0)*(1.0)*cj6))+(((-1.0)*r02*x2116))+(((-1.0)*x2108*x2110))+((x2106*x2109)));
evalcond[7]=((((-1.0)*x2116*x2117))+x2102+(((-1.0)*x2110*x2115))+((sj4*x2112))+((x2104*x2109))+(((-1.0)*x2096*x2113))+((r11*x2114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2118=(cj4*sj4);
IkReal x2119=cj4*cj4;
IkReal x2120=(sj4*sj6);
IkReal x2121=(cj4*sj6);
IkReal x2122=(cj8*r01*r12);
IkReal x2123=(cj4*cj8*r12*sj4);
IkReal x2124=(cj8*r02*x2119);
IkReal x2125=(cj4*cj8*r02*sj4);
IkReal x2126=(r00*((cj8*r12)));
IkReal x2127=((1.0)*r10);
CheckValue<IkReal> x2128 = IKatan2WithCheck(IkReal(((((-1.0)*x2122))+((r11*x2124))+((x2119*x2122))+(((-1.0)*r11*x2121))+(((-1.0)*r01*x2125))+((r01*x2120))+((r11*x2123)))),(((r10*x2121))+(((-1.0)*x2119*x2126))+x2126+(((-1.0)*r00*x2120))+(((-1.0)*x2123*x2127))+(((-1.0)*x2124*x2127))+((r00*x2125))),IKFAST_ATAN2_MAGTHRESH);
if(!x2128.valid){
continue;
}
CheckValue<IkReal> x2129=IKPowWithIntegerCheck(IKsign((((r02*r12*(((((2.0)*sj8*x2119))+(((-1.0)*(1.0)*sj8))))))+((sj8*x2118*(r12*r12)))+(((-1.0)*sj8*x2118*(r02*r02))))),-1);
if(!x2129.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2128.value)+(((1.5707963267949)*(x2129.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2130=IKsin(j9);
IkReal x2131=(r00*x2130);
IkReal x2132=(sj4*x2131);
IkReal x2133=IKcos(j9);
IkReal x2134=(r01*x2133);
IkReal x2135=(sj4*x2134);
IkReal x2136=((1.0)*cj4);
IkReal x2137=(r10*x2130);
IkReal x2138=(r11*x2133);
IkReal x2139=((1.0)*sj4);
IkReal x2140=((0.03431)*cj4);
IkReal x2141=((0.03431)*sj4);
IkReal x2142=((-1.0)*(((1.0)*sj6)));
IkReal x2143=(cj4*cj8);
IkReal x2144=(cj8*sj4);
IkReal x2145=(cj4*sj8*x2130);
IkReal x2146=(sj4*sj8);
IkReal x2147=(r11*x2130);
IkReal x2148=((1.0)*cj4*sj8);
IkReal x2149=(r00*x2133);
IkReal x2150=(r10*x2133);
IkReal x2151=((1.0)*sj4*sj8);
IkReal x2152=(r02*sj8);
IkReal x2153=(r12*sj8);
IkReal x2154=(cj4*cj8*x2130);
IkReal x2155=((1.0)*cj4*cj8);
IkReal x2156=((1.0)*cj8*sj4);
IkReal x2157=(r01*x2130);
evalcond[0]=((((-1.0)*x2136*x2138))+(((-1.0)*x2136*x2137))+x2132+x2135);
evalcond[1]=((((-1.0)*x2131*x2136))+(((-1.0)*x2138*x2139))+(((-1.0)*x2137*x2139))+(((-1.0)*x2134*x2136)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x2136))+(((-1.0)*(0.00036)*sj6))+((x2137*x2140))+(((-0.03431)*x2132))+((x2138*x2140))+(((-0.03431)*x2135)));
evalcond[3]=((0.00337)+(((0.00036)*cj6))+((x2137*x2141))+((x2134*x2140))+(((-1.0)*py*x2139))+((x2138*x2141))+(((-1.0)*px*x2136))+((x2131*x2140)));
evalcond[4]=(((r01*x2145))+x2142+(((-1.0)*x2150*x2151))+((r12*x2144))+(((-1.0)*x2148*x2149))+((r02*x2143))+((x2146*x2147)));
evalcond[5]=(((r01*x2154))+(((-1.0)*x2150*x2156))+((x2144*x2147))+(((-1.0)*x2139*x2153))+cj6+(((-1.0)*x2136*x2152))+(((-1.0)*x2149*x2155)));
evalcond[6]=(((r12*x2143))+((r11*x2145))+(((-1.0)*(1.0)*cj6))+((x2146*x2149))+(((-1.0)*r02*x2156))+(((-1.0)*x2151*x2157))+(((-1.0)*x2148*x2150)));
evalcond[7]=(((r11*x2154))+x2142+((sj4*x2152))+(((-1.0)*x2156*x2157))+(((-1.0)*x2136*x2153))+((x2144*x2149))+(((-1.0)*x2150*x2155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2158=(px*r11);
IkReal x2159=((0.00036)*cj4*sj6);
IkReal x2160=((0.00036)*sj4*sj6);
IkReal x2161=(cj4*px*sj4);
IkReal x2162=(cj4*py*sj4);
IkReal x2163=cj4*cj4;
IkReal x2164=(py*x2163);
IkReal x2165=(px*r10);
CheckValue<IkReal> x2166 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2162))+(((-1.0)*r01*x2164))+x2158+(((-1.0)*r01*x2159))+(((-1.0)*x2158*x2163))+((r01*x2161))+(((-1.0)*r11*x2160)))),(((r10*x2160))+((x2163*x2165))+(((-1.0)*x2165))+((r00*x2164))+((r10*x2162))+(((-1.0)*r00*x2161))+((r00*x2159))),IKFAST_ATAN2_MAGTHRESH);
if(!x2166.valid){
continue;
}
CheckValue<IkReal> x2167=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2167.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2166.value)+(((1.5707963267949)*(x2167.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2168=IKsin(j9);
IkReal x2169=(r00*x2168);
IkReal x2170=(sj4*x2169);
IkReal x2171=IKcos(j9);
IkReal x2172=(r01*x2171);
IkReal x2173=(sj4*x2172);
IkReal x2174=((1.0)*cj4);
IkReal x2175=(r10*x2168);
IkReal x2176=(r11*x2171);
IkReal x2177=((1.0)*sj4);
IkReal x2178=((0.03431)*cj4);
IkReal x2179=((0.03431)*sj4);
IkReal x2180=((-1.0)*(((1.0)*sj6)));
IkReal x2181=(cj4*cj8);
IkReal x2182=(cj8*sj4);
IkReal x2183=(cj4*sj8*x2168);
IkReal x2184=(sj4*sj8);
IkReal x2185=(r11*x2168);
IkReal x2186=((1.0)*cj4*sj8);
IkReal x2187=(r00*x2171);
IkReal x2188=(r10*x2171);
IkReal x2189=((1.0)*sj4*sj8);
IkReal x2190=(r02*sj8);
IkReal x2191=(r12*sj8);
IkReal x2192=(cj4*cj8*x2168);
IkReal x2193=((1.0)*cj4*cj8);
IkReal x2194=((1.0)*cj8*sj4);
IkReal x2195=(r01*x2168);
evalcond[0]=(x2173+x2170+(((-1.0)*x2174*x2175))+(((-1.0)*x2174*x2176)));
evalcond[1]=((((-1.0)*x2169*x2174))+(((-1.0)*x2176*x2177))+(((-1.0)*x2175*x2177))+(((-1.0)*x2172*x2174)));
evalcond[2]=(((px*sj4))+((x2175*x2178))+(((-1.0)*py*x2174))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x2173))+((x2176*x2178))+(((-0.03431)*x2170)));
evalcond[3]=((0.00337)+(((-1.0)*py*x2177))+((x2169*x2178))+((x2175*x2179))+(((-1.0)*px*x2174))+(((0.00036)*cj6))+((x2172*x2178))+((x2176*x2179)));
evalcond[4]=(((x2184*x2185))+(((-1.0)*x2188*x2189))+((r12*x2182))+((r01*x2183))+(((-1.0)*x2186*x2187))+((r02*x2181))+x2180);
evalcond[5]=((((-1.0)*x2174*x2190))+(((-1.0)*x2187*x2193))+(((-1.0)*x2188*x2194))+((r01*x2192))+cj6+((x2182*x2185))+(((-1.0)*x2177*x2191)));
evalcond[6]=((((-1.0)*x2186*x2188))+(((-1.0)*r02*x2194))+(((-1.0)*x2189*x2195))+((x2184*x2187))+((r12*x2181))+(((-1.0)*(1.0)*cj6))+((r11*x2183)));
evalcond[7]=((((-1.0)*x2194*x2195))+(((-1.0)*x2188*x2193))+(((-1.0)*x2174*x2191))+((r11*x2192))+((x2182*x2187))+x2180+((sj4*x2190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
evalcond[1]=1.0;
evalcond[2]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
j8array[0]=-1.5707963267949;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j4eval[2];
IkReal x2196=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2196);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2196);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x2197=r02*r02;
IkReal x2198=r11*r11;
IkReal x2199=(x2198*(cj8*cj8*cj8*cj8));
IkReal x2200=r12*r12;
IkReal x2201=(x2198*(sj8*sj8*sj8*sj8));
IkReal x2202=cj8*cj8;
IkReal x2203=sj8*sj8;
IkReal x2204=((2.0)*x2198*x2202*x2203);
IkReal x2205=(r11*x2202);
IkReal x2206=(r11*x2203);
j4eval[0]=(((x2200*x2204))+((x2199*x2200))+((x2197*x2204))+((x2200*x2201))+((x2197*x2201))+((x2197*x2199)));
j4eval[1]=((IKabs((((r12*x2206))+((r12*x2205)))))+(IKabs((((r02*x2205))+((r02*x2206))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2207=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2207);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2207);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x2208=cj8*cj8;
IkReal x2209=(r01*x2208);
IkReal x2210=sj8*sj8;
IkReal x2211=(r01*x2210);
IkReal x2212=r02*r02;
IkReal x2213=r01*r01;
IkReal x2214=(x2213*(cj8*cj8*cj8*cj8));
IkReal x2215=r12*r12;
IkReal x2216=(x2213*(sj8*sj8*sj8*sj8));
IkReal x2217=((2.0)*x2208*x2210*x2213);
j4eval[0]=((IKabs((((r12*x2209))+((r12*x2211)))))+(IKabs((((r02*x2209))+((r02*x2211))))));
j4eval[1]=(((x2215*x2216))+((x2212*x2217))+((x2214*x2215))+((x2215*x2217))+((x2212*x2214))+((x2212*x2216)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2218=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2218);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2218);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x2219=cj8*cj8;
IkReal x2220=(r10*x2219);
IkReal x2221=sj8*sj8;
IkReal x2222=(r10*x2221);
IkReal x2223=r02*r02;
IkReal x2224=r10*r10;
IkReal x2225=(x2224*(cj8*cj8*cj8*cj8));
IkReal x2226=r12*r12;
IkReal x2227=(x2224*(sj8*sj8*sj8*sj8));
IkReal x2228=((2.0)*x2219*x2221*x2224);
j4eval[0]=((IKabs((((r02*x2220))+((r02*x2222)))))+(IKabs((((r12*x2222))+((r12*x2220))))));
j4eval[1]=(((x2225*x2226))+((x2223*x2227))+((x2226*x2228))+((x2226*x2227))+((x2223*x2228))+((x2223*x2225)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x2229=((1.0)*r10*(cj8*cj8));
IkReal x2230=((1.0)*r10*(sj8*sj8));
IkReal x2231=((((-1.0)*r02*x2229))+(((-1.0)*r02*x2230)));
IkReal x2232=((((-1.0)*r12*x2229))+(((-1.0)*r12*x2230)));
CheckValue<IkReal> x2235 = IKatan2WithCheck(IkReal(x2231),x2232,IKFAST_ATAN2_MAGTHRESH);
if(!x2235.valid){
continue;
}
IkReal x2233=((-1.0)*(x2235.value));
if((((x2232*x2232)+(x2231*x2231))) < -0.00001)
continue;
CheckValue<IkReal> x2236=IKPowWithIntegerCheck(IKabs(IKsqrt(((x2232*x2232)+(x2231*x2231)))),-1);
if(!x2236.valid){
continue;
}
if( (((x2236.value)*((((cj8*r10*sj6))+(((-1.0)*cj6*r10*sj8)))))) < -1-IKFAST_SINCOS_THRESH || (((x2236.value)*((((cj8*r10*sj6))+(((-1.0)*cj6*r10*sj8)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2234=IKasin(((x2236.value)*((((cj8*r10*sj6))+(((-1.0)*cj6*r10*sj8))))));
j4array[0]=((((-1.0)*x2234))+x2233);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x2234+x2233);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2237=(cj6*sj8);
IkReal x2238=((1.0)*cj8*sj6);
IkReal x2239=IKcos(j4);
IkReal x2240=cj8*cj8;
IkReal x2241=(r11*x2240);
IkReal x2242=sj8*sj8;
IkReal x2243=(r11*x2242);
IkReal x2244=IKsin(j4);
IkReal x2245=(r01*x2240);
IkReal x2246=(r01*x2242);
IkReal x2247=((1.0)*r00*x2240);
IkReal x2248=((1.0)*r00*x2242);
evalcond[0]=((((-1.0)*r11*x2238))+((x2239*((((r02*x2241))+((r02*x2243))))))+((r11*x2237))+((x2244*((((r12*x2243))+((r12*x2241)))))));
evalcond[1]=(((x2244*((((r12*x2245))+((r12*x2246))))))+((x2239*((((r02*x2245))+((r02*x2246))))))+((r01*x2237))+(((-1.0)*r01*x2238)));
evalcond[2]=(((r00*((cj8*sj6))))+(((-1.0)*r00*x2237))+((x2239*(((((-1.0)*r02*x2247))+(((-1.0)*r02*x2248))))))+((x2244*(((((-1.0)*r12*x2248))+(((-1.0)*r12*x2247)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x2249=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2249);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2249);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2250=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2250);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2250);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x2251=(r02*r12);
IkReal x2252=(cj4*sj4);
IkReal x2253=((((-1.0)*sj8*x2252*(r02*r02)))+((sj8*x2252*(r12*r12)))+(((2.0)*sj8*x2251*(cj4*cj4)))+(((-1.0)*sj8*x2251)));
j9eval[0]=x2253;
j9eval[1]=IKsign(x2253);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2254=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2254);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2254);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x2255=((1.0)*cj8);
IkReal x2256=r02*r02;
IkReal x2257=cj4*cj4;
IkReal x2258=((((-1.0)*x2255*x2256*x2257))+(((-1.0)*(2.0)*cj4*cj8*r02*r12*sj4))+(((-1.0)*x2255))+((cj8*x2257*(r12*r12)))+((cj8*x2256)));
j9eval[0]=x2258;
j9eval[1]=IKsign(x2258);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2259=((1.0)*cj8);
IkReal x2260=cj4*cj4;
IkReal x2261=(cj4*sj6);
IkReal x2262=((1.0)*r01);
IkReal x2263=(r02*sj8);
IkReal x2264=(sj4*sj6);
IkReal x2265=(cj4*r12*sj4*sj8);
IkReal x2266=(cj4*r02*sj4*sj8);
IkReal x2267=(r12*sj8*x2260);
IkReal x2268=(r00*x2263);
IkReal x2269=((1.0)*r10);
CheckValue<IkReal> x2270 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2267))+((r01*x2260*x2263))+(((-1.0)*x2262*x2263))+((r01*x2265))+((r11*x2266))+((r11*x2261))+(((-1.0)*x2262*x2264)))),((((-1.0)*x2266*x2269))+(((-1.0)*x2261*x2269))+x2268+((r10*x2267))+((r00*x2264))+(((-1.0)*x2260*x2268))+(((-1.0)*r00*x2265))),IKFAST_ATAN2_MAGTHRESH);
if(!x2270.valid){
continue;
}
CheckValue<IkReal> x2271=IKPowWithIntegerCheck(IKsign(((((r02*r02)*(((((-1.0)*x2259*x2260))+cj8))))+((cj8*x2260*(r12*r12)))+(((-1.0)*x2259))+(((-2.0)*cj4*cj8*r02*r12*sj4)))),-1);
if(!x2271.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2270.value)+(((1.5707963267949)*(x2271.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2272=IKsin(j9);
IkReal x2273=(r00*x2272);
IkReal x2274=(sj4*x2273);
IkReal x2275=IKcos(j9);
IkReal x2276=(r01*x2275);
IkReal x2277=(sj4*x2276);
IkReal x2278=((1.0)*cj4);
IkReal x2279=(r10*x2272);
IkReal x2280=(r11*x2275);
IkReal x2281=((1.0)*sj4);
IkReal x2282=((0.03431)*cj4);
IkReal x2283=((0.03431)*sj4);
IkReal x2284=(r02*sj8);
IkReal x2285=(r12*sj8);
IkReal x2286=(cj4*cj8*x2272);
IkReal x2287=(cj8*sj4);
IkReal x2288=(r00*x2275);
IkReal x2289=((1.0)*cj4*cj8);
IkReal x2290=(r10*x2275);
IkReal x2291=((1.0)*cj8*sj4);
IkReal x2292=(r01*x2272);
IkReal x2293=(cj4*cj8);
IkReal x2294=(cj4*sj8*x2272);
IkReal x2295=(sj4*sj8);
IkReal x2296=(r11*x2272);
IkReal x2297=((1.0)*cj4*sj8);
IkReal x2298=((1.0)*sj4*sj8);
IkReal x2299=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x2278*x2279))+(((-1.0)*x2278*x2280))+x2274+x2277);
evalcond[1]=((((-1.0)*x2280*x2281))+(((-1.0)*x2279*x2281))+(((-1.0)*x2276*x2278))+(((-1.0)*x2273*x2278)));
evalcond[2]=((((-0.03431)*x2277))+((px*sj4))+(((-1.0)*py*x2278))+(((-0.03431)*x2274))+(((-1.0)*(0.00036)*sj6))+((x2280*x2282))+((x2279*x2282)));
evalcond[3]=((0.00337)+(((-1.0)*py*x2281))+(((0.00036)*cj6))+((x2280*x2283))+(((-1.0)*px*x2278))+((x2276*x2282))+((x2279*x2283))+((x2273*x2282)));
evalcond[4]=((((-1.0)*x2291*x2292))+(((-1.0)*x2289*x2290))+((x2287*x2288))+(((-1.0)*x2278*x2285))+sj6+((r11*x2286))+((sj4*x2284)));
evalcond[5]=((((-1.0)*x2290*x2298))+((r12*x2287))+((r01*x2294))+(((-1.0)*x2288*x2297))+((r02*x2293))+((x2295*x2296))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=((((-1.0)*x2292*x2298))+x2299+(((-1.0)*x2290*x2297))+((x2288*x2295))+(((-1.0)*r02*x2291))+((r12*x2293))+((r11*x2294)));
evalcond[7]=(x2299+((r01*x2286))+(((-1.0)*x2278*x2284))+(((-1.0)*x2288*x2289))+(((-1.0)*x2281*x2285))+(((-1.0)*x2290*x2291))+((x2287*x2296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2300=(cj4*sj4);
IkReal x2301=cj4*cj4;
IkReal x2302=(sj4*sj6);
IkReal x2303=(cj4*sj6);
IkReal x2304=(cj8*r01*r12);
IkReal x2305=(cj4*cj8*r12*sj4);
IkReal x2306=(cj8*r02*x2301);
IkReal x2307=(cj4*cj8*r02*sj4);
IkReal x2308=(r00*((cj8*r12)));
IkReal x2309=((1.0)*r10);
CheckValue<IkReal> x2310 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2307))+((r01*x2302))+(((-1.0)*r11*x2303))+((r11*x2306))+((x2301*x2304))+((r11*x2305))+(((-1.0)*x2304)))),(((r00*x2307))+(((-1.0)*x2306*x2309))+((r10*x2303))+(((-1.0)*x2305*x2309))+(((-1.0)*r00*x2302))+(((-1.0)*x2301*x2308))+x2308),IKFAST_ATAN2_MAGTHRESH);
if(!x2310.valid){
continue;
}
CheckValue<IkReal> x2311=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj8*x2300*(r02*r02)))+((sj8*x2300*(r12*r12)))+((r02*r12*(((((2.0)*sj8*x2301))+(((-1.0)*(1.0)*sj8)))))))),-1);
if(!x2311.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2310.value)+(((1.5707963267949)*(x2311.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2312=IKsin(j9);
IkReal x2313=(r00*x2312);
IkReal x2314=(sj4*x2313);
IkReal x2315=IKcos(j9);
IkReal x2316=(r01*x2315);
IkReal x2317=(sj4*x2316);
IkReal x2318=((1.0)*cj4);
IkReal x2319=(r10*x2312);
IkReal x2320=(r11*x2315);
IkReal x2321=((1.0)*sj4);
IkReal x2322=((0.03431)*cj4);
IkReal x2323=((0.03431)*sj4);
IkReal x2324=(r02*sj8);
IkReal x2325=(r12*sj8);
IkReal x2326=(cj4*cj8*x2312);
IkReal x2327=(cj8*sj4);
IkReal x2328=(r00*x2315);
IkReal x2329=((1.0)*cj4*cj8);
IkReal x2330=(r10*x2315);
IkReal x2331=((1.0)*cj8*sj4);
IkReal x2332=(r01*x2312);
IkReal x2333=(cj4*cj8);
IkReal x2334=(cj4*sj8*x2312);
IkReal x2335=(sj4*sj8);
IkReal x2336=(r11*x2312);
IkReal x2337=((1.0)*cj4*sj8);
IkReal x2338=((1.0)*sj4*sj8);
IkReal x2339=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x2318*x2320))+(((-1.0)*x2318*x2319))+x2314+x2317);
evalcond[1]=((((-1.0)*x2319*x2321))+(((-1.0)*x2316*x2318))+(((-1.0)*x2320*x2321))+(((-1.0)*x2313*x2318)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x2318))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x2314))+((x2319*x2322))+(((-0.03431)*x2317))+((x2320*x2322)));
evalcond[3]=((0.00337)+(((-1.0)*py*x2321))+(((0.00036)*cj6))+((x2320*x2323))+((x2316*x2322))+(((-1.0)*px*x2318))+((x2319*x2323))+((x2313*x2322)));
evalcond[4]=((((-1.0)*x2318*x2325))+((sj4*x2324))+(((-1.0)*x2331*x2332))+((r11*x2326))+((x2327*x2328))+sj6+(((-1.0)*x2329*x2330)));
evalcond[5]=((((-1.0)*x2328*x2337))+((r01*x2334))+((r02*x2333))+((r12*x2327))+(((-1.0)*x2330*x2338))+(((-1.0)*(1.0)*sj6))+((x2335*x2336)));
evalcond[6]=(((r11*x2334))+(((-1.0)*x2332*x2338))+((r12*x2333))+((x2328*x2335))+(((-1.0)*x2330*x2337))+(((-1.0)*r02*x2331))+x2339);
evalcond[7]=(((x2327*x2336))+(((-1.0)*x2318*x2324))+(((-1.0)*x2328*x2329))+(((-1.0)*x2330*x2331))+x2339+((r01*x2326))+(((-1.0)*x2321*x2325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2340=(px*r11);
IkReal x2341=((0.00036)*cj4*sj6);
IkReal x2342=((0.00036)*sj4*sj6);
IkReal x2343=(cj4*px*sj4);
IkReal x2344=(cj4*py*sj4);
IkReal x2345=cj4*cj4;
IkReal x2346=(py*x2345);
IkReal x2347=(px*r10);
CheckValue<IkReal> x2348=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2348.valid){
continue;
}
CheckValue<IkReal> x2349 = IKatan2WithCheck(IkReal((((r01*x2343))+(((-1.0)*r01*x2346))+(((-1.0)*r11*x2342))+(((-1.0)*r01*x2341))+x2340+(((-1.0)*x2340*x2345))+(((-1.0)*r11*x2344)))),(((r00*x2341))+(((-1.0)*x2347))+((r10*x2342))+((r10*x2344))+(((-1.0)*r00*x2343))+((x2345*x2347))+((r00*x2346))),IKFAST_ATAN2_MAGTHRESH);
if(!x2349.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2348.value)))+(x2349.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2350=IKsin(j9);
IkReal x2351=(r00*x2350);
IkReal x2352=(sj4*x2351);
IkReal x2353=IKcos(j9);
IkReal x2354=(r01*x2353);
IkReal x2355=(sj4*x2354);
IkReal x2356=((1.0)*cj4);
IkReal x2357=(r10*x2350);
IkReal x2358=(r11*x2353);
IkReal x2359=((1.0)*sj4);
IkReal x2360=((0.03431)*cj4);
IkReal x2361=((0.03431)*sj4);
IkReal x2362=(r02*sj8);
IkReal x2363=(r12*sj8);
IkReal x2364=(cj4*cj8*x2350);
IkReal x2365=(cj8*sj4);
IkReal x2366=(r00*x2353);
IkReal x2367=((1.0)*cj4*cj8);
IkReal x2368=(r10*x2353);
IkReal x2369=((1.0)*cj8*sj4);
IkReal x2370=(r01*x2350);
IkReal x2371=(cj4*cj8);
IkReal x2372=(cj4*sj8*x2350);
IkReal x2373=(sj4*sj8);
IkReal x2374=(r11*x2350);
IkReal x2375=((1.0)*cj4*sj8);
IkReal x2376=((1.0)*sj4*sj8);
IkReal x2377=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x2356*x2358))+(((-1.0)*x2356*x2357))+x2355+x2352);
evalcond[1]=((((-1.0)*x2358*x2359))+(((-1.0)*x2354*x2356))+(((-1.0)*x2351*x2356))+(((-1.0)*x2357*x2359)));
evalcond[2]=(((px*sj4))+(((-1.0)*(0.00036)*sj6))+((x2358*x2360))+(((-1.0)*py*x2356))+(((-0.03431)*x2352))+((x2357*x2360))+(((-0.03431)*x2355)));
evalcond[3]=((0.00337)+(((-1.0)*py*x2359))+(((0.00036)*cj6))+(((-1.0)*px*x2356))+((x2358*x2361))+((x2351*x2360))+((x2357*x2361))+((x2354*x2360)));
evalcond[4]=((((-1.0)*x2367*x2368))+sj6+(((-1.0)*x2369*x2370))+((x2365*x2366))+(((-1.0)*x2356*x2363))+((sj4*x2362))+((r11*x2364)));
evalcond[5]=(((x2373*x2374))+((r01*x2372))+(((-1.0)*x2366*x2375))+(((-1.0)*x2368*x2376))+((r02*x2371))+((r12*x2365))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=(((r11*x2372))+x2377+(((-1.0)*x2370*x2376))+((x2366*x2373))+(((-1.0)*r02*x2369))+((r12*x2371))+(((-1.0)*x2368*x2375)));
evalcond[7]=(((r01*x2364))+(((-1.0)*x2368*x2369))+x2377+(((-1.0)*x2359*x2363))+((x2365*x2374))+(((-1.0)*x2366*x2367))+(((-1.0)*x2356*x2362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x2378=(r01*(cj8*cj8));
IkReal x2379=(r01*(sj8*sj8));
IkReal x2380=(((r02*x2378))+((r02*x2379)));
IkReal x2381=(((r12*x2378))+((r12*x2379)));
CheckValue<IkReal> x2384 = IKatan2WithCheck(IkReal(x2380),x2381,IKFAST_ATAN2_MAGTHRESH);
if(!x2384.valid){
continue;
}
IkReal x2382=((-1.0)*(x2384.value));
if((((x2381*x2381)+(x2380*x2380))) < -0.00001)
continue;
CheckValue<IkReal> x2385=IKPowWithIntegerCheck(IKabs(IKsqrt(((x2381*x2381)+(x2380*x2380)))),-1);
if(!x2385.valid){
continue;
}
if( (((x2385.value)*(((((-1.0)*(1.0)*cj8*r01*sj6))+((cj6*r01*sj8)))))) < -1-IKFAST_SINCOS_THRESH || (((x2385.value)*(((((-1.0)*(1.0)*cj8*r01*sj6))+((cj6*r01*sj8)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2383=IKasin(((x2385.value)*(((((-1.0)*(1.0)*cj8*r01*sj6))+((cj6*r01*sj8))))));
j4array[0]=((((-1.0)*x2383))+x2382);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x2383+x2382);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2386=(cj8*sj6);
IkReal x2387=IKcos(j4);
IkReal x2388=cj8*cj8;
IkReal x2389=(r11*x2388);
IkReal x2390=sj8*sj8;
IkReal x2391=(r11*x2390);
IkReal x2392=IKsin(j4);
IkReal x2393=((1.0)*cj6*sj8);
IkReal x2394=((1.0)*r10*x2388);
IkReal x2395=((1.0)*r10*x2390);
IkReal x2396=((1.0)*r00*x2388);
IkReal x2397=((1.0)*r00*x2390);
evalcond[0]=(((x2387*((((r02*x2389))+((r02*x2391))))))+((r11*((cj6*sj8))))+((x2392*((((r12*x2389))+((r12*x2391))))))+(((-1.0)*r11*x2386)));
evalcond[1]=(((x2387*(((((-1.0)*r02*x2394))+(((-1.0)*r02*x2395))))))+((x2392*(((((-1.0)*r12*x2395))+(((-1.0)*r12*x2394))))))+((r10*x2386))+(((-1.0)*r10*x2393)));
evalcond[2]=(((x2392*(((((-1.0)*r12*x2396))+(((-1.0)*r12*x2397))))))+((x2387*(((((-1.0)*r02*x2397))+(((-1.0)*r02*x2396))))))+(((-1.0)*r00*x2393))+((r00*x2386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x2398=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2398);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2398);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2399=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2399);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2399);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x2400=(r02*r12);
IkReal x2401=(cj4*sj4);
IkReal x2402=(((sj8*x2401*(r12*r12)))+(((-1.0)*sj8*x2401*(r02*r02)))+(((-1.0)*sj8*x2400))+(((2.0)*sj8*x2400*(cj4*cj4))));
j9eval[0]=x2402;
j9eval[1]=IKsign(x2402);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2403=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2403);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2403);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x2404=((1.0)*cj8);
IkReal x2405=r02*r02;
IkReal x2406=cj4*cj4;
IkReal x2407=(((cj8*x2405))+(((-1.0)*(2.0)*cj4*cj8*r02*r12*sj4))+(((-1.0)*x2404*x2405*x2406))+((cj8*x2406*(r12*r12)))+(((-1.0)*x2404)));
j9eval[0]=x2407;
j9eval[1]=IKsign(x2407);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2408=((1.0)*cj8);
IkReal x2409=cj4*cj4;
IkReal x2410=(cj4*sj6);
IkReal x2411=((1.0)*r01);
IkReal x2412=(r02*sj8);
IkReal x2413=(sj4*sj6);
IkReal x2414=(cj4*r12*sj4*sj8);
IkReal x2415=(cj4*r02*sj4*sj8);
IkReal x2416=(r12*sj8*x2409);
IkReal x2417=(r00*x2412);
IkReal x2418=((1.0)*r10);
CheckValue<IkReal> x2419 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2416))+((r01*x2409*x2412))+((r11*x2410))+((r11*x2415))+((r01*x2414))+(((-1.0)*x2411*x2412))+(((-1.0)*x2411*x2413)))),((((-1.0)*x2409*x2417))+((r10*x2416))+(((-1.0)*r00*x2414))+(((-1.0)*x2410*x2418))+(((-1.0)*x2415*x2418))+x2417+((r00*x2413))),IKFAST_ATAN2_MAGTHRESH);
if(!x2419.valid){
continue;
}
CheckValue<IkReal> x2420=IKPowWithIntegerCheck(IKsign(((((r02*r02)*(((((-1.0)*x2408*x2409))+cj8))))+(((-1.0)*x2408))+((cj8*x2409*(r12*r12)))+(((-2.0)*cj4*cj8*r02*r12*sj4)))),-1);
if(!x2420.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2419.value)+(((1.5707963267949)*(x2420.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2421=IKsin(j9);
IkReal x2422=(r00*x2421);
IkReal x2423=(sj4*x2422);
IkReal x2424=IKcos(j9);
IkReal x2425=(r01*x2424);
IkReal x2426=(sj4*x2425);
IkReal x2427=((1.0)*cj4);
IkReal x2428=(r10*x2421);
IkReal x2429=(r11*x2424);
IkReal x2430=((1.0)*sj4);
IkReal x2431=((0.03431)*cj4);
IkReal x2432=((0.03431)*sj4);
IkReal x2433=(r02*sj8);
IkReal x2434=(r12*sj8);
IkReal x2435=(cj4*cj8*x2421);
IkReal x2436=(cj8*sj4);
IkReal x2437=(r00*x2424);
IkReal x2438=((1.0)*cj4*cj8);
IkReal x2439=(r10*x2424);
IkReal x2440=((1.0)*cj8*sj4);
IkReal x2441=(r01*x2421);
IkReal x2442=(cj4*cj8);
IkReal x2443=(cj4*sj8*x2421);
IkReal x2444=(sj4*sj8);
IkReal x2445=(r11*x2421);
IkReal x2446=((1.0)*cj4*sj8);
IkReal x2447=((1.0)*sj4*sj8);
IkReal x2448=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x2427*x2428))+(((-1.0)*x2427*x2429))+x2426+x2423);
evalcond[1]=((((-1.0)*x2429*x2430))+(((-1.0)*x2428*x2430))+(((-1.0)*x2422*x2427))+(((-1.0)*x2425*x2427)));
evalcond[2]=(((px*sj4))+((x2429*x2431))+(((-0.03431)*x2426))+((x2428*x2431))+(((-1.0)*(0.00036)*sj6))+(((-1.0)*py*x2427))+(((-0.03431)*x2423)));
evalcond[3]=((0.00337)+(((-1.0)*py*x2430))+((x2425*x2431))+(((0.00036)*cj6))+(((-1.0)*px*x2427))+((x2428*x2432))+((x2422*x2431))+((x2429*x2432)));
evalcond[4]=(((r11*x2435))+(((-1.0)*x2440*x2441))+(((-1.0)*x2427*x2434))+((sj4*x2433))+sj6+((x2436*x2437))+(((-1.0)*x2438*x2439)));
evalcond[5]=((((-1.0)*x2437*x2446))+((r12*x2436))+((x2444*x2445))+(((-1.0)*x2439*x2447))+((r02*x2442))+((r01*x2443))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=(((r11*x2443))+(((-1.0)*r02*x2440))+x2448+((x2437*x2444))+((r12*x2442))+(((-1.0)*x2441*x2447))+(((-1.0)*x2439*x2446)));
evalcond[7]=((((-1.0)*x2439*x2440))+(((-1.0)*x2427*x2433))+((r01*x2435))+x2448+((x2436*x2445))+(((-1.0)*x2430*x2434))+(((-1.0)*x2437*x2438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2449=(cj4*sj4);
IkReal x2450=cj4*cj4;
IkReal x2451=(sj4*sj6);
IkReal x2452=(cj4*sj6);
IkReal x2453=(cj8*r01*r12);
IkReal x2454=(cj4*cj8*r12*sj4);
IkReal x2455=(cj8*r02*x2450);
IkReal x2456=(cj4*cj8*r02*sj4);
IkReal x2457=(r00*((cj8*r12)));
IkReal x2458=((1.0)*r10);
CheckValue<IkReal> x2459 = IKatan2WithCheck(IkReal((((x2450*x2453))+((r11*x2454))+((r11*x2455))+(((-1.0)*r01*x2456))+(((-1.0)*r11*x2452))+((r01*x2451))+(((-1.0)*x2453)))),((((-1.0)*x2454*x2458))+((r10*x2452))+(((-1.0)*r00*x2451))+x2457+(((-1.0)*x2450*x2457))+(((-1.0)*x2455*x2458))+((r00*x2456))),IKFAST_ATAN2_MAGTHRESH);
if(!x2459.valid){
continue;
}
CheckValue<IkReal> x2460=IKPowWithIntegerCheck(IKsign((((sj8*x2449*(r12*r12)))+((r02*r12*(((((-1.0)*(1.0)*sj8))+(((2.0)*sj8*x2450))))))+(((-1.0)*sj8*x2449*(r02*r02))))),-1);
if(!x2460.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2459.value)+(((1.5707963267949)*(x2460.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2461=IKsin(j9);
IkReal x2462=(r00*x2461);
IkReal x2463=(sj4*x2462);
IkReal x2464=IKcos(j9);
IkReal x2465=(r01*x2464);
IkReal x2466=(sj4*x2465);
IkReal x2467=((1.0)*cj4);
IkReal x2468=(r10*x2461);
IkReal x2469=(r11*x2464);
IkReal x2470=((1.0)*sj4);
IkReal x2471=((0.03431)*cj4);
IkReal x2472=((0.03431)*sj4);
IkReal x2473=(r02*sj8);
IkReal x2474=(r12*sj8);
IkReal x2475=(cj4*cj8*x2461);
IkReal x2476=(cj8*sj4);
IkReal x2477=(r00*x2464);
IkReal x2478=((1.0)*cj4*cj8);
IkReal x2479=(r10*x2464);
IkReal x2480=((1.0)*cj8*sj4);
IkReal x2481=(r01*x2461);
IkReal x2482=(cj4*cj8);
IkReal x2483=(cj4*sj8*x2461);
IkReal x2484=(sj4*sj8);
IkReal x2485=(r11*x2461);
IkReal x2486=((1.0)*cj4*sj8);
IkReal x2487=((1.0)*sj4*sj8);
IkReal x2488=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x2467*x2469))+x2463+x2466+(((-1.0)*x2467*x2468)));
evalcond[1]=((((-1.0)*x2462*x2467))+(((-1.0)*x2469*x2470))+(((-1.0)*x2465*x2467))+(((-1.0)*x2468*x2470)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x2463))+(((-1.0)*(0.00036)*sj6))+(((-1.0)*py*x2467))+((x2469*x2471))+(((-0.03431)*x2466))+((x2468*x2471)));
evalcond[3]=((0.00337)+(((-1.0)*py*x2470))+(((0.00036)*cj6))+((x2462*x2471))+((x2465*x2471))+(((-1.0)*px*x2467))+((x2468*x2472))+((x2469*x2472)));
evalcond[4]=((((-1.0)*x2478*x2479))+((r11*x2475))+((x2476*x2477))+(((-1.0)*x2467*x2474))+(((-1.0)*x2480*x2481))+sj6+((sj4*x2473)));
evalcond[5]=((((-1.0)*x2477*x2486))+((r02*x2482))+(((-1.0)*x2479*x2487))+((r12*x2476))+((r01*x2483))+((x2484*x2485))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=(((r12*x2482))+x2488+(((-1.0)*r02*x2480))+(((-1.0)*x2481*x2487))+(((-1.0)*x2479*x2486))+((r11*x2483))+((x2477*x2484)));
evalcond[7]=((((-1.0)*x2479*x2480))+((r01*x2475))+(((-1.0)*x2467*x2473))+x2488+(((-1.0)*x2477*x2478))+(((-1.0)*x2470*x2474))+((x2476*x2485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2489=(px*r11);
IkReal x2490=((0.00036)*cj4*sj6);
IkReal x2491=((0.00036)*sj4*sj6);
IkReal x2492=(cj4*px*sj4);
IkReal x2493=(cj4*py*sj4);
IkReal x2494=cj4*cj4;
IkReal x2495=(py*x2494);
IkReal x2496=(px*r10);
CheckValue<IkReal> x2497=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2497.valid){
continue;
}
CheckValue<IkReal> x2498 = IKatan2WithCheck(IkReal((x2489+(((-1.0)*r11*x2493))+(((-1.0)*r01*x2495))+((r01*x2492))+(((-1.0)*r01*x2490))+(((-1.0)*x2489*x2494))+(((-1.0)*r11*x2491)))),(((r00*x2495))+((r10*x2491))+((r00*x2490))+(((-1.0)*r00*x2492))+(((-1.0)*x2496))+((r10*x2493))+((x2494*x2496))),IKFAST_ATAN2_MAGTHRESH);
if(!x2498.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2497.value)))+(x2498.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2499=IKsin(j9);
IkReal x2500=(r00*x2499);
IkReal x2501=(sj4*x2500);
IkReal x2502=IKcos(j9);
IkReal x2503=(r01*x2502);
IkReal x2504=(sj4*x2503);
IkReal x2505=((1.0)*cj4);
IkReal x2506=(r10*x2499);
IkReal x2507=(r11*x2502);
IkReal x2508=((1.0)*sj4);
IkReal x2509=((0.03431)*cj4);
IkReal x2510=((0.03431)*sj4);
IkReal x2511=(r02*sj8);
IkReal x2512=(r12*sj8);
IkReal x2513=(cj4*cj8*x2499);
IkReal x2514=(cj8*sj4);
IkReal x2515=(r00*x2502);
IkReal x2516=((1.0)*cj4*cj8);
IkReal x2517=(r10*x2502);
IkReal x2518=((1.0)*cj8*sj4);
IkReal x2519=(r01*x2499);
IkReal x2520=(cj4*cj8);
IkReal x2521=(cj4*sj8*x2499);
IkReal x2522=(sj4*sj8);
IkReal x2523=(r11*x2499);
IkReal x2524=((1.0)*cj4*sj8);
IkReal x2525=((1.0)*sj4*sj8);
IkReal x2526=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x2505*x2507))+(((-1.0)*x2505*x2506))+x2504+x2501);
evalcond[1]=((((-1.0)*x2500*x2505))+(((-1.0)*x2503*x2505))+(((-1.0)*x2507*x2508))+(((-1.0)*x2506*x2508)));
evalcond[2]=(((px*sj4))+((x2507*x2509))+(((-0.03431)*x2501))+(((-0.03431)*x2504))+(((-1.0)*(0.00036)*sj6))+(((-1.0)*py*x2505))+((x2506*x2509)));
evalcond[3]=((0.00337)+((x2507*x2510))+((x2503*x2509))+(((0.00036)*cj6))+(((-1.0)*px*x2505))+((x2506*x2510))+((x2500*x2509))+(((-1.0)*py*x2508)));
evalcond[4]=((((-1.0)*x2518*x2519))+((sj4*x2511))+(((-1.0)*x2505*x2512))+sj6+((r11*x2513))+((x2514*x2515))+(((-1.0)*x2516*x2517)));
evalcond[5]=(((x2522*x2523))+((r02*x2520))+(((-1.0)*x2515*x2524))+((r12*x2514))+(((-1.0)*x2517*x2525))+((r01*x2521))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=((((-1.0)*x2517*x2524))+((r12*x2520))+x2526+(((-1.0)*x2519*x2525))+((r11*x2521))+((x2515*x2522))+(((-1.0)*r02*x2518)));
evalcond[7]=((((-1.0)*x2517*x2518))+(((-1.0)*x2515*x2516))+(((-1.0)*x2505*x2511))+x2526+((r01*x2513))+((x2514*x2523))+(((-1.0)*x2508*x2512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x2527=(r11*(cj8*cj8));
IkReal x2528=(r11*(sj8*sj8));
IkReal x2529=(((r02*x2527))+((r02*x2528)));
IkReal x2530=(((r12*x2528))+((r12*x2527)));
CheckValue<IkReal> x2533 = IKatan2WithCheck(IkReal(x2529),x2530,IKFAST_ATAN2_MAGTHRESH);
if(!x2533.valid){
continue;
}
IkReal x2531=((-1.0)*(x2533.value));
if((((x2529*x2529)+(x2530*x2530))) < -0.00001)
continue;
CheckValue<IkReal> x2534=IKPowWithIntegerCheck(IKabs(IKsqrt(((x2529*x2529)+(x2530*x2530)))),-1);
if(!x2534.valid){
continue;
}
if( (((x2534.value)*(((((-1.0)*(1.0)*cj8*r11*sj6))+((cj6*r11*sj8)))))) < -1-IKFAST_SINCOS_THRESH || (((x2534.value)*(((((-1.0)*(1.0)*cj8*r11*sj6))+((cj6*r11*sj8)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2532=IKasin(((x2534.value)*(((((-1.0)*(1.0)*cj8*r11*sj6))+((cj6*r11*sj8))))));
j4array[0]=(x2531+(((-1.0)*x2532)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x2531+x2532);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2535=(cj8*sj6);
IkReal x2536=IKcos(j4);
IkReal x2537=cj8*cj8;
IkReal x2538=(r01*x2537);
IkReal x2539=sj8*sj8;
IkReal x2540=(r01*x2539);
IkReal x2541=IKsin(j4);
IkReal x2542=((1.0)*cj6*sj8);
IkReal x2543=((1.0)*r10*x2537);
IkReal x2544=((1.0)*r10*x2539);
IkReal x2545=((1.0)*r00*x2537);
IkReal x2546=((1.0)*r00*x2539);
evalcond[0]=(((x2536*((((r02*x2540))+((r02*x2538))))))+((x2541*((((r12*x2540))+((r12*x2538))))))+((r01*((cj6*sj8))))+(((-1.0)*r01*x2535)));
evalcond[1]=(((x2541*(((((-1.0)*r12*x2544))+(((-1.0)*r12*x2543))))))+((r10*x2535))+((x2536*(((((-1.0)*r02*x2544))+(((-1.0)*r02*x2543))))))+(((-1.0)*r10*x2542)));
evalcond[2]=(((r00*x2535))+((x2536*(((((-1.0)*r02*x2545))+(((-1.0)*r02*x2546))))))+(((-1.0)*r00*x2542))+((x2541*(((((-1.0)*r12*x2546))+(((-1.0)*r12*x2545)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[2];
IkReal x2547=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2547);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2547);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2548=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2548);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2548);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x2549=(r02*r12);
IkReal x2550=(cj4*sj4);
IkReal x2551=((((-1.0)*sj8*x2550*(r02*r02)))+(((2.0)*sj8*x2549*(cj4*cj4)))+(((-1.0)*sj8*x2549))+((sj8*x2550*(r12*r12))));
j9eval[0]=x2551;
j9eval[1]=IKsign(x2551);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2552=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2552);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2552);
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x2553=((1.0)*cj8);
IkReal x2554=r02*r02;
IkReal x2555=cj4*cj4;
IkReal x2556=(((cj8*x2555*(r12*r12)))+(((-1.0)*(2.0)*cj4*cj8*r02*r12*sj4))+(((-1.0)*x2553*x2554*x2555))+((cj8*x2554))+(((-1.0)*x2553)));
j9eval[0]=x2556;
j9eval[1]=IKsign(x2556);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2557=((1.0)*cj8);
IkReal x2558=cj4*cj4;
IkReal x2559=(cj4*sj6);
IkReal x2560=((1.0)*r01);
IkReal x2561=(r02*sj8);
IkReal x2562=(sj4*sj6);
IkReal x2563=(cj4*r12*sj4*sj8);
IkReal x2564=(cj4*r02*sj4*sj8);
IkReal x2565=(r12*sj8*x2558);
IkReal x2566=(r00*x2561);
IkReal x2567=((1.0)*r10);
CheckValue<IkReal> x2568 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2565))+((r01*x2558*x2561))+(((-1.0)*x2560*x2562))+(((-1.0)*x2560*x2561))+((r11*x2564))+((r11*x2559))+((r01*x2563)))),(((r10*x2565))+(((-1.0)*x2558*x2566))+x2566+(((-1.0)*x2559*x2567))+((r00*x2562))+(((-1.0)*x2564*x2567))+(((-1.0)*r00*x2563))),IKFAST_ATAN2_MAGTHRESH);
if(!x2568.valid){
continue;
}
CheckValue<IkReal> x2569=IKPowWithIntegerCheck(IKsign((((cj8*x2558*(r12*r12)))+(((r02*r02)*(((((-1.0)*x2557*x2558))+cj8))))+(((-1.0)*x2557))+(((-2.0)*cj4*cj8*r02*r12*sj4)))),-1);
if(!x2569.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2568.value)+(((1.5707963267949)*(x2569.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2570=IKsin(j9);
IkReal x2571=(r00*x2570);
IkReal x2572=(sj4*x2571);
IkReal x2573=IKcos(j9);
IkReal x2574=(r01*x2573);
IkReal x2575=(sj4*x2574);
IkReal x2576=((1.0)*cj4);
IkReal x2577=(r10*x2570);
IkReal x2578=(r11*x2573);
IkReal x2579=((1.0)*sj4);
IkReal x2580=((0.03431)*cj4);
IkReal x2581=((0.03431)*sj4);
IkReal x2582=(r02*sj8);
IkReal x2583=(r12*sj8);
IkReal x2584=(cj4*cj8*x2570);
IkReal x2585=(cj8*sj4);
IkReal x2586=(r00*x2573);
IkReal x2587=((1.0)*cj4*cj8);
IkReal x2588=(r10*x2573);
IkReal x2589=((1.0)*cj8*sj4);
IkReal x2590=(r01*x2570);
IkReal x2591=(cj4*cj8);
IkReal x2592=(cj4*sj8*x2570);
IkReal x2593=(sj4*sj8);
IkReal x2594=(r11*x2570);
IkReal x2595=((1.0)*cj4*sj8);
IkReal x2596=((1.0)*sj4*sj8);
IkReal x2597=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x2576*x2578))+(((-1.0)*x2576*x2577))+x2575+x2572);
evalcond[1]=((((-1.0)*x2577*x2579))+(((-1.0)*x2574*x2576))+(((-1.0)*x2578*x2579))+(((-1.0)*x2571*x2576)));
evalcond[2]=((((-0.03431)*x2575))+((px*sj4))+(((-1.0)*py*x2576))+(((-1.0)*(0.00036)*sj6))+((x2577*x2580))+(((-0.03431)*x2572))+((x2578*x2580)));
evalcond[3]=((0.00337)+(((-1.0)*py*x2579))+((x2578*x2581))+(((0.00036)*cj6))+(((-1.0)*px*x2576))+((x2574*x2580))+((x2571*x2580))+((x2577*x2581)));
evalcond[4]=(((x2585*x2586))+(((-1.0)*x2576*x2583))+((sj4*x2582))+sj6+(((-1.0)*x2589*x2590))+((r11*x2584))+(((-1.0)*x2587*x2588)));
evalcond[5]=(((r02*x2591))+(((-1.0)*x2588*x2596))+((r01*x2592))+(((-1.0)*x2586*x2595))+((x2593*x2594))+(((-1.0)*(1.0)*sj6))+((r12*x2585)));
evalcond[6]=((((-1.0)*r02*x2589))+((r12*x2591))+x2597+((r11*x2592))+(((-1.0)*x2588*x2595))+((x2586*x2593))+(((-1.0)*x2590*x2596)));
evalcond[7]=(x2597+(((-1.0)*x2588*x2589))+(((-1.0)*x2579*x2583))+((r01*x2584))+(((-1.0)*x2586*x2587))+((x2585*x2594))+(((-1.0)*x2576*x2582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2598=(cj4*sj4);
IkReal x2599=cj4*cj4;
IkReal x2600=(sj4*sj6);
IkReal x2601=(cj4*sj6);
IkReal x2602=(cj8*r01*r12);
IkReal x2603=(cj4*cj8*r12*sj4);
IkReal x2604=(cj8*r02*x2599);
IkReal x2605=(cj4*cj8*r02*sj4);
IkReal x2606=(r00*((cj8*r12)));
IkReal x2607=((1.0)*r10);
CheckValue<IkReal> x2608 = IKatan2WithCheck(IkReal((((r01*x2600))+((r11*x2604))+(((-1.0)*r11*x2601))+(((-1.0)*x2602))+((r11*x2603))+(((-1.0)*r01*x2605))+((x2599*x2602)))),(((r10*x2601))+x2606+((r00*x2605))+(((-1.0)*x2604*x2607))+(((-1.0)*r00*x2600))+(((-1.0)*x2603*x2607))+(((-1.0)*x2599*x2606))),IKFAST_ATAN2_MAGTHRESH);
if(!x2608.valid){
continue;
}
CheckValue<IkReal> x2609=IKPowWithIntegerCheck(IKsign((((sj8*x2598*(r12*r12)))+(((-1.0)*sj8*x2598*(r02*r02)))+((r02*r12*(((((2.0)*sj8*x2599))+(((-1.0)*(1.0)*sj8)))))))),-1);
if(!x2609.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2608.value)+(((1.5707963267949)*(x2609.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2610=IKsin(j9);
IkReal x2611=(r00*x2610);
IkReal x2612=(sj4*x2611);
IkReal x2613=IKcos(j9);
IkReal x2614=(r01*x2613);
IkReal x2615=(sj4*x2614);
IkReal x2616=((1.0)*cj4);
IkReal x2617=(r10*x2610);
IkReal x2618=(r11*x2613);
IkReal x2619=((1.0)*sj4);
IkReal x2620=((0.03431)*cj4);
IkReal x2621=((0.03431)*sj4);
IkReal x2622=(r02*sj8);
IkReal x2623=(r12*sj8);
IkReal x2624=(cj4*cj8*x2610);
IkReal x2625=(cj8*sj4);
IkReal x2626=(r00*x2613);
IkReal x2627=((1.0)*cj4*cj8);
IkReal x2628=(r10*x2613);
IkReal x2629=((1.0)*cj8*sj4);
IkReal x2630=(r01*x2610);
IkReal x2631=(cj4*cj8);
IkReal x2632=(cj4*sj8*x2610);
IkReal x2633=(sj4*sj8);
IkReal x2634=(r11*x2610);
IkReal x2635=((1.0)*cj4*sj8);
IkReal x2636=((1.0)*sj4*sj8);
IkReal x2637=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x2616*x2618))+x2615+x2612+(((-1.0)*x2616*x2617)));
evalcond[1]=((((-1.0)*x2617*x2619))+(((-1.0)*x2614*x2616))+(((-1.0)*x2611*x2616))+(((-1.0)*x2618*x2619)));
evalcond[2]=(((px*sj4))+(((-1.0)*(0.00036)*sj6))+(((-1.0)*py*x2616))+((x2618*x2620))+(((-0.03431)*x2615))+(((-0.03431)*x2612))+((x2617*x2620)));
evalcond[3]=((0.00337)+((x2618*x2621))+(((-1.0)*py*x2619))+((x2617*x2621))+(((0.00036)*cj6))+(((-1.0)*px*x2616))+((x2611*x2620))+((x2614*x2620)));
evalcond[4]=((((-1.0)*x2629*x2630))+((r11*x2624))+(((-1.0)*x2627*x2628))+sj6+(((-1.0)*x2616*x2623))+((sj4*x2622))+((x2625*x2626)));
evalcond[5]=(((r01*x2632))+((r12*x2625))+((x2633*x2634))+((r02*x2631))+(((-1.0)*x2626*x2635))+(((-1.0)*x2628*x2636))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=((((-1.0)*x2630*x2636))+((r11*x2632))+((x2626*x2633))+((r12*x2631))+x2637+(((-1.0)*r02*x2629))+(((-1.0)*x2628*x2635)));
evalcond[7]=(((r01*x2624))+(((-1.0)*x2619*x2623))+((x2625*x2634))+(((-1.0)*x2626*x2627))+(((-1.0)*x2628*x2629))+x2637+(((-1.0)*x2616*x2622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2638=(px*r11);
IkReal x2639=((0.00036)*cj4*sj6);
IkReal x2640=((0.00036)*sj4*sj6);
IkReal x2641=(cj4*px*sj4);
IkReal x2642=(cj4*py*sj4);
IkReal x2643=cj4*cj4;
IkReal x2644=(py*x2643);
IkReal x2645=(px*r10);
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2644))+(((-1.0)*x2638*x2643))+((r01*x2641))+(((-1.0)*r11*x2642))+(((-1.0)*r01*x2639))+(((-1.0)*r11*x2640))+x2638)),((((-1.0)*r00*x2641))+((r10*x2642))+((x2643*x2645))+((r10*x2640))+((r00*x2644))+(((-1.0)*x2645))+((r00*x2639))),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
CheckValue<IkReal> x2647=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2647.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2646.value)+(((1.5707963267949)*(x2647.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2648=IKsin(j9);
IkReal x2649=(r00*x2648);
IkReal x2650=(sj4*x2649);
IkReal x2651=IKcos(j9);
IkReal x2652=(r01*x2651);
IkReal x2653=(sj4*x2652);
IkReal x2654=((1.0)*cj4);
IkReal x2655=(r10*x2648);
IkReal x2656=(r11*x2651);
IkReal x2657=((1.0)*sj4);
IkReal x2658=((0.03431)*cj4);
IkReal x2659=((0.03431)*sj4);
IkReal x2660=(r02*sj8);
IkReal x2661=(r12*sj8);
IkReal x2662=(cj4*cj8*x2648);
IkReal x2663=(cj8*sj4);
IkReal x2664=(r00*x2651);
IkReal x2665=((1.0)*cj4*cj8);
IkReal x2666=(r10*x2651);
IkReal x2667=((1.0)*cj8*sj4);
IkReal x2668=(r01*x2648);
IkReal x2669=(cj4*cj8);
IkReal x2670=(cj4*sj8*x2648);
IkReal x2671=(sj4*sj8);
IkReal x2672=(r11*x2648);
IkReal x2673=((1.0)*cj4*sj8);
IkReal x2674=((1.0)*sj4*sj8);
IkReal x2675=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x2654*x2656))+(((-1.0)*x2654*x2655))+x2650+x2653);
evalcond[1]=((((-1.0)*x2655*x2657))+(((-1.0)*x2649*x2654))+(((-1.0)*x2652*x2654))+(((-1.0)*x2656*x2657)));
evalcond[2]=(((x2655*x2658))+((px*sj4))+(((-1.0)*py*x2654))+(((-1.0)*(0.00036)*sj6))+((x2656*x2658))+(((-0.03431)*x2653))+(((-0.03431)*x2650)));
evalcond[3]=((0.00337)+((x2655*x2659))+((x2652*x2658))+(((0.00036)*cj6))+((x2656*x2659))+(((-1.0)*py*x2657))+((x2649*x2658))+(((-1.0)*px*x2654)));
evalcond[4]=(((sj4*x2660))+(((-1.0)*x2654*x2661))+(((-1.0)*x2667*x2668))+((r11*x2662))+sj6+((x2663*x2664))+(((-1.0)*x2665*x2666)));
evalcond[5]=(((x2671*x2672))+((r01*x2670))+((r02*x2669))+(((-1.0)*x2664*x2673))+(((-1.0)*x2666*x2674))+(((-1.0)*(1.0)*sj6))+((r12*x2663)));
evalcond[6]=(((r12*x2669))+((r11*x2670))+x2675+((x2664*x2671))+(((-1.0)*r02*x2667))+(((-1.0)*x2668*x2674))+(((-1.0)*x2666*x2673)));
evalcond[7]=((((-1.0)*x2654*x2660))+(((-1.0)*x2657*x2661))+x2675+((r01*x2662))+(((-1.0)*x2666*x2667))+(((-1.0)*x2664*x2665))+((x2663*x2672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2676=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2676.valid){
continue;
}
CheckValue<IkReal> x2677 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj5*cj7*sj6))+((sj5*sj7)))),(cj5*cj6),IKFAST_ATAN2_MAGTHRESH);
if(!x2677.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2676.value)))+(x2677.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x2678=((1.0)*cj5);
evalcond[0]=((((-1.0)*cj6*x2678))+((r22*(IKcos(j8)))));
evalcond[1]=((((-1.0)*cj7*sj6*x2678))+((sj5*sj7))+(((-1.0)*(1.0)*r22*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[1];
IkReal x2679=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2679);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2679);
IkReal x2680=(py*r00*r11);
IkReal x2681=(py*r01*r10);
IkReal x2682=((4.0)*px);
IkReal x2683=(r00*r11);
IkReal x2684=(x2682*x2683);
IkReal x2685=(r01*r10);
IkReal x2686=(x2682*x2685);
IkReal x2687=(x2686+(((-1.0)*x2684)));
IkReal x2688=(cj6*r00*r11);
IkReal x2689=(cj6*r01*r10);
IkReal x2690=(cj6*r00*r11*sj7);
IkReal x2691=(cj6*r01*r10*sj7);
IkReal x2692=((((2.424)*x2690))+(((0.04044)*x2685))+(((-0.04044)*x2683))+(((-0.00432)*x2688))+(((-2.424)*x2691))+(((0.00432)*x2689)));
j4eval[0]=((IKabs(((((-8.0)*x2681))+(((8.0)*x2680)))))+(((0.5)*(IKabs((x2692+x2687)))))+(((0.5)*(IKabs(((((-1.0)*x2686))+x2692+x2684)))))+(((0.5)*(IKabs(((((0.808)*x2690))+(((0.01348)*x2685))+x2687+(((-0.01348)*x2683))+(((0.00144)*x2689))+(((-0.808)*x2691))+(((-0.00144)*x2688)))))))+(((0.5)*(IKabs(((((16.0)*x2680))+(((-16.0)*x2681))))))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j9]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j4evalpoly[1];
IkReal x2693=((4.0)*px);
IkReal x2694=(r00*r11);
IkReal x2695=(x2693*x2694);
IkReal x2696=(r01*r10);
IkReal x2697=(x2693*x2696);
IkReal x2698=(x2697+(((-1.0)*x2695)));
IkReal x2699=(cj6*r00*r11);
IkReal x2700=(cj6*r01*r10);
IkReal x2701=(cj6*r00*r11*sj7);
IkReal x2702=(cj6*r01*r10*sj7);
IkReal x2703=((((0.01348)*x2696))+(((0.808)*x2701))+(((-0.00144)*x2699))+(((-0.01348)*x2694))+(((-0.808)*x2702))+(((0.00144)*x2700)));
IkReal x2704=(py*r00*r11);
IkReal x2705=(py*r01*r10);
IkReal x2706=((((8.0)*x2704))+(((-8.0)*x2705)));
IkReal x2707=((((-0.00432)*x2699))+(((-0.04044)*x2694))+(((0.04044)*x2696))+(((2.424)*x2701))+(((-2.424)*x2702))+(((0.00432)*x2700)));
IkReal x2708=(x2695+(((-1.0)*x2697)));
op[0]=(x2703+x2698);
op[1]=x2706;
op[2]=(x2707+x2698);
op[3]=((((16.0)*x2704))+(((-16.0)*x2705)));
op[4]=(x2708+x2707);
op[5]=x2706;
op[6]=(x2703+x2708);
polyroots6(op,zeror,numroots);
IkReal j4array[6], cj4array[6], sj4array[6], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[6]={true,true,true,true,true,true};
_nj4 = 6;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x2709=(cj5*r00*r11);
IkReal x2710=(cj5*r01*r10);
IkReal x2711=(cj5*cj7*r00*r11);
IkReal x2712=(cj5*cj7*r01*r10);
IkReal x2713=(r00*r11*sj5*sj6);
IkReal x2714=(r01*r10*sj5*sj6);
IkReal x2715=(r00*r11*sj5*sj6*sj7);
IkReal x2716=(r01*r10*sj5*sj6*sj7);
IkReal x2717=((((-0.00144)*x2713))+(((-0.808)*x2716))+(((0.00144)*x2714))+(((-0.808)*x2711))+(((0.808)*x2712))+(((1.31604)*x2710))+(((0.808)*x2715))+(((-1.31604)*x2709)));
IkReal x2718=((4.0)*py);
IkReal x2719=(r00*r11*x2718);
IkReal x2720=(r01*r10*x2718);
IkReal x2721=((-1.0)*x2720);
IkReal x2722=(px*r00*r11);
IkReal x2723=(px*r01*r10);
IkReal x2724=((((8.0)*x2723))+(((-8.0)*x2722)));
IkReal x2725=((((2.424)*x2715))+(((-0.00432)*x2713))+(((3.94812)*x2710))+(((-3.94812)*x2709))+(((0.00432)*x2714))+(((-2.424)*x2716))+(((-2.424)*x2711))+(((2.424)*x2712)));
IkReal x2726=(x2720+(((-1.0)*x2719)));
j4evalpoly[0]=(x2721+((x2724*(htj4*htj4*htj4*htj4*htj4)))+(((htj4*htj4*htj4)*(((((16.0)*x2723))+(((-16.0)*x2722))))))+(((htj4*htj4*htj4*htj4)*((x2725+x2726))))+(((htj4*htj4*htj4*htj4*htj4*htj4)*((x2726+x2717))))+((htj4*x2724))+x2719+x2717+(((htj4*htj4)*((x2725+x2721+x2719)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j9eval[2];
IkReal x2727=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2727);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2727);
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2728=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2728);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2728);
IkReal x2729=((1.0)*sj8);
IkReal x2730=r12*r12;
IkReal x2731=cj4*cj4;
IkReal x2732=(((sj8*x2731*(r02*r02)))+(((-1.0)*x2729*x2730*x2731))+(((-1.0)*x2729))+((sj8*x2730))+(((2.0)*cj4*r02*r12*sj4*sj8)));
j9eval[0]=x2732;
j9eval[1]=IKsign(x2732);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2733=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2733);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2733);
IkReal x2734=(r02*r12);
IkReal x2735=(cj4*sj4);
IkReal x2736=((((2.0)*sj8*x2734*(cj4*cj4)))+(((-1.0)*sj8*x2735*(r02*r02)))+(((-1.0)*sj8*x2734))+((sj8*x2735*(r12*r12))));
j9eval[0]=x2736;
j9eval[1]=IKsign(x2736);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2737=(cj7*sj5);
IkReal x2738=(cj5*sj6);
IkReal x2739=(sj7*x2738);
IkReal x2740=((1.0)*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=(x2739+x2737);
evalcond[2]=((((-1.0)*(1.0)*cj5*cj6))+r22);
evalcond[3]=(((sj5*sj7))+(((-1.0)*cj5*cj7*x2740)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((0.16769)*x2737))+(((0.32901)*sj5))+(((-0.00036)*x2738))+(((0.16769)*x2739)));
evalcond[5]=(((r12*sj4))+((cj4*r02))+(((-1.0)*x2740)));
evalcond[6]=(((cj6*sj5))+(((-1.0)*(1.0)*r02*sj4))+((cj4*r12)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[2];
IkReal x2741=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2741);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2741);
sj8=0;
cj8=1.0;
j8=0;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
IkReal x2742=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2742);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2742);
sj8=0;
cj8=1.0;
j8=0;
IkReal x2743=r12*r12;
IkReal x2744=cj4*cj4;
IkReal x2745=((1.0)+((x2743*x2744))+(((-1.0)*x2744*(r02*r02)))+(((-1.0)*(2.0)*cj4*r02*r12*sj4))+(((-1.0)*x2743)));
IkReal x2746=(cj4*cj6*cj7);
IkReal x2747=(cj4*cj6*sj7);
IkReal x2748=(cj6*cj7*sj4);
IkReal x2749=(cj6*sj4*sj7);
j9eval[0]=x2745;
j9eval[1]=((IKabs((((r10*x2749))+((r11*x2748))+((r00*x2747))+((r01*x2746)))))+(IKabs(((((-1.0)*r11*x2749))+((r10*x2748))+((r00*x2746))+(((-1.0)*r01*x2747))))));
j9eval[2]=IKsign(x2745);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2750=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2750);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2750);
sj8=0;
cj8=1.0;
j8=0;
IkReal x2751=(r02*r12);
IkReal x2752=(cj4*sj4);
IkReal x2753=((((-2.0)*x2751*(cj4*cj4)))+((x2752*(r02*r02)))+x2751+(((-1.0)*x2752*(r12*r12))));
j9eval[0]=x2753;
j9eval[1]=IKsign(x2753);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2754=(cj4*sj4);
IkReal x2755=(cj4*cj5*cj7);
IkReal x2756=(cj5*sj4);
IkReal x2757=(cj7*r10);
IkReal x2758=(cj6*cj7*sj4);
IkReal x2759=(cj7*r11);
IkReal x2760=((1.0)*r00);
IkReal x2761=(cj4*sj5*sj6*sj7);
IkReal x2762=((1.0)*sj4*sj5*sj6*sj7);
CheckValue<IkReal> x2763=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2754*(r12*r12)))+((x2754*(r02*r02)))+((r02*r12*(((1.0)+(((-1.0)*(2.0)*(cj4*cj4))))))))),-1);
if(!x2763.valid){
continue;
}
CheckValue<IkReal> x2764 = IKatan2WithCheck(IkReal(((((-1.0)*x2760*x2761))+((r01*x2758))+((x2756*x2757))+(((-1.0)*r10*x2762))+((r00*x2755))+(((-1.0)*cj4*cj6*x2759)))),((((-1.0)*r11*x2762))+((r01*x2755))+(((-1.0)*x2758*x2760))+(((-1.0)*r01*x2761))+((x2756*x2759))+((cj4*cj6*x2757))),IKFAST_ATAN2_MAGTHRESH);
if(!x2764.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2763.value)))+(x2764.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x2765=IKsin(j9);
IkReal x2766=(cj4*x2765);
IkReal x2767=(sj4*x2765);
IkReal x2768=IKcos(j9);
IkReal x2769=((1.0)*cj4*r00);
IkReal x2770=((1.0)*sj4);
IkReal x2771=(cj6*sj7);
IkReal x2772=((1.0)*cj4);
IkReal x2773=(r01*x2768);
IkReal x2774=((1.0)*sj4*x2765);
IkReal x2775=(r11*x2768);
IkReal x2776=(sj5*sj6);
IkReal x2777=(r00*sj4);
IkReal x2778=((1.0)*cj4*r10);
IkReal x2779=(cj5*cj7);
IkReal x2780=(x2765*x2777);
IkReal x2781=(sj4*x2773);
IkReal x2782=(sj5*sj6*sj7);
IkReal x2783=((0.03431)*cj4*x2765);
IkReal x2784=((0.03431)*cj4);
evalcond[0]=((((-1.0)*r10*x2768*x2770))+(((-1.0)*x2768*x2769))+((r01*x2766))+((cj6*cj7))+((r11*x2767)));
evalcond[1]=((((-1.0)*x2772*x2773))+(((-1.0)*x2770*x2775))+(((-1.0)*x2765*x2769))+(((-1.0)*r10*x2774))+(((-1.0)*x2771)));
evalcond[2]=(((cj5*sj7))+((cj7*x2776))+(((-1.0)*x2768*x2778))+(((-1.0)*r01*x2774))+((x2768*x2777))+((r11*x2766)));
evalcond[3]=((((-1.0)*x2772*x2775))+x2781+x2780+x2779+(((-1.0)*x2765*x2778))+(((-1.0)*x2782)));
evalcond[4]=((0.00337)+(((-1.0)*py*x2770))+(((0.00036)*cj6))+((x2773*x2784))+(((0.03431)*r10*x2767))+((r00*x2783))+(((0.03431)*sj4*x2775))+(((-0.16769)*x2771))+(((-1.0)*px*x2772)));
evalcond[5]=(((px*sj4))+(((-0.16769)*x2782))+(((-1.0)*py*x2772))+(((-0.03431)*x2780))+(((0.16769)*x2779))+(((0.32901)*cj5))+((r10*x2783))+(((-0.03431)*x2781))+((x2775*x2784))+(((0.00036)*x2776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2785=cj4*cj4;
IkReal x2786=((1.0)*r01);
IkReal x2787=(cj4*cj6*cj7);
IkReal x2788=(cj4*cj6*sj7);
IkReal x2789=((1.0)*r11);
IkReal x2790=(cj6*cj7*sj4);
IkReal x2791=(cj6*sj4*sj7);
CheckValue<IkReal> x2792 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2791))+(((-1.0)*x2786*x2787))+(((-1.0)*r00*x2788))+(((-1.0)*x2789*x2790)))),((((-1.0)*x2786*x2788))+((r00*x2787))+(((-1.0)*x2789*x2791))+((r10*x2790))),IKFAST_ATAN2_MAGTHRESH);
if(!x2792.valid){
continue;
}
CheckValue<IkReal> x2793=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x2785*(r02*r02)))+(((-1.0)*(2.0)*cj4*r02*r12*sj4))+(((r12*r12)*(((-1.0)+x2785)))))),-1);
if(!x2793.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2792.value)+(((1.5707963267949)*(x2793.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x2794=IKsin(j9);
IkReal x2795=(cj4*x2794);
IkReal x2796=(sj4*x2794);
IkReal x2797=IKcos(j9);
IkReal x2798=((1.0)*cj4*r00);
IkReal x2799=((1.0)*sj4);
IkReal x2800=(cj6*sj7);
IkReal x2801=((1.0)*cj4);
IkReal x2802=(r01*x2797);
IkReal x2803=((1.0)*sj4*x2794);
IkReal x2804=(r11*x2797);
IkReal x2805=(sj5*sj6);
IkReal x2806=(r00*sj4);
IkReal x2807=((1.0)*cj4*r10);
IkReal x2808=(cj5*cj7);
IkReal x2809=(x2794*x2806);
IkReal x2810=(sj4*x2802);
IkReal x2811=(sj5*sj6*sj7);
IkReal x2812=((0.03431)*cj4*x2794);
IkReal x2813=((0.03431)*cj4);
evalcond[0]=(((r01*x2795))+(((-1.0)*r10*x2797*x2799))+((r11*x2796))+((cj6*cj7))+(((-1.0)*x2797*x2798)));
evalcond[1]=((((-1.0)*r10*x2803))+(((-1.0)*x2799*x2804))+(((-1.0)*x2801*x2802))+(((-1.0)*x2794*x2798))+(((-1.0)*x2800)));
evalcond[2]=(((cj5*sj7))+(((-1.0)*x2797*x2807))+((r11*x2795))+((x2797*x2806))+(((-1.0)*r01*x2803))+((cj7*x2805)));
evalcond[3]=((((-1.0)*x2811))+x2809+x2808+x2810+(((-1.0)*x2794*x2807))+(((-1.0)*x2801*x2804)));
evalcond[4]=((0.00337)+(((-0.16769)*x2800))+((r00*x2812))+(((-1.0)*px*x2801))+(((0.00036)*cj6))+(((-1.0)*py*x2799))+((x2802*x2813))+(((0.03431)*r10*x2796))+(((0.03431)*sj4*x2804)));
evalcond[5]=(((px*sj4))+(((-0.16769)*x2811))+((x2804*x2813))+(((-1.0)*py*x2801))+(((-0.03431)*x2809))+((r10*x2812))+(((-0.03431)*x2810))+(((0.32901)*cj5))+(((0.16769)*x2808))+(((0.00036)*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2814=(cj4*cj5*sj7);
IkReal x2815=(cj5*sj4*sj7);
IkReal x2816=(cj6*cj7*sj4);
IkReal x2817=((1.0)*cj4*cj6*cj7);
IkReal x2818=(cj4*cj7*sj5*sj6);
IkReal x2819=(cj7*sj4*sj5*sj6);
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2820.valid){
continue;
}
CheckValue<IkReal> x2821 = IKatan2WithCheck(IkReal((((r10*x2815))+((r10*x2819))+(((-1.0)*r10*x2817))+((r00*x2818))+((r00*x2814))+((r00*x2816)))),(((r11*x2819))+(((-1.0)*r11*x2817))+((r01*x2818))+((r01*x2814))+((r11*x2815))+((r01*x2816))),IKFAST_ATAN2_MAGTHRESH);
if(!x2821.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x2820.value)))+(x2821.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x2822=IKsin(j9);
IkReal x2823=(cj4*x2822);
IkReal x2824=(sj4*x2822);
IkReal x2825=IKcos(j9);
IkReal x2826=((1.0)*cj4*r00);
IkReal x2827=((1.0)*sj4);
IkReal x2828=(cj6*sj7);
IkReal x2829=((1.0)*cj4);
IkReal x2830=(r01*x2825);
IkReal x2831=((1.0)*sj4*x2822);
IkReal x2832=(r11*x2825);
IkReal x2833=(sj5*sj6);
IkReal x2834=(r00*sj4);
IkReal x2835=((1.0)*cj4*r10);
IkReal x2836=(cj5*cj7);
IkReal x2837=(x2822*x2834);
IkReal x2838=(sj4*x2830);
IkReal x2839=(sj5*sj6*sj7);
IkReal x2840=((0.03431)*cj4*x2822);
IkReal x2841=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x2825*x2826))+((r01*x2823))+((r11*x2824))+((cj6*cj7))+(((-1.0)*r10*x2825*x2827)));
evalcond[1]=((((-1.0)*x2827*x2832))+(((-1.0)*x2829*x2830))+(((-1.0)*x2822*x2826))+(((-1.0)*x2828))+(((-1.0)*r10*x2831)));
evalcond[2]=(((cj5*sj7))+(((-1.0)*x2825*x2835))+((x2825*x2834))+((cj7*x2833))+((r11*x2823))+(((-1.0)*r01*x2831)));
evalcond[3]=((((-1.0)*x2839))+(((-1.0)*x2829*x2832))+x2836+x2838+x2837+(((-1.0)*x2822*x2835)));
evalcond[4]=((0.00337)+(((0.03431)*r10*x2824))+(((0.00036)*cj6))+((r00*x2840))+((x2830*x2841))+(((0.03431)*sj4*x2832))+(((-1.0)*px*x2829))+(((-1.0)*py*x2827))+(((-0.16769)*x2828)));
evalcond[5]=(((px*sj4))+(((-1.0)*py*x2829))+((r10*x2840))+(((0.32901)*cj5))+(((-0.03431)*x2837))+(((0.16769)*x2836))+(((0.00036)*x2833))+((x2832*x2841))+(((-0.03431)*x2838))+(((-0.16769)*x2839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2842=(cj7*sj5);
IkReal x2843=(cj5*sj6);
IkReal x2844=(sj7*x2843);
IkReal x2845=((1.0)*sj6);
IkReal x2846=((1.0)*cj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=(x2844+x2842);
evalcond[2]=((((-1.0)*(1.0)*cj5*cj6))+(((-1.0)*(1.0)*r22)));
evalcond[3]=((((-1.0)*cj5*cj7*x2845))+((sj5*sj7)));
evalcond[4]=((((0.16769)*x2842))+(((-1.0)*(1.0)*pz))+(((0.32901)*sj5))+(((0.16769)*x2844))+(((-0.00036)*x2843)));
evalcond[5]=((((-1.0)*(1.0)*r12*sj4))+(((-1.0)*r02*x2846))+(((-1.0)*x2845)));
evalcond[6]=((((-1.0)*r12*x2846))+((cj6*sj5))+((r02*sj4)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
IkReal x2847=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2847);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2847);
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x2848=r12*r12;
IkReal x2849=cj4*cj4;
IkReal x2850=((-1.0)+(((-1.0)*x2848*x2849))+((x2849*(r02*r02)))+x2848+(((2.0)*cj4*r02*r12*sj4)));
IkReal x2851=(cj4*cj6*r00);
IkReal x2852=(cj4*r01);
IkReal x2853=(cj6*sj7);
IkReal x2854=(r10*sj4);
IkReal x2855=(r11*sj4);
IkReal x2856=((1.0)*cj6*cj7);
j9eval[0]=x2850;
j9eval[1]=((IKabs((((cj7*x2851))+((cj6*cj7*x2854))+((x2853*x2855))+((x2852*x2853)))))+(IKabs(((((-1.0)*x2855*x2856))+((sj7*x2851))+((x2853*x2854))+(((-1.0)*x2852*x2856))))));
j9eval[2]=IKsign(x2850);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2857=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2857);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2857);
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j9eval[0]=r22;
j9eval[1]=IKsign(r22);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x2858=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x2858);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x2858);
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x2859=(r02*r12);
IkReal x2860=(cj4*sj4);
IkReal x2861=((((2.0)*x2859*(cj4*cj4)))+((x2860*(r12*r12)))+(((-1.0)*x2860*(r02*r02)))+(((-1.0)*x2859)));
j9eval[0]=x2861;
j9eval[1]=IKsign(x2861);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2862=(cj4*sj4);
IkReal x2863=(cj6*cj7*sj4);
IkReal x2864=((1.0)*cj4*cj5*cj7);
IkReal x2865=((1.0)*r11);
IkReal x2866=(cj4*cj6*cj7);
IkReal x2867=(cj5*cj7*sj4);
IkReal x2868=(cj4*sj5*sj6*sj7);
IkReal x2869=(sj4*sj5*sj6*sj7);
CheckValue<IkReal> x2870 = IKatan2WithCheck(IkReal(((((-1.0)*x2865*x2866))+(((-1.0)*r00*x2864))+((r00*x2868))+(((-1.0)*r10*x2867))+((r01*x2863))+((r10*x2869)))),((((-1.0)*r00*x2863))+(((-1.0)*x2865*x2867))+((r01*x2868))+((r11*x2869))+((r10*x2866))+(((-1.0)*r01*x2864))),IKFAST_ATAN2_MAGTHRESH);
if(!x2870.valid){
continue;
}
CheckValue<IkReal> x2871=IKPowWithIntegerCheck(IKsign((((r02*r12*(((-1.0)+(((2.0)*(cj4*cj4)))))))+((x2862*(r12*r12)))+(((-1.0)*x2862*(r02*r02))))),-1);
if(!x2871.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2870.value)+(((1.5707963267949)*(x2871.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x2872=IKcos(j9);
IkReal x2873=(cj4*x2872);
IkReal x2874=(sj4*x2872);
IkReal x2875=IKsin(j9);
IkReal x2876=((1.0)*cj4*r01);
IkReal x2877=((1.0)*sj4);
IkReal x2878=(cj6*sj7);
IkReal x2879=((1.0)*cj4);
IkReal x2880=(r00*x2875);
IkReal x2881=(r10*x2875);
IkReal x2882=((1.0)*sj4*x2872);
IkReal x2883=(sj5*sj6);
IkReal x2884=(sj4*x2875);
IkReal x2885=((1.0)*cj4*r11);
IkReal x2886=(cj5*cj7);
IkReal x2887=(r00*x2884);
IkReal x2888=(r01*x2874);
IkReal x2889=(sj5*sj6*sj7);
IkReal x2890=((0.03431)*cj4);
IkReal x2891=((0.03431)*cj4*x2872);
evalcond[0]=(((r00*x2873))+(((-1.0)*r11*x2875*x2877))+((r10*x2874))+(((-1.0)*x2875*x2876))+((cj6*cj7)));
evalcond[1]=((((-1.0)*x2879*x2880))+(((-1.0)*x2872*x2876))+(((-1.0)*r11*x2882))+(((-1.0)*x2878))+(((-1.0)*x2877*x2881)));
evalcond[2]=((((-1.0)*x2875*x2885))+((cj5*sj7))+((r01*x2884))+((r10*x2873))+(((-1.0)*r00*x2882))+((cj7*x2883)));
evalcond[3]=((((-1.0)*x2879*x2881))+(((-1.0)*x2872*x2885))+x2888+x2886+x2887+(((-1.0)*x2889)));
evalcond[4]=((0.00337)+(((-1.0)*py*x2877))+(((0.00036)*cj6))+((r01*x2891))+(((-0.16769)*x2878))+((x2880*x2890))+(((0.03431)*r11*x2874))+(((0.03431)*r10*x2884))+(((-1.0)*px*x2879)));
evalcond[5]=((((0.00036)*x2883))+((px*sj4))+((x2881*x2890))+(((0.16769)*x2886))+(((0.32901)*cj5))+(((-1.0)*py*x2879))+(((-0.03431)*x2888))+((r11*x2891))+(((-0.03431)*x2887))+(((-0.16769)*x2889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2892=(cj4*cj6*cj7);
IkReal x2893=((1.0)*cj4*cj5*sj7);
IkReal x2894=((1.0)*cj5*sj4*sj7);
IkReal x2895=((1.0)*cj6*cj7*sj4);
IkReal x2896=((1.0)*cj4*cj7*sj5*sj6);
IkReal x2897=((1.0)*cj7*sj4*sj5*sj6);
CheckValue<IkReal> x2898=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2898.valid){
continue;
}
CheckValue<IkReal> x2899 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x2895))+((r10*x2892))+(((-1.0)*r10*x2894))+(((-1.0)*r10*x2897))+(((-1.0)*r00*x2896))+(((-1.0)*r00*x2893)))),((((-1.0)*r01*x2895))+((r11*x2892))+(((-1.0)*r01*x2896))+(((-1.0)*r11*x2894))+(((-1.0)*r11*x2897))+(((-1.0)*r01*x2893))),IKFAST_ATAN2_MAGTHRESH);
if(!x2899.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x2898.value)))+(x2899.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x2900=IKcos(j9);
IkReal x2901=(cj4*x2900);
IkReal x2902=(sj4*x2900);
IkReal x2903=IKsin(j9);
IkReal x2904=((1.0)*cj4*r01);
IkReal x2905=((1.0)*sj4);
IkReal x2906=(cj6*sj7);
IkReal x2907=((1.0)*cj4);
IkReal x2908=(r00*x2903);
IkReal x2909=(r10*x2903);
IkReal x2910=((1.0)*sj4*x2900);
IkReal x2911=(sj5*sj6);
IkReal x2912=(sj4*x2903);
IkReal x2913=((1.0)*cj4*r11);
IkReal x2914=(cj5*cj7);
IkReal x2915=(r00*x2912);
IkReal x2916=(r01*x2902);
IkReal x2917=(sj5*sj6*sj7);
IkReal x2918=((0.03431)*cj4);
IkReal x2919=((0.03431)*cj4*x2900);
evalcond[0]=(((r10*x2902))+(((-1.0)*x2903*x2904))+((r00*x2901))+((cj6*cj7))+(((-1.0)*r11*x2903*x2905)));
evalcond[1]=((((-1.0)*x2900*x2904))+(((-1.0)*x2907*x2908))+(((-1.0)*x2905*x2909))+(((-1.0)*x2906))+(((-1.0)*r11*x2910)));
evalcond[2]=(((cj5*sj7))+((r01*x2912))+((r10*x2901))+(((-1.0)*r00*x2910))+(((-1.0)*x2903*x2913))+((cj7*x2911)));
evalcond[3]=((((-1.0)*x2907*x2909))+x2916+x2914+x2915+(((-1.0)*x2917))+(((-1.0)*x2900*x2913)));
evalcond[4]=((0.00337)+(((-1.0)*px*x2907))+((x2908*x2918))+((r01*x2919))+(((0.00036)*cj6))+(((0.03431)*r10*x2912))+(((-0.16769)*x2906))+(((-1.0)*py*x2905))+(((0.03431)*r11*x2902)));
evalcond[5]=(((px*sj4))+(((-1.0)*py*x2907))+((x2909*x2918))+((r11*x2919))+(((-0.16769)*x2917))+(((0.16769)*x2914))+(((0.32901)*cj5))+(((-0.03431)*x2916))+(((-0.03431)*x2915))+(((0.00036)*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2920=cj4*cj4;
IkReal x2921=(cj4*cj6*r00);
IkReal x2922=(cj6*sj7);
IkReal x2923=(r10*sj4);
IkReal x2924=(cj4*r01);
IkReal x2925=((1.0)*cj6*cj7);
IkReal x2926=(r11*sj4);
CheckValue<IkReal> x2927 = IKatan2WithCheck(IkReal(((((-1.0)*x2924*x2925))+(((-1.0)*x2925*x2926))+((sj7*x2921))+((x2922*x2923)))),(((cj7*x2921))+((x2922*x2926))+((x2922*x2924))+((cj6*cj7*x2923))),IKFAST_ATAN2_MAGTHRESH);
if(!x2927.valid){
continue;
}
CheckValue<IkReal> x2928=IKPowWithIntegerCheck(IKsign(((-1.0)+(((r12*r12)*(((1.0)+(((-1.0)*x2920))))))+((x2920*(r02*r02)))+(((2.0)*cj4*r02*r12*sj4)))),-1);
if(!x2928.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2927.value)+(((1.5707963267949)*(x2928.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x2929=IKcos(j9);
IkReal x2930=(cj4*x2929);
IkReal x2931=(sj4*x2929);
IkReal x2932=IKsin(j9);
IkReal x2933=((1.0)*cj4*r01);
IkReal x2934=((1.0)*sj4);
IkReal x2935=(cj6*sj7);
IkReal x2936=((1.0)*cj4);
IkReal x2937=(r00*x2932);
IkReal x2938=(r10*x2932);
IkReal x2939=((1.0)*sj4*x2929);
IkReal x2940=(sj5*sj6);
IkReal x2941=(sj4*x2932);
IkReal x2942=((1.0)*cj4*r11);
IkReal x2943=(cj5*cj7);
IkReal x2944=(r00*x2941);
IkReal x2945=(r01*x2931);
IkReal x2946=(sj5*sj6*sj7);
IkReal x2947=((0.03431)*cj4);
IkReal x2948=((0.03431)*cj4*x2929);
evalcond[0]=((((-1.0)*x2932*x2933))+((cj6*cj7))+((r10*x2931))+(((-1.0)*r11*x2932*x2934))+((r00*x2930)));
evalcond[1]=((((-1.0)*x2936*x2937))+(((-1.0)*x2934*x2938))+(((-1.0)*x2935))+(((-1.0)*x2929*x2933))+(((-1.0)*r11*x2939)));
evalcond[2]=((((-1.0)*x2932*x2942))+((cj5*sj7))+(((-1.0)*r00*x2939))+((r10*x2930))+((r01*x2941))+((cj7*x2940)));
evalcond[3]=((((-1.0)*x2936*x2938))+x2943+x2945+x2944+(((-1.0)*x2929*x2942))+(((-1.0)*x2946)));
evalcond[4]=((0.00337)+(((0.03431)*r11*x2931))+(((0.03431)*r10*x2941))+(((0.00036)*cj6))+(((-1.0)*py*x2934))+(((-0.16769)*x2935))+((r01*x2948))+((x2937*x2947))+(((-1.0)*px*x2936)));
evalcond[5]=(((px*sj4))+(((-0.16769)*x2946))+(((0.32901)*cj5))+(((0.16769)*x2943))+((x2938*x2947))+(((-1.0)*py*x2936))+(((-0.03431)*x2944))+(((-0.03431)*x2945))+((r11*x2948))+(((0.00036)*x2940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2949=(cj4*sj4);
IkReal x2950=cj4*cj4;
IkReal x2951=(cj8*r02*r11);
IkReal x2952=(cj4*cj6*sj5);
IkReal x2953=(cj6*sj4*sj5);
IkReal x2954=(cj4*cj6*sj7*sj8);
IkReal x2955=(cj4*cj8*r12*sj4);
IkReal x2956=(cj8*r12*x2950);
IkReal x2957=(cj4*cj8*r02*sj4);
IkReal x2958=((1.0)*cj6*sj4*sj7*sj8);
IkReal x2959=(r10*((cj8*r02)));
IkReal x2960=((1.0)*r00);
IkReal x2961=((1.0)*r10);
CheckValue<IkReal> x2962 = IKatan2WithCheck(IkReal((((r11*x2955))+(((-1.0)*x2951))+((r10*x2954))+((x2950*x2951))+(((-1.0)*r01*x2957))+(((-1.0)*r00*x2958))+((r11*x2953))+((r01*x2956))+((r01*x2952)))),((((-1.0)*x2955*x2961))+((r11*x2954))+(((-1.0)*x2956*x2960))+(((-1.0)*x2953*x2961))+(((-1.0)*r01*x2958))+(((-1.0)*x2952*x2960))+(((-1.0)*x2950*x2959))+x2959+((r00*x2957))),IKFAST_ATAN2_MAGTHRESH);
if(!x2962.valid){
continue;
}
CheckValue<IkReal> x2963=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj8*x2949*(r02*r02)))+((sj8*x2949*(r12*r12)))+((r02*r12*(((((2.0)*sj8*x2950))+(((-1.0)*(1.0)*sj8)))))))),-1);
if(!x2963.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2962.value)+(((1.5707963267949)*(x2963.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x2964=(cj6*sj7);
IkReal x2965=((1.0)*cj4);
IkReal x2966=IKsin(j9);
IkReal x2967=(r00*x2966);
IkReal x2968=IKcos(j9);
IkReal x2969=(r01*x2968);
IkReal x2970=((1.0)*sj4);
IkReal x2971=(r10*x2966);
IkReal x2972=(r11*x2968);
IkReal x2973=(cj5*cj7);
IkReal x2974=(sj4*x2967);
IkReal x2975=(sj4*x2969);
IkReal x2976=((1.0)*sj6);
IkReal x2977=(cj4*cj8);
IkReal x2978=(cj8*sj4);
IkReal x2979=(cj4*sj8*x2966);
IkReal x2980=(sj4*sj8);
IkReal x2981=(r11*x2966);
IkReal x2982=((1.0)*cj4*sj8);
IkReal x2983=(r00*x2968);
IkReal x2984=(r10*x2968);
IkReal x2985=((1.0)*sj4*sj8);
IkReal x2986=((1.0)*cj8*sj4);
IkReal x2987=(r01*x2966);
IkReal x2988=(r02*sj8);
IkReal x2989=(r12*sj8);
IkReal x2990=(cj4*cj8*x2966);
IkReal x2991=((1.0)*cj4*cj8);
IkReal x2992=((0.03431)*cj4);
IkReal x2993=((0.03431)*sj4);
IkReal x2994=(sj5*sj6);
evalcond[0]=((((-1.0)*x2964))+(((-1.0)*x2970*x2971))+(((-1.0)*x2965*x2969))+(((-1.0)*x2965*x2967))+(((-1.0)*x2970*x2972)));
evalcond[1]=((((-1.0)*x2965*x2972))+(((-1.0)*sj5*sj7*x2976))+(((-1.0)*x2965*x2971))+x2973+x2974+x2975);
evalcond[2]=(((x2980*x2981))+(((-1.0)*x2984*x2985))+((r12*x2978))+(((-1.0)*x2982*x2983))+((r02*x2977))+(((-1.0)*x2976))+((r01*x2979)));
evalcond[3]=(((cj6*sj5))+(((-1.0)*r02*x2986))+((x2980*x2983))+((r12*x2977))+(((-1.0)*x2985*x2987))+((r11*x2979))+(((-1.0)*x2982*x2984)));
evalcond[4]=(((r01*x2990))+(((-1.0)*x2970*x2989))+((cj6*cj7))+(((-1.0)*x2984*x2986))+(((-1.0)*x2965*x2988))+(((-1.0)*x2983*x2991))+((x2978*x2981)));
evalcond[5]=((0.00337)+((x2967*x2992))+(((-1.0)*px*x2965))+(((0.00036)*cj6))+(((-1.0)*py*x2970))+((x2972*x2993))+(((-0.16769)*x2964))+((x2971*x2993))+((x2969*x2992)));
evalcond[6]=(((cj7*x2994))+((cj5*sj7))+((r11*x2990))+(((-1.0)*x2984*x2991))+((x2978*x2983))+((sj4*x2988))+(((-1.0)*x2986*x2987))+(((-1.0)*x2965*x2989)));
evalcond[7]=(((px*sj4))+(((-0.16769)*sj7*x2994))+(((-0.03431)*x2975))+(((0.16769)*x2973))+(((0.32901)*cj5))+((x2972*x2992))+(((-1.0)*py*x2965))+(((-0.03431)*x2974))+(((0.00036)*x2994))+((x2971*x2992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2995=((1.0)*sj8);
IkReal x2996=cj4*cj4;
IkReal x2997=(r11*((cj8*r12)));
IkReal x2998=(cj4*sj6);
IkReal x2999=(sj4*sj6);
IkReal x3000=(cj4*cj6*sj7*sj8);
IkReal x3001=(cj4*cj8*r12*sj4);
IkReal x3002=(cj4*cj8*r02*sj4);
IkReal x3003=(cj6*sj4*sj7*sj8);
IkReal x3004=(cj8*r02*x2996);
IkReal x3005=(cj8*r10*r12);
IkReal x3006=((1.0)*r00);
CheckValue<IkReal> x3007=IKPowWithIntegerCheck(IKsign((((sj8*x2996*(r02*r02)))+(((-1.0)*x2995))+(((((2.0)*r02*r12*sj8))*((cj4*sj4))))+(((r12*r12)*((sj8+(((-1.0)*x2995*x2996)))))))),-1);
if(!x3007.valid){
continue;
}
CheckValue<IkReal> x3008 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2998))+((r01*x3004))+(((-1.0)*x2996*x2997))+x2997+((r11*x3002))+(((-1.0)*r11*x2999))+((r00*x3000))+((r10*x3003))+((r01*x3001)))),((((-1.0)*x3001*x3006))+((r01*x3000))+(((-1.0)*x3005))+((r00*x2998))+(((-1.0)*r10*x3002))+((r10*x2999))+(((-1.0)*x3004*x3006))+((x2996*x3005))+((r11*x3003))),IKFAST_ATAN2_MAGTHRESH);
if(!x3008.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3007.value)))+(x3008.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x3009=(cj6*sj7);
IkReal x3010=((1.0)*cj4);
IkReal x3011=IKsin(j9);
IkReal x3012=(r00*x3011);
IkReal x3013=IKcos(j9);
IkReal x3014=(r01*x3013);
IkReal x3015=((1.0)*sj4);
IkReal x3016=(r10*x3011);
IkReal x3017=(r11*x3013);
IkReal x3018=(cj5*cj7);
IkReal x3019=(sj4*x3012);
IkReal x3020=(sj4*x3014);
IkReal x3021=((1.0)*sj6);
IkReal x3022=(cj4*cj8);
IkReal x3023=(cj8*sj4);
IkReal x3024=(cj4*sj8*x3011);
IkReal x3025=(sj4*sj8);
IkReal x3026=(r11*x3011);
IkReal x3027=((1.0)*cj4*sj8);
IkReal x3028=(r00*x3013);
IkReal x3029=(r10*x3013);
IkReal x3030=((1.0)*sj4*sj8);
IkReal x3031=((1.0)*cj8*sj4);
IkReal x3032=(r01*x3011);
IkReal x3033=(r02*sj8);
IkReal x3034=(r12*sj8);
IkReal x3035=(cj4*cj8*x3011);
IkReal x3036=((1.0)*cj4*cj8);
IkReal x3037=((0.03431)*cj4);
IkReal x3038=((0.03431)*sj4);
IkReal x3039=(sj5*sj6);
evalcond[0]=((((-1.0)*x3015*x3016))+(((-1.0)*x3009))+(((-1.0)*x3015*x3017))+(((-1.0)*x3010*x3014))+(((-1.0)*x3010*x3012)));
evalcond[1]=(x3020+(((-1.0)*sj5*sj7*x3021))+x3018+x3019+(((-1.0)*x3010*x3016))+(((-1.0)*x3010*x3017)));
evalcond[2]=((((-1.0)*x3029*x3030))+((r01*x3024))+(((-1.0)*x3027*x3028))+((r12*x3023))+((r02*x3022))+((x3025*x3026))+(((-1.0)*x3021)));
evalcond[3]=(((x3025*x3028))+((cj6*sj5))+(((-1.0)*x3030*x3032))+(((-1.0)*r02*x3031))+((r11*x3024))+(((-1.0)*x3027*x3029))+((r12*x3022)));
evalcond[4]=(((x3023*x3026))+((r01*x3035))+(((-1.0)*x3029*x3031))+(((-1.0)*x3010*x3033))+(((-1.0)*x3028*x3036))+(((-1.0)*x3015*x3034))+((cj6*cj7)));
evalcond[5]=((0.00337)+(((-1.0)*py*x3015))+((x3012*x3037))+((x3014*x3037))+(((0.00036)*cj6))+((x3017*x3038))+(((-1.0)*px*x3010))+((x3016*x3038))+(((-0.16769)*x3009)));
evalcond[6]=(((cj5*sj7))+((sj4*x3033))+(((-1.0)*x3031*x3032))+((x3023*x3028))+((cj7*x3039))+(((-1.0)*x3010*x3034))+((r11*x3035))+(((-1.0)*x3029*x3036)));
evalcond[7]=(((px*sj4))+(((-0.16769)*sj7*x3039))+((x3017*x3037))+(((0.00036)*x3039))+(((-0.03431)*x3020))+((x3016*x3037))+(((0.32901)*cj5))+(((-1.0)*py*x3010))+(((-0.03431)*x3019))+(((0.16769)*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3040=(cj4*cj5*cj7);
IkReal x3041=(cj4*cj6*sj7);
IkReal x3042=(cj5*cj7*sj4);
IkReal x3043=((1.0)*r01);
IkReal x3044=(cj6*sj4*sj7);
IkReal x3045=(cj4*sj5*sj6*sj7);
IkReal x3046=(sj4*sj5*sj6*sj7);
IkReal x3047=((1.0)*r10);
CheckValue<IkReal> x3048=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3048.valid){
continue;
}
CheckValue<IkReal> x3049 = IKatan2WithCheck(IkReal((((r01*x3040))+(((-1.0)*x3043*x3044))+((r11*x3042))+(((-1.0)*x3043*x3045))+((r11*x3041))+(((-1.0)*r11*x3046)))),(((r00*x3044))+(((-1.0)*x3041*x3047))+(((-1.0)*x3042*x3047))+(((-1.0)*r00*x3040))+((r10*x3046))+((r00*x3045))),IKFAST_ATAN2_MAGTHRESH);
if(!x3049.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x3048.value)))+(x3049.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x3050=(cj6*sj7);
IkReal x3051=((1.0)*cj4);
IkReal x3052=IKsin(j9);
IkReal x3053=(r00*x3052);
IkReal x3054=IKcos(j9);
IkReal x3055=(r01*x3054);
IkReal x3056=((1.0)*sj4);
IkReal x3057=(r10*x3052);
IkReal x3058=(r11*x3054);
IkReal x3059=(cj5*cj7);
IkReal x3060=(sj4*x3053);
IkReal x3061=(sj4*x3055);
IkReal x3062=((1.0)*sj6);
IkReal x3063=(cj4*cj8);
IkReal x3064=(cj8*sj4);
IkReal x3065=(cj4*sj8*x3052);
IkReal x3066=(sj4*sj8);
IkReal x3067=(r11*x3052);
IkReal x3068=((1.0)*cj4*sj8);
IkReal x3069=(r00*x3054);
IkReal x3070=(r10*x3054);
IkReal x3071=((1.0)*sj4*sj8);
IkReal x3072=((1.0)*cj8*sj4);
IkReal x3073=(r01*x3052);
IkReal x3074=(r02*sj8);
IkReal x3075=(r12*sj8);
IkReal x3076=(cj4*cj8*x3052);
IkReal x3077=((1.0)*cj4*cj8);
IkReal x3078=((0.03431)*cj4);
IkReal x3079=((0.03431)*sj4);
IkReal x3080=(sj5*sj6);
evalcond[0]=((((-1.0)*x3051*x3053))+(((-1.0)*x3050))+(((-1.0)*x3051*x3055))+(((-1.0)*x3056*x3057))+(((-1.0)*x3056*x3058)));
evalcond[1]=((((-1.0)*x3051*x3058))+(((-1.0)*x3051*x3057))+x3060+x3061+x3059+(((-1.0)*sj5*sj7*x3062)));
evalcond[2]=(((x3066*x3067))+((r01*x3065))+((r12*x3064))+((r02*x3063))+(((-1.0)*x3062))+(((-1.0)*x3068*x3069))+(((-1.0)*x3070*x3071)));
evalcond[3]=(((x3066*x3069))+((r12*x3063))+((r11*x3065))+((cj6*sj5))+(((-1.0)*r02*x3072))+(((-1.0)*x3068*x3070))+(((-1.0)*x3071*x3073)));
evalcond[4]=((((-1.0)*x3051*x3074))+(((-1.0)*x3069*x3077))+(((-1.0)*x3056*x3075))+((cj6*cj7))+((r01*x3076))+(((-1.0)*x3070*x3072))+((x3064*x3067)));
evalcond[5]=((0.00337)+((x3058*x3079))+(((-0.16769)*x3050))+(((0.00036)*cj6))+((x3053*x3078))+(((-1.0)*px*x3051))+((x3055*x3078))+((x3057*x3079))+(((-1.0)*py*x3056)));
evalcond[6]=(((cj5*sj7))+((cj7*x3080))+((sj4*x3074))+((r11*x3076))+(((-1.0)*x3072*x3073))+((x3064*x3069))+(((-1.0)*x3070*x3077))+(((-1.0)*x3051*x3075)));
evalcond[7]=(((px*sj4))+(((0.00036)*x3080))+(((0.16769)*x3059))+(((-0.03431)*x3061))+(((-1.0)*py*x3051))+(((-0.03431)*x3060))+((x3057*x3078))+(((0.32901)*cj5))+((x3058*x3078))+(((-0.16769)*sj7*x3080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3081=(cj7*sj5);
IkReal x3082=(cj5*sj6);
IkReal x3083=(sj7*x3082);
evalcond[0]=((IKabs(r20))+(IKabs(r21)));
evalcond[1]=(x3083+x3081);
evalcond[2]=((((-0.00036)*x3082))+(((0.16769)*x3083))+(((-1.0)*(1.0)*pz))+(((0.32901)*sj5))+(((0.16769)*x3081)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
IkReal x3084=((1.0)*r00);
IkReal x3085=(((py*r01))+((px*r00)));
IkReal x3086=(px*r01);
IkReal x3087=(pz*r01);
IkReal x3088=((-1.0)*pz*x3084);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3084);
r10=r01;
npx=x3085;
npy=((((-1.0)*py*x3084))+x3086);
npz=(pz*r22);
rxp0_0=x3087;
rxp0_1=x3088;
rxp0_2=((((-1.0)*x3086))+((py*r00)));
rxp1_0=x3088;
rxp1_1=((-1.0)*x3087);
rxp1_2=x3085;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j8eval[0]=r22;
j8eval[1]=IKsign(r22);
j8eval[2]=((IKabs((cj5*cj6)))+(IKabs(((((-1.0)*(1.0)*cj5*cj7*sj6))+((sj5*sj7))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=1.0;
evalcond[2]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
j8array[0]=-1.5707963267949;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j4eval[3];
IkReal x3089=((1.0)*r00);
IkReal x3090=(((py*r01))+((px*r00)));
IkReal x3091=(px*r01);
IkReal x3092=(pz*r01);
IkReal x3093=((-1.0)*pz*x3089);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3089);
r10=r01;
npx=x3090;
npy=(x3091+(((-1.0)*py*x3089)));
npz=(pz*r22);
rxp0_0=x3092;
rxp0_1=x3093;
rxp0_2=((((-1.0)*x3091))+((py*r00)));
rxp1_0=x3093;
rxp1_1=((-1.0)*x3092);
rxp1_2=x3090;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x3094=(cj8*r01*sj8);
IkReal x3095=(((pp*x3094))+(((-1.0)*x3094*(pz*pz))));
IkReal x3096=((337.0)*cj8*r01*sj8);
IkReal x3097=((3431.0)*cj8*r01*sj6);
IkReal x3098=((3431.0)*r01*sj6*sj8);
IkReal x3099=((36.0)*cj6*cj8*r01*sj8);
IkReal x3100=((36.0)*cj8*r01*sj6*sj8);
j4eval[0]=x3095;
j4eval[1]=((IKabs((((px*x3098))+((px*x3099))+((py*x3097))+((px*x3096))+((py*x3100)))))+(IKabs((((py*x3099))+((py*x3096))+(((-1.0)*px*x3100))+(((-1.0)*px*x3097))+((py*x3098))))));
j4eval[2]=IKsign(x3095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3101=((1.0)*r00);
IkReal x3102=(((py*r01))+((px*r00)));
IkReal x3103=(px*r01);
IkReal x3104=(pz*r01);
IkReal x3105=((-1.0)*pz*x3101);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3101);
r10=r01;
npx=x3102;
npy=(x3103+(((-1.0)*py*x3101)));
npz=(pz*r22);
rxp0_0=x3104;
rxp0_1=x3105;
rxp0_2=((((-1.0)*x3103))+((py*r00)));
rxp1_0=x3105;
rxp1_1=((-1.0)*x3104);
rxp1_2=x3102;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x3106=(cj8*r00*sj8);
IkReal x3107=((((-1.0)*x3106*(pz*pz)))+((pp*x3106)));
IkReal x3108=((337.0)*cj8*r00*sj8);
IkReal x3109=((3431.0)*cj8*r00*sj6);
IkReal x3110=((3431.0)*r00*sj6*sj8);
IkReal x3111=((36.0)*cj6*cj8*r00*sj8);
IkReal x3112=((36.0)*cj8*r00*sj6*sj8);
j4eval[0]=x3107;
j4eval[1]=((IKabs(((((-1.0)*px*x3112))+((py*x3110))+((py*x3108))+((py*x3111))+(((-1.0)*px*x3109)))))+(IKabs((((py*x3112))+((px*x3110))+((px*x3111))+((px*x3108))+((py*x3109))))));
j4eval[2]=IKsign(x3107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3113=((1.0)*r00);
IkReal x3114=(((py*r01))+((px*r00)));
IkReal x3115=(px*r01);
IkReal x3116=(pz*r01);
IkReal x3117=((-1.0)*pz*x3113);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3113);
r10=r01;
npx=x3114;
npy=(x3115+(((-1.0)*py*x3113)));
npz=(pz*r22);
rxp0_0=x3116;
rxp0_1=x3117;
rxp0_2=(((py*r00))+(((-1.0)*x3115)));
rxp1_0=x3117;
rxp1_1=((-1.0)*x3116);
rxp1_2=x3114;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x3118=(cj8*r00*r01*sj8);
IkReal x3119=((((-1.0)*x3118*(pz*pz)))+((pp*x3118)));
IkReal x3120=((337.0)*cj8*r00*r01*sj8);
IkReal x3121=((3431.0)*cj8*r00*r01*sj6);
IkReal x3122=((3431.0)*r00*r01*sj6*sj8);
IkReal x3123=((36.0)*cj6*cj8*r00*r01*sj8);
IkReal x3124=((36.0)*cj8*r00*r01*sj6*sj8);
j4eval[0]=x3119;
j4eval[1]=IKsign(x3119);
j4eval[2]=((IKabs((((px*x3123))+((px*x3122))+((px*x3120))+((py*x3124))+((py*x3121)))))+(IKabs((((py*x3120))+((py*x3123))+((py*x3122))+(((-1.0)*px*x3124))+(((-1.0)*px*x3121))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x3125=((1.0)*r00);
IkReal x3126=(((py*r01))+((px*r00)));
IkReal x3127=(px*r01);
IkReal x3128=(pz*r01);
IkReal x3129=((-1.0)*pz*x3125);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3125);
r10=r01;
npx=x3126;
npy=(x3127+(((-1.0)*py*x3125)));
npz=(pz*r22);
rxp0_0=x3128;
rxp0_1=x3129;
rxp0_2=(((py*r00))+(((-1.0)*x3127)));
rxp1_0=x3129;
rxp1_1=((-1.0)*x3128);
rxp1_2=x3126;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x3130=pz*pz;
j4eval[0]=(pp+(((-1.0)*x3130)));
j4eval[1]=IKsign(((((-100000.0)*x3130))+(((100000.0)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3131=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x3131.valid){
continue;
}
CheckValue<IkReal> x3132 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x3132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3131.value)))+(x3132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x3133=IKcos(j4);
IkReal x3134=(r01*x3133);
IkReal x3135=((1.0)*px);
IkReal x3136=IKsin(j4);
IkReal x3137=(r01*x3136);
IkReal x3138=(r00*x3133);
IkReal x3139=(r00*x3136);
evalcond[0]=((((-1.0)*x3135*x3137))+((py*x3134)));
evalcond[1]=(((py*x3138))+(((-1.0)*x3135*x3139)));
evalcond[2]=(((px*x3138))+(((-1.0)*(0.00337)*r00))+((py*x3139)));
evalcond[3]=((((-1.0)*x3134*x3135))+(((0.00337)*r01))+(((-1.0)*py*x3137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3140=((29.146021568056)*px);
IkReal x3141=(r00*x3140);
IkReal x3142=(cj4*sj4);
IkReal x3143=(r01*x3140);
IkReal x3144=((29.146021568056)*cj4*py*sj4);
IkReal x3145=cj4*cj4;
IkReal x3146=((29.146021568056)*py*x3145);
if( IKabs((((r01*x3146))+(((-1.0)*x3141*x3145))+(((-1.0)*r00*x3144))+(((-1.0)*x3142*x3143))+x3141)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x3146))+((x3141*x3142))+(((-1.0)*x3143*x3145))+x3143+(((-1.0)*r01*x3144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3146))+(((-1.0)*x3141*x3145))+(((-1.0)*r00*x3144))+(((-1.0)*x3142*x3143))+x3141))+IKsqr(((((-1.0)*r00*x3146))+((x3141*x3142))+(((-1.0)*x3143*x3145))+x3143+(((-1.0)*r01*x3144))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x3146))+(((-1.0)*x3141*x3145))+(((-1.0)*r00*x3144))+(((-1.0)*x3142*x3143))+x3141), ((((-1.0)*r00*x3146))+((x3141*x3142))+(((-1.0)*x3143*x3145))+x3143+(((-1.0)*r01*x3144))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3147=IKcos(j9);
IkReal x3148=(r00*x3147);
IkReal x3149=(cj4*x3148);
IkReal x3150=IKsin(j9);
IkReal x3151=(r00*x3150);
IkReal x3152=(sj4*x3151);
IkReal x3153=(r01*x3147);
IkReal x3154=(sj4*x3153);
IkReal x3155=((1.0)*cj4);
IkReal x3156=(r01*x3150);
IkReal x3157=(sj4*x3148);
IkReal x3158=((1.0)*sj4);
IkReal x3159=((0.03431)*cj4);
evalcond[0]=(x3154+x3152+(((-1.0)*x3155*x3156))+x3149);
evalcond[1]=(x3157+(((-1.0)*x3156*x3158))+(((-1.0)*x3151*x3155))+(((-1.0)*x3153*x3155)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x3154))+((x3156*x3159))+(((-0.03431)*x3149))+(((-0.03431)*x3152))+(((-1.0)*py*x3155)));
evalcond[3]=((0.00337)+((x3153*x3159))+(((-1.0)*py*x3158))+((x3151*x3159))+(((0.03431)*sj4*x3156))+(((-1.0)*px*x3155))+(((-0.03431)*x3157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x3160=((1.0)*r00);
IkReal x3161=(((py*r01))+((px*r00)));
IkReal x3162=(px*r01);
IkReal x3163=(pz*r01);
IkReal x3164=((-1.0)*pz*x3160);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3160);
r10=r01;
npx=x3161;
npy=(x3162+(((-1.0)*py*x3160)));
npz=(pz*r22);
rxp0_0=x3163;
rxp0_1=x3164;
rxp0_2=(((py*r00))+(((-1.0)*x3162)));
rxp1_0=x3164;
rxp1_1=((-1.0)*x3163);
rxp1_2=x3161;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x3165=pz*pz;
j4eval[0]=((((-1.0)*x3165))+pp);
j4eval[1]=IKsign(((((-100000.0)*x3165))+(((100000.0)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3166=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x3166.valid){
continue;
}
CheckValue<IkReal> x3167 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x3167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3166.value)))+(x3167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x3168=IKcos(j4);
IkReal x3169=(r01*x3168);
IkReal x3170=((1.0)*px);
IkReal x3171=IKsin(j4);
IkReal x3172=(r01*x3171);
IkReal x3173=(r00*x3168);
IkReal x3174=(r00*x3171);
evalcond[0]=((((-1.0)*x3170*x3172))+((py*x3169)));
evalcond[1]=((((-1.0)*x3170*x3174))+((py*x3173)));
evalcond[2]=((((-1.0)*(0.00337)*r00))+((py*x3174))+((px*x3173)));
evalcond[3]=((((0.00337)*r01))+(((-1.0)*py*x3172))+(((-1.0)*x3169*x3170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3175=((29.146021568056)*px);
IkReal x3176=(r00*x3175);
IkReal x3177=(cj4*sj4);
IkReal x3178=(r01*x3175);
IkReal x3179=((29.146021568056)*cj4*py*sj4);
IkReal x3180=cj4*cj4;
IkReal x3181=((29.146021568056)*py*x3180);
if( IKabs((x3176+(((-1.0)*r00*x3179))+((r01*x3181))+(((-1.0)*x3176*x3180))+(((-1.0)*x3177*x3178)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3178+(((-1.0)*r01*x3179))+(((-1.0)*r00*x3181))+((x3176*x3177))+(((-1.0)*x3178*x3180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3176+(((-1.0)*r00*x3179))+((r01*x3181))+(((-1.0)*x3176*x3180))+(((-1.0)*x3177*x3178))))+IKsqr((x3178+(((-1.0)*r01*x3179))+(((-1.0)*r00*x3181))+((x3176*x3177))+(((-1.0)*x3178*x3180))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x3176+(((-1.0)*r00*x3179))+((r01*x3181))+(((-1.0)*x3176*x3180))+(((-1.0)*x3177*x3178))), (x3178+(((-1.0)*r01*x3179))+(((-1.0)*r00*x3181))+((x3176*x3177))+(((-1.0)*x3178*x3180))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3182=IKcos(j9);
IkReal x3183=(r00*x3182);
IkReal x3184=(cj4*x3183);
IkReal x3185=IKsin(j9);
IkReal x3186=(r00*x3185);
IkReal x3187=(sj4*x3186);
IkReal x3188=(r01*x3182);
IkReal x3189=(sj4*x3188);
IkReal x3190=((1.0)*cj4);
IkReal x3191=(r01*x3185);
IkReal x3192=(sj4*x3183);
IkReal x3193=((1.0)*sj4);
IkReal x3194=((0.03431)*cj4);
evalcond[0]=(x3187+x3184+x3189+(((-1.0)*x3190*x3191)));
evalcond[1]=((((-1.0)*x3186*x3190))+x3192+(((-1.0)*x3188*x3190))+(((-1.0)*x3191*x3193)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x3187))+((x3191*x3194))+(((-0.03431)*x3189))+(((-0.03431)*x3184))+(((-1.0)*py*x3190)));
evalcond[3]=((0.00337)+((x3186*x3194))+((x3188*x3194))+(((-0.03431)*x3192))+(((-1.0)*px*x3190))+(((-1.0)*py*x3193))+(((0.03431)*sj4*x3191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x3195=((1.0)*r00);
IkReal x3196=(((py*r01))+((px*r00)));
IkReal x3197=(px*r01);
IkReal x3198=(pz*r01);
IkReal x3199=((-1.0)*pz*x3195);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3195);
r10=r01;
npx=x3196;
npy=(x3197+(((-1.0)*py*x3195)));
npz=(pz*r22);
rxp0_0=x3198;
rxp0_1=x3199;
rxp0_2=((((-1.0)*x3197))+((py*r00)));
rxp1_0=x3199;
rxp1_1=((-1.0)*x3198);
rxp1_2=x3196;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x3200=pz*pz;
j4eval[0]=((((-1.0)*x3200))+pp);
j4eval[1]=IKsign(((((100000.0)*pp))+(((-100000.0)*x3200))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3201=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x3201.valid){
continue;
}
CheckValue<IkReal> x3202 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x3202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3201.value)))+(x3202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x3203=IKcos(j4);
IkReal x3204=(r01*x3203);
IkReal x3205=((1.0)*px);
IkReal x3206=IKsin(j4);
IkReal x3207=(r01*x3206);
IkReal x3208=(r00*x3203);
IkReal x3209=(r00*x3206);
evalcond[0]=((((-1.0)*x3205*x3207))+((py*x3204)));
evalcond[1]=((((-1.0)*x3205*x3209))+((py*x3208)));
evalcond[2]=(((px*x3208))+(((-1.0)*(0.00337)*r00))+((py*x3209)));
evalcond[3]=((((-1.0)*x3204*x3205))+(((0.00337)*r01))+(((-1.0)*py*x3207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3210=((29.146021568056)*px);
IkReal x3211=(r00*x3210);
IkReal x3212=(cj4*sj4);
IkReal x3213=(r01*x3210);
IkReal x3214=((29.146021568056)*cj4*py*sj4);
IkReal x3215=cj4*cj4;
IkReal x3216=((29.146021568056)*py*x3215);
if( IKabs(((((-1.0)*x3211*x3215))+((r01*x3216))+(((-1.0)*x3212*x3213))+(((-1.0)*r00*x3214))+x3211)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3213*x3215))+((x3211*x3212))+(((-1.0)*r00*x3216))+(((-1.0)*r01*x3214))+x3213)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3211*x3215))+((r01*x3216))+(((-1.0)*x3212*x3213))+(((-1.0)*r00*x3214))+x3211))+IKsqr(((((-1.0)*x3213*x3215))+((x3211*x3212))+(((-1.0)*r00*x3216))+(((-1.0)*r01*x3214))+x3213))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x3211*x3215))+((r01*x3216))+(((-1.0)*x3212*x3213))+(((-1.0)*r00*x3214))+x3211), ((((-1.0)*x3213*x3215))+((x3211*x3212))+(((-1.0)*r00*x3216))+(((-1.0)*r01*x3214))+x3213));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3217=IKcos(j9);
IkReal x3218=(r00*x3217);
IkReal x3219=(cj4*x3218);
IkReal x3220=IKsin(j9);
IkReal x3221=(r00*x3220);
IkReal x3222=(sj4*x3221);
IkReal x3223=(r01*x3217);
IkReal x3224=(sj4*x3223);
IkReal x3225=((1.0)*cj4);
IkReal x3226=(r01*x3220);
IkReal x3227=(sj4*x3218);
IkReal x3228=((1.0)*sj4);
IkReal x3229=((0.03431)*cj4);
evalcond[0]=(x3224+x3222+x3219+(((-1.0)*x3225*x3226)));
evalcond[1]=((((-1.0)*x3223*x3225))+x3227+(((-1.0)*x3221*x3225))+(((-1.0)*x3226*x3228)));
evalcond[2]=(((px*sj4))+((x3226*x3229))+(((-0.03431)*x3219))+(((-0.03431)*x3222))+(((-0.03431)*x3224))+(((-1.0)*py*x3225)));
evalcond[3]=((0.00337)+(((-0.03431)*x3227))+(((-1.0)*px*x3225))+(((0.03431)*sj4*x3226))+(((-1.0)*py*x3228))+((x3221*x3229))+((x3223*x3229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x3230=((1.0)*r00);
IkReal x3231=(((py*r01))+((px*r00)));
IkReal x3232=(px*r01);
IkReal x3233=(pz*r01);
IkReal x3234=((-1.0)*pz*x3230);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3230);
r10=r01;
npx=x3231;
npy=(x3232+(((-1.0)*py*x3230)));
npz=(pz*r22);
rxp0_0=x3233;
rxp0_1=x3234;
rxp0_2=((((-1.0)*x3232))+((py*r00)));
rxp1_0=x3234;
rxp1_1=((-1.0)*x3233);
rxp1_2=x3231;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x3235=pz*pz;
j4eval[0]=(pp+(((-1.0)*x3235)));
j4eval[1]=IKsign(((((-100000.0)*x3235))+(((100000.0)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3236=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x3236.valid){
continue;
}
CheckValue<IkReal> x3237 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x3237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3236.value)))+(x3237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x3238=IKcos(j4);
IkReal x3239=(r01*x3238);
IkReal x3240=((1.0)*px);
IkReal x3241=IKsin(j4);
IkReal x3242=(r01*x3241);
IkReal x3243=(r00*x3238);
IkReal x3244=(r00*x3241);
evalcond[0]=(((py*x3239))+(((-1.0)*x3240*x3242)));
evalcond[1]=(((py*x3243))+(((-1.0)*x3240*x3244)));
evalcond[2]=((((-1.0)*(0.00337)*r00))+((px*x3243))+((py*x3244)));
evalcond[3]=((((0.00337)*r01))+(((-1.0)*x3239*x3240))+(((-1.0)*py*x3242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3245=((29.146021568056)*px);
IkReal x3246=(r00*x3245);
IkReal x3247=(cj4*sj4);
IkReal x3248=(r01*x3245);
IkReal x3249=((29.146021568056)*cj4*py*sj4);
IkReal x3250=cj4*cj4;
IkReal x3251=((29.146021568056)*py*x3250);
if( IKabs((((r01*x3251))+(((-1.0)*r00*x3249))+(((-1.0)*x3247*x3248))+(((-1.0)*x3246*x3250))+x3246)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3248*x3250))+(((-1.0)*r01*x3249))+(((-1.0)*r00*x3251))+x3248+((x3246*x3247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3251))+(((-1.0)*r00*x3249))+(((-1.0)*x3247*x3248))+(((-1.0)*x3246*x3250))+x3246))+IKsqr(((((-1.0)*x3248*x3250))+(((-1.0)*r01*x3249))+(((-1.0)*r00*x3251))+x3248+((x3246*x3247))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x3251))+(((-1.0)*r00*x3249))+(((-1.0)*x3247*x3248))+(((-1.0)*x3246*x3250))+x3246), ((((-1.0)*x3248*x3250))+(((-1.0)*r01*x3249))+(((-1.0)*r00*x3251))+x3248+((x3246*x3247))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3252=IKcos(j9);
IkReal x3253=(r00*x3252);
IkReal x3254=(cj4*x3253);
IkReal x3255=IKsin(j9);
IkReal x3256=(r00*x3255);
IkReal x3257=(sj4*x3256);
IkReal x3258=(r01*x3252);
IkReal x3259=(sj4*x3258);
IkReal x3260=((1.0)*cj4);
IkReal x3261=(r01*x3255);
IkReal x3262=(sj4*x3253);
IkReal x3263=((1.0)*sj4);
IkReal x3264=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3260*x3261))+x3257+x3254+x3259);
evalcond[1]=((((-1.0)*x3261*x3263))+(((-1.0)*x3256*x3260))+(((-1.0)*x3258*x3260))+x3262);
evalcond[2]=(((px*sj4))+(((-1.0)*py*x3260))+((x3261*x3264))+(((-0.03431)*x3257))+(((-0.03431)*x3259))+(((-0.03431)*x3254)));
evalcond[3]=((0.00337)+((x3258*x3264))+(((0.03431)*sj4*x3261))+(((-0.03431)*x3262))+(((-1.0)*px*x3260))+((x3256*x3264))+(((-1.0)*py*x3263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(px)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3265=((1.0)*r00);
IkReal x3266=(pz*r01);
IkReal x3267=((-1.0)*pz*x3265);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3265);
r10=r01;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=x3266;
rxp0_1=x3267;
rxp0_2=0;
rxp1_0=x3267;
rxp1_1=((-1.0)*x3266);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
px=0;
py=0;
pp=pz*pz;
j4eval[0]=60.0;
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3268=((0.0104925677645001)*cj4*sj6);
IkReal x3269=((0.0104925677645001)*sj4*sj6);
if( IKabs(((((-1.0)*r01*x3268))+((r00*x3269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x3268))+((r01*x3269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x3268))+((r00*x3269))))+IKsqr((((r00*x3268))+((r01*x3269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r01*x3268))+((r00*x3269))), (((r00*x3268))+((r01*x3269))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3270=IKcos(j9);
IkReal x3271=(r00*x3270);
IkReal x3272=(cj4*x3271);
IkReal x3273=IKsin(j9);
IkReal x3274=(r00*sj4*x3273);
IkReal x3275=(r01*sj4*x3270);
IkReal x3276=(cj4*r01*x3273);
IkReal x3277=(sj4*x3271);
IkReal x3278=(cj4*r00*x3273);
IkReal x3279=(cj4*r01*x3270);
IkReal x3280=(r01*sj4*x3273);
evalcond[0]=((((-1.0)*x3276))+x3272+x3274+x3275);
evalcond[1]=((((-1.0)*x3278))+x3277+(((-1.0)*x3280))+(((-1.0)*x3279)));
evalcond[2]=((((-0.03431)*x3272))+(((0.03431)*x3276))+(((-0.03431)*x3275))+(((-0.03431)*x3274))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+(((0.03431)*x3278))+(((-0.03431)*x3277))+(((0.00036)*cj6))+(((0.03431)*x3279))+(((0.03431)*x3280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3281=(cj8*r00*r01*sj8);
IkReal x3282=((0.03431)*sj6);
IkReal x3283=(cj8*r01*((((r00*x3282))+(((((0.00036)*sj6))*((r00*sj8)))))));
IkReal x3284=(cj8*r01);
IkReal x3285=(r00*sj8*(((((0.00337)*x3284))+(((0.00036)*cj6*x3284))+((r01*x3282)))));
CheckValue<IkReal> x3286=IKPowWithIntegerCheck(IKsign((((pp*x3281))+(((-1.0)*x3281*(pz*pz))))),-1);
if(!x3286.valid){
continue;
}
CheckValue<IkReal> x3287 = IKatan2WithCheck(IkReal(((((-1.0)*px*x3283))+((py*x3285)))),(((py*x3283))+((px*x3285))),IKFAST_ATAN2_MAGTHRESH);
if(!x3287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3286.value)))+(x3287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x3288=((0.00337)*cj8);
IkReal x3289=((0.03431)*sj6);
IkReal x3290=(r00*x3289);
IkReal x3291=((0.00036)*cj6*cj8);
IkReal x3292=(cj8*r00);
IkReal x3293=IKcos(j4);
IkReal x3294=(px*x3293);
IkReal x3295=IKsin(j4);
IkReal x3296=(py*x3295);
IkReal x3297=(r01*x3289);
IkReal x3298=((0.00036)*sj6*sj8);
IkReal x3299=(px*sj8*x3295);
IkReal x3300=((1.0)*py*sj8*x3293);
IkReal x3301=((1.0)*cj8*r01);
evalcond[0]=((((-1.0)*r00*x3288))+(((-1.0)*r00*x3291))+((x3292*x3294))+(((-1.0)*x3290))+((x3292*x3296)));
evalcond[1]=(((r01*x3299))+x3297+(((-1.0)*r01*x3300))+((r01*x3298)));
evalcond[2]=(((r00*x3298))+x3290+((r00*x3299))+(((-1.0)*r00*x3300)));
evalcond[3]=((((-1.0)*x3294*x3301))+((r01*x3288))+x3297+((r01*x3291))+(((-1.0)*x3296*x3301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x3302=((1.0)*r00);
IkReal x3303=(((py*r01))+((px*r00)));
IkReal x3304=(px*r01);
IkReal x3305=(pz*r01);
IkReal x3306=((-1.0)*pz*x3302);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3302);
r10=r01;
npx=x3303;
npy=(x3304+(((-1.0)*py*x3302)));
npz=(pz*r22);
rxp0_0=x3305;
rxp0_1=x3306;
rxp0_2=((((-1.0)*x3304))+((py*r00)));
rxp1_0=x3306;
rxp1_1=((-1.0)*x3305);
rxp1_2=x3303;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x3307=((1.0)*r00);
IkReal x3308=(((py*r01))+((px*r00)));
IkReal x3309=(px*r01);
IkReal x3310=(pz*r01);
IkReal x3311=((-1.0)*pz*x3307);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3307);
r10=r01;
npx=x3308;
npy=((((-1.0)*py*x3307))+x3309);
npz=(pz*r22);
rxp0_0=x3310;
rxp0_1=x3311;
rxp0_2=(((py*r00))+(((-1.0)*x3309)));
rxp1_0=x3311;
rxp1_1=((-1.0)*x3310);
rxp1_2=x3308;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=cj6;
j9eval[3]=((sj4*sj4)+(cj4*cj4));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x3312=((1.0)*r00);
IkReal x3313=(((py*r01))+((px*r00)));
IkReal x3314=(px*r01);
IkReal x3315=(pz*r01);
IkReal x3316=((-1.0)*pz*x3312);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3312);
r10=r01;
npx=x3313;
npy=((((-1.0)*py*x3312))+x3314);
npz=(pz*r22);
rxp0_0=x3315;
rxp0_1=x3316;
rxp0_2=(((py*r00))+(((-1.0)*x3314)));
rxp1_0=x3316;
rxp1_1=((-1.0)*x3315);
rxp1_2=x3313;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=cj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3317=((29.146021568056)*px);
IkReal x3318=(r00*x3317);
IkReal x3319=(cj4*sj4);
IkReal x3320=(r01*x3317);
IkReal x3321=((29.146021568056)*cj4*py*sj4);
IkReal x3322=cj4*cj4;
IkReal x3323=((29.146021568056)*py*x3322);
if( IKabs(((((-1.0)*r00*x3321))+(((-1.0)*x3319*x3320))+((r01*x3323))+x3318+(((-1.0)*x3318*x3322)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x3323))+(((-1.0)*r01*x3321))+x3320+(((-1.0)*x3320*x3322))+((x3318*x3319)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x3321))+(((-1.0)*x3319*x3320))+((r01*x3323))+x3318+(((-1.0)*x3318*x3322))))+IKsqr(((((-1.0)*r00*x3323))+(((-1.0)*r01*x3321))+x3320+(((-1.0)*x3320*x3322))+((x3318*x3319))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x3321))+(((-1.0)*x3319*x3320))+((r01*x3323))+x3318+(((-1.0)*x3318*x3322))), ((((-1.0)*r00*x3323))+(((-1.0)*r01*x3321))+x3320+(((-1.0)*x3320*x3322))+((x3318*x3319))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3324=IKcos(j9);
IkReal x3325=(r00*x3324);
IkReal x3326=(cj4*x3325);
IkReal x3327=IKsin(j9);
IkReal x3328=(r00*x3327);
IkReal x3329=(sj4*x3328);
IkReal x3330=(r01*x3324);
IkReal x3331=(sj4*x3330);
IkReal x3332=((1.0)*cj4);
IkReal x3333=(r01*x3327);
IkReal x3334=(sj4*x3325);
IkReal x3335=((1.0)*sj4);
IkReal x3336=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3332*x3333))+x3329+x3326+x3331);
evalcond[1]=((((-1.0)*x3328*x3332))+(((-1.0)*x3330*x3332))+x3334+(((-1.0)*x3333*x3335)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x3326))+(((-0.03431)*x3329))+((x3333*x3336))+(((-0.03431)*x3331))+(((-1.0)*py*x3332)));
evalcond[3]=((0.00337)+(((-1.0)*px*x3332))+(((-0.03431)*x3334))+((x3330*x3336))+((x3328*x3336))+(((-1.0)*py*x3335))+(((0.03431)*sj4*x3333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3337=((29.146021568056)*px);
IkReal x3338=(r00*x3337);
IkReal x3339=(cj4*sj4);
IkReal x3340=(r01*x3337);
IkReal x3341=((29.146021568056)*cj4*py*sj4);
IkReal x3342=cj4*cj4;
IkReal x3343=((29.146021568056)*py*x3342);
if( IKabs((((r01*x3343))+(((-1.0)*x3339*x3340))+(((-1.0)*x3338*x3342))+x3338+(((-1.0)*r00*x3341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3340+(((-1.0)*r01*x3341))+(((-1.0)*x3340*x3342))+((x3338*x3339))+(((-1.0)*r00*x3343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3343))+(((-1.0)*x3339*x3340))+(((-1.0)*x3338*x3342))+x3338+(((-1.0)*r00*x3341))))+IKsqr((x3340+(((-1.0)*r01*x3341))+(((-1.0)*x3340*x3342))+((x3338*x3339))+(((-1.0)*r00*x3343))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x3343))+(((-1.0)*x3339*x3340))+(((-1.0)*x3338*x3342))+x3338+(((-1.0)*r00*x3341))), (x3340+(((-1.0)*r01*x3341))+(((-1.0)*x3340*x3342))+((x3338*x3339))+(((-1.0)*r00*x3343))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3344=IKcos(j9);
IkReal x3345=(r00*x3344);
IkReal x3346=(cj4*x3345);
IkReal x3347=IKsin(j9);
IkReal x3348=(r00*x3347);
IkReal x3349=(sj4*x3348);
IkReal x3350=(r01*x3344);
IkReal x3351=(sj4*x3350);
IkReal x3352=((1.0)*cj4);
IkReal x3353=(r01*x3347);
IkReal x3354=(sj4*x3345);
IkReal x3355=((1.0)*sj4);
IkReal x3356=((0.03431)*cj4);
evalcond[0]=(x3351+x3346+x3349+(((-1.0)*x3352*x3353)));
evalcond[1]=(x3354+(((-1.0)*x3348*x3352))+(((-1.0)*x3350*x3352))+(((-1.0)*x3353*x3355)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x3346))+(((-0.03431)*x3351))+(((-0.03431)*x3349))+((x3353*x3356))+(((-1.0)*py*x3352)));
evalcond[3]=((0.00337)+((x3350*x3356))+(((-0.03431)*x3354))+(((0.03431)*sj4*x3353))+((x3348*x3356))+(((-1.0)*py*x3355))+(((-1.0)*px*x3352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3357=((29.146021568056)*px);
IkReal x3358=(r00*x3357);
IkReal x3359=(cj4*sj4);
IkReal x3360=(r01*x3357);
IkReal x3361=((29.146021568056)*cj4*py*sj4);
IkReal x3362=cj4*cj4;
IkReal x3363=((29.146021568056)*py*x3362);
if( IKabs((x3358+((r01*x3363))+(((-1.0)*x3359*x3360))+(((-1.0)*x3358*x3362))+(((-1.0)*r00*x3361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3361))+x3360+(((-1.0)*x3360*x3362))+((x3358*x3359))+(((-1.0)*r00*x3363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3358+((r01*x3363))+(((-1.0)*x3359*x3360))+(((-1.0)*x3358*x3362))+(((-1.0)*r00*x3361))))+IKsqr(((((-1.0)*r01*x3361))+x3360+(((-1.0)*x3360*x3362))+((x3358*x3359))+(((-1.0)*r00*x3363))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x3358+((r01*x3363))+(((-1.0)*x3359*x3360))+(((-1.0)*x3358*x3362))+(((-1.0)*r00*x3361))), ((((-1.0)*r01*x3361))+x3360+(((-1.0)*x3360*x3362))+((x3358*x3359))+(((-1.0)*r00*x3363))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3364=IKcos(j9);
IkReal x3365=(r00*x3364);
IkReal x3366=(cj4*x3365);
IkReal x3367=IKsin(j9);
IkReal x3368=(r00*x3367);
IkReal x3369=(sj4*x3368);
IkReal x3370=(r01*x3364);
IkReal x3371=(sj4*x3370);
IkReal x3372=((1.0)*cj4);
IkReal x3373=(r01*x3367);
IkReal x3374=(sj4*x3365);
IkReal x3375=((1.0)*sj4);
IkReal x3376=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3372*x3373))+x3366+x3369+x3371);
evalcond[1]=((((-1.0)*x3370*x3372))+(((-1.0)*x3373*x3375))+(((-1.0)*x3368*x3372))+x3374);
evalcond[2]=(((px*sj4))+(((-0.03431)*x3366))+(((-0.03431)*x3369))+((x3373*x3376))+(((-0.03431)*x3371))+(((-1.0)*py*x3372)));
evalcond[3]=((0.00373)+(((0.03431)*sj4*x3373))+((x3370*x3376))+(((-0.03431)*x3374))+((x3368*x3376))+(((-1.0)*px*x3372))+(((-1.0)*py*x3375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3377=((29.146021568056)*px);
IkReal x3378=(r00*x3377);
IkReal x3379=(cj4*sj4);
IkReal x3380=(r01*x3377);
IkReal x3381=((29.146021568056)*cj4*py*sj4);
IkReal x3382=cj4*cj4;
IkReal x3383=((29.146021568056)*py*x3382);
if( IKabs((((r01*x3383))+(((-1.0)*r00*x3381))+(((-1.0)*x3378*x3382))+(((-1.0)*x3379*x3380))+x3378)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3381))+x3380+(((-1.0)*r00*x3383))+(((-1.0)*x3380*x3382))+((x3378*x3379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3383))+(((-1.0)*r00*x3381))+(((-1.0)*x3378*x3382))+(((-1.0)*x3379*x3380))+x3378))+IKsqr(((((-1.0)*r01*x3381))+x3380+(((-1.0)*r00*x3383))+(((-1.0)*x3380*x3382))+((x3378*x3379))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x3383))+(((-1.0)*r00*x3381))+(((-1.0)*x3378*x3382))+(((-1.0)*x3379*x3380))+x3378), ((((-1.0)*r01*x3381))+x3380+(((-1.0)*r00*x3383))+(((-1.0)*x3380*x3382))+((x3378*x3379))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3384=IKcos(j9);
IkReal x3385=(r00*x3384);
IkReal x3386=(cj4*x3385);
IkReal x3387=IKsin(j9);
IkReal x3388=(r00*x3387);
IkReal x3389=(sj4*x3388);
IkReal x3390=(r01*x3384);
IkReal x3391=(sj4*x3390);
IkReal x3392=((1.0)*cj4);
IkReal x3393=(r01*x3387);
IkReal x3394=(sj4*x3385);
IkReal x3395=((1.0)*sj4);
IkReal x3396=((0.03431)*cj4);
evalcond[0]=(x3389+x3386+(((-1.0)*x3392*x3393))+x3391);
evalcond[1]=((((-1.0)*x3390*x3392))+x3394+(((-1.0)*x3388*x3392))+(((-1.0)*x3393*x3395)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x3386))+(((-1.0)*py*x3392))+((x3393*x3396))+(((-0.03431)*x3389))+(((-0.03431)*x3391)));
evalcond[3]=((0.00301)+((x3388*x3396))+((x3390*x3396))+(((-1.0)*py*x3395))+(((-1.0)*px*x3392))+(((-0.03431)*x3394))+(((0.03431)*sj4*x3393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3397=((29.146021568056)*px);
IkReal x3398=(r00*x3397);
IkReal x3399=(cj4*sj4);
IkReal x3400=(r01*x3397);
IkReal x3401=((29.146021568056)*cj4*py*sj4);
IkReal x3402=cj4*cj4;
IkReal x3403=((29.146021568056)*py*x3402);
if( IKabs((((r01*x3403))+x3398+(((-1.0)*x3398*x3402))+(((-1.0)*r00*x3401))+(((-1.0)*x3399*x3400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3398*x3399))+(((-1.0)*x3400*x3402))+x3400+(((-1.0)*r00*x3403))+(((-1.0)*r01*x3401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3403))+x3398+(((-1.0)*x3398*x3402))+(((-1.0)*r00*x3401))+(((-1.0)*x3399*x3400))))+IKsqr((((x3398*x3399))+(((-1.0)*x3400*x3402))+x3400+(((-1.0)*r00*x3403))+(((-1.0)*r01*x3401))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x3403))+x3398+(((-1.0)*x3398*x3402))+(((-1.0)*r00*x3401))+(((-1.0)*x3399*x3400))), (((x3398*x3399))+(((-1.0)*x3400*x3402))+x3400+(((-1.0)*r00*x3403))+(((-1.0)*r01*x3401))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3404=IKcos(j9);
IkReal x3405=(r00*x3404);
IkReal x3406=(cj4*x3405);
IkReal x3407=IKsin(j9);
IkReal x3408=(r00*x3407);
IkReal x3409=(sj4*x3408);
IkReal x3410=(r01*x3404);
IkReal x3411=(sj4*x3410);
IkReal x3412=((1.0)*cj4);
IkReal x3413=(r01*x3407);
IkReal x3414=(sj4*x3405);
IkReal x3415=((1.0)*sj4);
IkReal x3416=((0.03431)*cj4);
evalcond[0]=(x3409+x3406+(((-1.0)*x3412*x3413))+x3411);
evalcond[1]=((((-1.0)*x3413*x3415))+(((-1.0)*x3410*x3412))+x3414+(((-1.0)*x3408*x3412)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x3409))+(((-0.03431)*x3406))+(((-0.03431)*x3411))+(((-1.0)*py*x3412))+((x3413*x3416)));
evalcond[3]=((0.00337)+(((-0.03431)*x3414))+(((-1.0)*py*x3415))+((x3410*x3416))+(((-1.0)*px*x3412))+((x3408*x3416))+(((0.03431)*sj4*x3413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3417=((29.146021568056)*px);
IkReal x3418=(r00*x3417);
IkReal x3419=(cj4*sj4);
IkReal x3420=(r01*x3417);
IkReal x3421=((29.146021568056)*cj4*py*sj4);
IkReal x3422=cj4*cj4;
IkReal x3423=((29.146021568056)*py*x3422);
if( IKabs(((((-1.0)*x3418*x3422))+(((-1.0)*r00*x3421))+(((-1.0)*x3419*x3420))+x3418+((r01*x3423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3420+(((-1.0)*r01*x3421))+(((-1.0)*r00*x3423))+((x3418*x3419))+(((-1.0)*x3420*x3422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3418*x3422))+(((-1.0)*r00*x3421))+(((-1.0)*x3419*x3420))+x3418+((r01*x3423))))+IKsqr((x3420+(((-1.0)*r01*x3421))+(((-1.0)*r00*x3423))+((x3418*x3419))+(((-1.0)*x3420*x3422))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x3418*x3422))+(((-1.0)*r00*x3421))+(((-1.0)*x3419*x3420))+x3418+((r01*x3423))), (x3420+(((-1.0)*r01*x3421))+(((-1.0)*r00*x3423))+((x3418*x3419))+(((-1.0)*x3420*x3422))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3424=IKcos(j9);
IkReal x3425=(r00*x3424);
IkReal x3426=(cj4*x3425);
IkReal x3427=IKsin(j9);
IkReal x3428=(r00*x3427);
IkReal x3429=(sj4*x3428);
IkReal x3430=(r01*x3424);
IkReal x3431=(sj4*x3430);
IkReal x3432=((1.0)*cj4);
IkReal x3433=(r01*x3427);
IkReal x3434=(sj4*x3425);
IkReal x3435=((1.0)*sj4);
IkReal x3436=((0.03431)*cj4);
evalcond[0]=(x3431+x3426+x3429+(((-1.0)*x3432*x3433)));
evalcond[1]=(x3434+(((-1.0)*x3428*x3432))+(((-1.0)*x3433*x3435))+(((-1.0)*x3430*x3432)));
evalcond[2]=(((px*sj4))+((x3433*x3436))+(((-1.0)*py*x3432))+(((-0.03431)*x3426))+(((-0.03431)*x3429))+(((-0.03431)*x3431)));
evalcond[3]=((0.00337)+((x3430*x3436))+((x3428*x3436))+(((-0.03431)*x3434))+(((0.03431)*sj4*x3433))+(((-1.0)*py*x3435))+(((-1.0)*px*x3432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3437=((0.0982220926843486)*cj4);
IkReal x3438=((29.146021568056)*py);
IkReal x3439=(r01*x3438);
IkReal x3440=((0.0982220926843486)*sj4);
IkReal x3441=((29.146021568056)*cj4*px*sj4);
IkReal x3442=(cj4*sj4);
IkReal x3443=(r00*x3438);
IkReal x3444=cj4*cj4;
IkReal x3445=((29.146021568056)*px*x3444);
if( IKabs((x3439+(((-1.0)*r01*x3440))+((r01*x3441))+((r00*x3445))+(((-1.0)*x3439*x3444))+(((-1.0)*r00*x3437))+((x3442*x3443)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3443))+((x3443*x3444))+((x3439*x3442))+((r00*x3440))+(((-1.0)*r00*x3441))+((r01*x3445))+(((-1.0)*r01*x3437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3439+(((-1.0)*r01*x3440))+((r01*x3441))+((r00*x3445))+(((-1.0)*x3439*x3444))+(((-1.0)*r00*x3437))+((x3442*x3443))))+IKsqr(((((-1.0)*x3443))+((x3443*x3444))+((x3439*x3442))+((r00*x3440))+(((-1.0)*r00*x3441))+((r01*x3445))+(((-1.0)*r01*x3437))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x3439+(((-1.0)*r01*x3440))+((r01*x3441))+((r00*x3445))+(((-1.0)*x3439*x3444))+(((-1.0)*r00*x3437))+((x3442*x3443))), ((((-1.0)*x3443))+((x3443*x3444))+((x3439*x3442))+((r00*x3440))+(((-1.0)*r00*x3441))+((r01*x3445))+(((-1.0)*r01*x3437))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3446=IKcos(j9);
IkReal x3447=(r00*x3446);
IkReal x3448=(cj4*x3447);
IkReal x3449=IKsin(j9);
IkReal x3450=(r00*x3449);
IkReal x3451=(sj4*x3450);
IkReal x3452=(r01*x3446);
IkReal x3453=(sj4*x3452);
IkReal x3454=((1.0)*cj4);
IkReal x3455=(r01*x3449);
IkReal x3456=(sj4*x3447);
IkReal x3457=((1.0)*sj4);
IkReal x3458=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3454*x3455))+x3451+x3453+x3448);
evalcond[1]=((((-1.0)*x3455*x3457))+x3456+(((-1.0)*x3452*x3454))+(((-1.0)*x3450*x3454)));
evalcond[2]=((0.00036)+((x3455*x3458))+((px*sj4))+(((-0.03431)*x3453))+(((-0.03431)*x3451))+(((-0.03431)*x3448))+(((-1.0)*py*x3454)));
evalcond[3]=((0.00337)+(((-1.0)*px*x3454))+((x3452*x3458))+((x3450*x3458))+(((-0.03431)*x3456))+(((-1.0)*py*x3457))+(((0.03431)*sj4*x3455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3459=((0.0982220926843486)*cj4);
IkReal x3460=((29.146021568056)*py);
IkReal x3461=(r01*x3460);
IkReal x3462=((0.0982220926843486)*sj4);
IkReal x3463=((29.146021568056)*cj4*px*sj4);
IkReal x3464=(cj4*sj4);
IkReal x3465=(r00*x3460);
IkReal x3466=cj4*cj4;
IkReal x3467=((29.146021568056)*px*x3466);
if( IKabs((((r00*x3467))+(((-1.0)*r00*x3459))+x3461+((r01*x3463))+(((-1.0)*r01*x3462))+(((-1.0)*x3461*x3466))+((x3464*x3465)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3461*x3464))+(((-1.0)*r01*x3459))+((r00*x3462))+((x3465*x3466))+(((-1.0)*r00*x3463))+(((-1.0)*x3465))+((r01*x3467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x3467))+(((-1.0)*r00*x3459))+x3461+((r01*x3463))+(((-1.0)*r01*x3462))+(((-1.0)*x3461*x3466))+((x3464*x3465))))+IKsqr((((x3461*x3464))+(((-1.0)*r01*x3459))+((r00*x3462))+((x3465*x3466))+(((-1.0)*r00*x3463))+(((-1.0)*x3465))+((r01*x3467))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r00*x3467))+(((-1.0)*r00*x3459))+x3461+((r01*x3463))+(((-1.0)*r01*x3462))+(((-1.0)*x3461*x3466))+((x3464*x3465))), (((x3461*x3464))+(((-1.0)*r01*x3459))+((r00*x3462))+((x3465*x3466))+(((-1.0)*r00*x3463))+(((-1.0)*x3465))+((r01*x3467))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3468=IKcos(j9);
IkReal x3469=(r00*x3468);
IkReal x3470=(cj4*x3469);
IkReal x3471=IKsin(j9);
IkReal x3472=(r00*x3471);
IkReal x3473=(sj4*x3472);
IkReal x3474=(r01*x3468);
IkReal x3475=(sj4*x3474);
IkReal x3476=((1.0)*cj4);
IkReal x3477=(r01*x3471);
IkReal x3478=(sj4*x3469);
IkReal x3479=((1.0)*sj4);
IkReal x3480=((0.03431)*cj4);
evalcond[0]=(x3475+x3470+x3473+(((-1.0)*x3476*x3477)));
evalcond[1]=(x3478+(((-1.0)*x3472*x3476))+(((-1.0)*x3474*x3476))+(((-1.0)*x3477*x3479)));
evalcond[2]=((-0.00036)+((px*sj4))+((x3477*x3480))+(((-1.0)*py*x3476))+(((-0.03431)*x3475))+(((-0.03431)*x3473))+(((-0.03431)*x3470)));
evalcond[3]=((0.00337)+(((-1.0)*px*x3476))+((x3474*x3480))+((x3472*x3480))+(((-1.0)*py*x3479))+(((0.03431)*sj4*x3477))+(((-0.03431)*x3478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3481=((1.0)*cj4);
IkReal x3482=(r00*sj6);
IkReal x3483=(r01*sj6);
CheckValue<IkReal> x3484=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x3484.valid){
continue;
}
CheckValue<IkReal> x3485 = IKatan2WithCheck(IkReal(((((-1.0)*sj4*x3483))+(((-1.0)*x3481*x3482)))),((((-1.0)*x3481*x3483))+((sj4*x3482))),IKFAST_ATAN2_MAGTHRESH);
if(!x3485.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x3484.value)))+(x3485.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x3486=IKcos(j9);
IkReal x3487=(r00*x3486);
IkReal x3488=(cj4*x3487);
IkReal x3489=IKsin(j9);
IkReal x3490=(r00*x3489);
IkReal x3491=(sj4*x3490);
IkReal x3492=(r01*x3486);
IkReal x3493=(sj4*x3492);
IkReal x3494=((1.0)*cj4);
IkReal x3495=(r01*x3489);
IkReal x3496=(sj4*x3487);
IkReal x3497=(x3490*x3494);
IkReal x3498=(x3492*x3494);
IkReal x3499=((1.0)*sj4);
IkReal x3500=(x3495*x3499);
IkReal x3501=(cj4*r01*x3489);
IkReal x3502=((1.0)*cj4*r00*x3486);
IkReal x3503=((1.0)*cj8*sj4);
IkReal x3504=((1.0)*sj4*sj8);
IkReal x3505=((0.03431)*cj4);
evalcond[0]=(x3491+x3493+x3488+(((-1.0)*x3494*x3495)));
evalcond[1]=(x3496+(((-1.0)*x3500))+(((-1.0)*x3498))+(((-1.0)*x3497)));
evalcond[2]=((((-1.0)*sj8*x3497))+cj6+(((-1.0)*sj8*x3498))+(((-1.0)*sj8*x3500))+((sj8*x3496)));
evalcond[3]=(((cj8*x3501))+(((-1.0)*x3490*x3503))+(((-1.0)*cj8*x3502))+(((-1.0)*x3492*x3503))+cj6);
evalcond[4]=((((-1.0)*cj8*x3500))+((cj8*x3496))+(((-1.0)*cj8*x3498))+sj6+(((-1.0)*cj8*x3497)));
evalcond[5]=(((sj8*x3501))+(((-1.0)*x3490*x3504))+(((-1.0)*x3492*x3504))+(((-1.0)*sj8*x3502))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x3493))+(((-1.0)*py*x3494))+((x3495*x3505))+(((-0.03431)*x3488))+(((0.00036)*sj6))+(((-0.03431)*x3491)));
evalcond[7]=((0.00337)+((x3492*x3505))+(((0.00036)*cj6))+(((-1.0)*px*x3494))+((x3490*x3505))+(((-0.03431)*x3496))+(((0.03431)*sj4*x3495))+(((-1.0)*py*x3499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3506=((1.0)*cj4);
IkReal x3507=(cj6*r00);
IkReal x3508=(cj6*r01);
CheckValue<IkReal> x3509 = IKatan2WithCheck(IkReal(((((-1.0)*x3506*x3507))+(((-1.0)*sj4*x3508)))),((((-1.0)*x3506*x3508))+((sj4*x3507))),IKFAST_ATAN2_MAGTHRESH);
if(!x3509.valid){
continue;
}
CheckValue<IkReal> x3510=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x3510.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x3509.value)+(((-1.0)*(1.5707963267949)*(x3510.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x3511=IKcos(j9);
IkReal x3512=(r00*x3511);
IkReal x3513=(cj4*x3512);
IkReal x3514=IKsin(j9);
IkReal x3515=(r00*x3514);
IkReal x3516=(sj4*x3515);
IkReal x3517=(r01*x3511);
IkReal x3518=(sj4*x3517);
IkReal x3519=((1.0)*cj4);
IkReal x3520=(r01*x3514);
IkReal x3521=(sj4*x3512);
IkReal x3522=(x3515*x3519);
IkReal x3523=(x3517*x3519);
IkReal x3524=((1.0)*sj4);
IkReal x3525=(x3520*x3524);
IkReal x3526=(cj4*r01*x3514);
IkReal x3527=((1.0)*cj4*r00*x3511);
IkReal x3528=((1.0)*cj8*sj4);
IkReal x3529=((1.0)*sj4*sj8);
IkReal x3530=((0.03431)*cj4);
evalcond[0]=(x3513+x3516+x3518+(((-1.0)*x3519*x3520)));
evalcond[1]=((((-1.0)*x3522))+(((-1.0)*x3525))+(((-1.0)*x3523))+x3521);
evalcond[2]=((((-1.0)*sj8*x3523))+cj6+(((-1.0)*sj8*x3525))+(((-1.0)*sj8*x3522))+((sj8*x3521)));
evalcond[3]=((((-1.0)*x3517*x3528))+((cj8*x3526))+(((-1.0)*cj8*x3527))+cj6+(((-1.0)*x3515*x3528)));
evalcond[4]=((((-1.0)*cj8*x3523))+sj6+((cj8*x3521))+(((-1.0)*cj8*x3522))+(((-1.0)*cj8*x3525)));
evalcond[5]=((((-1.0)*x3517*x3529))+(((-1.0)*x3515*x3529))+((sj8*x3526))+(((-1.0)*sj8*x3527))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=(((px*sj4))+((x3520*x3530))+(((-1.0)*py*x3519))+(((-0.03431)*x3518))+(((-0.03431)*x3516))+(((0.00036)*sj6))+(((-0.03431)*x3513)));
evalcond[7]=((0.00337)+(((-1.0)*px*x3519))+(((0.00036)*cj6))+(((0.03431)*sj4*x3520))+(((-0.03431)*x3521))+((x3517*x3530))+((x3515*x3530))+(((-1.0)*py*x3524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3531=(r00*sj6);
IkReal x3532=(r01*sj6);
CheckValue<IkReal> x3533=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x3533.valid){
continue;
}
CheckValue<IkReal> x3534 = IKatan2WithCheck(IkReal((((sj4*x3531))+(((-1.0)*cj4*x3532)))),(((sj4*x3532))+((cj4*x3531))),IKFAST_ATAN2_MAGTHRESH);
if(!x3534.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x3533.value)))+(x3534.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x3535=IKcos(j9);
IkReal x3536=(r00*x3535);
IkReal x3537=(cj4*x3536);
IkReal x3538=IKsin(j9);
IkReal x3539=(r00*x3538);
IkReal x3540=(sj4*x3539);
IkReal x3541=(r01*x3535);
IkReal x3542=(sj4*x3541);
IkReal x3543=((1.0)*cj4);
IkReal x3544=(r01*x3538);
IkReal x3545=(sj4*x3536);
IkReal x3546=(x3539*x3543);
IkReal x3547=(x3541*x3543);
IkReal x3548=((1.0)*sj4);
IkReal x3549=(x3544*x3548);
IkReal x3550=(cj4*r01*x3538);
IkReal x3551=((1.0)*cj4*r00*x3535);
IkReal x3552=((1.0)*cj8*sj4);
IkReal x3553=((1.0)*sj4*sj8);
IkReal x3554=((0.03431)*cj4);
evalcond[0]=(x3542+x3540+(((-1.0)*x3543*x3544))+x3537);
evalcond[1]=(x3545+(((-1.0)*x3546))+(((-1.0)*x3547))+(((-1.0)*x3549)));
evalcond[2]=((((-1.0)*sj8*x3549))+cj6+(((-1.0)*sj8*x3546))+((sj8*x3545))+(((-1.0)*sj8*x3547)));
evalcond[3]=(((cj8*x3550))+(((-1.0)*cj8*x3551))+(((-1.0)*x3541*x3552))+cj6+(((-1.0)*x3539*x3552)));
evalcond[4]=(((cj8*x3545))+(((-1.0)*cj8*x3547))+(((-1.0)*cj8*x3546))+sj6+(((-1.0)*cj8*x3549)));
evalcond[5]=((((-1.0)*x3539*x3553))+(((-1.0)*x3541*x3553))+((sj8*x3550))+(((-1.0)*sj8*x3551))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x3537))+(((-1.0)*py*x3543))+(((-0.03431)*x3540))+(((-0.03431)*x3542))+((x3544*x3554))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+(((-0.03431)*x3545))+(((0.00036)*cj6))+(((-1.0)*py*x3548))+((x3541*x3554))+(((0.03431)*sj4*x3544))+(((-1.0)*px*x3543))+((x3539*x3554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3555=(cj8*r00*sj8);
IkReal x3556=((1.0)*px);
IkReal x3557=(r00*sj6);
IkReal x3558=((0.03431)*x3557);
IkReal x3559=(cj8*((x3558+(((0.00036)*sj8*x3557)))));
IkReal x3560=(cj8*r00);
IkReal x3561=(sj8*(((((-0.00036)*cj6*x3560))+(((-0.00337)*x3560))+(((-1.0)*x3558)))));
CheckValue<IkReal> x3562 = IKatan2WithCheck(IkReal(((((-1.0)*x3556*x3559))+(((-1.0)*py*x3561)))),(((py*x3559))+(((-1.0)*x3556*x3561))),IKFAST_ATAN2_MAGTHRESH);
if(!x3562.valid){
continue;
}
CheckValue<IkReal> x3563=IKPowWithIntegerCheck(IKsign((((pp*x3555))+(((-1.0)*x3555*(pz*pz))))),-1);
if(!x3563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3562.value)+(((1.5707963267949)*(x3563.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x3564=((0.00337)*cj8);
IkReal x3565=((0.03431)*sj6);
IkReal x3566=(r00*x3565);
IkReal x3567=((0.00036)*cj6*cj8);
IkReal x3568=(cj8*r00);
IkReal x3569=IKcos(j4);
IkReal x3570=(px*x3569);
IkReal x3571=IKsin(j4);
IkReal x3572=(py*x3571);
IkReal x3573=(r01*x3565);
IkReal x3574=((0.00036)*sj6*sj8);
IkReal x3575=(px*sj8*x3571);
IkReal x3576=((1.0)*py*sj8*x3569);
IkReal x3577=((1.0)*cj8*r01);
evalcond[0]=(((x3568*x3572))+(((-1.0)*x3566))+((x3568*x3570))+(((-1.0)*r00*x3567))+(((-1.0)*r00*x3564)));
evalcond[1]=((((-1.0)*r01*x3576))+((r01*x3574))+((r01*x3575))+x3573);
evalcond[2]=((((-1.0)*r00*x3576))+((r00*x3575))+((r00*x3574))+x3566);
evalcond[3]=(((r01*x3567))+(((-1.0)*x3572*x3577))+(((-1.0)*x3570*x3577))+x3573+((r01*x3564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x3578=((1.0)*r00);
IkReal x3579=(((py*r01))+((px*r00)));
IkReal x3580=(px*r01);
IkReal x3581=(pz*r01);
IkReal x3582=((-1.0)*pz*x3578);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3578);
r10=r01;
npx=x3579;
npy=(x3580+(((-1.0)*py*x3578)));
npz=(pz*r22);
rxp0_0=x3581;
rxp0_1=x3582;
rxp0_2=((((-1.0)*x3580))+((py*r00)));
rxp1_0=x3582;
rxp1_1=((-1.0)*x3581);
rxp1_2=x3579;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x3583=((1.0)*r00);
IkReal x3584=(((py*r01))+((px*r00)));
IkReal x3585=(px*r01);
IkReal x3586=(pz*r01);
IkReal x3587=((-1.0)*pz*x3583);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3583);
r10=r01;
npx=x3584;
npy=(x3585+(((-1.0)*py*x3583)));
npz=(pz*r22);
rxp0_0=x3586;
rxp0_1=x3587;
rxp0_2=(((py*r00))+(((-1.0)*x3585)));
rxp1_0=x3587;
rxp1_1=((-1.0)*x3586);
rxp1_2=x3584;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=cj6;
j9eval[3]=((sj4*sj4)+(cj4*cj4));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x3588=((1.0)*r00);
IkReal x3589=(((py*r01))+((px*r00)));
IkReal x3590=(px*r01);
IkReal x3591=(pz*r01);
IkReal x3592=((-1.0)*pz*x3588);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3588);
r10=r01;
npx=x3589;
npy=((((-1.0)*py*x3588))+x3590);
npz=(pz*r22);
rxp0_0=x3591;
rxp0_1=x3592;
rxp0_2=(((py*r00))+(((-1.0)*x3590)));
rxp1_0=x3592;
rxp1_1=((-1.0)*x3591);
rxp1_2=x3589;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=cj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3593=((29.146021568056)*px);
IkReal x3594=(r00*x3593);
IkReal x3595=(cj4*sj4);
IkReal x3596=(r01*x3593);
IkReal x3597=((29.146021568056)*cj4*py*sj4);
IkReal x3598=cj4*cj4;
IkReal x3599=((29.146021568056)*py*x3598);
if( IKabs(((((-1.0)*r00*x3597))+x3594+(((-1.0)*x3595*x3596))+(((-1.0)*x3594*x3598))+((r01*x3599)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3596+(((-1.0)*x3596*x3598))+(((-1.0)*r00*x3599))+((x3594*x3595))+(((-1.0)*r01*x3597)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x3597))+x3594+(((-1.0)*x3595*x3596))+(((-1.0)*x3594*x3598))+((r01*x3599))))+IKsqr((x3596+(((-1.0)*x3596*x3598))+(((-1.0)*r00*x3599))+((x3594*x3595))+(((-1.0)*r01*x3597))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x3597))+x3594+(((-1.0)*x3595*x3596))+(((-1.0)*x3594*x3598))+((r01*x3599))), (x3596+(((-1.0)*x3596*x3598))+(((-1.0)*r00*x3599))+((x3594*x3595))+(((-1.0)*r01*x3597))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3600=IKcos(j9);
IkReal x3601=(r00*x3600);
IkReal x3602=(cj4*x3601);
IkReal x3603=IKsin(j9);
IkReal x3604=(r00*x3603);
IkReal x3605=(sj4*x3604);
IkReal x3606=(r01*x3600);
IkReal x3607=(sj4*x3606);
IkReal x3608=((1.0)*cj4);
IkReal x3609=(r01*x3603);
IkReal x3610=(sj4*x3601);
IkReal x3611=((1.0)*sj4);
IkReal x3612=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3608*x3609))+x3605+x3607+x3602);
evalcond[1]=((((-1.0)*x3609*x3611))+x3610+(((-1.0)*x3604*x3608))+(((-1.0)*x3606*x3608)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x3602))+((x3609*x3612))+(((-0.03431)*x3607))+(((-0.03431)*x3605))+(((-1.0)*py*x3608)));
evalcond[3]=((0.00337)+((x3606*x3612))+((x3604*x3612))+(((-0.03431)*x3610))+(((-1.0)*py*x3611))+(((-1.0)*px*x3608))+(((0.03431)*sj4*x3609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3613=((29.146021568056)*px);
IkReal x3614=(r00*x3613);
IkReal x3615=(cj4*sj4);
IkReal x3616=(r01*x3613);
IkReal x3617=((29.146021568056)*cj4*py*sj4);
IkReal x3618=cj4*cj4;
IkReal x3619=((29.146021568056)*py*x3618);
if( IKabs(((((-1.0)*x3615*x3616))+x3614+(((-1.0)*r00*x3617))+(((-1.0)*x3614*x3618))+((r01*x3619)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3616+(((-1.0)*r00*x3619))+((x3614*x3615))+(((-1.0)*r01*x3617))+(((-1.0)*x3616*x3618)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3615*x3616))+x3614+(((-1.0)*r00*x3617))+(((-1.0)*x3614*x3618))+((r01*x3619))))+IKsqr((x3616+(((-1.0)*r00*x3619))+((x3614*x3615))+(((-1.0)*r01*x3617))+(((-1.0)*x3616*x3618))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x3615*x3616))+x3614+(((-1.0)*r00*x3617))+(((-1.0)*x3614*x3618))+((r01*x3619))), (x3616+(((-1.0)*r00*x3619))+((x3614*x3615))+(((-1.0)*r01*x3617))+(((-1.0)*x3616*x3618))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3620=IKcos(j9);
IkReal x3621=(r00*x3620);
IkReal x3622=(cj4*x3621);
IkReal x3623=IKsin(j9);
IkReal x3624=(r00*x3623);
IkReal x3625=(sj4*x3624);
IkReal x3626=(r01*x3620);
IkReal x3627=(sj4*x3626);
IkReal x3628=((1.0)*cj4);
IkReal x3629=(r01*x3623);
IkReal x3630=(sj4*x3621);
IkReal x3631=((1.0)*sj4);
IkReal x3632=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3628*x3629))+x3625+x3622+x3627);
evalcond[1]=((((-1.0)*x3626*x3628))+(((-1.0)*x3624*x3628))+x3630+(((-1.0)*x3629*x3631)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x3622))+((x3629*x3632))+(((-0.03431)*x3625))+(((-0.03431)*x3627))+(((-1.0)*py*x3628)));
evalcond[3]=((0.00337)+(((-1.0)*py*x3631))+(((-0.03431)*x3630))+((x3626*x3632))+(((-1.0)*px*x3628))+(((0.03431)*sj4*x3629))+((x3624*x3632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3633=((29.146021568056)*px);
IkReal x3634=(r00*x3633);
IkReal x3635=(cj4*sj4);
IkReal x3636=(r01*x3633);
IkReal x3637=((29.146021568056)*cj4*py*sj4);
IkReal x3638=cj4*cj4;
IkReal x3639=((29.146021568056)*py*x3638);
if( IKabs(((((-1.0)*x3635*x3636))+(((-1.0)*r00*x3637))+(((-1.0)*x3634*x3638))+x3634+((r01*x3639)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x3639))+((x3634*x3635))+(((-1.0)*x3636*x3638))+x3636+(((-1.0)*r01*x3637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3635*x3636))+(((-1.0)*r00*x3637))+(((-1.0)*x3634*x3638))+x3634+((r01*x3639))))+IKsqr(((((-1.0)*r00*x3639))+((x3634*x3635))+(((-1.0)*x3636*x3638))+x3636+(((-1.0)*r01*x3637))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x3635*x3636))+(((-1.0)*r00*x3637))+(((-1.0)*x3634*x3638))+x3634+((r01*x3639))), ((((-1.0)*r00*x3639))+((x3634*x3635))+(((-1.0)*x3636*x3638))+x3636+(((-1.0)*r01*x3637))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3640=IKcos(j9);
IkReal x3641=(r00*x3640);
IkReal x3642=(cj4*x3641);
IkReal x3643=IKsin(j9);
IkReal x3644=(r00*x3643);
IkReal x3645=(sj4*x3644);
IkReal x3646=(r01*x3640);
IkReal x3647=(sj4*x3646);
IkReal x3648=((1.0)*cj4);
IkReal x3649=(r01*x3643);
IkReal x3650=(sj4*x3641);
IkReal x3651=((1.0)*sj4);
IkReal x3652=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3648*x3649))+x3642+x3645+x3647);
evalcond[1]=((((-1.0)*x3649*x3651))+x3650+(((-1.0)*x3646*x3648))+(((-1.0)*x3644*x3648)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x3645))+(((-0.03431)*x3642))+((x3649*x3652))+(((-1.0)*py*x3648))+(((-0.03431)*x3647)));
evalcond[3]=((0.00373)+((x3644*x3652))+(((0.03431)*sj4*x3649))+(((-0.03431)*x3650))+(((-1.0)*px*x3648))+(((-1.0)*py*x3651))+((x3646*x3652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3653=((29.146021568056)*px);
IkReal x3654=(r00*x3653);
IkReal x3655=(cj4*sj4);
IkReal x3656=(r01*x3653);
IkReal x3657=((29.146021568056)*cj4*py*sj4);
IkReal x3658=cj4*cj4;
IkReal x3659=((29.146021568056)*py*x3658);
if( IKabs((x3654+(((-1.0)*r00*x3657))+((r01*x3659))+(((-1.0)*x3654*x3658))+(((-1.0)*x3655*x3656)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3656*x3658))+((x3654*x3655))+x3656+(((-1.0)*r01*x3657))+(((-1.0)*r00*x3659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3654+(((-1.0)*r00*x3657))+((r01*x3659))+(((-1.0)*x3654*x3658))+(((-1.0)*x3655*x3656))))+IKsqr(((((-1.0)*x3656*x3658))+((x3654*x3655))+x3656+(((-1.0)*r01*x3657))+(((-1.0)*r00*x3659))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x3654+(((-1.0)*r00*x3657))+((r01*x3659))+(((-1.0)*x3654*x3658))+(((-1.0)*x3655*x3656))), ((((-1.0)*x3656*x3658))+((x3654*x3655))+x3656+(((-1.0)*r01*x3657))+(((-1.0)*r00*x3659))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3660=IKcos(j9);
IkReal x3661=(r00*x3660);
IkReal x3662=(cj4*x3661);
IkReal x3663=IKsin(j9);
IkReal x3664=(r00*x3663);
IkReal x3665=(sj4*x3664);
IkReal x3666=(r01*x3660);
IkReal x3667=(sj4*x3666);
IkReal x3668=((1.0)*cj4);
IkReal x3669=(r01*x3663);
IkReal x3670=(sj4*x3661);
IkReal x3671=((1.0)*sj4);
IkReal x3672=((0.03431)*cj4);
evalcond[0]=(x3667+x3662+x3665+(((-1.0)*x3668*x3669)));
evalcond[1]=((((-1.0)*x3664*x3668))+(((-1.0)*x3666*x3668))+(((-1.0)*x3669*x3671))+x3670);
evalcond[2]=(((px*sj4))+(((-0.03431)*x3662))+(((-1.0)*py*x3668))+(((-0.03431)*x3667))+((x3669*x3672))+(((-0.03431)*x3665)));
evalcond[3]=((0.00301)+(((0.03431)*sj4*x3669))+(((-1.0)*px*x3668))+((x3666*x3672))+(((-1.0)*py*x3671))+(((-0.03431)*x3670))+((x3664*x3672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3673=((29.146021568056)*px);
IkReal x3674=(r00*x3673);
IkReal x3675=(cj4*sj4);
IkReal x3676=(r01*x3673);
IkReal x3677=((29.146021568056)*cj4*py*sj4);
IkReal x3678=cj4*cj4;
IkReal x3679=((29.146021568056)*py*x3678);
if( IKabs(((((-1.0)*x3674*x3678))+((r01*x3679))+(((-1.0)*x3675*x3676))+x3674+(((-1.0)*r00*x3677)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x3679))+x3676+((x3674*x3675))+(((-1.0)*r01*x3677))+(((-1.0)*x3676*x3678)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3674*x3678))+((r01*x3679))+(((-1.0)*x3675*x3676))+x3674+(((-1.0)*r00*x3677))))+IKsqr(((((-1.0)*r00*x3679))+x3676+((x3674*x3675))+(((-1.0)*r01*x3677))+(((-1.0)*x3676*x3678))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x3674*x3678))+((r01*x3679))+(((-1.0)*x3675*x3676))+x3674+(((-1.0)*r00*x3677))), ((((-1.0)*r00*x3679))+x3676+((x3674*x3675))+(((-1.0)*r01*x3677))+(((-1.0)*x3676*x3678))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3680=IKcos(j9);
IkReal x3681=(r00*x3680);
IkReal x3682=(cj4*x3681);
IkReal x3683=IKsin(j9);
IkReal x3684=(r00*x3683);
IkReal x3685=(sj4*x3684);
IkReal x3686=(r01*x3680);
IkReal x3687=(sj4*x3686);
IkReal x3688=((1.0)*cj4);
IkReal x3689=(r01*x3683);
IkReal x3690=(sj4*x3681);
IkReal x3691=((1.0)*sj4);
IkReal x3692=((0.03431)*cj4);
evalcond[0]=(x3687+x3682+x3685+(((-1.0)*x3688*x3689)));
evalcond[1]=((((-1.0)*x3686*x3688))+(((-1.0)*x3684*x3688))+x3690+(((-1.0)*x3689*x3691)));
evalcond[2]=((((-0.03431)*x3687))+((px*sj4))+(((-1.0)*py*x3688))+((x3689*x3692))+(((-0.03431)*x3685))+(((-0.03431)*x3682)));
evalcond[3]=((0.00337)+((x3684*x3692))+(((-1.0)*px*x3688))+(((0.03431)*sj4*x3689))+(((-0.03431)*x3690))+((x3686*x3692))+(((-1.0)*py*x3691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3693=((29.146021568056)*px);
IkReal x3694=(r00*x3693);
IkReal x3695=(cj4*sj4);
IkReal x3696=(r01*x3693);
IkReal x3697=((29.146021568056)*cj4*py*sj4);
IkReal x3698=cj4*cj4;
IkReal x3699=((29.146021568056)*py*x3698);
if( IKabs((((r01*x3699))+(((-1.0)*x3694*x3698))+x3694+(((-1.0)*x3695*x3696))+(((-1.0)*r00*x3697)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3696*x3698))+(((-1.0)*r00*x3699))+(((-1.0)*r01*x3697))+((x3694*x3695))+x3696)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3699))+(((-1.0)*x3694*x3698))+x3694+(((-1.0)*x3695*x3696))+(((-1.0)*r00*x3697))))+IKsqr(((((-1.0)*x3696*x3698))+(((-1.0)*r00*x3699))+(((-1.0)*r01*x3697))+((x3694*x3695))+x3696))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x3699))+(((-1.0)*x3694*x3698))+x3694+(((-1.0)*x3695*x3696))+(((-1.0)*r00*x3697))), ((((-1.0)*x3696*x3698))+(((-1.0)*r00*x3699))+(((-1.0)*r01*x3697))+((x3694*x3695))+x3696));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3700=IKcos(j9);
IkReal x3701=(r00*x3700);
IkReal x3702=(cj4*x3701);
IkReal x3703=IKsin(j9);
IkReal x3704=(r00*x3703);
IkReal x3705=(sj4*x3704);
IkReal x3706=(r01*x3700);
IkReal x3707=(sj4*x3706);
IkReal x3708=((1.0)*cj4);
IkReal x3709=(r01*x3703);
IkReal x3710=(sj4*x3701);
IkReal x3711=((1.0)*sj4);
IkReal x3712=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3708*x3709))+x3705+x3702+x3707);
evalcond[1]=((((-1.0)*x3704*x3708))+x3710+(((-1.0)*x3706*x3708))+(((-1.0)*x3709*x3711)));
evalcond[2]=((((-0.03431)*x3705))+((px*sj4))+((x3709*x3712))+(((-1.0)*py*x3708))+(((-0.03431)*x3702))+(((-0.03431)*x3707)));
evalcond[3]=((0.00337)+((x3704*x3712))+(((-1.0)*px*x3708))+(((-1.0)*py*x3711))+(((-0.03431)*x3710))+((x3706*x3712))+(((0.03431)*sj4*x3709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3713=((0.0982220926843486)*cj4);
IkReal x3714=((29.146021568056)*py);
IkReal x3715=(r01*x3714);
IkReal x3716=((0.0982220926843486)*sj4);
IkReal x3717=((29.146021568056)*cj4*px*sj4);
IkReal x3718=(cj4*sj4);
IkReal x3719=(r00*x3714);
IkReal x3720=cj4*cj4;
IkReal x3721=((29.146021568056)*px*x3720);
if( IKabs(((((-1.0)*x3715*x3720))+(((-1.0)*r01*x3716))+(((-1.0)*r00*x3713))+x3715+((x3718*x3719))+((r00*x3721))+((r01*x3717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3715*x3718))+(((-1.0)*r00*x3717))+((x3719*x3720))+((r00*x3716))+(((-1.0)*r01*x3713))+(((-1.0)*x3719))+((r01*x3721)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3715*x3720))+(((-1.0)*r01*x3716))+(((-1.0)*r00*x3713))+x3715+((x3718*x3719))+((r00*x3721))+((r01*x3717))))+IKsqr((((x3715*x3718))+(((-1.0)*r00*x3717))+((x3719*x3720))+((r00*x3716))+(((-1.0)*r01*x3713))+(((-1.0)*x3719))+((r01*x3721))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x3715*x3720))+(((-1.0)*r01*x3716))+(((-1.0)*r00*x3713))+x3715+((x3718*x3719))+((r00*x3721))+((r01*x3717))), (((x3715*x3718))+(((-1.0)*r00*x3717))+((x3719*x3720))+((r00*x3716))+(((-1.0)*r01*x3713))+(((-1.0)*x3719))+((r01*x3721))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3722=IKcos(j9);
IkReal x3723=(r00*x3722);
IkReal x3724=(cj4*x3723);
IkReal x3725=IKsin(j9);
IkReal x3726=(r00*x3725);
IkReal x3727=(sj4*x3726);
IkReal x3728=(r01*x3722);
IkReal x3729=(sj4*x3728);
IkReal x3730=((1.0)*cj4);
IkReal x3731=(r01*x3725);
IkReal x3732=(sj4*x3723);
IkReal x3733=((1.0)*sj4);
IkReal x3734=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3730*x3731))+x3727+x3724+x3729);
evalcond[1]=(x3732+(((-1.0)*x3726*x3730))+(((-1.0)*x3731*x3733))+(((-1.0)*x3728*x3730)));
evalcond[2]=((0.00036)+((px*sj4))+(((-0.03431)*x3729))+(((-1.0)*py*x3730))+((x3731*x3734))+(((-0.03431)*x3727))+(((-0.03431)*x3724)));
evalcond[3]=((0.00337)+(((-1.0)*py*x3733))+(((-1.0)*px*x3730))+(((-0.03431)*x3732))+((x3728*x3734))+(((0.03431)*sj4*x3731))+((x3726*x3734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3735=((0.0982220926843486)*cj4);
IkReal x3736=((29.146021568056)*py);
IkReal x3737=(r01*x3736);
IkReal x3738=((0.0982220926843486)*sj4);
IkReal x3739=((29.146021568056)*cj4*px*sj4);
IkReal x3740=(cj4*sj4);
IkReal x3741=(r00*x3736);
IkReal x3742=cj4*cj4;
IkReal x3743=((29.146021568056)*px*x3742);
if( IKabs((((r00*x3743))+(((-1.0)*x3737*x3742))+x3737+((x3740*x3741))+((r01*x3739))+(((-1.0)*r01*x3738))+(((-1.0)*r00*x3735)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3737*x3740))+((r01*x3743))+((r00*x3738))+((x3741*x3742))+(((-1.0)*x3741))+(((-1.0)*r00*x3739))+(((-1.0)*r01*x3735)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x3743))+(((-1.0)*x3737*x3742))+x3737+((x3740*x3741))+((r01*x3739))+(((-1.0)*r01*x3738))+(((-1.0)*r00*x3735))))+IKsqr((((x3737*x3740))+((r01*x3743))+((r00*x3738))+((x3741*x3742))+(((-1.0)*x3741))+(((-1.0)*r00*x3739))+(((-1.0)*r01*x3735))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r00*x3743))+(((-1.0)*x3737*x3742))+x3737+((x3740*x3741))+((r01*x3739))+(((-1.0)*r01*x3738))+(((-1.0)*r00*x3735))), (((x3737*x3740))+((r01*x3743))+((r00*x3738))+((x3741*x3742))+(((-1.0)*x3741))+(((-1.0)*r00*x3739))+(((-1.0)*r01*x3735))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3744=IKcos(j9);
IkReal x3745=(r00*x3744);
IkReal x3746=(cj4*x3745);
IkReal x3747=IKsin(j9);
IkReal x3748=(r00*x3747);
IkReal x3749=(sj4*x3748);
IkReal x3750=(r01*x3744);
IkReal x3751=(sj4*x3750);
IkReal x3752=((1.0)*cj4);
IkReal x3753=(r01*x3747);
IkReal x3754=(sj4*x3745);
IkReal x3755=((1.0)*sj4);
IkReal x3756=((0.03431)*cj4);
evalcond[0]=(x3751+(((-1.0)*x3752*x3753))+x3749+x3746);
evalcond[1]=((((-1.0)*x3750*x3752))+x3754+(((-1.0)*x3753*x3755))+(((-1.0)*x3748*x3752)));
evalcond[2]=((-0.00036)+((px*sj4))+(((-0.03431)*x3751))+((x3753*x3756))+(((-1.0)*py*x3752))+(((-0.03431)*x3746))+(((-0.03431)*x3749)));
evalcond[3]=((0.00337)+(((-1.0)*px*x3752))+((x3748*x3756))+((x3750*x3756))+(((-0.03431)*x3754))+(((0.03431)*sj4*x3753))+(((-1.0)*py*x3755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3757=((1.0)*cj4);
IkReal x3758=(r00*sj6);
IkReal x3759=(r01*sj6);
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal(((((-1.0)*sj4*x3759))+(((-1.0)*x3757*x3758)))),(((sj4*x3758))+(((-1.0)*x3757*x3759))),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
CheckValue<IkReal> x3761=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x3761.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x3760.value)+(((-1.0)*(1.5707963267949)*(x3761.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x3762=IKcos(j9);
IkReal x3763=(r00*x3762);
IkReal x3764=(cj4*x3763);
IkReal x3765=IKsin(j9);
IkReal x3766=(r00*x3765);
IkReal x3767=(sj4*x3766);
IkReal x3768=(r01*x3762);
IkReal x3769=(sj4*x3768);
IkReal x3770=((1.0)*cj4);
IkReal x3771=(r01*x3765);
IkReal x3772=(sj4*x3763);
IkReal x3773=(x3766*x3770);
IkReal x3774=(x3768*x3770);
IkReal x3775=((1.0)*sj4);
IkReal x3776=(x3771*x3775);
IkReal x3777=(cj4*r01*x3765);
IkReal x3778=((1.0)*cj4*r00*x3762);
IkReal x3779=((1.0)*cj8*sj4);
IkReal x3780=((1.0)*sj4*sj8);
IkReal x3781=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3770*x3771))+x3769+x3767+x3764);
evalcond[1]=(x3772+(((-1.0)*x3774))+(((-1.0)*x3773))+(((-1.0)*x3776)));
evalcond[2]=(((sj8*x3772))+(((-1.0)*sj8*x3776))+cj6+(((-1.0)*sj8*x3774))+(((-1.0)*sj8*x3773)));
evalcond[3]=((((-1.0)*cj8*x3778))+(((-1.0)*x3768*x3779))+(((-1.0)*x3766*x3779))+cj6+((cj8*x3777)));
evalcond[4]=((((-1.0)*cj8*x3773))+sj6+(((-1.0)*cj8*x3774))+(((-1.0)*cj8*x3776))+((cj8*x3772)));
evalcond[5]=((((-1.0)*x3768*x3780))+(((-1.0)*x3766*x3780))+((sj8*x3777))+(((-1.0)*sj8*x3778))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x3770))+((x3771*x3781))+(((-0.03431)*x3764))+(((-0.03431)*x3767))+(((0.00036)*sj6))+(((-0.03431)*x3769)));
evalcond[7]=((0.00337)+(((-1.0)*py*x3775))+(((-1.0)*px*x3770))+(((0.00036)*cj6))+(((-0.03431)*x3772))+((x3768*x3781))+((x3766*x3781))+(((0.03431)*sj4*x3771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3782=((1.0)*cj4);
IkReal x3783=(cj6*r00);
IkReal x3784=(cj6*r01);
CheckValue<IkReal> x3785=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x3785.valid){
continue;
}
CheckValue<IkReal> x3786 = IKatan2WithCheck(IkReal(((((-1.0)*x3782*x3783))+(((-1.0)*sj4*x3784)))),((((-1.0)*x3782*x3784))+((sj4*x3783))),IKFAST_ATAN2_MAGTHRESH);
if(!x3786.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x3785.value)))+(x3786.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x3787=IKcos(j9);
IkReal x3788=(r00*x3787);
IkReal x3789=(cj4*x3788);
IkReal x3790=IKsin(j9);
IkReal x3791=(r00*x3790);
IkReal x3792=(sj4*x3791);
IkReal x3793=(r01*x3787);
IkReal x3794=(sj4*x3793);
IkReal x3795=((1.0)*cj4);
IkReal x3796=(r01*x3790);
IkReal x3797=(sj4*x3788);
IkReal x3798=(x3791*x3795);
IkReal x3799=(x3793*x3795);
IkReal x3800=((1.0)*sj4);
IkReal x3801=(x3796*x3800);
IkReal x3802=(cj4*r01*x3790);
IkReal x3803=((1.0)*cj4*r00*x3787);
IkReal x3804=((1.0)*cj8*sj4);
IkReal x3805=((1.0)*sj4*sj8);
IkReal x3806=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3795*x3796))+x3794+x3792+x3789);
evalcond[1]=((((-1.0)*x3799))+x3797+(((-1.0)*x3801))+(((-1.0)*x3798)));
evalcond[2]=(((sj8*x3797))+(((-1.0)*sj8*x3801))+(((-1.0)*sj8*x3799))+cj6+(((-1.0)*sj8*x3798)));
evalcond[3]=((((-1.0)*cj8*x3803))+cj6+(((-1.0)*x3791*x3804))+(((-1.0)*x3793*x3804))+((cj8*x3802)));
evalcond[4]=((((-1.0)*cj8*x3798))+(((-1.0)*cj8*x3799))+((cj8*x3797))+sj6+(((-1.0)*cj8*x3801)));
evalcond[5]=((((-1.0)*x3793*x3805))+(((-1.0)*x3791*x3805))+(((-1.0)*sj8*x3803))+((sj8*x3802))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x3794))+(((-0.03431)*x3792))+(((-1.0)*py*x3795))+((x3796*x3806))+(((-0.03431)*x3789))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+((x3793*x3806))+(((0.00036)*cj6))+((x3791*x3806))+(((0.03431)*sj4*x3796))+(((-0.03431)*x3797))+(((-1.0)*px*x3795))+(((-1.0)*py*x3800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3807=(r00*sj6);
IkReal x3808=(r01*sj6);
CheckValue<IkReal> x3809 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x3808))+((sj4*x3807)))),(((sj4*x3808))+((cj4*x3807))),IKFAST_ATAN2_MAGTHRESH);
if(!x3809.valid){
continue;
}
CheckValue<IkReal> x3810=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x3810.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x3809.value)+(((-1.0)*(1.5707963267949)*(x3810.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x3811=IKcos(j9);
IkReal x3812=(r00*x3811);
IkReal x3813=(cj4*x3812);
IkReal x3814=IKsin(j9);
IkReal x3815=(r00*x3814);
IkReal x3816=(sj4*x3815);
IkReal x3817=(r01*x3811);
IkReal x3818=(sj4*x3817);
IkReal x3819=((1.0)*cj4);
IkReal x3820=(r01*x3814);
IkReal x3821=(sj4*x3812);
IkReal x3822=(x3815*x3819);
IkReal x3823=(x3817*x3819);
IkReal x3824=((1.0)*sj4);
IkReal x3825=(x3820*x3824);
IkReal x3826=(cj4*r01*x3814);
IkReal x3827=((1.0)*cj4*r00*x3811);
IkReal x3828=((1.0)*cj8*sj4);
IkReal x3829=((1.0)*sj4*sj8);
IkReal x3830=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3819*x3820))+x3818+x3816+x3813);
evalcond[1]=(x3821+(((-1.0)*x3823))+(((-1.0)*x3822))+(((-1.0)*x3825)));
evalcond[2]=((((-1.0)*sj8*x3825))+(((-1.0)*sj8*x3822))+(((-1.0)*sj8*x3823))+cj6+((sj8*x3821)));
evalcond[3]=((((-1.0)*cj8*x3827))+(((-1.0)*x3815*x3828))+cj6+((cj8*x3826))+(((-1.0)*x3817*x3828)));
evalcond[4]=((((-1.0)*cj8*x3825))+sj6+(((-1.0)*cj8*x3823))+((cj8*x3821))+(((-1.0)*cj8*x3822)));
evalcond[5]=((((-1.0)*sj8*x3827))+((sj8*x3826))+(((-1.0)*x3815*x3829))+(((-1.0)*x3817*x3829))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x3818))+((x3820*x3830))+(((-1.0)*py*x3819))+(((-0.03431)*x3813))+(((-0.03431)*x3816))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+(((-0.03431)*x3821))+(((0.00036)*cj6))+((x3817*x3830))+((x3815*x3830))+(((0.03431)*sj4*x3820))+(((-1.0)*px*x3819))+(((-1.0)*py*x3824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3831=(cj8*r01*sj8);
IkReal x3832=(r01*sj6);
IkReal x3833=((0.03431)*x3832);
IkReal x3834=(cj8*((x3833+(((0.00036)*sj8*x3832)))));
IkReal x3835=(cj8*r01);
IkReal x3836=(sj8*(((((0.00337)*x3835))+x3833+(((0.00036)*cj6*x3835)))));
CheckValue<IkReal> x3837 = IKatan2WithCheck(IkReal((((py*x3836))+(((-1.0)*px*x3834)))),(((px*x3836))+((py*x3834))),IKFAST_ATAN2_MAGTHRESH);
if(!x3837.valid){
continue;
}
CheckValue<IkReal> x3838=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3831*(pz*pz)))+((pp*x3831)))),-1);
if(!x3838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3837.value)+(((1.5707963267949)*(x3838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x3839=((0.00337)*cj8);
IkReal x3840=((0.03431)*sj6);
IkReal x3841=(r00*x3840);
IkReal x3842=((0.00036)*cj6*cj8);
IkReal x3843=(cj8*r00);
IkReal x3844=IKcos(j4);
IkReal x3845=(px*x3844);
IkReal x3846=IKsin(j4);
IkReal x3847=(py*x3846);
IkReal x3848=(r01*x3840);
IkReal x3849=((0.00036)*sj6*sj8);
IkReal x3850=(px*sj8*x3846);
IkReal x3851=((1.0)*py*sj8*x3844);
IkReal x3852=((1.0)*cj8*r01);
evalcond[0]=((((-1.0)*r00*x3839))+((x3843*x3845))+(((-1.0)*r00*x3842))+(((-1.0)*x3841))+((x3843*x3847)));
evalcond[1]=(x3848+(((-1.0)*r01*x3851))+((r01*x3850))+((r01*x3849)));
evalcond[2]=(x3841+((r00*x3850))+(((-1.0)*r00*x3851))+((r00*x3849)));
evalcond[3]=(((r01*x3839))+x3848+((r01*x3842))+(((-1.0)*x3845*x3852))+(((-1.0)*x3847*x3852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x3853=((1.0)*r00);
IkReal x3854=(((py*r01))+((px*r00)));
IkReal x3855=(px*r01);
IkReal x3856=(pz*r01);
IkReal x3857=((-1.0)*pz*x3853);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3853);
r10=r01;
npx=x3854;
npy=(x3855+(((-1.0)*py*x3853)));
npz=(pz*r22);
rxp0_0=x3856;
rxp0_1=x3857;
rxp0_2=((((-1.0)*x3855))+((py*r00)));
rxp1_0=x3857;
rxp1_1=((-1.0)*x3856);
rxp1_2=x3854;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x3858=((1.0)*r00);
IkReal x3859=(((py*r01))+((px*r00)));
IkReal x3860=(px*r01);
IkReal x3861=(pz*r01);
IkReal x3862=((-1.0)*pz*x3858);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3858);
r10=r01;
npx=x3859;
npy=((((-1.0)*py*x3858))+x3860);
npz=(pz*r22);
rxp0_0=x3861;
rxp0_1=x3862;
rxp0_2=(((py*r00))+(((-1.0)*x3860)));
rxp1_0=x3862;
rxp1_1=((-1.0)*x3861);
rxp1_2=x3859;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=cj6;
j9eval[3]=((sj4*sj4)+(cj4*cj4));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x3863=((1.0)*r00);
IkReal x3864=(((py*r01))+((px*r00)));
IkReal x3865=(px*r01);
IkReal x3866=(pz*r01);
IkReal x3867=((-1.0)*pz*x3863);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x3863);
r10=r01;
npx=x3864;
npy=((((-1.0)*py*x3863))+x3865);
npz=(pz*r22);
rxp0_0=x3866;
rxp0_1=x3867;
rxp0_2=(((py*r00))+(((-1.0)*x3865)));
rxp1_0=x3867;
rxp1_1=((-1.0)*x3866);
rxp1_2=x3864;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=cj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3868=((29.146021568056)*px);
IkReal x3869=(r00*x3868);
IkReal x3870=(cj4*sj4);
IkReal x3871=(r01*x3868);
IkReal x3872=((29.146021568056)*cj4*py*sj4);
IkReal x3873=cj4*cj4;
IkReal x3874=((29.146021568056)*py*x3873);
if( IKabs(((((-1.0)*r00*x3872))+(((-1.0)*x3870*x3871))+((r01*x3874))+x3869+(((-1.0)*x3869*x3873)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3869*x3870))+x3871+(((-1.0)*x3871*x3873))+(((-1.0)*r01*x3872))+(((-1.0)*r00*x3874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x3872))+(((-1.0)*x3870*x3871))+((r01*x3874))+x3869+(((-1.0)*x3869*x3873))))+IKsqr((((x3869*x3870))+x3871+(((-1.0)*x3871*x3873))+(((-1.0)*r01*x3872))+(((-1.0)*r00*x3874))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x3872))+(((-1.0)*x3870*x3871))+((r01*x3874))+x3869+(((-1.0)*x3869*x3873))), (((x3869*x3870))+x3871+(((-1.0)*x3871*x3873))+(((-1.0)*r01*x3872))+(((-1.0)*r00*x3874))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3875=IKcos(j9);
IkReal x3876=(r00*x3875);
IkReal x3877=(cj4*x3876);
IkReal x3878=IKsin(j9);
IkReal x3879=(r00*x3878);
IkReal x3880=(sj4*x3879);
IkReal x3881=(r01*x3875);
IkReal x3882=(sj4*x3881);
IkReal x3883=((1.0)*cj4);
IkReal x3884=(r01*x3878);
IkReal x3885=(sj4*x3876);
IkReal x3886=((1.0)*sj4);
IkReal x3887=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3883*x3884))+x3877+x3882+x3880);
evalcond[1]=((((-1.0)*x3884*x3886))+(((-1.0)*x3879*x3883))+x3885+(((-1.0)*x3881*x3883)));
evalcond[2]=(((px*sj4))+((x3884*x3887))+(((-0.03431)*x3877))+(((-1.0)*py*x3883))+(((-0.03431)*x3880))+(((-0.03431)*x3882)));
evalcond[3]=((0.00337)+(((-1.0)*py*x3886))+(((-0.03431)*x3885))+(((-1.0)*px*x3883))+((x3881*x3887))+(((0.03431)*sj4*x3884))+((x3879*x3887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3888=((29.146021568056)*px);
IkReal x3889=(r00*x3888);
IkReal x3890=(cj4*sj4);
IkReal x3891=(r01*x3888);
IkReal x3892=((29.146021568056)*cj4*py*sj4);
IkReal x3893=cj4*cj4;
IkReal x3894=((29.146021568056)*py*x3893);
if( IKabs(((((-1.0)*x3889*x3893))+(((-1.0)*r00*x3892))+((r01*x3894))+(((-1.0)*x3890*x3891))+x3889)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3891+(((-1.0)*x3891*x3893))+((x3889*x3890))+(((-1.0)*r00*x3894))+(((-1.0)*r01*x3892)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3889*x3893))+(((-1.0)*r00*x3892))+((r01*x3894))+(((-1.0)*x3890*x3891))+x3889))+IKsqr((x3891+(((-1.0)*x3891*x3893))+((x3889*x3890))+(((-1.0)*r00*x3894))+(((-1.0)*r01*x3892))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x3889*x3893))+(((-1.0)*r00*x3892))+((r01*x3894))+(((-1.0)*x3890*x3891))+x3889), (x3891+(((-1.0)*x3891*x3893))+((x3889*x3890))+(((-1.0)*r00*x3894))+(((-1.0)*r01*x3892))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3895=IKcos(j9);
IkReal x3896=(r00*x3895);
IkReal x3897=(cj4*x3896);
IkReal x3898=IKsin(j9);
IkReal x3899=(r00*x3898);
IkReal x3900=(sj4*x3899);
IkReal x3901=(r01*x3895);
IkReal x3902=(sj4*x3901);
IkReal x3903=((1.0)*cj4);
IkReal x3904=(r01*x3898);
IkReal x3905=(sj4*x3896);
IkReal x3906=((1.0)*sj4);
IkReal x3907=((0.03431)*cj4);
evalcond[0]=(x3897+x3902+x3900+(((-1.0)*x3903*x3904)));
evalcond[1]=((((-1.0)*x3901*x3903))+x3905+(((-1.0)*x3904*x3906))+(((-1.0)*x3899*x3903)));
evalcond[2]=(((x3904*x3907))+((px*sj4))+(((-0.03431)*x3902))+(((-1.0)*py*x3903))+(((-0.03431)*x3900))+(((-0.03431)*x3897)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x3904))+((x3899*x3907))+((x3901*x3907))+(((-0.03431)*x3905))+(((-1.0)*py*x3906))+(((-1.0)*px*x3903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3908=((29.146021568056)*px);
IkReal x3909=(r00*x3908);
IkReal x3910=(cj4*sj4);
IkReal x3911=(r01*x3908);
IkReal x3912=((29.146021568056)*cj4*py*sj4);
IkReal x3913=cj4*cj4;
IkReal x3914=((29.146021568056)*py*x3913);
if( IKabs((x3909+(((-1.0)*x3910*x3911))+(((-1.0)*r00*x3912))+((r01*x3914))+(((-1.0)*x3909*x3913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3911*x3913))+x3911+((x3909*x3910))+(((-1.0)*r01*x3912))+(((-1.0)*r00*x3914)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3909+(((-1.0)*x3910*x3911))+(((-1.0)*r00*x3912))+((r01*x3914))+(((-1.0)*x3909*x3913))))+IKsqr(((((-1.0)*x3911*x3913))+x3911+((x3909*x3910))+(((-1.0)*r01*x3912))+(((-1.0)*r00*x3914))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x3909+(((-1.0)*x3910*x3911))+(((-1.0)*r00*x3912))+((r01*x3914))+(((-1.0)*x3909*x3913))), ((((-1.0)*x3911*x3913))+x3911+((x3909*x3910))+(((-1.0)*r01*x3912))+(((-1.0)*r00*x3914))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3915=IKcos(j9);
IkReal x3916=(r00*x3915);
IkReal x3917=(cj4*x3916);
IkReal x3918=IKsin(j9);
IkReal x3919=(r00*x3918);
IkReal x3920=(sj4*x3919);
IkReal x3921=(r01*x3915);
IkReal x3922=(sj4*x3921);
IkReal x3923=((1.0)*cj4);
IkReal x3924=(r01*x3918);
IkReal x3925=(sj4*x3916);
IkReal x3926=((1.0)*sj4);
IkReal x3927=((0.03431)*cj4);
evalcond[0]=(x3922+x3920+x3917+(((-1.0)*x3923*x3924)));
evalcond[1]=(x3925+(((-1.0)*x3919*x3923))+(((-1.0)*x3924*x3926))+(((-1.0)*x3921*x3923)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x3920))+(((-1.0)*py*x3923))+((x3924*x3927))+(((-0.03431)*x3922))+(((-0.03431)*x3917)));
evalcond[3]=((0.00373)+((x3919*x3927))+(((-1.0)*px*x3923))+(((-1.0)*py*x3926))+(((0.03431)*sj4*x3924))+(((-0.03431)*x3925))+((x3921*x3927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3928=((29.146021568056)*px);
IkReal x3929=(r00*x3928);
IkReal x3930=(cj4*sj4);
IkReal x3931=(r01*x3928);
IkReal x3932=((29.146021568056)*cj4*py*sj4);
IkReal x3933=cj4*cj4;
IkReal x3934=((29.146021568056)*py*x3933);
if( IKabs((x3929+(((-1.0)*r00*x3932))+(((-1.0)*x3929*x3933))+((r01*x3934))+(((-1.0)*x3930*x3931)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3931+((x3929*x3930))+(((-1.0)*r00*x3934))+(((-1.0)*x3931*x3933))+(((-1.0)*r01*x3932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3929+(((-1.0)*r00*x3932))+(((-1.0)*x3929*x3933))+((r01*x3934))+(((-1.0)*x3930*x3931))))+IKsqr((x3931+((x3929*x3930))+(((-1.0)*r00*x3934))+(((-1.0)*x3931*x3933))+(((-1.0)*r01*x3932))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x3929+(((-1.0)*r00*x3932))+(((-1.0)*x3929*x3933))+((r01*x3934))+(((-1.0)*x3930*x3931))), (x3931+((x3929*x3930))+(((-1.0)*r00*x3934))+(((-1.0)*x3931*x3933))+(((-1.0)*r01*x3932))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3935=IKcos(j9);
IkReal x3936=(r00*x3935);
IkReal x3937=(cj4*x3936);
IkReal x3938=IKsin(j9);
IkReal x3939=(r00*x3938);
IkReal x3940=(sj4*x3939);
IkReal x3941=(r01*x3935);
IkReal x3942=(sj4*x3941);
IkReal x3943=((1.0)*cj4);
IkReal x3944=(r01*x3938);
IkReal x3945=(sj4*x3936);
IkReal x3946=((1.0)*sj4);
IkReal x3947=((0.03431)*cj4);
evalcond[0]=(x3937+(((-1.0)*x3943*x3944))+x3942+x3940);
evalcond[1]=((((-1.0)*x3944*x3946))+(((-1.0)*x3941*x3943))+(((-1.0)*x3939*x3943))+x3945);
evalcond[2]=(((px*sj4))+(((-0.03431)*x3937))+(((-1.0)*py*x3943))+(((-0.03431)*x3940))+(((-0.03431)*x3942))+((x3944*x3947)));
evalcond[3]=((0.00301)+((x3941*x3947))+(((0.03431)*sj4*x3944))+(((-1.0)*px*x3943))+(((-0.03431)*x3945))+((x3939*x3947))+(((-1.0)*py*x3946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3948=((29.146021568056)*px);
IkReal x3949=(r00*x3948);
IkReal x3950=(cj4*sj4);
IkReal x3951=(r01*x3948);
IkReal x3952=((29.146021568056)*cj4*py*sj4);
IkReal x3953=cj4*cj4;
IkReal x3954=((29.146021568056)*py*x3953);
if( IKabs(((((-1.0)*x3949*x3953))+(((-1.0)*r00*x3952))+((r01*x3954))+(((-1.0)*x3950*x3951))+x3949)) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3949*x3950))+(((-1.0)*r00*x3954))+(((-1.0)*r01*x3952))+(((-1.0)*x3951*x3953))+x3951)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3949*x3953))+(((-1.0)*r00*x3952))+((r01*x3954))+(((-1.0)*x3950*x3951))+x3949))+IKsqr((((x3949*x3950))+(((-1.0)*r00*x3954))+(((-1.0)*r01*x3952))+(((-1.0)*x3951*x3953))+x3951))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x3949*x3953))+(((-1.0)*r00*x3952))+((r01*x3954))+(((-1.0)*x3950*x3951))+x3949), (((x3949*x3950))+(((-1.0)*r00*x3954))+(((-1.0)*r01*x3952))+(((-1.0)*x3951*x3953))+x3951));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3955=IKcos(j9);
IkReal x3956=(r00*x3955);
IkReal x3957=(cj4*x3956);
IkReal x3958=IKsin(j9);
IkReal x3959=(r00*x3958);
IkReal x3960=(sj4*x3959);
IkReal x3961=(r01*x3955);
IkReal x3962=(sj4*x3961);
IkReal x3963=((1.0)*cj4);
IkReal x3964=(r01*x3958);
IkReal x3965=(sj4*x3956);
IkReal x3966=((1.0)*sj4);
IkReal x3967=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x3963*x3964))+x3960+x3962+x3957);
evalcond[1]=((((-1.0)*x3961*x3963))+(((-1.0)*x3964*x3966))+x3965+(((-1.0)*x3959*x3963)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x3962))+(((-1.0)*py*x3963))+(((-0.03431)*x3960))+(((-0.03431)*x3957))+((x3964*x3967)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x3964))+(((-1.0)*py*x3966))+(((-1.0)*px*x3963))+((x3961*x3967))+((x3959*x3967))+(((-0.03431)*x3965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3968=((29.146021568056)*px);
IkReal x3969=(r00*x3968);
IkReal x3970=(cj4*sj4);
IkReal x3971=(r01*x3968);
IkReal x3972=((29.146021568056)*cj4*py*sj4);
IkReal x3973=cj4*cj4;
IkReal x3974=((29.146021568056)*py*x3973);
if( IKabs(((((-1.0)*x3970*x3971))+((r01*x3974))+(((-1.0)*x3969*x3973))+(((-1.0)*r00*x3972))+x3969)) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3969*x3970))+(((-1.0)*r01*x3972))+x3971+(((-1.0)*r00*x3974))+(((-1.0)*x3971*x3973)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3970*x3971))+((r01*x3974))+(((-1.0)*x3969*x3973))+(((-1.0)*r00*x3972))+x3969))+IKsqr((((x3969*x3970))+(((-1.0)*r01*x3972))+x3971+(((-1.0)*r00*x3974))+(((-1.0)*x3971*x3973))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x3970*x3971))+((r01*x3974))+(((-1.0)*x3969*x3973))+(((-1.0)*r00*x3972))+x3969), (((x3969*x3970))+(((-1.0)*r01*x3972))+x3971+(((-1.0)*r00*x3974))+(((-1.0)*x3971*x3973))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3975=IKcos(j9);
IkReal x3976=(r00*x3975);
IkReal x3977=(cj4*x3976);
IkReal x3978=IKsin(j9);
IkReal x3979=(r00*x3978);
IkReal x3980=(sj4*x3979);
IkReal x3981=(r01*x3975);
IkReal x3982=(sj4*x3981);
IkReal x3983=((1.0)*cj4);
IkReal x3984=(r01*x3978);
IkReal x3985=(sj4*x3976);
IkReal x3986=((1.0)*sj4);
IkReal x3987=((0.03431)*cj4);
evalcond[0]=(x3977+x3982+x3980+(((-1.0)*x3983*x3984)));
evalcond[1]=((((-1.0)*x3984*x3986))+(((-1.0)*x3979*x3983))+x3985+(((-1.0)*x3981*x3983)));
evalcond[2]=(((px*sj4))+((x3984*x3987))+(((-0.03431)*x3982))+(((-0.03431)*x3977))+(((-0.03431)*x3980))+(((-1.0)*py*x3983)));
evalcond[3]=((0.00337)+((x3979*x3987))+(((-1.0)*py*x3986))+(((0.03431)*sj4*x3984))+(((-0.03431)*x3985))+(((-1.0)*px*x3983))+((x3981*x3987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x3988=((0.0982220926843486)*cj4);
IkReal x3989=((29.146021568056)*py);
IkReal x3990=(r01*x3989);
IkReal x3991=((0.0982220926843486)*sj4);
IkReal x3992=((29.146021568056)*cj4*px*sj4);
IkReal x3993=(cj4*sj4);
IkReal x3994=(r00*x3989);
IkReal x3995=cj4*cj4;
IkReal x3996=((29.146021568056)*px*x3995);
if( IKabs(((((-1.0)*r01*x3991))+((r01*x3992))+(((-1.0)*x3990*x3995))+x3990+((r00*x3996))+(((-1.0)*r00*x3988))+((x3993*x3994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3988))+((x3994*x3995))+((r01*x3996))+((x3990*x3993))+(((-1.0)*r00*x3992))+(((-1.0)*x3994))+((r00*x3991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x3991))+((r01*x3992))+(((-1.0)*x3990*x3995))+x3990+((r00*x3996))+(((-1.0)*r00*x3988))+((x3993*x3994))))+IKsqr(((((-1.0)*r01*x3988))+((x3994*x3995))+((r01*x3996))+((x3990*x3993))+(((-1.0)*r00*x3992))+(((-1.0)*x3994))+((r00*x3991))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r01*x3991))+((r01*x3992))+(((-1.0)*x3990*x3995))+x3990+((r00*x3996))+(((-1.0)*r00*x3988))+((x3993*x3994))), ((((-1.0)*r01*x3988))+((x3994*x3995))+((r01*x3996))+((x3990*x3993))+(((-1.0)*r00*x3992))+(((-1.0)*x3994))+((r00*x3991))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x3997=IKcos(j9);
IkReal x3998=(r00*x3997);
IkReal x3999=(cj4*x3998);
IkReal x4000=IKsin(j9);
IkReal x4001=(r00*x4000);
IkReal x4002=(sj4*x4001);
IkReal x4003=(r01*x3997);
IkReal x4004=(sj4*x4003);
IkReal x4005=((1.0)*cj4);
IkReal x4006=(r01*x4000);
IkReal x4007=(sj4*x3998);
IkReal x4008=((1.0)*sj4);
IkReal x4009=((0.03431)*cj4);
evalcond[0]=(x3999+(((-1.0)*x4005*x4006))+x4004+x4002);
evalcond[1]=((((-1.0)*x4006*x4008))+(((-1.0)*x4001*x4005))+(((-1.0)*x4003*x4005))+x4007);
evalcond[2]=((0.00036)+(((-0.03431)*x4004))+((px*sj4))+(((-0.03431)*x3999))+((x4006*x4009))+(((-1.0)*py*x4005))+(((-0.03431)*x4002)));
evalcond[3]=((0.00337)+((x4003*x4009))+(((-0.03431)*x4007))+(((-1.0)*py*x4008))+(((-1.0)*px*x4005))+(((0.03431)*sj4*x4006))+((x4001*x4009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4010=((0.0982220926843486)*cj4);
IkReal x4011=((29.146021568056)*py);
IkReal x4012=(r01*x4011);
IkReal x4013=((0.0982220926843486)*sj4);
IkReal x4014=((29.146021568056)*cj4*px*sj4);
IkReal x4015=(cj4*sj4);
IkReal x4016=(r00*x4011);
IkReal x4017=cj4*cj4;
IkReal x4018=((29.146021568056)*px*x4017);
if( IKabs((x4012+((r01*x4014))+((x4015*x4016))+(((-1.0)*x4012*x4017))+(((-1.0)*r01*x4013))+((r00*x4018))+(((-1.0)*r00*x4010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4010))+((x4012*x4015))+((r01*x4018))+(((-1.0)*r00*x4014))+((x4016*x4017))+(((-1.0)*x4016))+((r00*x4013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4012+((r01*x4014))+((x4015*x4016))+(((-1.0)*x4012*x4017))+(((-1.0)*r01*x4013))+((r00*x4018))+(((-1.0)*r00*x4010))))+IKsqr(((((-1.0)*r01*x4010))+((x4012*x4015))+((r01*x4018))+(((-1.0)*r00*x4014))+((x4016*x4017))+(((-1.0)*x4016))+((r00*x4013))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x4012+((r01*x4014))+((x4015*x4016))+(((-1.0)*x4012*x4017))+(((-1.0)*r01*x4013))+((r00*x4018))+(((-1.0)*r00*x4010))), ((((-1.0)*r01*x4010))+((x4012*x4015))+((r01*x4018))+(((-1.0)*r00*x4014))+((x4016*x4017))+(((-1.0)*x4016))+((r00*x4013))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4019=IKcos(j9);
IkReal x4020=(r00*x4019);
IkReal x4021=(cj4*x4020);
IkReal x4022=IKsin(j9);
IkReal x4023=(r00*x4022);
IkReal x4024=(sj4*x4023);
IkReal x4025=(r01*x4019);
IkReal x4026=(sj4*x4025);
IkReal x4027=((1.0)*cj4);
IkReal x4028=(r01*x4022);
IkReal x4029=(sj4*x4020);
IkReal x4030=((1.0)*sj4);
IkReal x4031=((0.03431)*cj4);
evalcond[0]=(x4021+x4024+x4026+(((-1.0)*x4027*x4028)));
evalcond[1]=((((-1.0)*x4025*x4027))+(((-1.0)*x4023*x4027))+x4029+(((-1.0)*x4028*x4030)));
evalcond[2]=((-0.00036)+((px*sj4))+(((-0.03431)*x4021))+(((-0.03431)*x4024))+((x4028*x4031))+(((-1.0)*py*x4027))+(((-0.03431)*x4026)));
evalcond[3]=((0.00337)+((x4023*x4031))+(((-1.0)*py*x4030))+((x4025*x4031))+(((0.03431)*sj4*x4028))+(((-1.0)*px*x4027))+(((-0.03431)*x4029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4032=((1.0)*cj4);
IkReal x4033=(r00*sj6);
IkReal x4034=(r01*sj6);
CheckValue<IkReal> x4035 = IKatan2WithCheck(IkReal(((((-1.0)*sj4*x4034))+(((-1.0)*x4032*x4033)))),(((sj4*x4033))+(((-1.0)*x4032*x4034))),IKFAST_ATAN2_MAGTHRESH);
if(!x4035.valid){
continue;
}
CheckValue<IkReal> x4036=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x4036.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x4035.value)+(((-1.0)*(1.5707963267949)*(x4036.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x4037=IKcos(j9);
IkReal x4038=(r00*x4037);
IkReal x4039=(cj4*x4038);
IkReal x4040=IKsin(j9);
IkReal x4041=(r00*x4040);
IkReal x4042=(sj4*x4041);
IkReal x4043=(r01*x4037);
IkReal x4044=(sj4*x4043);
IkReal x4045=((1.0)*cj4);
IkReal x4046=(r01*x4040);
IkReal x4047=(sj4*x4038);
IkReal x4048=(x4041*x4045);
IkReal x4049=(x4043*x4045);
IkReal x4050=((1.0)*sj4);
IkReal x4051=(x4046*x4050);
IkReal x4052=(cj4*r01*x4040);
IkReal x4053=((1.0)*cj4*r00*x4037);
IkReal x4054=((1.0)*cj8*sj4);
IkReal x4055=((1.0)*sj4*sj8);
IkReal x4056=((0.03431)*cj4);
evalcond[0]=(x4042+x4044+(((-1.0)*x4045*x4046))+x4039);
evalcond[1]=(x4047+(((-1.0)*x4051))+(((-1.0)*x4048))+(((-1.0)*x4049)));
evalcond[2]=(((sj8*x4047))+(((-1.0)*sj8*x4049))+(((-1.0)*sj8*x4051))+cj6+(((-1.0)*sj8*x4048)));
evalcond[3]=((((-1.0)*x4043*x4054))+((cj8*x4052))+cj6+(((-1.0)*x4041*x4054))+(((-1.0)*cj8*x4053)));
evalcond[4]=((((-1.0)*cj8*x4048))+(((-1.0)*cj8*x4051))+sj6+(((-1.0)*cj8*x4049))+((cj8*x4047)));
evalcond[5]=((((-1.0)*x4041*x4055))+(((-1.0)*x4043*x4055))+(((-1.0)*sj8*x4053))+(((-1.0)*(1.0)*sj6))+((sj8*x4052)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x4039))+(((-0.03431)*x4042))+((x4046*x4056))+(((-0.03431)*x4044))+(((-1.0)*py*x4045))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+((x4043*x4056))+(((-0.03431)*x4047))+(((0.00036)*cj6))+(((0.03431)*sj4*x4046))+((x4041*x4056))+(((-1.0)*py*x4050))+(((-1.0)*px*x4045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4057=((1.0)*cj4);
IkReal x4058=(cj6*r00);
IkReal x4059=(cj6*r01);
CheckValue<IkReal> x4060=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x4060.valid){
continue;
}
CheckValue<IkReal> x4061 = IKatan2WithCheck(IkReal(((((-1.0)*x4057*x4058))+(((-1.0)*sj4*x4059)))),(((sj4*x4058))+(((-1.0)*x4057*x4059))),IKFAST_ATAN2_MAGTHRESH);
if(!x4061.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x4060.value)))+(x4061.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x4062=IKcos(j9);
IkReal x4063=(r00*x4062);
IkReal x4064=(cj4*x4063);
IkReal x4065=IKsin(j9);
IkReal x4066=(r00*x4065);
IkReal x4067=(sj4*x4066);
IkReal x4068=(r01*x4062);
IkReal x4069=(sj4*x4068);
IkReal x4070=((1.0)*cj4);
IkReal x4071=(r01*x4065);
IkReal x4072=(sj4*x4063);
IkReal x4073=(x4066*x4070);
IkReal x4074=(x4068*x4070);
IkReal x4075=((1.0)*sj4);
IkReal x4076=(x4071*x4075);
IkReal x4077=(cj4*r01*x4065);
IkReal x4078=((1.0)*cj4*r00*x4062);
IkReal x4079=((1.0)*cj8*sj4);
IkReal x4080=((1.0)*sj4*sj8);
IkReal x4081=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4070*x4071))+x4067+x4064+x4069);
evalcond[1]=((((-1.0)*x4074))+x4072+(((-1.0)*x4073))+(((-1.0)*x4076)));
evalcond[2]=(((sj8*x4072))+(((-1.0)*sj8*x4074))+(((-1.0)*sj8*x4073))+cj6+(((-1.0)*sj8*x4076)));
evalcond[3]=((((-1.0)*cj8*x4078))+(((-1.0)*x4066*x4079))+cj6+(((-1.0)*x4068*x4079))+((cj8*x4077)));
evalcond[4]=((((-1.0)*cj8*x4073))+sj6+((cj8*x4072))+(((-1.0)*cj8*x4076))+(((-1.0)*cj8*x4074)));
evalcond[5]=((((-1.0)*sj8*x4078))+((sj8*x4077))+(((-1.0)*x4066*x4080))+(((-1.0)*x4068*x4080))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x4070))+(((-0.03431)*x4069))+(((-0.03431)*x4064))+((x4071*x4081))+(((-0.03431)*x4067))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+((x4066*x4081))+((x4068*x4081))+(((0.00036)*cj6))+(((0.03431)*sj4*x4071))+(((-0.03431)*x4072))+(((-1.0)*py*x4075))+(((-1.0)*px*x4070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4082=(r00*sj6);
IkReal x4083=(r01*sj6);
CheckValue<IkReal> x4084 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x4083))+((sj4*x4082)))),(((sj4*x4083))+((cj4*x4082))),IKFAST_ATAN2_MAGTHRESH);
if(!x4084.valid){
continue;
}
CheckValue<IkReal> x4085=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x4085.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x4084.value)+(((-1.0)*(1.5707963267949)*(x4085.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x4086=IKcos(j9);
IkReal x4087=(r00*x4086);
IkReal x4088=(cj4*x4087);
IkReal x4089=IKsin(j9);
IkReal x4090=(r00*x4089);
IkReal x4091=(sj4*x4090);
IkReal x4092=(r01*x4086);
IkReal x4093=(sj4*x4092);
IkReal x4094=((1.0)*cj4);
IkReal x4095=(r01*x4089);
IkReal x4096=(sj4*x4087);
IkReal x4097=(x4090*x4094);
IkReal x4098=(x4092*x4094);
IkReal x4099=((1.0)*sj4);
IkReal x4100=(x4095*x4099);
IkReal x4101=(cj4*r01*x4089);
IkReal x4102=((1.0)*cj4*r00*x4086);
IkReal x4103=((1.0)*cj8*sj4);
IkReal x4104=((1.0)*sj4*sj8);
IkReal x4105=((0.03431)*cj4);
evalcond[0]=(x4088+x4091+x4093+(((-1.0)*x4094*x4095)));
evalcond[1]=(x4096+(((-1.0)*x4098))+(((-1.0)*x4100))+(((-1.0)*x4097)));
evalcond[2]=(((sj8*x4096))+(((-1.0)*sj8*x4100))+(((-1.0)*sj8*x4097))+cj6+(((-1.0)*sj8*x4098)));
evalcond[3]=((((-1.0)*x4090*x4103))+(((-1.0)*x4092*x4103))+((cj8*x4101))+cj6+(((-1.0)*cj8*x4102)));
evalcond[4]=((((-1.0)*cj8*x4098))+(((-1.0)*cj8*x4100))+sj6+(((-1.0)*cj8*x4097))+((cj8*x4096)));
evalcond[5]=((((-1.0)*sj8*x4102))+(((-1.0)*x4092*x4104))+((sj8*x4101))+(((-1.0)*x4090*x4104))+(((-1.0)*(1.0)*sj6)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x4091))+(((-1.0)*py*x4094))+((x4095*x4105))+(((-0.03431)*x4088))+(((-0.03431)*x4093))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+(((-0.03431)*x4096))+(((0.03431)*sj4*x4095))+(((0.00036)*cj6))+(((-1.0)*px*x4094))+(((-1.0)*py*x4099))+((x4090*x4105))+((x4092*x4105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=-1.0;
evalcond[2]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
j8array[0]=-1.5707963267949;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j4eval[3];
IkReal x4106=((1.0)*r00);
IkReal x4107=(((py*r01))+((px*r00)));
IkReal x4108=(px*r01);
IkReal x4109=(pz*r01);
IkReal x4110=((-1.0)*pz*x4106);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4106);
r10=r01;
npx=x4107;
npy=(x4108+(((-1.0)*py*x4106)));
npz=(pz*r22);
rxp0_0=x4109;
rxp0_1=x4110;
rxp0_2=((((-1.0)*x4108))+((py*r00)));
rxp1_0=x4110;
rxp1_1=((-1.0)*x4109);
rxp1_2=x4107;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x4111=(cj8*r01);
IkReal x4112=(((pp*x4111))+(((-1.0)*x4111*(pz*pz))));
IkReal x4113=((3431.0)*cj6*r01);
IkReal x4114=((337.0)*cj8*r01);
IkReal x4115=((3431.0)*r01*sj6);
IkReal x4116=((36.0)*cj6*cj8*r01);
IkReal x4117=((36.0)*cj8*r01*sj6);
j4eval[0]=x4112;
j4eval[1]=((IKabs((((px*x4116))+((py*x4113))+((py*x4117))+(((-1.0)*px*x4115))+((px*x4114)))))+(IKabs((((py*x4114))+(((-1.0)*px*x4117))+((py*x4116))+(((-1.0)*px*x4113))+(((-1.0)*py*x4115))))));
j4eval[2]=IKsign(x4112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4118=((1.0)*r00);
IkReal x4119=(((py*r01))+((px*r00)));
IkReal x4120=(px*r01);
IkReal x4121=(pz*r01);
IkReal x4122=((-1.0)*pz*x4118);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4118);
r10=r01;
npx=x4119;
npy=((((-1.0)*py*x4118))+x4120);
npz=(pz*r22);
rxp0_0=x4121;
rxp0_1=x4122;
rxp0_2=(((py*r00))+(((-1.0)*x4120)));
rxp1_0=x4122;
rxp1_1=((-1.0)*x4121);
rxp1_2=x4119;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x4123=(cj8*r00);
IkReal x4124=((((-1.0)*x4123*(pz*pz)))+((pp*x4123)));
IkReal x4125=((3431.0)*cj6*r00);
IkReal x4126=((337.0)*cj8*r00);
IkReal x4127=((3431.0)*r00*sj6);
IkReal x4128=((36.0)*cj6*cj8*r00);
IkReal x4129=((36.0)*cj8*r00*sj6);
j4eval[0]=x4124;
j4eval[1]=((IKabs((((px*x4128))+((py*x4129))+((py*x4125))+((px*x4126))+(((-1.0)*px*x4127)))))+(IKabs(((((-1.0)*py*x4127))+(((-1.0)*px*x4129))+((py*x4126))+(((-1.0)*px*x4125))+((py*x4128))))));
j4eval[2]=IKsign(x4124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4130=((1.0)*r00);
IkReal x4131=(((py*r01))+((px*r00)));
IkReal x4132=(px*r01);
IkReal x4133=(pz*r01);
IkReal x4134=((-1.0)*pz*x4130);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4130);
r10=r01;
npx=x4131;
npy=((((-1.0)*py*x4130))+x4132);
npz=(pz*r22);
rxp0_0=x4133;
rxp0_1=x4134;
rxp0_2=((((-1.0)*x4132))+((py*r00)));
rxp1_0=x4134;
rxp1_1=((-1.0)*x4133);
rxp1_2=x4131;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x4135=(cj8*r00*r01);
IkReal x4136=(((pp*x4135))+(((-1.0)*x4135*(pz*pz))));
IkReal x4137=((3431.0)*cj6*r00*r01);
IkReal x4138=((337.0)*cj8*r00*r01);
IkReal x4139=((3431.0)*r00*r01*sj6);
IkReal x4140=((36.0)*cj6*cj8*r00*r01);
IkReal x4141=((36.0)*cj8*r00*r01*sj6);
j4eval[0]=x4136;
j4eval[1]=IKsign(x4136);
j4eval[2]=((IKabs((((py*x4141))+((px*x4140))+(((-1.0)*px*x4139))+((py*x4137))+((px*x4138)))))+(IKabs(((((-1.0)*py*x4139))+(((-1.0)*px*x4141))+(((-1.0)*px*x4137))+((py*x4140))+((py*x4138))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x4142=((1.0)*r00);
IkReal x4143=(((py*r01))+((px*r00)));
IkReal x4144=(px*r01);
IkReal x4145=(pz*r01);
IkReal x4146=((-1.0)*pz*x4142);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4142);
r10=r01;
npx=x4143;
npy=((((-1.0)*py*x4142))+x4144);
npz=(pz*r22);
rxp0_0=x4145;
rxp0_1=x4146;
rxp0_2=(((py*r00))+(((-1.0)*x4144)));
rxp1_0=x4146;
rxp1_1=((-1.0)*x4145);
rxp1_2=x4143;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x4147=pz*pz;
j4eval[0]=((((-1.0)*x4147))+pp);
j4eval[1]=IKsign(((((100000.0)*pp))+(((-100000.0)*x4147))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4148=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x4148.valid){
continue;
}
CheckValue<IkReal> x4149 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x4149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4148.value)))+(x4149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x4150=IKcos(j4);
IkReal x4151=(r01*x4150);
IkReal x4152=((1.0)*px);
IkReal x4153=IKsin(j4);
IkReal x4154=(r01*x4153);
IkReal x4155=(r00*x4150);
IkReal x4156=(r00*x4153);
evalcond[0]=((((-1.0)*x4152*x4154))+((py*x4151)));
evalcond[1]=((((-1.0)*x4152*x4156))+((py*x4155)));
evalcond[2]=(((py*x4156))+(((-1.0)*(0.00337)*r00))+((px*x4155)));
evalcond[3]=((((-1.0)*py*x4154))+(((-1.0)*x4151*x4152))+(((0.00337)*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4157=((29.146021568056)*px);
IkReal x4158=(r00*x4157);
IkReal x4159=(cj4*sj4);
IkReal x4160=(r01*x4157);
IkReal x4161=((29.146021568056)*cj4*py*sj4);
IkReal x4162=cj4*cj4;
IkReal x4163=((29.146021568056)*py*x4162);
if( IKabs((x4158+(((-1.0)*x4159*x4160))+((r01*x4163))+(((-1.0)*x4158*x4162))+(((-1.0)*r00*x4161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4158*x4159))+(((-1.0)*r00*x4163))+(((-1.0)*x4160*x4162))+(((-1.0)*r01*x4161))+x4160)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4158+(((-1.0)*x4159*x4160))+((r01*x4163))+(((-1.0)*x4158*x4162))+(((-1.0)*r00*x4161))))+IKsqr((((x4158*x4159))+(((-1.0)*r00*x4163))+(((-1.0)*x4160*x4162))+(((-1.0)*r01*x4161))+x4160))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x4158+(((-1.0)*x4159*x4160))+((r01*x4163))+(((-1.0)*x4158*x4162))+(((-1.0)*r00*x4161))), (((x4158*x4159))+(((-1.0)*r00*x4163))+(((-1.0)*x4160*x4162))+(((-1.0)*r01*x4161))+x4160));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4164=IKcos(j9);
IkReal x4165=(r00*x4164);
IkReal x4166=(cj4*x4165);
IkReal x4167=IKsin(j9);
IkReal x4168=(r00*x4167);
IkReal x4169=(sj4*x4168);
IkReal x4170=(r01*x4164);
IkReal x4171=(sj4*x4170);
IkReal x4172=((1.0)*cj4);
IkReal x4173=(r01*x4167);
IkReal x4174=(sj4*x4165);
IkReal x4175=((1.0)*sj4);
IkReal x4176=((0.03431)*cj4);
evalcond[0]=(x4171+(((-1.0)*x4172*x4173))+x4169+x4166);
evalcond[1]=(x4174+(((-1.0)*x4170*x4172))+(((-1.0)*x4173*x4175))+(((-1.0)*x4168*x4172)));
evalcond[2]=(((px*sj4))+((x4173*x4176))+(((-0.03431)*x4171))+(((-0.03431)*x4169))+(((-1.0)*py*x4172))+(((-0.03431)*x4166)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x4173))+((x4170*x4176))+(((-1.0)*px*x4172))+(((-0.03431)*x4174))+(((-1.0)*py*x4175))+((x4168*x4176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x4177=((1.0)*r00);
IkReal x4178=(((py*r01))+((px*r00)));
IkReal x4179=(px*r01);
IkReal x4180=(pz*r01);
IkReal x4181=((-1.0)*pz*x4177);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4177);
r10=r01;
npx=x4178;
npy=(x4179+(((-1.0)*py*x4177)));
npz=(pz*r22);
rxp0_0=x4180;
rxp0_1=x4181;
rxp0_2=(((py*r00))+(((-1.0)*x4179)));
rxp1_0=x4181;
rxp1_1=((-1.0)*x4180);
rxp1_2=x4178;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x4182=pz*pz;
j4eval[0]=(pp+(((-1.0)*x4182)));
j4eval[1]=IKsign(((((-100000.0)*x4182))+(((100000.0)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4183=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x4183.valid){
continue;
}
CheckValue<IkReal> x4184 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x4184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4183.value)))+(x4184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x4185=IKcos(j4);
IkReal x4186=(r01*x4185);
IkReal x4187=((1.0)*px);
IkReal x4188=IKsin(j4);
IkReal x4189=(r01*x4188);
IkReal x4190=(r00*x4185);
IkReal x4191=(r00*x4188);
evalcond[0]=(((py*x4186))+(((-1.0)*x4187*x4189)));
evalcond[1]=(((py*x4190))+(((-1.0)*x4187*x4191)));
evalcond[2]=(((py*x4191))+(((-1.0)*(0.00337)*r00))+((px*x4190)));
evalcond[3]=((((-1.0)*py*x4189))+(((0.00337)*r01))+(((-1.0)*x4186*x4187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4192=((29.146021568056)*px);
IkReal x4193=(r00*x4192);
IkReal x4194=(cj4*sj4);
IkReal x4195=(r01*x4192);
IkReal x4196=((29.146021568056)*cj4*py*sj4);
IkReal x4197=cj4*cj4;
IkReal x4198=((29.146021568056)*py*x4197);
if( IKabs(((((-1.0)*x4194*x4195))+((r01*x4198))+x4193+(((-1.0)*r00*x4196))+(((-1.0)*x4193*x4197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4195*x4197))+(((-1.0)*r01*x4196))+((x4193*x4194))+(((-1.0)*r00*x4198))+x4195)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4194*x4195))+((r01*x4198))+x4193+(((-1.0)*r00*x4196))+(((-1.0)*x4193*x4197))))+IKsqr(((((-1.0)*x4195*x4197))+(((-1.0)*r01*x4196))+((x4193*x4194))+(((-1.0)*r00*x4198))+x4195))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x4194*x4195))+((r01*x4198))+x4193+(((-1.0)*r00*x4196))+(((-1.0)*x4193*x4197))), ((((-1.0)*x4195*x4197))+(((-1.0)*r01*x4196))+((x4193*x4194))+(((-1.0)*r00*x4198))+x4195));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4199=IKcos(j9);
IkReal x4200=(r00*x4199);
IkReal x4201=(cj4*x4200);
IkReal x4202=IKsin(j9);
IkReal x4203=(r00*x4202);
IkReal x4204=(sj4*x4203);
IkReal x4205=(r01*x4199);
IkReal x4206=(sj4*x4205);
IkReal x4207=((1.0)*cj4);
IkReal x4208=(r01*x4202);
IkReal x4209=(sj4*x4200);
IkReal x4210=((1.0)*sj4);
IkReal x4211=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4207*x4208))+x4201+x4204+x4206);
evalcond[1]=((((-1.0)*x4208*x4210))+x4209+(((-1.0)*x4203*x4207))+(((-1.0)*x4205*x4207)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4201))+(((-0.03431)*x4206))+(((-0.03431)*x4204))+((x4208*x4211))+(((-1.0)*py*x4207)));
evalcond[3]=((0.00337)+(((-1.0)*px*x4207))+((x4203*x4211))+(((-1.0)*py*x4210))+((x4205*x4211))+(((-0.03431)*x4209))+(((0.03431)*sj4*x4208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(px)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4212=((1.0)*r00);
IkReal x4213=(pz*r01);
IkReal x4214=((-1.0)*pz*x4212);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4212);
r10=r01;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=x4213;
rxp0_1=x4214;
rxp0_2=0;
rxp1_0=x4214;
rxp1_1=((-1.0)*x4213);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
px=0;
py=0;
pp=pz*pz;
j4eval[0]=60.0;
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4215=((0.0104925677645001)*cj4*sj6);
IkReal x4216=((0.0104925677645001)*sj4*sj6);
if( IKabs((((r00*x4216))+(((-1.0)*r01*x4215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x4215))+((r01*x4216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x4216))+(((-1.0)*r01*x4215))))+IKsqr((((r00*x4215))+((r01*x4216))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r00*x4216))+(((-1.0)*r01*x4215))), (((r00*x4215))+((r01*x4216))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4217=IKcos(j9);
IkReal x4218=(r00*x4217);
IkReal x4219=(cj4*x4218);
IkReal x4220=IKsin(j9);
IkReal x4221=(r00*sj4*x4220);
IkReal x4222=(r01*sj4*x4217);
IkReal x4223=(cj4*r01*x4220);
IkReal x4224=(sj4*x4218);
IkReal x4225=(cj4*r00*x4220);
IkReal x4226=(cj4*r01*x4217);
IkReal x4227=(r01*sj4*x4220);
evalcond[0]=(x4221+x4222+(((-1.0)*x4223))+x4219);
evalcond[1]=((((-1.0)*x4227))+x4224+(((-1.0)*x4226))+(((-1.0)*x4225)));
evalcond[2]=((((0.03431)*x4223))+(((-0.03431)*x4221))+(((-0.03431)*x4222))+(((-0.03431)*x4219))+(((0.00036)*sj6)));
evalcond[3]=((0.00337)+(((-0.03431)*x4224))+(((0.00036)*cj6))+(((0.03431)*x4227))+(((0.03431)*x4226))+(((0.03431)*x4225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4228=(cj8*r00*r01);
IkReal x4229=(r01*(((((0.00036)*cj8*r00*sj6))+(((0.03431)*cj6*r00)))));
IkReal x4230=(cj8*r01);
IkReal x4231=(r00*(((((-1.0)*(0.03431)*r01*sj6))+(((0.00036)*cj6*x4230))+(((0.00337)*x4230)))));
CheckValue<IkReal> x4232 = IKatan2WithCheck(IkReal((((py*x4231))+(((-1.0)*px*x4229)))),(((px*x4231))+((py*x4229))),IKFAST_ATAN2_MAGTHRESH);
if(!x4232.valid){
continue;
}
CheckValue<IkReal> x4233=IKPowWithIntegerCheck(IKsign((((pp*x4228))+(((-1.0)*x4228*(pz*pz))))),-1);
if(!x4233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4232.value)+(((1.5707963267949)*(x4233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x4234=((0.00337)*cj8);
IkReal x4235=((0.03431)*sj6);
IkReal x4236=((0.00036)*cj6*cj8);
IkReal x4237=IKcos(j4);
IkReal x4238=(cj8*px*r00);
IkReal x4239=(py*r00);
IkReal x4240=IKsin(j4);
IkReal x4241=(cj8*x4240);
IkReal x4242=((0.03431)*cj6);
IkReal x4243=((0.00036)*cj8*sj6);
IkReal x4244=(px*r01);
IkReal x4245=(py*r01);
IkReal x4246=((1.0)*cj8*x4237);
evalcond[0]=(((r00*x4235))+((x4239*x4241))+(((-1.0)*r00*x4234))+(((-1.0)*r00*x4236))+((x4237*x4238)));
evalcond[1]=(((x4241*x4244))+((r01*x4243))+((r01*x4242))+(((-1.0)*x4245*x4246)));
evalcond[2]=(((x4238*x4240))+((r00*x4242))+((r00*x4243))+(((-1.0)*x4239*x4246)));
evalcond[3]=((((-1.0)*cj8*x4240*x4245))+((r01*x4236))+(((-1.0)*r01*x4235))+(((-1.0)*x4244*x4246))+((r01*x4234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x4247=((1.0)*r00);
IkReal x4248=(((py*r01))+((px*r00)));
IkReal x4249=(px*r01);
IkReal x4250=(pz*r01);
IkReal x4251=((-1.0)*pz*x4247);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4247);
r10=r01;
npx=x4248;
npy=(x4249+(((-1.0)*py*x4247)));
npz=(pz*r22);
rxp0_0=x4250;
rxp0_1=x4251;
rxp0_2=((((-1.0)*x4249))+((py*r00)));
rxp1_0=x4251;
rxp1_1=((-1.0)*x4250);
rxp1_2=x4248;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=cj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x4252=((1.0)*r00);
IkReal x4253=(((py*r01))+((px*r00)));
IkReal x4254=(px*r01);
IkReal x4255=(pz*r01);
IkReal x4256=((-1.0)*pz*x4252);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4252);
r10=r01;
npx=x4253;
npy=(x4254+(((-1.0)*py*x4252)));
npz=(pz*r22);
rxp0_0=x4255;
rxp0_1=x4256;
rxp0_2=(((py*r00))+(((-1.0)*x4254)));
rxp1_0=x4256;
rxp1_1=((-1.0)*x4255);
rxp1_2=x4253;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x4257=((1.0)*r00);
IkReal x4258=(((py*r01))+((px*r00)));
IkReal x4259=(px*r01);
IkReal x4260=(pz*r01);
IkReal x4261=((-1.0)*pz*x4257);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4257);
r10=r01;
npx=x4258;
npy=(x4259+(((-1.0)*py*x4257)));
npz=(pz*r22);
rxp0_0=x4260;
rxp0_1=x4261;
rxp0_2=((((-1.0)*x4259))+((py*r00)));
rxp1_0=x4261;
rxp1_1=((-1.0)*x4260);
rxp1_2=x4258;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=cj8;
j9eval[1]=cj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4262=((29.146021568056)*px);
IkReal x4263=(r00*x4262);
IkReal x4264=(cj4*sj4);
IkReal x4265=(r01*x4262);
IkReal x4266=((29.146021568056)*cj4*py*sj4);
IkReal x4267=cj4*cj4;
IkReal x4268=((29.146021568056)*py*x4267);
if( IKabs(((((-1.0)*x4263*x4267))+(((-1.0)*x4264*x4265))+x4263+((r01*x4268))+(((-1.0)*r00*x4266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4263*x4264))+(((-1.0)*r00*x4268))+(((-1.0)*r01*x4266))+(((-1.0)*x4265*x4267))+x4265)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4263*x4267))+(((-1.0)*x4264*x4265))+x4263+((r01*x4268))+(((-1.0)*r00*x4266))))+IKsqr((((x4263*x4264))+(((-1.0)*r00*x4268))+(((-1.0)*r01*x4266))+(((-1.0)*x4265*x4267))+x4265))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x4263*x4267))+(((-1.0)*x4264*x4265))+x4263+((r01*x4268))+(((-1.0)*r00*x4266))), (((x4263*x4264))+(((-1.0)*r00*x4268))+(((-1.0)*r01*x4266))+(((-1.0)*x4265*x4267))+x4265));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4269=IKcos(j9);
IkReal x4270=(r00*x4269);
IkReal x4271=(cj4*x4270);
IkReal x4272=IKsin(j9);
IkReal x4273=(r00*x4272);
IkReal x4274=(sj4*x4273);
IkReal x4275=(r01*x4269);
IkReal x4276=(sj4*x4275);
IkReal x4277=((1.0)*cj4);
IkReal x4278=(r01*x4272);
IkReal x4279=(sj4*x4270);
IkReal x4280=((1.0)*sj4);
IkReal x4281=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4277*x4278))+x4271+x4274+x4276);
evalcond[1]=(x4279+(((-1.0)*x4273*x4277))+(((-1.0)*x4275*x4277))+(((-1.0)*x4278*x4280)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4271))+(((-1.0)*py*x4277))+(((-0.03431)*x4276))+((x4278*x4281))+(((-0.03431)*x4274)));
evalcond[3]=((0.00337)+((x4273*x4281))+(((-0.03431)*x4279))+(((0.03431)*sj4*x4278))+(((-1.0)*px*x4277))+(((-1.0)*py*x4280))+((x4275*x4281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4282=((29.146021568056)*px);
IkReal x4283=(r00*x4282);
IkReal x4284=(cj4*sj4);
IkReal x4285=(r01*x4282);
IkReal x4286=((29.146021568056)*cj4*py*sj4);
IkReal x4287=cj4*cj4;
IkReal x4288=((29.146021568056)*py*x4287);
if( IKabs((((r01*x4288))+(((-1.0)*r00*x4286))+x4283+(((-1.0)*x4283*x4287))+(((-1.0)*x4284*x4285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x4288))+((x4283*x4284))+(((-1.0)*r01*x4286))+x4285+(((-1.0)*x4285*x4287)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x4288))+(((-1.0)*r00*x4286))+x4283+(((-1.0)*x4283*x4287))+(((-1.0)*x4284*x4285))))+IKsqr(((((-1.0)*r00*x4288))+((x4283*x4284))+(((-1.0)*r01*x4286))+x4285+(((-1.0)*x4285*x4287))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x4288))+(((-1.0)*r00*x4286))+x4283+(((-1.0)*x4283*x4287))+(((-1.0)*x4284*x4285))), ((((-1.0)*r00*x4288))+((x4283*x4284))+(((-1.0)*r01*x4286))+x4285+(((-1.0)*x4285*x4287))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4289=IKcos(j9);
IkReal x4290=(r00*x4289);
IkReal x4291=(cj4*x4290);
IkReal x4292=IKsin(j9);
IkReal x4293=(r00*x4292);
IkReal x4294=(sj4*x4293);
IkReal x4295=(r01*x4289);
IkReal x4296=(sj4*x4295);
IkReal x4297=((1.0)*cj4);
IkReal x4298=(r01*x4292);
IkReal x4299=(sj4*x4290);
IkReal x4300=((1.0)*sj4);
IkReal x4301=((0.03431)*cj4);
evalcond[0]=(x4294+x4291+x4296+(((-1.0)*x4297*x4298)));
evalcond[1]=((((-1.0)*x4293*x4297))+x4299+(((-1.0)*x4298*x4300))+(((-1.0)*x4295*x4297)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x4297))+(((-0.03431)*x4296))+(((-0.03431)*x4294))+((x4298*x4301))+(((-0.03431)*x4291)));
evalcond[3]=((0.00337)+(((-0.03431)*x4299))+((x4293*x4301))+(((0.03431)*sj4*x4298))+((x4295*x4301))+(((-1.0)*py*x4300))+(((-1.0)*px*x4297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4302=((0.0982220926843486)*cj4);
IkReal x4303=((29.146021568056)*py);
IkReal x4304=(r01*x4303);
IkReal x4305=((0.0982220926843486)*sj4);
IkReal x4306=((29.146021568056)*cj4*px*sj4);
IkReal x4307=(cj4*sj4);
IkReal x4308=(r00*x4303);
IkReal x4309=cj4*cj4;
IkReal x4310=((29.146021568056)*px*x4309);
if( IKabs(((((-1.0)*x4304*x4309))+((x4307*x4308))+(((-1.0)*r00*x4302))+((r01*x4306))+x4304+(((-1.0)*r01*x4305))+((r00*x4310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4302))+((x4308*x4309))+(((-1.0)*r00*x4306))+(((-1.0)*x4308))+((x4304*x4307))+((r00*x4305))+((r01*x4310)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4304*x4309))+((x4307*x4308))+(((-1.0)*r00*x4302))+((r01*x4306))+x4304+(((-1.0)*r01*x4305))+((r00*x4310))))+IKsqr(((((-1.0)*r01*x4302))+((x4308*x4309))+(((-1.0)*r00*x4306))+(((-1.0)*x4308))+((x4304*x4307))+((r00*x4305))+((r01*x4310))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x4304*x4309))+((x4307*x4308))+(((-1.0)*r00*x4302))+((r01*x4306))+x4304+(((-1.0)*r01*x4305))+((r00*x4310))), ((((-1.0)*r01*x4302))+((x4308*x4309))+(((-1.0)*r00*x4306))+(((-1.0)*x4308))+((x4304*x4307))+((r00*x4305))+((r01*x4310))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4311=IKcos(j9);
IkReal x4312=(r00*x4311);
IkReal x4313=(cj4*x4312);
IkReal x4314=IKsin(j9);
IkReal x4315=(r00*x4314);
IkReal x4316=(sj4*x4315);
IkReal x4317=(r01*x4311);
IkReal x4318=(sj4*x4317);
IkReal x4319=((1.0)*cj4);
IkReal x4320=(r01*x4314);
IkReal x4321=(sj4*x4312);
IkReal x4322=((1.0)*sj4);
IkReal x4323=((0.03431)*cj4);
evalcond[0]=(x4313+x4318+x4316+(((-1.0)*x4319*x4320)));
evalcond[1]=((((-1.0)*x4317*x4319))+(((-1.0)*x4320*x4322))+(((-1.0)*x4315*x4319))+x4321);
evalcond[2]=((0.00036)+((px*sj4))+((x4320*x4323))+(((-0.03431)*x4318))+(((-1.0)*py*x4319))+(((-0.03431)*x4313))+(((-0.03431)*x4316)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x4320))+(((-0.03431)*x4321))+(((-1.0)*py*x4322))+((x4317*x4323))+(((-1.0)*px*x4319))+((x4315*x4323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4324=((0.0982220926843486)*cj4);
IkReal x4325=((29.146021568056)*py);
IkReal x4326=(r01*x4325);
IkReal x4327=((0.0982220926843486)*sj4);
IkReal x4328=((29.146021568056)*cj4*px*sj4);
IkReal x4329=(cj4*sj4);
IkReal x4330=(r00*x4325);
IkReal x4331=cj4*cj4;
IkReal x4332=((29.146021568056)*px*x4331);
if( IKabs((((r00*x4332))+((r01*x4328))+(((-1.0)*r00*x4324))+(((-1.0)*r01*x4327))+((x4329*x4330))+(((-1.0)*x4326*x4331))+x4326)) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4326*x4329))+((x4330*x4331))+((r00*x4327))+((r01*x4332))+(((-1.0)*r00*x4328))+(((-1.0)*x4330))+(((-1.0)*r01*x4324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x4332))+((r01*x4328))+(((-1.0)*r00*x4324))+(((-1.0)*r01*x4327))+((x4329*x4330))+(((-1.0)*x4326*x4331))+x4326))+IKsqr((((x4326*x4329))+((x4330*x4331))+((r00*x4327))+((r01*x4332))+(((-1.0)*r00*x4328))+(((-1.0)*x4330))+(((-1.0)*r01*x4324))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r00*x4332))+((r01*x4328))+(((-1.0)*r00*x4324))+(((-1.0)*r01*x4327))+((x4329*x4330))+(((-1.0)*x4326*x4331))+x4326), (((x4326*x4329))+((x4330*x4331))+((r00*x4327))+((r01*x4332))+(((-1.0)*r00*x4328))+(((-1.0)*x4330))+(((-1.0)*r01*x4324))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4333=IKcos(j9);
IkReal x4334=(r00*x4333);
IkReal x4335=(cj4*x4334);
IkReal x4336=IKsin(j9);
IkReal x4337=(r00*x4336);
IkReal x4338=(sj4*x4337);
IkReal x4339=(r01*x4333);
IkReal x4340=(sj4*x4339);
IkReal x4341=((1.0)*cj4);
IkReal x4342=(r01*x4336);
IkReal x4343=(sj4*x4334);
IkReal x4344=((1.0)*sj4);
IkReal x4345=((0.03431)*cj4);
evalcond[0]=(x4338+x4335+x4340+(((-1.0)*x4341*x4342)));
evalcond[1]=((((-1.0)*x4337*x4341))+(((-1.0)*x4342*x4344))+(((-1.0)*x4339*x4341))+x4343);
evalcond[2]=((-0.00036)+((px*sj4))+((x4342*x4345))+(((-0.03431)*x4340))+(((-0.03431)*x4338))+(((-0.03431)*x4335))+(((-1.0)*py*x4341)));
evalcond[3]=((0.00337)+(((-1.0)*py*x4344))+(((-0.03431)*x4343))+(((0.03431)*sj4*x4342))+((x4339*x4345))+(((-1.0)*px*x4341))+((x4337*x4345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4346=((29.146021568056)*px);
IkReal x4347=(r00*x4346);
IkReal x4348=(cj4*sj4);
IkReal x4349=(r01*x4346);
IkReal x4350=((29.146021568056)*cj4*py*sj4);
IkReal x4351=cj4*cj4;
IkReal x4352=((29.146021568056)*py*x4351);
if( IKabs((((r01*x4352))+(((-1.0)*r00*x4350))+(((-1.0)*x4348*x4349))+x4347+(((-1.0)*x4347*x4351)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4347*x4348))+(((-1.0)*x4349*x4351))+x4349+(((-1.0)*r01*x4350))+(((-1.0)*r00*x4352)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x4352))+(((-1.0)*r00*x4350))+(((-1.0)*x4348*x4349))+x4347+(((-1.0)*x4347*x4351))))+IKsqr((((x4347*x4348))+(((-1.0)*x4349*x4351))+x4349+(((-1.0)*r01*x4350))+(((-1.0)*r00*x4352))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x4352))+(((-1.0)*r00*x4350))+(((-1.0)*x4348*x4349))+x4347+(((-1.0)*x4347*x4351))), (((x4347*x4348))+(((-1.0)*x4349*x4351))+x4349+(((-1.0)*r01*x4350))+(((-1.0)*r00*x4352))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4353=IKcos(j9);
IkReal x4354=(r00*x4353);
IkReal x4355=(cj4*x4354);
IkReal x4356=IKsin(j9);
IkReal x4357=(r00*x4356);
IkReal x4358=(sj4*x4357);
IkReal x4359=(r01*x4353);
IkReal x4360=(sj4*x4359);
IkReal x4361=((1.0)*cj4);
IkReal x4362=(r01*x4356);
IkReal x4363=(sj4*x4354);
IkReal x4364=((1.0)*sj4);
IkReal x4365=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4361*x4362))+x4360+x4358+x4355);
evalcond[1]=((((-1.0)*x4357*x4361))+(((-1.0)*x4359*x4361))+x4363+(((-1.0)*x4362*x4364)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4360))+((x4362*x4365))+(((-0.03431)*x4358))+(((-0.03431)*x4355))+(((-1.0)*py*x4361)));
evalcond[3]=((0.00337)+((x4357*x4365))+(((-1.0)*py*x4364))+((x4359*x4365))+(((0.03431)*sj4*x4362))+(((-1.0)*px*x4361))+(((-0.03431)*x4363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4366=((29.146021568056)*px);
IkReal x4367=(r00*x4366);
IkReal x4368=(cj4*sj4);
IkReal x4369=(r01*x4366);
IkReal x4370=((29.146021568056)*cj4*py*sj4);
IkReal x4371=cj4*cj4;
IkReal x4372=((29.146021568056)*py*x4371);
if( IKabs((((r01*x4372))+(((-1.0)*r00*x4370))+(((-1.0)*x4367*x4371))+x4367+(((-1.0)*x4368*x4369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4367*x4368))+(((-1.0)*r01*x4370))+(((-1.0)*r00*x4372))+x4369+(((-1.0)*x4369*x4371)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x4372))+(((-1.0)*r00*x4370))+(((-1.0)*x4367*x4371))+x4367+(((-1.0)*x4368*x4369))))+IKsqr((((x4367*x4368))+(((-1.0)*r01*x4370))+(((-1.0)*r00*x4372))+x4369+(((-1.0)*x4369*x4371))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x4372))+(((-1.0)*r00*x4370))+(((-1.0)*x4367*x4371))+x4367+(((-1.0)*x4368*x4369))), (((x4367*x4368))+(((-1.0)*r01*x4370))+(((-1.0)*r00*x4372))+x4369+(((-1.0)*x4369*x4371))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4373=IKcos(j9);
IkReal x4374=(r00*x4373);
IkReal x4375=(cj4*x4374);
IkReal x4376=IKsin(j9);
IkReal x4377=(r00*x4376);
IkReal x4378=(sj4*x4377);
IkReal x4379=(r01*x4373);
IkReal x4380=(sj4*x4379);
IkReal x4381=((1.0)*cj4);
IkReal x4382=(r01*x4376);
IkReal x4383=(sj4*x4374);
IkReal x4384=((1.0)*sj4);
IkReal x4385=((0.03431)*cj4);
evalcond[0]=(x4380+x4375+x4378+(((-1.0)*x4381*x4382)));
evalcond[1]=(x4383+(((-1.0)*x4382*x4384))+(((-1.0)*x4379*x4381))+(((-1.0)*x4377*x4381)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4375))+(((-1.0)*py*x4381))+((x4382*x4385))+(((-0.03431)*x4378))+(((-0.03431)*x4380)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x4382))+(((-1.0)*px*x4381))+((x4377*x4385))+(((-1.0)*py*x4384))+((x4379*x4385))+(((-0.03431)*x4383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4386=((29.146021568056)*px);
IkReal x4387=(r00*x4386);
IkReal x4388=(cj4*sj4);
IkReal x4389=(r01*x4386);
IkReal x4390=((29.146021568056)*cj4*py*sj4);
IkReal x4391=cj4*cj4;
IkReal x4392=((29.146021568056)*py*x4391);
if( IKabs((x4387+(((-1.0)*x4387*x4391))+(((-1.0)*x4388*x4389))+(((-1.0)*r00*x4390))+((r01*x4392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4389+((x4387*x4388))+(((-1.0)*x4389*x4391))+(((-1.0)*r00*x4392))+(((-1.0)*r01*x4390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4387+(((-1.0)*x4387*x4391))+(((-1.0)*x4388*x4389))+(((-1.0)*r00*x4390))+((r01*x4392))))+IKsqr((x4389+((x4387*x4388))+(((-1.0)*x4389*x4391))+(((-1.0)*r00*x4392))+(((-1.0)*r01*x4390))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x4387+(((-1.0)*x4387*x4391))+(((-1.0)*x4388*x4389))+(((-1.0)*r00*x4390))+((r01*x4392))), (x4389+((x4387*x4388))+(((-1.0)*x4389*x4391))+(((-1.0)*r00*x4392))+(((-1.0)*r01*x4390))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4393=IKcos(j9);
IkReal x4394=(r00*x4393);
IkReal x4395=(cj4*x4394);
IkReal x4396=IKsin(j9);
IkReal x4397=(r00*x4396);
IkReal x4398=(sj4*x4397);
IkReal x4399=(r01*x4393);
IkReal x4400=(sj4*x4399);
IkReal x4401=((1.0)*cj4);
IkReal x4402=(r01*x4396);
IkReal x4403=(sj4*x4394);
IkReal x4404=((1.0)*sj4);
IkReal x4405=((0.03431)*cj4);
evalcond[0]=(x4400+(((-1.0)*x4401*x4402))+x4398+x4395);
evalcond[1]=((((-1.0)*x4397*x4401))+x4403+(((-1.0)*x4402*x4404))+(((-1.0)*x4399*x4401)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4398))+(((-0.03431)*x4400))+(((-1.0)*py*x4401))+((x4402*x4405))+(((-0.03431)*x4395)));
evalcond[3]=((0.00373)+(((-1.0)*py*x4404))+(((0.03431)*sj4*x4402))+((x4399*x4405))+(((-0.03431)*x4403))+(((-1.0)*px*x4401))+((x4397*x4405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4406=((29.146021568056)*px);
IkReal x4407=(r00*x4406);
IkReal x4408=(cj4*sj4);
IkReal x4409=(r01*x4406);
IkReal x4410=((29.146021568056)*cj4*py*sj4);
IkReal x4411=cj4*cj4;
IkReal x4412=((29.146021568056)*py*x4411);
if( IKabs((x4407+(((-1.0)*x4408*x4409))+(((-1.0)*x4407*x4411))+(((-1.0)*r00*x4410))+((r01*x4412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4407*x4408))+(((-1.0)*r01*x4410))+x4409+(((-1.0)*r00*x4412))+(((-1.0)*x4409*x4411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4407+(((-1.0)*x4408*x4409))+(((-1.0)*x4407*x4411))+(((-1.0)*r00*x4410))+((r01*x4412))))+IKsqr((((x4407*x4408))+(((-1.0)*r01*x4410))+x4409+(((-1.0)*r00*x4412))+(((-1.0)*x4409*x4411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x4407+(((-1.0)*x4408*x4409))+(((-1.0)*x4407*x4411))+(((-1.0)*r00*x4410))+((r01*x4412))), (((x4407*x4408))+(((-1.0)*r01*x4410))+x4409+(((-1.0)*r00*x4412))+(((-1.0)*x4409*x4411))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4413=IKcos(j9);
IkReal x4414=(r00*x4413);
IkReal x4415=(cj4*x4414);
IkReal x4416=IKsin(j9);
IkReal x4417=(r00*x4416);
IkReal x4418=(sj4*x4417);
IkReal x4419=(r01*x4413);
IkReal x4420=(sj4*x4419);
IkReal x4421=((1.0)*cj4);
IkReal x4422=(r01*x4416);
IkReal x4423=(sj4*x4414);
IkReal x4424=((1.0)*sj4);
IkReal x4425=((0.03431)*cj4);
evalcond[0]=(x4420+(((-1.0)*x4421*x4422))+x4415+x4418);
evalcond[1]=(x4423+(((-1.0)*x4419*x4421))+(((-1.0)*x4422*x4424))+(((-1.0)*x4417*x4421)));
evalcond[2]=(((x4422*x4425))+((px*sj4))+(((-0.03431)*x4415))+(((-1.0)*py*x4421))+(((-0.03431)*x4420))+(((-0.03431)*x4418)));
evalcond[3]=((0.00301)+(((0.03431)*sj4*x4422))+(((-1.0)*py*x4424))+(((-1.0)*px*x4421))+((x4417*x4425))+(((-0.03431)*x4423))+((x4419*x4425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4426=(cj6*r00);
IkReal x4427=(cj6*r01);
CheckValue<IkReal> x4428 = IKatan2WithCheck(IkReal((((sj4*x4426))+(((-1.0)*cj4*x4427)))),(((cj4*x4426))+((sj4*x4427))),IKFAST_ATAN2_MAGTHRESH);
if(!x4428.valid){
continue;
}
CheckValue<IkReal> x4429=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x4429.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x4428.value)+(((-1.0)*(1.5707963267949)*(x4429.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x4430=IKcos(j9);
IkReal x4431=(r00*x4430);
IkReal x4432=(cj4*x4431);
IkReal x4433=IKsin(j9);
IkReal x4434=(r00*x4433);
IkReal x4435=(sj4*x4434);
IkReal x4436=(r01*x4430);
IkReal x4437=(sj4*x4436);
IkReal x4438=((1.0)*cj4);
IkReal x4439=(r01*x4433);
IkReal x4440=(sj4*x4431);
IkReal x4441=(x4434*x4438);
IkReal x4442=(x4436*x4438);
IkReal x4443=((1.0)*sj4);
IkReal x4444=(x4439*x4443);
IkReal x4445=((-1.0)*(((1.0)*sj6)));
IkReal x4446=(cj4*r01*x4433);
IkReal x4447=((1.0)*cj4*r00*x4430);
IkReal x4448=((1.0)*sj4*sj8);
IkReal x4449=((1.0)*cj8*sj4);
IkReal x4450=((0.03431)*cj4);
evalcond[0]=(x4437+x4435+x4432+(((-1.0)*x4438*x4439)));
evalcond[1]=((((-1.0)*x4441))+x4440+(((-1.0)*x4444))+(((-1.0)*x4442)));
evalcond[2]=((((-1.0)*sj8*x4442))+(((-1.0)*sj8*x4441))+cj6+(((-1.0)*sj8*x4444))+((sj8*x4440)));
evalcond[3]=(((sj8*x4446))+(((-1.0)*sj8*x4447))+x4445+(((-1.0)*x4434*x4448))+(((-1.0)*x4436*x4448)));
evalcond[4]=(((cj8*x4446))+(((-1.0)*x4436*x4449))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x4434*x4449))+(((-1.0)*cj8*x4447)));
evalcond[5]=((((-1.0)*cj8*x4441))+((cj8*x4440))+(((-1.0)*cj8*x4444))+x4445+(((-1.0)*cj8*x4442)));
evalcond[6]=(((px*sj4))+((x4439*x4450))+(((-0.03431)*x4435))+(((-0.03431)*x4437))+(((-1.0)*py*x4438))+(((-0.03431)*x4432))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+((x4434*x4450))+(((0.00036)*cj6))+(((-0.03431)*x4440))+((x4436*x4450))+(((0.03431)*sj4*x4439))+(((-1.0)*px*x4438))+(((-1.0)*py*x4443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4451=(r00*sj6);
IkReal x4452=(r01*sj6);
CheckValue<IkReal> x4453 = IKatan2WithCheck(IkReal((((sj4*x4451))+(((-1.0)*cj4*x4452)))),(((sj4*x4452))+((cj4*x4451))),IKFAST_ATAN2_MAGTHRESH);
if(!x4453.valid){
continue;
}
CheckValue<IkReal> x4454=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x4454.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x4453.value)+(((-1.0)*(1.5707963267949)*(x4454.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x4455=IKcos(j9);
IkReal x4456=(r00*x4455);
IkReal x4457=(cj4*x4456);
IkReal x4458=IKsin(j9);
IkReal x4459=(r00*x4458);
IkReal x4460=(sj4*x4459);
IkReal x4461=(r01*x4455);
IkReal x4462=(sj4*x4461);
IkReal x4463=((1.0)*cj4);
IkReal x4464=(r01*x4458);
IkReal x4465=(sj4*x4456);
IkReal x4466=(x4459*x4463);
IkReal x4467=(x4461*x4463);
IkReal x4468=((1.0)*sj4);
IkReal x4469=(x4464*x4468);
IkReal x4470=((-1.0)*(((1.0)*sj6)));
IkReal x4471=(cj4*r01*x4458);
IkReal x4472=((1.0)*cj4*r00*x4455);
IkReal x4473=((1.0)*sj4*sj8);
IkReal x4474=((1.0)*cj8*sj4);
IkReal x4475=((0.03431)*cj4);
evalcond[0]=(x4460+x4462+x4457+(((-1.0)*x4463*x4464)));
evalcond[1]=((((-1.0)*x4469))+x4465+(((-1.0)*x4467))+(((-1.0)*x4466)));
evalcond[2]=(cj6+((sj8*x4465))+(((-1.0)*sj8*x4467))+(((-1.0)*sj8*x4469))+(((-1.0)*sj8*x4466)));
evalcond[3]=(x4470+(((-1.0)*x4461*x4473))+(((-1.0)*sj8*x4472))+(((-1.0)*x4459*x4473))+((sj8*x4471)));
evalcond[4]=((((-1.0)*(1.0)*cj6))+((cj8*x4471))+(((-1.0)*cj8*x4472))+(((-1.0)*x4459*x4474))+(((-1.0)*x4461*x4474)));
evalcond[5]=((((-1.0)*cj8*x4466))+x4470+(((-1.0)*cj8*x4469))+(((-1.0)*cj8*x4467))+((cj8*x4465)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x4460))+(((-0.03431)*x4457))+(((-0.03431)*x4462))+(((-1.0)*py*x4463))+((x4464*x4475))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+(((-1.0)*px*x4463))+(((0.00036)*cj6))+(((0.03431)*sj4*x4464))+((x4459*x4475))+(((-0.03431)*x4465))+((x4461*x4475))+(((-1.0)*py*x4468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4476=(cj4*sj6);
IkReal x4477=(sj4*sj6);
CheckValue<IkReal> x4478 = IKatan2WithCheck(IkReal((((r00*x4476))+((r01*x4477)))),((((-1.0)*r00*x4477))+((r01*x4476))),IKFAST_ATAN2_MAGTHRESH);
if(!x4478.valid){
continue;
}
CheckValue<IkReal> x4479=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x4479.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x4478.value)+(((-1.0)*(1.5707963267949)*(x4479.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x4480=IKcos(j9);
IkReal x4481=(r00*x4480);
IkReal x4482=(cj4*x4481);
IkReal x4483=IKsin(j9);
IkReal x4484=(r00*x4483);
IkReal x4485=(sj4*x4484);
IkReal x4486=(r01*x4480);
IkReal x4487=(sj4*x4486);
IkReal x4488=((1.0)*cj4);
IkReal x4489=(r01*x4483);
IkReal x4490=(sj4*x4481);
IkReal x4491=(x4484*x4488);
IkReal x4492=(x4486*x4488);
IkReal x4493=((1.0)*sj4);
IkReal x4494=(x4489*x4493);
IkReal x4495=((-1.0)*(((1.0)*sj6)));
IkReal x4496=(cj4*r01*x4483);
IkReal x4497=((1.0)*cj4*r00*x4480);
IkReal x4498=((1.0)*sj4*sj8);
IkReal x4499=((1.0)*cj8*sj4);
IkReal x4500=((0.03431)*cj4);
evalcond[0]=(x4487+x4485+x4482+(((-1.0)*x4488*x4489)));
evalcond[1]=((((-1.0)*x4492))+x4490+(((-1.0)*x4494))+(((-1.0)*x4491)));
evalcond[2]=((((-1.0)*sj8*x4492))+cj6+(((-1.0)*sj8*x4491))+(((-1.0)*sj8*x4494))+((sj8*x4490)));
evalcond[3]=(x4495+(((-1.0)*x4484*x4498))+((sj8*x4496))+(((-1.0)*sj8*x4497))+(((-1.0)*x4486*x4498)));
evalcond[4]=((((-1.0)*x4484*x4499))+((cj8*x4496))+(((-1.0)*x4486*x4499))+(((-1.0)*(1.0)*cj6))+(((-1.0)*cj8*x4497)));
evalcond[5]=(x4495+(((-1.0)*cj8*x4494))+(((-1.0)*cj8*x4491))+(((-1.0)*cj8*x4492))+((cj8*x4490)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x4482))+(((-0.03431)*x4485))+((x4489*x4500))+(((-0.03431)*x4487))+(((-1.0)*py*x4488))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+(((0.00036)*cj6))+((x4484*x4500))+(((-1.0)*px*x4488))+(((-0.03431)*x4490))+((x4486*x4500))+(((0.03431)*sj4*x4489))+(((-1.0)*py*x4493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4501=(cj8*r00);
IkReal x4502=((1.0)*px);
IkReal x4503=((0.03431)*r00);
IkReal x4504=((0.00036)*cj8*r00);
IkReal x4505=(((cj6*x4503))+((sj6*x4504)));
IkReal x4506=((((-0.00337)*x4501))+(((-1.0)*cj6*x4504))+((sj6*x4503)));
CheckValue<IkReal> x4507 = IKatan2WithCheck(IkReal(((((-1.0)*x4502*x4505))+(((-1.0)*py*x4506)))),(((py*x4505))+(((-1.0)*x4502*x4506))),IKFAST_ATAN2_MAGTHRESH);
if(!x4507.valid){
continue;
}
CheckValue<IkReal> x4508=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4501*(pz*pz)))+((pp*x4501)))),-1);
if(!x4508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4507.value)+(((1.5707963267949)*(x4508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x4509=((0.00337)*cj8);
IkReal x4510=((0.03431)*sj6);
IkReal x4511=((0.00036)*cj6*cj8);
IkReal x4512=IKcos(j4);
IkReal x4513=(cj8*px*r00);
IkReal x4514=(py*r00);
IkReal x4515=IKsin(j4);
IkReal x4516=(cj8*x4515);
IkReal x4517=((0.03431)*cj6);
IkReal x4518=((0.00036)*cj8*sj6);
IkReal x4519=(px*r01);
IkReal x4520=(py*r01);
IkReal x4521=((1.0)*cj8*x4512);
evalcond[0]=(((x4512*x4513))+(((-1.0)*r00*x4511))+((r00*x4510))+(((-1.0)*r00*x4509))+((x4514*x4516)));
evalcond[1]=(((r01*x4517))+(((-1.0)*x4520*x4521))+((x4516*x4519))+((r01*x4518)));
evalcond[2]=(((x4513*x4515))+((r00*x4517))+((r00*x4518))+(((-1.0)*x4514*x4521)));
evalcond[3]=((((-1.0)*r01*x4510))+((r01*x4509))+(((-1.0)*cj8*x4515*x4520))+(((-1.0)*x4519*x4521))+((r01*x4511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x4522=((1.0)*r00);
IkReal x4523=(((py*r01))+((px*r00)));
IkReal x4524=(px*r01);
IkReal x4525=(pz*r01);
IkReal x4526=((-1.0)*pz*x4522);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4522);
r10=r01;
npx=x4523;
npy=(x4524+(((-1.0)*py*x4522)));
npz=(pz*r22);
rxp0_0=x4525;
rxp0_1=x4526;
rxp0_2=(((py*r00))+(((-1.0)*x4524)));
rxp1_0=x4526;
rxp1_1=((-1.0)*x4525);
rxp1_2=x4523;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=cj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x4527=((1.0)*r00);
IkReal x4528=(((py*r01))+((px*r00)));
IkReal x4529=(px*r01);
IkReal x4530=(pz*r01);
IkReal x4531=((-1.0)*pz*x4527);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4527);
r10=r01;
npx=x4528;
npy=((((-1.0)*py*x4527))+x4529);
npz=(pz*r22);
rxp0_0=x4530;
rxp0_1=x4531;
rxp0_2=(((py*r00))+(((-1.0)*x4529)));
rxp1_0=x4531;
rxp1_1=((-1.0)*x4530);
rxp1_2=x4528;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x4532=((1.0)*r00);
IkReal x4533=(((py*r01))+((px*r00)));
IkReal x4534=(px*r01);
IkReal x4535=(pz*r01);
IkReal x4536=((-1.0)*pz*x4532);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4532);
r10=r01;
npx=x4533;
npy=((((-1.0)*py*x4532))+x4534);
npz=(pz*r22);
rxp0_0=x4535;
rxp0_1=x4536;
rxp0_2=(((py*r00))+(((-1.0)*x4534)));
rxp1_0=x4536;
rxp1_1=((-1.0)*x4535);
rxp1_2=x4533;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=cj8;
j9eval[1]=cj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4537=((29.146021568056)*px);
IkReal x4538=(r00*x4537);
IkReal x4539=(cj4*sj4);
IkReal x4540=(r01*x4537);
IkReal x4541=((29.146021568056)*cj4*py*sj4);
IkReal x4542=cj4*cj4;
IkReal x4543=((29.146021568056)*py*x4542);
if( IKabs(((((-1.0)*x4539*x4540))+(((-1.0)*x4538*x4542))+(((-1.0)*r00*x4541))+((r01*x4543))+x4538)) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4538*x4539))+x4540+(((-1.0)*x4540*x4542))+(((-1.0)*r01*x4541))+(((-1.0)*r00*x4543)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4539*x4540))+(((-1.0)*x4538*x4542))+(((-1.0)*r00*x4541))+((r01*x4543))+x4538))+IKsqr((((x4538*x4539))+x4540+(((-1.0)*x4540*x4542))+(((-1.0)*r01*x4541))+(((-1.0)*r00*x4543))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x4539*x4540))+(((-1.0)*x4538*x4542))+(((-1.0)*r00*x4541))+((r01*x4543))+x4538), (((x4538*x4539))+x4540+(((-1.0)*x4540*x4542))+(((-1.0)*r01*x4541))+(((-1.0)*r00*x4543))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4544=IKcos(j9);
IkReal x4545=(r00*x4544);
IkReal x4546=(cj4*x4545);
IkReal x4547=IKsin(j9);
IkReal x4548=(r00*x4547);
IkReal x4549=(sj4*x4548);
IkReal x4550=(r01*x4544);
IkReal x4551=(sj4*x4550);
IkReal x4552=((1.0)*cj4);
IkReal x4553=(r01*x4547);
IkReal x4554=(sj4*x4545);
IkReal x4555=((1.0)*sj4);
IkReal x4556=((0.03431)*cj4);
evalcond[0]=(x4551+x4546+x4549+(((-1.0)*x4552*x4553)));
evalcond[1]=((((-1.0)*x4548*x4552))+x4554+(((-1.0)*x4553*x4555))+(((-1.0)*x4550*x4552)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4546))+((x4553*x4556))+(((-0.03431)*x4549))+(((-0.03431)*x4551))+(((-1.0)*py*x4552)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x4553))+(((-0.03431)*x4554))+(((-1.0)*px*x4552))+(((-1.0)*py*x4555))+((x4550*x4556))+((x4548*x4556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4557=((29.146021568056)*px);
IkReal x4558=(r00*x4557);
IkReal x4559=(cj4*sj4);
IkReal x4560=(r01*x4557);
IkReal x4561=((29.146021568056)*cj4*py*sj4);
IkReal x4562=cj4*cj4;
IkReal x4563=((29.146021568056)*py*x4562);
if( IKabs((x4558+(((-1.0)*x4559*x4560))+((r01*x4563))+(((-1.0)*x4558*x4562))+(((-1.0)*r00*x4561)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4560*x4562))+x4560+((x4558*x4559))+(((-1.0)*r00*x4563))+(((-1.0)*r01*x4561)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4558+(((-1.0)*x4559*x4560))+((r01*x4563))+(((-1.0)*x4558*x4562))+(((-1.0)*r00*x4561))))+IKsqr(((((-1.0)*x4560*x4562))+x4560+((x4558*x4559))+(((-1.0)*r00*x4563))+(((-1.0)*r01*x4561))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x4558+(((-1.0)*x4559*x4560))+((r01*x4563))+(((-1.0)*x4558*x4562))+(((-1.0)*r00*x4561))), ((((-1.0)*x4560*x4562))+x4560+((x4558*x4559))+(((-1.0)*r00*x4563))+(((-1.0)*r01*x4561))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4564=IKcos(j9);
IkReal x4565=(r00*x4564);
IkReal x4566=(cj4*x4565);
IkReal x4567=IKsin(j9);
IkReal x4568=(r00*x4567);
IkReal x4569=(sj4*x4568);
IkReal x4570=(r01*x4564);
IkReal x4571=(sj4*x4570);
IkReal x4572=((1.0)*cj4);
IkReal x4573=(r01*x4567);
IkReal x4574=(sj4*x4565);
IkReal x4575=((1.0)*sj4);
IkReal x4576=((0.03431)*cj4);
evalcond[0]=(x4566+x4569+x4571+(((-1.0)*x4572*x4573)));
evalcond[1]=((((-1.0)*x4573*x4575))+(((-1.0)*x4568*x4572))+x4574+(((-1.0)*x4570*x4572)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4571))+(((-0.03431)*x4569))+(((-0.03431)*x4566))+(((-1.0)*py*x4572))+((x4573*x4576)));
evalcond[3]=((0.00337)+(((-1.0)*py*x4575))+(((0.03431)*sj4*x4573))+((x4570*x4576))+(((-0.03431)*x4574))+(((-1.0)*px*x4572))+((x4568*x4576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4577=((0.0982220926843486)*cj4);
IkReal x4578=((29.146021568056)*py);
IkReal x4579=(r01*x4578);
IkReal x4580=((0.0982220926843486)*sj4);
IkReal x4581=((29.146021568056)*cj4*px*sj4);
IkReal x4582=(cj4*sj4);
IkReal x4583=(r00*x4578);
IkReal x4584=cj4*cj4;
IkReal x4585=((29.146021568056)*px*x4584);
if( IKabs((((r01*x4581))+((r00*x4585))+(((-1.0)*r00*x4577))+(((-1.0)*x4579*x4584))+x4579+((x4582*x4583))+(((-1.0)*r01*x4580)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4583))+((x4579*x4582))+(((-1.0)*r00*x4581))+(((-1.0)*r01*x4577))+((r00*x4580))+((r01*x4585))+((x4583*x4584)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x4581))+((r00*x4585))+(((-1.0)*r00*x4577))+(((-1.0)*x4579*x4584))+x4579+((x4582*x4583))+(((-1.0)*r01*x4580))))+IKsqr(((((-1.0)*x4583))+((x4579*x4582))+(((-1.0)*r00*x4581))+(((-1.0)*r01*x4577))+((r00*x4580))+((r01*x4585))+((x4583*x4584))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x4581))+((r00*x4585))+(((-1.0)*r00*x4577))+(((-1.0)*x4579*x4584))+x4579+((x4582*x4583))+(((-1.0)*r01*x4580))), ((((-1.0)*x4583))+((x4579*x4582))+(((-1.0)*r00*x4581))+(((-1.0)*r01*x4577))+((r00*x4580))+((r01*x4585))+((x4583*x4584))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4586=IKcos(j9);
IkReal x4587=(r00*x4586);
IkReal x4588=(cj4*x4587);
IkReal x4589=IKsin(j9);
IkReal x4590=(r00*x4589);
IkReal x4591=(sj4*x4590);
IkReal x4592=(r01*x4586);
IkReal x4593=(sj4*x4592);
IkReal x4594=((1.0)*cj4);
IkReal x4595=(r01*x4589);
IkReal x4596=(sj4*x4587);
IkReal x4597=((1.0)*sj4);
IkReal x4598=((0.03431)*cj4);
evalcond[0]=(x4591+x4593+x4588+(((-1.0)*x4594*x4595)));
evalcond[1]=(x4596+(((-1.0)*x4592*x4594))+(((-1.0)*x4590*x4594))+(((-1.0)*x4595*x4597)));
evalcond[2]=((0.00036)+((px*sj4))+(((-1.0)*py*x4594))+(((-0.03431)*x4593))+(((-0.03431)*x4588))+((x4595*x4598))+(((-0.03431)*x4591)));
evalcond[3]=((0.00337)+((x4592*x4598))+(((-1.0)*py*x4597))+(((-0.03431)*x4596))+(((0.03431)*sj4*x4595))+(((-1.0)*px*x4594))+((x4590*x4598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4599=((0.0982220926843486)*cj4);
IkReal x4600=((29.146021568056)*py);
IkReal x4601=(r01*x4600);
IkReal x4602=((0.0982220926843486)*sj4);
IkReal x4603=((29.146021568056)*cj4*px*sj4);
IkReal x4604=(cj4*sj4);
IkReal x4605=(r00*x4600);
IkReal x4606=cj4*cj4;
IkReal x4607=((29.146021568056)*px*x4606);
if( IKabs(((((-1.0)*r00*x4599))+(((-1.0)*r01*x4602))+(((-1.0)*x4601*x4606))+((r00*x4607))+((r01*x4603))+((x4604*x4605))+x4601)) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4601*x4604))+(((-1.0)*r00*x4603))+(((-1.0)*x4605))+((x4605*x4606))+(((-1.0)*r01*x4599))+((r00*x4602))+((r01*x4607)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x4599))+(((-1.0)*r01*x4602))+(((-1.0)*x4601*x4606))+((r00*x4607))+((r01*x4603))+((x4604*x4605))+x4601))+IKsqr((((x4601*x4604))+(((-1.0)*r00*x4603))+(((-1.0)*x4605))+((x4605*x4606))+(((-1.0)*r01*x4599))+((r00*x4602))+((r01*x4607))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x4599))+(((-1.0)*r01*x4602))+(((-1.0)*x4601*x4606))+((r00*x4607))+((r01*x4603))+((x4604*x4605))+x4601), (((x4601*x4604))+(((-1.0)*r00*x4603))+(((-1.0)*x4605))+((x4605*x4606))+(((-1.0)*r01*x4599))+((r00*x4602))+((r01*x4607))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4608=IKcos(j9);
IkReal x4609=(r00*x4608);
IkReal x4610=(cj4*x4609);
IkReal x4611=IKsin(j9);
IkReal x4612=(r00*x4611);
IkReal x4613=(sj4*x4612);
IkReal x4614=(r01*x4608);
IkReal x4615=(sj4*x4614);
IkReal x4616=((1.0)*cj4);
IkReal x4617=(r01*x4611);
IkReal x4618=(sj4*x4609);
IkReal x4619=((1.0)*sj4);
IkReal x4620=((0.03431)*cj4);
evalcond[0]=(x4615+x4613+x4610+(((-1.0)*x4616*x4617)));
evalcond[1]=((((-1.0)*x4612*x4616))+(((-1.0)*x4617*x4619))+(((-1.0)*x4614*x4616))+x4618);
evalcond[2]=((-0.00036)+((px*sj4))+(((-1.0)*py*x4616))+((x4617*x4620))+(((-0.03431)*x4615))+(((-0.03431)*x4613))+(((-0.03431)*x4610)));
evalcond[3]=((0.00337)+((x4612*x4620))+(((-0.03431)*x4618))+((x4614*x4620))+(((0.03431)*sj4*x4617))+(((-1.0)*px*x4616))+(((-1.0)*py*x4619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4621=((29.146021568056)*px);
IkReal x4622=(r00*x4621);
IkReal x4623=(cj4*sj4);
IkReal x4624=(r01*x4621);
IkReal x4625=((29.146021568056)*cj4*py*sj4);
IkReal x4626=cj4*cj4;
IkReal x4627=((29.146021568056)*py*x4626);
if( IKabs((x4622+((r01*x4627))+(((-1.0)*x4622*x4626))+(((-1.0)*x4623*x4624))+(((-1.0)*r00*x4625)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4622*x4623))+x4624+(((-1.0)*x4624*x4626))+(((-1.0)*r01*x4625))+(((-1.0)*r00*x4627)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4622+((r01*x4627))+(((-1.0)*x4622*x4626))+(((-1.0)*x4623*x4624))+(((-1.0)*r00*x4625))))+IKsqr((((x4622*x4623))+x4624+(((-1.0)*x4624*x4626))+(((-1.0)*r01*x4625))+(((-1.0)*r00*x4627))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x4622+((r01*x4627))+(((-1.0)*x4622*x4626))+(((-1.0)*x4623*x4624))+(((-1.0)*r00*x4625))), (((x4622*x4623))+x4624+(((-1.0)*x4624*x4626))+(((-1.0)*r01*x4625))+(((-1.0)*r00*x4627))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4628=IKcos(j9);
IkReal x4629=(r00*x4628);
IkReal x4630=(cj4*x4629);
IkReal x4631=IKsin(j9);
IkReal x4632=(r00*x4631);
IkReal x4633=(sj4*x4632);
IkReal x4634=(r01*x4628);
IkReal x4635=(sj4*x4634);
IkReal x4636=((1.0)*cj4);
IkReal x4637=(r01*x4631);
IkReal x4638=(sj4*x4629);
IkReal x4639=((1.0)*sj4);
IkReal x4640=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4636*x4637))+x4635+x4630+x4633);
evalcond[1]=((((-1.0)*x4637*x4639))+(((-1.0)*x4634*x4636))+(((-1.0)*x4632*x4636))+x4638);
evalcond[2]=(((px*sj4))+(((-0.03431)*x4635))+(((-1.0)*py*x4636))+((x4637*x4640))+(((-0.03431)*x4633))+(((-0.03431)*x4630)));
evalcond[3]=((0.00337)+(((-1.0)*px*x4636))+(((0.03431)*sj4*x4637))+((x4634*x4640))+(((-0.03431)*x4638))+((x4632*x4640))+(((-1.0)*py*x4639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4641=((29.146021568056)*px);
IkReal x4642=(r00*x4641);
IkReal x4643=(cj4*sj4);
IkReal x4644=(r01*x4641);
IkReal x4645=((29.146021568056)*cj4*py*sj4);
IkReal x4646=cj4*cj4;
IkReal x4647=((29.146021568056)*py*x4646);
if( IKabs((x4642+(((-1.0)*r00*x4645))+(((-1.0)*x4643*x4644))+((r01*x4647))+(((-1.0)*x4642*x4646)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4645))+(((-1.0)*r00*x4647))+x4644+(((-1.0)*x4644*x4646))+((x4642*x4643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4642+(((-1.0)*r00*x4645))+(((-1.0)*x4643*x4644))+((r01*x4647))+(((-1.0)*x4642*x4646))))+IKsqr(((((-1.0)*r01*x4645))+(((-1.0)*r00*x4647))+x4644+(((-1.0)*x4644*x4646))+((x4642*x4643))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x4642+(((-1.0)*r00*x4645))+(((-1.0)*x4643*x4644))+((r01*x4647))+(((-1.0)*x4642*x4646))), ((((-1.0)*r01*x4645))+(((-1.0)*r00*x4647))+x4644+(((-1.0)*x4644*x4646))+((x4642*x4643))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4648=IKcos(j9);
IkReal x4649=(r00*x4648);
IkReal x4650=(cj4*x4649);
IkReal x4651=IKsin(j9);
IkReal x4652=(r00*x4651);
IkReal x4653=(sj4*x4652);
IkReal x4654=(r01*x4648);
IkReal x4655=(sj4*x4654);
IkReal x4656=((1.0)*cj4);
IkReal x4657=(r01*x4651);
IkReal x4658=(sj4*x4649);
IkReal x4659=((1.0)*sj4);
IkReal x4660=((0.03431)*cj4);
evalcond[0]=(x4650+x4653+x4655+(((-1.0)*x4656*x4657)));
evalcond[1]=(x4658+(((-1.0)*x4652*x4656))+(((-1.0)*x4654*x4656))+(((-1.0)*x4657*x4659)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4653))+(((-0.03431)*x4650))+((x4657*x4660))+(((-0.03431)*x4655))+(((-1.0)*py*x4656)));
evalcond[3]=((0.00337)+(((-1.0)*py*x4659))+((x4654*x4660))+(((-1.0)*px*x4656))+(((-0.03431)*x4658))+((x4652*x4660))+(((0.03431)*sj4*x4657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4661=((29.146021568056)*px);
IkReal x4662=(r00*x4661);
IkReal x4663=(cj4*sj4);
IkReal x4664=(r01*x4661);
IkReal x4665=((29.146021568056)*cj4*py*sj4);
IkReal x4666=cj4*cj4;
IkReal x4667=((29.146021568056)*py*x4666);
if( IKabs((x4662+(((-1.0)*r00*x4665))+((r01*x4667))+(((-1.0)*x4663*x4664))+(((-1.0)*x4662*x4666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4664+(((-1.0)*x4664*x4666))+(((-1.0)*r00*x4667))+((x4662*x4663))+(((-1.0)*r01*x4665)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4662+(((-1.0)*r00*x4665))+((r01*x4667))+(((-1.0)*x4663*x4664))+(((-1.0)*x4662*x4666))))+IKsqr((x4664+(((-1.0)*x4664*x4666))+(((-1.0)*r00*x4667))+((x4662*x4663))+(((-1.0)*r01*x4665))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x4662+(((-1.0)*r00*x4665))+((r01*x4667))+(((-1.0)*x4663*x4664))+(((-1.0)*x4662*x4666))), (x4664+(((-1.0)*x4664*x4666))+(((-1.0)*r00*x4667))+((x4662*x4663))+(((-1.0)*r01*x4665))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4668=IKcos(j9);
IkReal x4669=(r00*x4668);
IkReal x4670=(cj4*x4669);
IkReal x4671=IKsin(j9);
IkReal x4672=(r00*x4671);
IkReal x4673=(sj4*x4672);
IkReal x4674=(r01*x4668);
IkReal x4675=(sj4*x4674);
IkReal x4676=((1.0)*cj4);
IkReal x4677=(r01*x4671);
IkReal x4678=(sj4*x4669);
IkReal x4679=((1.0)*sj4);
IkReal x4680=((0.03431)*cj4);
evalcond[0]=(x4673+x4675+x4670+(((-1.0)*x4676*x4677)));
evalcond[1]=((((-1.0)*x4674*x4676))+(((-1.0)*x4677*x4679))+x4678+(((-1.0)*x4672*x4676)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4675))+(((-1.0)*py*x4676))+(((-0.03431)*x4673))+(((-0.03431)*x4670))+((x4677*x4680)));
evalcond[3]=((0.00373)+((x4674*x4680))+(((-1.0)*px*x4676))+(((0.03431)*sj4*x4677))+(((-0.03431)*x4678))+(((-1.0)*py*x4679))+((x4672*x4680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4681=((29.146021568056)*px);
IkReal x4682=(r00*x4681);
IkReal x4683=(cj4*sj4);
IkReal x4684=(r01*x4681);
IkReal x4685=((29.146021568056)*cj4*py*sj4);
IkReal x4686=cj4*cj4;
IkReal x4687=((29.146021568056)*py*x4686);
if( IKabs(((((-1.0)*x4682*x4686))+(((-1.0)*r00*x4685))+x4682+(((-1.0)*x4683*x4684))+((r01*x4687)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4684*x4686))+(((-1.0)*r00*x4687))+x4684+((x4682*x4683))+(((-1.0)*r01*x4685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4682*x4686))+(((-1.0)*r00*x4685))+x4682+(((-1.0)*x4683*x4684))+((r01*x4687))))+IKsqr(((((-1.0)*x4684*x4686))+(((-1.0)*r00*x4687))+x4684+((x4682*x4683))+(((-1.0)*r01*x4685))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x4682*x4686))+(((-1.0)*r00*x4685))+x4682+(((-1.0)*x4683*x4684))+((r01*x4687))), ((((-1.0)*x4684*x4686))+(((-1.0)*r00*x4687))+x4684+((x4682*x4683))+(((-1.0)*r01*x4685))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4688=IKcos(j9);
IkReal x4689=(r00*x4688);
IkReal x4690=(cj4*x4689);
IkReal x4691=IKsin(j9);
IkReal x4692=(r00*x4691);
IkReal x4693=(sj4*x4692);
IkReal x4694=(r01*x4688);
IkReal x4695=(sj4*x4694);
IkReal x4696=((1.0)*cj4);
IkReal x4697=(r01*x4691);
IkReal x4698=(sj4*x4689);
IkReal x4699=((1.0)*sj4);
IkReal x4700=((0.03431)*cj4);
evalcond[0]=(x4695+x4690+x4693+(((-1.0)*x4696*x4697)));
evalcond[1]=((((-1.0)*x4692*x4696))+x4698+(((-1.0)*x4697*x4699))+(((-1.0)*x4694*x4696)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4690))+(((-0.03431)*x4695))+(((-1.0)*py*x4696))+((x4697*x4700))+(((-0.03431)*x4693)));
evalcond[3]=((0.00301)+(((-1.0)*px*x4696))+((x4694*x4700))+(((0.03431)*sj4*x4697))+(((-1.0)*py*x4699))+((x4692*x4700))+(((-0.03431)*x4698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4701=(cj6*r00);
IkReal x4702=(cj6*r01);
CheckValue<IkReal> x4703 = IKatan2WithCheck(IkReal((((sj4*x4701))+(((-1.0)*cj4*x4702)))),(((sj4*x4702))+((cj4*x4701))),IKFAST_ATAN2_MAGTHRESH);
if(!x4703.valid){
continue;
}
CheckValue<IkReal> x4704=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x4704.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x4703.value)+(((-1.0)*(1.5707963267949)*(x4704.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x4705=IKcos(j9);
IkReal x4706=(r00*x4705);
IkReal x4707=(cj4*x4706);
IkReal x4708=IKsin(j9);
IkReal x4709=(r00*x4708);
IkReal x4710=(sj4*x4709);
IkReal x4711=(r01*x4705);
IkReal x4712=(sj4*x4711);
IkReal x4713=((1.0)*cj4);
IkReal x4714=(r01*x4708);
IkReal x4715=(sj4*x4706);
IkReal x4716=(x4709*x4713);
IkReal x4717=(x4711*x4713);
IkReal x4718=((1.0)*sj4);
IkReal x4719=(x4714*x4718);
IkReal x4720=((-1.0)*(((1.0)*sj6)));
IkReal x4721=(cj4*r01*x4708);
IkReal x4722=((1.0)*cj4*r00*x4705);
IkReal x4723=((1.0)*sj4*sj8);
IkReal x4724=((1.0)*cj8*sj4);
IkReal x4725=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4713*x4714))+x4710+x4712+x4707);
evalcond[1]=((((-1.0)*x4719))+(((-1.0)*x4716))+x4715+(((-1.0)*x4717)));
evalcond[2]=((((-1.0)*sj8*x4719))+(((-1.0)*sj8*x4716))+((sj8*x4715))+cj6+(((-1.0)*sj8*x4717)));
evalcond[3]=(((sj8*x4721))+(((-1.0)*x4711*x4723))+(((-1.0)*sj8*x4722))+(((-1.0)*x4709*x4723))+x4720);
evalcond[4]=((((-1.0)*x4711*x4724))+(((-1.0)*cj8*x4722))+((cj8*x4721))+(((-1.0)*x4709*x4724))+(((-1.0)*(1.0)*cj6)));
evalcond[5]=((((-1.0)*cj8*x4717))+((cj8*x4715))+(((-1.0)*cj8*x4719))+(((-1.0)*cj8*x4716))+x4720);
evalcond[6]=(((px*sj4))+((x4714*x4725))+(((-0.03431)*x4712))+(((-1.0)*py*x4713))+(((-0.03431)*x4707))+(((-0.03431)*x4710))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+((x4709*x4725))+(((-1.0)*py*x4718))+(((0.00036)*cj6))+((x4711*x4725))+(((-1.0)*px*x4713))+(((0.03431)*sj4*x4714))+(((-0.03431)*x4715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4726=(r00*sj6);
IkReal x4727=(r01*sj6);
CheckValue<IkReal> x4728=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x4728.valid){
continue;
}
CheckValue<IkReal> x4729 = IKatan2WithCheck(IkReal((((sj4*x4726))+(((-1.0)*cj4*x4727)))),(((cj4*x4726))+((sj4*x4727))),IKFAST_ATAN2_MAGTHRESH);
if(!x4729.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x4728.value)))+(x4729.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x4730=IKcos(j9);
IkReal x4731=(r00*x4730);
IkReal x4732=(cj4*x4731);
IkReal x4733=IKsin(j9);
IkReal x4734=(r00*x4733);
IkReal x4735=(sj4*x4734);
IkReal x4736=(r01*x4730);
IkReal x4737=(sj4*x4736);
IkReal x4738=((1.0)*cj4);
IkReal x4739=(r01*x4733);
IkReal x4740=(sj4*x4731);
IkReal x4741=(x4734*x4738);
IkReal x4742=(x4736*x4738);
IkReal x4743=((1.0)*sj4);
IkReal x4744=(x4739*x4743);
IkReal x4745=((-1.0)*(((1.0)*sj6)));
IkReal x4746=(cj4*r01*x4733);
IkReal x4747=((1.0)*cj4*r00*x4730);
IkReal x4748=((1.0)*sj4*sj8);
IkReal x4749=((1.0)*cj8*sj4);
IkReal x4750=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4738*x4739))+x4735+x4732+x4737);
evalcond[1]=((((-1.0)*x4742))+(((-1.0)*x4744))+x4740+(((-1.0)*x4741)));
evalcond[2]=(((sj8*x4740))+cj6+(((-1.0)*sj8*x4741))+(((-1.0)*sj8*x4742))+(((-1.0)*sj8*x4744)));
evalcond[3]=((((-1.0)*sj8*x4747))+(((-1.0)*x4736*x4748))+(((-1.0)*x4734*x4748))+x4745+((sj8*x4746)));
evalcond[4]=((((-1.0)*x4736*x4749))+(((-1.0)*x4734*x4749))+(((-1.0)*cj8*x4747))+(((-1.0)*(1.0)*cj6))+((cj8*x4746)));
evalcond[5]=(((cj8*x4740))+(((-1.0)*cj8*x4741))+(((-1.0)*cj8*x4744))+(((-1.0)*cj8*x4742))+x4745);
evalcond[6]=(((px*sj4))+(((-0.03431)*x4737))+(((-1.0)*py*x4738))+(((-0.03431)*x4732))+((x4739*x4750))+(((-0.03431)*x4735))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+(((-1.0)*px*x4738))+(((-0.03431)*x4740))+(((0.00036)*cj6))+(((-1.0)*py*x4743))+((x4736*x4750))+((x4734*x4750))+(((0.03431)*sj4*x4739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4751=(cj4*sj6);
IkReal x4752=(sj4*sj6);
CheckValue<IkReal> x4753 = IKatan2WithCheck(IkReal((((r00*x4751))+((r01*x4752)))),((((-1.0)*r00*x4752))+((r01*x4751))),IKFAST_ATAN2_MAGTHRESH);
if(!x4753.valid){
continue;
}
CheckValue<IkReal> x4754=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x4754.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x4753.value)+(((-1.0)*(1.5707963267949)*(x4754.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x4755=IKcos(j9);
IkReal x4756=(r00*x4755);
IkReal x4757=(cj4*x4756);
IkReal x4758=IKsin(j9);
IkReal x4759=(r00*x4758);
IkReal x4760=(sj4*x4759);
IkReal x4761=(r01*x4755);
IkReal x4762=(sj4*x4761);
IkReal x4763=((1.0)*cj4);
IkReal x4764=(r01*x4758);
IkReal x4765=(sj4*x4756);
IkReal x4766=(x4759*x4763);
IkReal x4767=(x4761*x4763);
IkReal x4768=((1.0)*sj4);
IkReal x4769=(x4764*x4768);
IkReal x4770=((-1.0)*(((1.0)*sj6)));
IkReal x4771=(cj4*r01*x4758);
IkReal x4772=((1.0)*cj4*r00*x4755);
IkReal x4773=((1.0)*sj4*sj8);
IkReal x4774=((1.0)*cj8*sj4);
IkReal x4775=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4763*x4764))+x4757+x4760+x4762);
evalcond[1]=((((-1.0)*x4769))+x4765+(((-1.0)*x4767))+(((-1.0)*x4766)));
evalcond[2]=(((sj8*x4765))+(((-1.0)*sj8*x4766))+(((-1.0)*sj8*x4769))+cj6+(((-1.0)*sj8*x4767)));
evalcond[3]=((((-1.0)*x4759*x4773))+(((-1.0)*x4761*x4773))+x4770+((sj8*x4771))+(((-1.0)*sj8*x4772)));
evalcond[4]=((((-1.0)*cj8*x4772))+(((-1.0)*(1.0)*cj6))+((cj8*x4771))+(((-1.0)*x4759*x4774))+(((-1.0)*x4761*x4774)));
evalcond[5]=(((cj8*x4765))+x4770+(((-1.0)*cj8*x4769))+(((-1.0)*cj8*x4766))+(((-1.0)*cj8*x4767)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x4757))+(((-0.03431)*x4762))+(((-1.0)*py*x4763))+((x4764*x4775))+(((-0.03431)*x4760))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+(((0.03431)*sj4*x4764))+((x4759*x4775))+(((0.00036)*cj6))+(((-0.03431)*x4765))+(((-1.0)*px*x4763))+((x4761*x4775))+(((-1.0)*py*x4768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4776=(cj8*r01);
IkReal x4777=((0.03431)*r01);
IkReal x4778=((0.00036)*cj8*r01);
IkReal x4779=(((cj6*x4777))+((sj6*x4778)));
IkReal x4780=(((cj6*x4778))+(((-1.0)*sj6*x4777))+(((0.00337)*x4776)));
CheckValue<IkReal> x4781 = IKatan2WithCheck(IkReal(((((-1.0)*px*x4779))+((py*x4780)))),(((py*x4779))+((px*x4780))),IKFAST_ATAN2_MAGTHRESH);
if(!x4781.valid){
continue;
}
CheckValue<IkReal> x4782=IKPowWithIntegerCheck(IKsign((((pp*x4776))+(((-1.0)*x4776*(pz*pz))))),-1);
if(!x4782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4781.value)+(((1.5707963267949)*(x4782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x4783=((0.00337)*cj8);
IkReal x4784=((0.03431)*sj6);
IkReal x4785=((0.00036)*cj6*cj8);
IkReal x4786=IKcos(j4);
IkReal x4787=(cj8*px*r00);
IkReal x4788=(py*r00);
IkReal x4789=IKsin(j4);
IkReal x4790=(cj8*x4789);
IkReal x4791=((0.03431)*cj6);
IkReal x4792=((0.00036)*cj8*sj6);
IkReal x4793=(px*r01);
IkReal x4794=(py*r01);
IkReal x4795=((1.0)*cj8*x4786);
evalcond[0]=((((-1.0)*r00*x4783))+(((-1.0)*r00*x4785))+((r00*x4784))+((x4786*x4787))+((x4788*x4790)));
evalcond[1]=((((-1.0)*x4794*x4795))+((r01*x4791))+((x4790*x4793))+((r01*x4792)));
evalcond[2]=((((-1.0)*x4788*x4795))+((r00*x4791))+((r00*x4792))+((x4787*x4789)));
evalcond[3]=(((r01*x4785))+(((-1.0)*cj8*x4789*x4794))+(((-1.0)*x4793*x4795))+((r01*x4783))+(((-1.0)*r01*x4784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x4796=((1.0)*r00);
IkReal x4797=(((py*r01))+((px*r00)));
IkReal x4798=(px*r01);
IkReal x4799=(pz*r01);
IkReal x4800=((-1.0)*pz*x4796);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4796);
r10=r01;
npx=x4797;
npy=(x4798+(((-1.0)*py*x4796)));
npz=(pz*r22);
rxp0_0=x4799;
rxp0_1=x4800;
rxp0_2=(((py*r00))+(((-1.0)*x4798)));
rxp1_0=x4800;
rxp1_1=((-1.0)*x4799);
rxp1_2=x4797;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=cj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x4801=((1.0)*r00);
IkReal x4802=(((py*r01))+((px*r00)));
IkReal x4803=(px*r01);
IkReal x4804=(pz*r01);
IkReal x4805=((-1.0)*pz*x4801);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4801);
r10=r01;
npx=x4802;
npy=(x4803+(((-1.0)*py*x4801)));
npz=(pz*r22);
rxp0_0=x4804;
rxp0_1=x4805;
rxp0_2=(((py*r00))+(((-1.0)*x4803)));
rxp1_0=x4805;
rxp1_1=((-1.0)*x4804);
rxp1_2=x4802;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x4806=((1.0)*r00);
IkReal x4807=(((py*r01))+((px*r00)));
IkReal x4808=(px*r01);
IkReal x4809=(pz*r01);
IkReal x4810=((-1.0)*pz*x4806);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x4806);
r10=r01;
npx=x4807;
npy=(x4808+(((-1.0)*py*x4806)));
npz=(pz*r22);
rxp0_0=x4809;
rxp0_1=x4810;
rxp0_2=(((py*r00))+(((-1.0)*x4808)));
rxp1_0=x4810;
rxp1_1=((-1.0)*x4809);
rxp1_2=x4807;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=cj8;
j9eval[1]=cj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4811=((29.146021568056)*px);
IkReal x4812=(r00*x4811);
IkReal x4813=(cj4*sj4);
IkReal x4814=(r01*x4811);
IkReal x4815=((29.146021568056)*cj4*py*sj4);
IkReal x4816=cj4*cj4;
IkReal x4817=((29.146021568056)*py*x4816);
if( IKabs(((((-1.0)*x4813*x4814))+(((-1.0)*x4812*x4816))+x4812+((r01*x4817))+(((-1.0)*r00*x4815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4814*x4816))+(((-1.0)*r01*x4815))+((x4812*x4813))+x4814+(((-1.0)*r00*x4817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4813*x4814))+(((-1.0)*x4812*x4816))+x4812+((r01*x4817))+(((-1.0)*r00*x4815))))+IKsqr(((((-1.0)*x4814*x4816))+(((-1.0)*r01*x4815))+((x4812*x4813))+x4814+(((-1.0)*r00*x4817))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x4813*x4814))+(((-1.0)*x4812*x4816))+x4812+((r01*x4817))+(((-1.0)*r00*x4815))), ((((-1.0)*x4814*x4816))+(((-1.0)*r01*x4815))+((x4812*x4813))+x4814+(((-1.0)*r00*x4817))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4818=IKcos(j9);
IkReal x4819=(r00*x4818);
IkReal x4820=(cj4*x4819);
IkReal x4821=IKsin(j9);
IkReal x4822=(r00*x4821);
IkReal x4823=(sj4*x4822);
IkReal x4824=(r01*x4818);
IkReal x4825=(sj4*x4824);
IkReal x4826=((1.0)*cj4);
IkReal x4827=(r01*x4821);
IkReal x4828=(sj4*x4819);
IkReal x4829=((1.0)*sj4);
IkReal x4830=((0.03431)*cj4);
evalcond[0]=(x4825+x4820+x4823+(((-1.0)*x4826*x4827)));
evalcond[1]=(x4828+(((-1.0)*x4824*x4826))+(((-1.0)*x4827*x4829))+(((-1.0)*x4822*x4826)));
evalcond[2]=(((px*sj4))+((x4827*x4830))+(((-0.03431)*x4823))+(((-0.03431)*x4825))+(((-1.0)*py*x4826))+(((-0.03431)*x4820)));
evalcond[3]=((0.00337)+((x4824*x4830))+(((0.03431)*sj4*x4827))+(((-1.0)*px*x4826))+((x4822*x4830))+(((-0.03431)*x4828))+(((-1.0)*py*x4829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4831=((29.146021568056)*px);
IkReal x4832=(r00*x4831);
IkReal x4833=(cj4*sj4);
IkReal x4834=(r01*x4831);
IkReal x4835=((29.146021568056)*cj4*py*sj4);
IkReal x4836=cj4*cj4;
IkReal x4837=((29.146021568056)*py*x4836);
if( IKabs(((((-1.0)*r00*x4835))+(((-1.0)*x4832*x4836))+x4832+((r01*x4837))+(((-1.0)*x4833*x4834)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4834*x4836))+x4834+(((-1.0)*r01*x4835))+(((-1.0)*r00*x4837))+((x4832*x4833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x4835))+(((-1.0)*x4832*x4836))+x4832+((r01*x4837))+(((-1.0)*x4833*x4834))))+IKsqr(((((-1.0)*x4834*x4836))+x4834+(((-1.0)*r01*x4835))+(((-1.0)*r00*x4837))+((x4832*x4833))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x4835))+(((-1.0)*x4832*x4836))+x4832+((r01*x4837))+(((-1.0)*x4833*x4834))), ((((-1.0)*x4834*x4836))+x4834+(((-1.0)*r01*x4835))+(((-1.0)*r00*x4837))+((x4832*x4833))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4838=IKcos(j9);
IkReal x4839=(r00*x4838);
IkReal x4840=(cj4*x4839);
IkReal x4841=IKsin(j9);
IkReal x4842=(r00*x4841);
IkReal x4843=(sj4*x4842);
IkReal x4844=(r01*x4838);
IkReal x4845=(sj4*x4844);
IkReal x4846=((1.0)*cj4);
IkReal x4847=(r01*x4841);
IkReal x4848=(sj4*x4839);
IkReal x4849=((1.0)*sj4);
IkReal x4850=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4846*x4847))+x4845+x4843+x4840);
evalcond[1]=((((-1.0)*x4847*x4849))+(((-1.0)*x4842*x4846))+x4848+(((-1.0)*x4844*x4846)));
evalcond[2]=(((px*sj4))+((x4847*x4850))+(((-0.03431)*x4845))+(((-0.03431)*x4840))+(((-0.03431)*x4843))+(((-1.0)*py*x4846)));
evalcond[3]=((0.00337)+(((-0.03431)*x4848))+((x4844*x4850))+(((-1.0)*py*x4849))+((x4842*x4850))+(((0.03431)*sj4*x4847))+(((-1.0)*px*x4846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4851=((0.0982220926843486)*cj4);
IkReal x4852=((29.146021568056)*py);
IkReal x4853=(r01*x4852);
IkReal x4854=((0.0982220926843486)*sj4);
IkReal x4855=((29.146021568056)*cj4*px*sj4);
IkReal x4856=(cj4*sj4);
IkReal x4857=(r00*x4852);
IkReal x4858=cj4*cj4;
IkReal x4859=((29.146021568056)*px*x4858);
if( IKabs((x4853+(((-1.0)*r00*x4851))+((x4856*x4857))+(((-1.0)*r01*x4854))+((r00*x4859))+(((-1.0)*x4853*x4858))+((r01*x4855)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4857*x4858))+((r00*x4854))+(((-1.0)*r01*x4851))+((x4853*x4856))+(((-1.0)*r00*x4855))+((r01*x4859))+(((-1.0)*x4857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4853+(((-1.0)*r00*x4851))+((x4856*x4857))+(((-1.0)*r01*x4854))+((r00*x4859))+(((-1.0)*x4853*x4858))+((r01*x4855))))+IKsqr((((x4857*x4858))+((r00*x4854))+(((-1.0)*r01*x4851))+((x4853*x4856))+(((-1.0)*r00*x4855))+((r01*x4859))+(((-1.0)*x4857))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x4853+(((-1.0)*r00*x4851))+((x4856*x4857))+(((-1.0)*r01*x4854))+((r00*x4859))+(((-1.0)*x4853*x4858))+((r01*x4855))), (((x4857*x4858))+((r00*x4854))+(((-1.0)*r01*x4851))+((x4853*x4856))+(((-1.0)*r00*x4855))+((r01*x4859))+(((-1.0)*x4857))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4860=IKcos(j9);
IkReal x4861=(r00*x4860);
IkReal x4862=(cj4*x4861);
IkReal x4863=IKsin(j9);
IkReal x4864=(r00*x4863);
IkReal x4865=(sj4*x4864);
IkReal x4866=(r01*x4860);
IkReal x4867=(sj4*x4866);
IkReal x4868=((1.0)*cj4);
IkReal x4869=(r01*x4863);
IkReal x4870=(sj4*x4861);
IkReal x4871=((1.0)*sj4);
IkReal x4872=((0.03431)*cj4);
evalcond[0]=(x4865+x4862+x4867+(((-1.0)*x4868*x4869)));
evalcond[1]=((((-1.0)*x4866*x4868))+x4870+(((-1.0)*x4869*x4871))+(((-1.0)*x4864*x4868)));
evalcond[2]=((0.00036)+((px*sj4))+(((-0.03431)*x4867))+(((-0.03431)*x4865))+((x4869*x4872))+(((-0.03431)*x4862))+(((-1.0)*py*x4868)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x4869))+(((-0.03431)*x4870))+(((-1.0)*py*x4871))+(((-1.0)*px*x4868))+((x4866*x4872))+((x4864*x4872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4873=((0.0982220926843486)*cj4);
IkReal x4874=((29.146021568056)*py);
IkReal x4875=(r01*x4874);
IkReal x4876=((0.0982220926843486)*sj4);
IkReal x4877=((29.146021568056)*cj4*px*sj4);
IkReal x4878=(cj4*sj4);
IkReal x4879=(r00*x4874);
IkReal x4880=cj4*cj4;
IkReal x4881=((29.146021568056)*px*x4880);
if( IKabs((((x4878*x4879))+((r01*x4877))+(((-1.0)*r00*x4873))+x4875+((r00*x4881))+(((-1.0)*x4875*x4880))+(((-1.0)*r01*x4876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4879))+((r00*x4876))+(((-1.0)*r01*x4873))+((x4875*x4878))+((r01*x4881))+(((-1.0)*r00*x4877))+((x4879*x4880)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4878*x4879))+((r01*x4877))+(((-1.0)*r00*x4873))+x4875+((r00*x4881))+(((-1.0)*x4875*x4880))+(((-1.0)*r01*x4876))))+IKsqr(((((-1.0)*x4879))+((r00*x4876))+(((-1.0)*r01*x4873))+((x4875*x4878))+((r01*x4881))+(((-1.0)*r00*x4877))+((x4879*x4880))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((x4878*x4879))+((r01*x4877))+(((-1.0)*r00*x4873))+x4875+((r00*x4881))+(((-1.0)*x4875*x4880))+(((-1.0)*r01*x4876))), ((((-1.0)*x4879))+((r00*x4876))+(((-1.0)*r01*x4873))+((x4875*x4878))+((r01*x4881))+(((-1.0)*r00*x4877))+((x4879*x4880))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4882=IKcos(j9);
IkReal x4883=(r00*x4882);
IkReal x4884=(cj4*x4883);
IkReal x4885=IKsin(j9);
IkReal x4886=(r00*x4885);
IkReal x4887=(sj4*x4886);
IkReal x4888=(r01*x4882);
IkReal x4889=(sj4*x4888);
IkReal x4890=((1.0)*cj4);
IkReal x4891=(r01*x4885);
IkReal x4892=(sj4*x4883);
IkReal x4893=((1.0)*sj4);
IkReal x4894=((0.03431)*cj4);
evalcond[0]=(x4884+x4887+x4889+(((-1.0)*x4890*x4891)));
evalcond[1]=((((-1.0)*x4888*x4890))+x4892+(((-1.0)*x4886*x4890))+(((-1.0)*x4891*x4893)));
evalcond[2]=((-0.00036)+((px*sj4))+(((-0.03431)*x4889))+(((-0.03431)*x4884))+(((-0.03431)*x4887))+(((-1.0)*py*x4890))+((x4891*x4894)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x4891))+((x4888*x4894))+(((-0.03431)*x4892))+(((-1.0)*py*x4893))+((x4886*x4894))+(((-1.0)*px*x4890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4895=((29.146021568056)*px);
IkReal x4896=(r00*x4895);
IkReal x4897=(cj4*sj4);
IkReal x4898=(r01*x4895);
IkReal x4899=((29.146021568056)*cj4*py*sj4);
IkReal x4900=cj4*cj4;
IkReal x4901=((29.146021568056)*py*x4900);
if( IKabs((x4896+((r01*x4901))+(((-1.0)*r00*x4899))+(((-1.0)*x4896*x4900))+(((-1.0)*x4897*x4898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4898+((x4896*x4897))+(((-1.0)*r01*x4899))+(((-1.0)*x4898*x4900))+(((-1.0)*r00*x4901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4896+((r01*x4901))+(((-1.0)*r00*x4899))+(((-1.0)*x4896*x4900))+(((-1.0)*x4897*x4898))))+IKsqr((x4898+((x4896*x4897))+(((-1.0)*r01*x4899))+(((-1.0)*x4898*x4900))+(((-1.0)*r00*x4901))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x4896+((r01*x4901))+(((-1.0)*r00*x4899))+(((-1.0)*x4896*x4900))+(((-1.0)*x4897*x4898))), (x4898+((x4896*x4897))+(((-1.0)*r01*x4899))+(((-1.0)*x4898*x4900))+(((-1.0)*r00*x4901))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4902=IKcos(j9);
IkReal x4903=(r00*x4902);
IkReal x4904=(cj4*x4903);
IkReal x4905=IKsin(j9);
IkReal x4906=(r00*x4905);
IkReal x4907=(sj4*x4906);
IkReal x4908=(r01*x4902);
IkReal x4909=(sj4*x4908);
IkReal x4910=((1.0)*cj4);
IkReal x4911=(r01*x4905);
IkReal x4912=(sj4*x4903);
IkReal x4913=((1.0)*sj4);
IkReal x4914=((0.03431)*cj4);
evalcond[0]=(x4904+x4907+x4909+(((-1.0)*x4910*x4911)));
evalcond[1]=((((-1.0)*x4911*x4913))+x4912+(((-1.0)*x4906*x4910))+(((-1.0)*x4908*x4910)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4909))+(((-1.0)*py*x4910))+((x4911*x4914))+(((-0.03431)*x4904))+(((-0.03431)*x4907)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x4911))+(((-0.03431)*x4912))+(((-1.0)*py*x4913))+((x4906*x4914))+(((-1.0)*px*x4910))+((x4908*x4914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=cj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4915=((29.146021568056)*px);
IkReal x4916=(r00*x4915);
IkReal x4917=(cj4*sj4);
IkReal x4918=(r01*x4915);
IkReal x4919=((29.146021568056)*cj4*py*sj4);
IkReal x4920=cj4*cj4;
IkReal x4921=((29.146021568056)*py*x4920);
if( IKabs(((((-1.0)*r00*x4919))+((r01*x4921))+(((-1.0)*x4916*x4920))+x4916+(((-1.0)*x4917*x4918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4919))+((x4916*x4917))+x4918+(((-1.0)*x4918*x4920))+(((-1.0)*r00*x4921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x4919))+((r01*x4921))+(((-1.0)*x4916*x4920))+x4916+(((-1.0)*x4917*x4918))))+IKsqr(((((-1.0)*r01*x4919))+((x4916*x4917))+x4918+(((-1.0)*x4918*x4920))+(((-1.0)*r00*x4921))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x4919))+((r01*x4921))+(((-1.0)*x4916*x4920))+x4916+(((-1.0)*x4917*x4918))), ((((-1.0)*r01*x4919))+((x4916*x4917))+x4918+(((-1.0)*x4918*x4920))+(((-1.0)*r00*x4921))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4922=IKcos(j9);
IkReal x4923=(r00*x4922);
IkReal x4924=(cj4*x4923);
IkReal x4925=IKsin(j9);
IkReal x4926=(r00*x4925);
IkReal x4927=(sj4*x4926);
IkReal x4928=(r01*x4922);
IkReal x4929=(sj4*x4928);
IkReal x4930=((1.0)*cj4);
IkReal x4931=(r01*x4925);
IkReal x4932=(sj4*x4923);
IkReal x4933=((1.0)*sj4);
IkReal x4934=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4930*x4931))+x4924+x4927+x4929);
evalcond[1]=((((-1.0)*x4926*x4930))+(((-1.0)*x4931*x4933))+(((-1.0)*x4928*x4930))+x4932);
evalcond[2]=(((px*sj4))+(((-0.03431)*x4927))+(((-0.03431)*x4924))+((x4931*x4934))+(((-0.03431)*x4929))+(((-1.0)*py*x4930)));
evalcond[3]=((0.00337)+(((-0.03431)*x4932))+((x4926*x4934))+((x4928*x4934))+(((-1.0)*py*x4933))+(((0.03431)*sj4*x4931))+(((-1.0)*px*x4930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4935=((29.146021568056)*px);
IkReal x4936=(r00*x4935);
IkReal x4937=(cj4*sj4);
IkReal x4938=(r01*x4935);
IkReal x4939=((29.146021568056)*cj4*py*sj4);
IkReal x4940=cj4*cj4;
IkReal x4941=((29.146021568056)*py*x4940);
if( IKabs(((((-1.0)*r00*x4939))+((r01*x4941))+(((-1.0)*x4937*x4938))+x4936+(((-1.0)*x4936*x4940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4936*x4937))+(((-1.0)*r01*x4939))+x4938+(((-1.0)*x4938*x4940))+(((-1.0)*r00*x4941)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x4939))+((r01*x4941))+(((-1.0)*x4937*x4938))+x4936+(((-1.0)*x4936*x4940))))+IKsqr((((x4936*x4937))+(((-1.0)*r01*x4939))+x4938+(((-1.0)*x4938*x4940))+(((-1.0)*r00*x4941))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x4939))+((r01*x4941))+(((-1.0)*x4937*x4938))+x4936+(((-1.0)*x4936*x4940))), (((x4936*x4937))+(((-1.0)*r01*x4939))+x4938+(((-1.0)*x4938*x4940))+(((-1.0)*r00*x4941))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4942=IKcos(j9);
IkReal x4943=(r00*x4942);
IkReal x4944=(cj4*x4943);
IkReal x4945=IKsin(j9);
IkReal x4946=(r00*x4945);
IkReal x4947=(sj4*x4946);
IkReal x4948=(r01*x4942);
IkReal x4949=(sj4*x4948);
IkReal x4950=((1.0)*cj4);
IkReal x4951=(r01*x4945);
IkReal x4952=(sj4*x4943);
IkReal x4953=((1.0)*sj4);
IkReal x4954=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4950*x4951))+x4944+x4949+x4947);
evalcond[1]=((((-1.0)*x4948*x4950))+x4952+(((-1.0)*x4946*x4950))+(((-1.0)*x4951*x4953)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x4947))+(((-0.03431)*x4944))+(((-1.0)*py*x4950))+((x4951*x4954))+(((-0.03431)*x4949)));
evalcond[3]=((0.00373)+(((0.03431)*sj4*x4951))+(((-1.0)*py*x4953))+((x4948*x4954))+((x4946*x4954))+(((-1.0)*px*x4950))+(((-0.03431)*x4952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4955=((29.146021568056)*px);
IkReal x4956=(r00*x4955);
IkReal x4957=(cj4*sj4);
IkReal x4958=(r01*x4955);
IkReal x4959=((29.146021568056)*cj4*py*sj4);
IkReal x4960=cj4*cj4;
IkReal x4961=((29.146021568056)*py*x4960);
if( IKabs(((((-1.0)*r00*x4959))+x4956+((r01*x4961))+(((-1.0)*x4956*x4960))+(((-1.0)*x4957*x4958)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x4956*x4957))+x4958+(((-1.0)*r01*x4959))+(((-1.0)*x4958*x4960))+(((-1.0)*r00*x4961)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x4959))+x4956+((r01*x4961))+(((-1.0)*x4956*x4960))+(((-1.0)*x4957*x4958))))+IKsqr((((x4956*x4957))+x4958+(((-1.0)*r01*x4959))+(((-1.0)*x4958*x4960))+(((-1.0)*r00*x4961))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x4959))+x4956+((r01*x4961))+(((-1.0)*x4956*x4960))+(((-1.0)*x4957*x4958))), (((x4956*x4957))+x4958+(((-1.0)*r01*x4959))+(((-1.0)*x4958*x4960))+(((-1.0)*r00*x4961))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x4962=IKcos(j9);
IkReal x4963=(r00*x4962);
IkReal x4964=(cj4*x4963);
IkReal x4965=IKsin(j9);
IkReal x4966=(r00*x4965);
IkReal x4967=(sj4*x4966);
IkReal x4968=(r01*x4962);
IkReal x4969=(sj4*x4968);
IkReal x4970=((1.0)*cj4);
IkReal x4971=(r01*x4965);
IkReal x4972=(sj4*x4963);
IkReal x4973=((1.0)*sj4);
IkReal x4974=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x4970*x4971))+x4969+x4964+x4967);
evalcond[1]=((((-1.0)*x4971*x4973))+(((-1.0)*x4968*x4970))+(((-1.0)*x4966*x4970))+x4972);
evalcond[2]=(((px*sj4))+(((-0.03431)*x4964))+(((-1.0)*py*x4970))+(((-0.03431)*x4967))+((x4971*x4974))+(((-0.03431)*x4969)));
evalcond[3]=((0.00301)+(((-1.0)*px*x4970))+(((-0.03431)*x4972))+((x4968*x4974))+(((-1.0)*py*x4973))+(((0.03431)*sj4*x4971))+((x4966*x4974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x4975=(cj6*r00);
IkReal x4976=(cj6*r01);
CheckValue<IkReal> x4977 = IKatan2WithCheck(IkReal((((sj4*x4975))+(((-1.0)*cj4*x4976)))),(((sj4*x4976))+((cj4*x4975))),IKFAST_ATAN2_MAGTHRESH);
if(!x4977.valid){
continue;
}
CheckValue<IkReal> x4978=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x4978.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x4977.value)+(((-1.0)*(1.5707963267949)*(x4978.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x4979=IKcos(j9);
IkReal x4980=(r00*x4979);
IkReal x4981=(cj4*x4980);
IkReal x4982=IKsin(j9);
IkReal x4983=(r00*x4982);
IkReal x4984=(sj4*x4983);
IkReal x4985=(r01*x4979);
IkReal x4986=(sj4*x4985);
IkReal x4987=((1.0)*cj4);
IkReal x4988=(r01*x4982);
IkReal x4989=(sj4*x4980);
IkReal x4990=(x4983*x4987);
IkReal x4991=(x4985*x4987);
IkReal x4992=((1.0)*sj4);
IkReal x4993=(x4988*x4992);
IkReal x4994=((-1.0)*(((1.0)*sj6)));
IkReal x4995=(cj4*r01*x4982);
IkReal x4996=((1.0)*cj4*r00*x4979);
IkReal x4997=((1.0)*sj4*sj8);
IkReal x4998=((1.0)*cj8*sj4);
IkReal x4999=((0.03431)*cj4);
evalcond[0]=(x4986+x4984+x4981+(((-1.0)*x4987*x4988)));
evalcond[1]=((((-1.0)*x4990))+x4989+(((-1.0)*x4991))+(((-1.0)*x4993)));
evalcond[2]=((((-1.0)*sj8*x4993))+(((-1.0)*sj8*x4990))+cj6+(((-1.0)*sj8*x4991))+((sj8*x4989)));
evalcond[3]=((((-1.0)*sj8*x4996))+((sj8*x4995))+x4994+(((-1.0)*x4983*x4997))+(((-1.0)*x4985*x4997)));
evalcond[4]=((((-1.0)*x4983*x4998))+(((-1.0)*x4985*x4998))+((cj8*x4995))+(((-1.0)*(1.0)*cj6))+(((-1.0)*cj8*x4996)));
evalcond[5]=(x4994+(((-1.0)*cj8*x4991))+(((-1.0)*cj8*x4990))+((cj8*x4989))+(((-1.0)*cj8*x4993)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x4981))+(((-1.0)*py*x4987))+(((-0.03431)*x4984))+(((-0.03431)*x4986))+((x4988*x4999))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+(((-1.0)*py*x4992))+((x4983*x4999))+(((0.00036)*cj6))+(((-1.0)*px*x4987))+(((0.03431)*sj4*x4988))+((x4985*x4999))+(((-0.03431)*x4989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5000=(r00*sj6);
IkReal x5001=(r01*sj6);
CheckValue<IkReal> x5002=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x5002.valid){
continue;
}
CheckValue<IkReal> x5003 = IKatan2WithCheck(IkReal((((sj4*x5000))+(((-1.0)*cj4*x5001)))),(((cj4*x5000))+((sj4*x5001))),IKFAST_ATAN2_MAGTHRESH);
if(!x5003.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x5002.value)))+(x5003.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x5004=IKcos(j9);
IkReal x5005=(r00*x5004);
IkReal x5006=(cj4*x5005);
IkReal x5007=IKsin(j9);
IkReal x5008=(r00*x5007);
IkReal x5009=(sj4*x5008);
IkReal x5010=(r01*x5004);
IkReal x5011=(sj4*x5010);
IkReal x5012=((1.0)*cj4);
IkReal x5013=(r01*x5007);
IkReal x5014=(sj4*x5005);
IkReal x5015=(x5008*x5012);
IkReal x5016=(x5010*x5012);
IkReal x5017=((1.0)*sj4);
IkReal x5018=(x5013*x5017);
IkReal x5019=((-1.0)*(((1.0)*sj6)));
IkReal x5020=(cj4*r01*x5007);
IkReal x5021=((1.0)*cj4*r00*x5004);
IkReal x5022=((1.0)*sj4*sj8);
IkReal x5023=((1.0)*cj8*sj4);
IkReal x5024=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5012*x5013))+x5011+x5009+x5006);
evalcond[1]=((((-1.0)*x5018))+x5014+(((-1.0)*x5016))+(((-1.0)*x5015)));
evalcond[2]=((((-1.0)*sj8*x5018))+((sj8*x5014))+cj6+(((-1.0)*sj8*x5015))+(((-1.0)*sj8*x5016)));
evalcond[3]=(((sj8*x5020))+(((-1.0)*x5010*x5022))+x5019+(((-1.0)*x5008*x5022))+(((-1.0)*sj8*x5021)));
evalcond[4]=((((-1.0)*x5010*x5023))+((cj8*x5020))+(((-1.0)*(1.0)*cj6))+(((-1.0)*cj8*x5021))+(((-1.0)*x5008*x5023)));
evalcond[5]=((((-1.0)*cj8*x5018))+x5019+(((-1.0)*cj8*x5016))+((cj8*x5014))+(((-1.0)*cj8*x5015)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x5011))+((x5013*x5024))+(((-1.0)*py*x5012))+(((-0.03431)*x5009))+(((0.00036)*sj6))+(((-0.03431)*x5006)));
evalcond[7]=((0.00337)+(((-0.03431)*x5014))+(((0.03431)*sj4*x5013))+((x5008*x5024))+(((0.00036)*cj6))+(((-1.0)*py*x5017))+(((-1.0)*px*x5012))+((x5010*x5024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5025=(cj4*sj6);
IkReal x5026=(sj4*sj6);
CheckValue<IkReal> x5027 = IKatan2WithCheck(IkReal((((r01*x5026))+((r00*x5025)))),(((r01*x5025))+(((-1.0)*r00*x5026))),IKFAST_ATAN2_MAGTHRESH);
if(!x5027.valid){
continue;
}
CheckValue<IkReal> x5028=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x5028.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x5027.value)+(((-1.0)*(1.5707963267949)*(x5028.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x5029=IKcos(j9);
IkReal x5030=(r00*x5029);
IkReal x5031=(cj4*x5030);
IkReal x5032=IKsin(j9);
IkReal x5033=(r00*x5032);
IkReal x5034=(sj4*x5033);
IkReal x5035=(r01*x5029);
IkReal x5036=(sj4*x5035);
IkReal x5037=((1.0)*cj4);
IkReal x5038=(r01*x5032);
IkReal x5039=(sj4*x5030);
IkReal x5040=(x5033*x5037);
IkReal x5041=(x5035*x5037);
IkReal x5042=((1.0)*sj4);
IkReal x5043=(x5038*x5042);
IkReal x5044=((-1.0)*(((1.0)*sj6)));
IkReal x5045=(cj4*r01*x5032);
IkReal x5046=((1.0)*cj4*r00*x5029);
IkReal x5047=((1.0)*sj4*sj8);
IkReal x5048=((1.0)*cj8*sj4);
IkReal x5049=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5037*x5038))+x5031+x5034+x5036);
evalcond[1]=((((-1.0)*x5041))+(((-1.0)*x5043))+(((-1.0)*x5040))+x5039);
evalcond[2]=((((-1.0)*sj8*x5043))+((sj8*x5039))+cj6+(((-1.0)*sj8*x5041))+(((-1.0)*sj8*x5040)));
evalcond[3]=(((sj8*x5045))+x5044+(((-1.0)*sj8*x5046))+(((-1.0)*x5035*x5047))+(((-1.0)*x5033*x5047)));
evalcond[4]=((((-1.0)*x5035*x5048))+(((-1.0)*cj8*x5046))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x5033*x5048))+((cj8*x5045)));
evalcond[5]=(((cj8*x5039))+x5044+(((-1.0)*cj8*x5040))+(((-1.0)*cj8*x5043))+(((-1.0)*cj8*x5041)));
evalcond[6]=(((px*sj4))+((x5038*x5049))+(((-0.03431)*x5036))+(((-0.03431)*x5031))+(((-0.03431)*x5034))+(((-1.0)*py*x5037))+(((0.00036)*sj6)));
evalcond[7]=((0.00337)+(((0.03431)*sj4*x5038))+(((0.00036)*cj6))+((x5035*x5049))+(((-0.03431)*x5039))+(((-1.0)*py*x5042))+(((-1.0)*px*x5037))+((x5033*x5049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
evalcond[1]=-1.0;
evalcond[2]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
j8array[0]=-1.5707963267949;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j4eval[2];
IkReal x5050=((1.0)*r00);
IkReal x5051=(((py*r01))+((px*r00)));
IkReal x5052=(px*r01);
IkReal x5053=(pz*r01);
IkReal x5054=((-1.0)*pz*x5050);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5050);
r10=r01;
npx=x5051;
npy=((((-1.0)*py*x5050))+x5052);
npz=(pz*r22);
rxp0_0=x5053;
rxp0_1=x5054;
rxp0_2=(((py*r00))+(((-1.0)*x5052)));
rxp1_0=x5054;
rxp1_1=((-1.0)*x5053);
rxp1_2=x5051;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5055=(cj8*r00);
IkReal x5056=((cj8*cj8)*(((1.0)+(((-1.0)*(1.0)*(r01*r01))))));
j4eval[0]=((IKabs((px*x5055)))+(IKabs((py*x5055))));
j4eval[1]=(((x5056*(py*py)))+((x5056*(px*px))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5057=((1.0)*r00);
IkReal x5058=(((py*r01))+((px*r00)));
IkReal x5059=(px*r01);
IkReal x5060=(pz*r01);
IkReal x5061=((-1.0)*pz*x5057);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5057);
r10=r01;
npx=x5058;
npy=((((-1.0)*py*x5057))+x5059);
npz=(pz*r22);
rxp0_0=x5060;
rxp0_1=x5061;
rxp0_2=(((py*r00))+(((-1.0)*x5059)));
rxp1_0=x5061;
rxp1_1=((-1.0)*x5060);
rxp1_2=x5058;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5062=(r00*sj8);
IkReal x5063=((sj8*sj8)*(((1.0)+(((-1.0)*(1.0)*(r01*r01))))));
j4eval[0]=((IKabs((px*x5062)))+(IKabs((py*x5062))));
j4eval[1]=(((x5063*(px*px)))+((x5063*(py*py))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5064=((1.0)*r00);
IkReal x5065=(((py*r01))+((px*r00)));
IkReal x5066=(px*r01);
IkReal x5067=(pz*r01);
IkReal x5068=((-1.0)*pz*x5064);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5064);
r10=r01;
npx=x5065;
npy=((((-1.0)*py*x5064))+x5066);
npz=(pz*r22);
rxp0_0=x5067;
rxp0_1=x5068;
rxp0_2=(((py*r00))+(((-1.0)*x5066)));
rxp1_0=x5068;
rxp1_1=((-1.0)*x5067);
rxp1_2=x5065;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5069=((cj8*cj8)*(r01*r01));
IkReal x5070=(cj8*r01);
j4eval[0]=(((x5069*(py*py)))+((x5069*(px*px))));
j4eval[1]=((IKabs((py*x5070)))+(IKabs((px*x5070))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x5071=((1.0)*r00);
IkReal x5072=(((py*r01))+((px*r00)));
IkReal x5073=(px*r01);
IkReal x5074=(pz*r01);
IkReal x5075=((-1.0)*pz*x5071);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5071);
r10=r01;
npx=x5072;
npy=(x5073+(((-1.0)*py*x5071)));
npz=(pz*r22);
rxp0_0=x5074;
rxp0_1=x5075;
rxp0_2=((((-1.0)*x5073))+((py*r00)));
rxp1_0=x5075;
rxp1_1=((-1.0)*x5074);
rxp1_2=x5072;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x5076=pz*pz;
j4eval[0]=((((-1.0)*x5076))+pp);
j4eval[1]=IKsign(((((-100000.0)*x5076))+(((100000.0)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5077=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x5077.valid){
continue;
}
CheckValue<IkReal> x5078 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x5078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5077.value)))+(x5078.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x5079=IKcos(j4);
IkReal x5080=(r01*x5079);
IkReal x5081=((1.0)*px);
IkReal x5082=IKsin(j4);
IkReal x5083=(r01*x5082);
IkReal x5084=(r00*x5079);
IkReal x5085=(r00*x5082);
evalcond[0]=((((-1.0)*x5081*x5083))+((py*x5080)));
evalcond[1]=((((-1.0)*x5081*x5085))+((py*x5084)));
evalcond[2]=((((-1.0)*(0.00337)*r00))+((py*x5085))+((px*x5084)));
evalcond[3]=((((-1.0)*py*x5083))+(((0.00337)*r01))+(((-1.0)*x5080*x5081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5086=((29.146021568056)*px);
IkReal x5087=(r00*x5086);
IkReal x5088=(cj4*sj4);
IkReal x5089=(r01*x5086);
IkReal x5090=((29.146021568056)*cj4*py*sj4);
IkReal x5091=cj4*cj4;
IkReal x5092=((29.146021568056)*py*x5091);
if( IKabs(((((-1.0)*r00*x5090))+(((-1.0)*x5088*x5089))+x5087+((r01*x5092))+(((-1.0)*x5087*x5091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5089+(((-1.0)*r00*x5092))+((x5087*x5088))+(((-1.0)*r01*x5090))+(((-1.0)*x5089*x5091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x5090))+(((-1.0)*x5088*x5089))+x5087+((r01*x5092))+(((-1.0)*x5087*x5091))))+IKsqr((x5089+(((-1.0)*r00*x5092))+((x5087*x5088))+(((-1.0)*r01*x5090))+(((-1.0)*x5089*x5091))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x5090))+(((-1.0)*x5088*x5089))+x5087+((r01*x5092))+(((-1.0)*x5087*x5091))), (x5089+(((-1.0)*r00*x5092))+((x5087*x5088))+(((-1.0)*r01*x5090))+(((-1.0)*x5089*x5091))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5093=IKcos(j9);
IkReal x5094=(r00*x5093);
IkReal x5095=(cj4*x5094);
IkReal x5096=IKsin(j9);
IkReal x5097=(r00*x5096);
IkReal x5098=(sj4*x5097);
IkReal x5099=(r01*x5093);
IkReal x5100=(sj4*x5099);
IkReal x5101=((1.0)*cj4);
IkReal x5102=(r01*x5096);
IkReal x5103=(sj4*x5094);
IkReal x5104=((1.0)*sj4);
IkReal x5105=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5101*x5102))+x5095+x5098+x5100);
evalcond[1]=((((-1.0)*x5099*x5101))+(((-1.0)*x5097*x5101))+(((-1.0)*x5102*x5104))+x5103);
evalcond[2]=(((px*sj4))+(((-0.03431)*x5098))+(((-1.0)*py*x5101))+(((-0.03431)*x5095))+((x5102*x5105))+(((-0.03431)*x5100)));
evalcond[3]=((0.00337)+(((-1.0)*px*x5101))+((x5099*x5105))+(((0.03431)*sj4*x5102))+(((-0.03431)*x5103))+((x5097*x5105))+(((-1.0)*py*x5104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x5106=((1.0)*r00);
IkReal x5107=(((py*r01))+((px*r00)));
IkReal x5108=(px*r01);
IkReal x5109=(pz*r01);
IkReal x5110=((-1.0)*pz*x5106);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5106);
r10=r01;
npx=x5107;
npy=((((-1.0)*py*x5106))+x5108);
npz=(pz*r22);
rxp0_0=x5109;
rxp0_1=x5110;
rxp0_2=(((py*r00))+(((-1.0)*x5108)));
rxp1_0=x5110;
rxp1_1=((-1.0)*x5109);
rxp1_2=x5107;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x5111=pz*pz;
j4eval[0]=(pp+(((-1.0)*x5111)));
j4eval[1]=IKsign(((((100000.0)*pp))+(((-100000.0)*x5111))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5112=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x5112.valid){
continue;
}
CheckValue<IkReal> x5113 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x5113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5112.value)))+(x5113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x5114=IKcos(j4);
IkReal x5115=(r01*x5114);
IkReal x5116=((1.0)*px);
IkReal x5117=IKsin(j4);
IkReal x5118=(r01*x5117);
IkReal x5119=(r00*x5114);
IkReal x5120=(r00*x5117);
evalcond[0]=(((py*x5115))+(((-1.0)*x5116*x5118)));
evalcond[1]=((((-1.0)*x5116*x5120))+((py*x5119)));
evalcond[2]=(((py*x5120))+(((-1.0)*(0.00337)*r00))+((px*x5119)));
evalcond[3]=((((-1.0)*py*x5118))+(((0.00337)*r01))+(((-1.0)*x5115*x5116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5121=((29.146021568056)*px);
IkReal x5122=(r00*x5121);
IkReal x5123=(cj4*sj4);
IkReal x5124=(r01*x5121);
IkReal x5125=((29.146021568056)*cj4*py*sj4);
IkReal x5126=cj4*cj4;
IkReal x5127=((29.146021568056)*py*x5126);
if( IKabs(((((-1.0)*x5123*x5124))+(((-1.0)*r00*x5125))+(((-1.0)*x5122*x5126))+x5122+((r01*x5127)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5127))+x5124+(((-1.0)*r01*x5125))+((x5122*x5123))+(((-1.0)*x5124*x5126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5123*x5124))+(((-1.0)*r00*x5125))+(((-1.0)*x5122*x5126))+x5122+((r01*x5127))))+IKsqr(((((-1.0)*r00*x5127))+x5124+(((-1.0)*r01*x5125))+((x5122*x5123))+(((-1.0)*x5124*x5126))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x5123*x5124))+(((-1.0)*r00*x5125))+(((-1.0)*x5122*x5126))+x5122+((r01*x5127))), ((((-1.0)*r00*x5127))+x5124+(((-1.0)*r01*x5125))+((x5122*x5123))+(((-1.0)*x5124*x5126))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5128=IKcos(j9);
IkReal x5129=(r00*x5128);
IkReal x5130=(cj4*x5129);
IkReal x5131=IKsin(j9);
IkReal x5132=(r00*x5131);
IkReal x5133=(sj4*x5132);
IkReal x5134=(r01*x5128);
IkReal x5135=(sj4*x5134);
IkReal x5136=((1.0)*cj4);
IkReal x5137=(r01*x5131);
IkReal x5138=(sj4*x5129);
IkReal x5139=((1.0)*sj4);
IkReal x5140=((0.03431)*cj4);
evalcond[0]=(x5133+x5130+x5135+(((-1.0)*x5136*x5137)));
evalcond[1]=((((-1.0)*x5134*x5136))+(((-1.0)*x5132*x5136))+(((-1.0)*x5137*x5139))+x5138);
evalcond[2]=(((px*sj4))+(((-1.0)*py*x5136))+((x5137*x5140))+(((-0.03431)*x5130))+(((-0.03431)*x5133))+(((-0.03431)*x5135)));
evalcond[3]=((0.00337)+((x5134*x5140))+(((0.03431)*sj4*x5137))+((x5132*x5140))+(((-1.0)*py*x5139))+(((-0.03431)*x5138))+(((-1.0)*px*x5136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x5141=((1.0)*r00);
IkReal x5142=(((py*r01))+((px*r00)));
IkReal x5143=(px*r01);
IkReal x5144=(pz*r01);
IkReal x5145=((-1.0)*pz*x5141);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5141);
r10=r01;
npx=x5142;
npy=(x5143+(((-1.0)*py*x5141)));
npz=(pz*r22);
rxp0_0=x5144;
rxp0_1=x5145;
rxp0_2=(((py*r00))+(((-1.0)*x5143)));
rxp1_0=x5145;
rxp1_1=((-1.0)*x5144);
rxp1_2=x5142;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x5146=pz*pz;
j4eval[0]=((((-1.0)*x5146))+pp);
j4eval[1]=IKsign(((((100000.0)*pp))+(((-100000.0)*x5146))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5147=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x5147.valid){
continue;
}
CheckValue<IkReal> x5148 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x5148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5147.value)))+(x5148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x5149=IKcos(j4);
IkReal x5150=(r01*x5149);
IkReal x5151=((1.0)*px);
IkReal x5152=IKsin(j4);
IkReal x5153=(r01*x5152);
IkReal x5154=(r00*x5149);
IkReal x5155=(r00*x5152);
evalcond[0]=((((-1.0)*x5151*x5153))+((py*x5150)));
evalcond[1]=((((-1.0)*x5151*x5155))+((py*x5154)));
evalcond[2]=((((-1.0)*(0.00337)*r00))+((px*x5154))+((py*x5155)));
evalcond[3]=((((0.00337)*r01))+(((-1.0)*py*x5153))+(((-1.0)*x5150*x5151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5156=((29.146021568056)*px);
IkReal x5157=(r00*x5156);
IkReal x5158=(cj4*sj4);
IkReal x5159=(r01*x5156);
IkReal x5160=((29.146021568056)*cj4*py*sj4);
IkReal x5161=cj4*cj4;
IkReal x5162=((29.146021568056)*py*x5161);
if( IKabs(((((-1.0)*x5157*x5161))+x5157+(((-1.0)*r00*x5160))+((r01*x5162))+(((-1.0)*x5158*x5159)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5160))+x5159+(((-1.0)*x5159*x5161))+(((-1.0)*r00*x5162))+((x5157*x5158)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5157*x5161))+x5157+(((-1.0)*r00*x5160))+((r01*x5162))+(((-1.0)*x5158*x5159))))+IKsqr(((((-1.0)*r01*x5160))+x5159+(((-1.0)*x5159*x5161))+(((-1.0)*r00*x5162))+((x5157*x5158))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x5157*x5161))+x5157+(((-1.0)*r00*x5160))+((r01*x5162))+(((-1.0)*x5158*x5159))), ((((-1.0)*r01*x5160))+x5159+(((-1.0)*x5159*x5161))+(((-1.0)*r00*x5162))+((x5157*x5158))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5163=IKcos(j9);
IkReal x5164=(r00*x5163);
IkReal x5165=(cj4*x5164);
IkReal x5166=IKsin(j9);
IkReal x5167=(r00*x5166);
IkReal x5168=(sj4*x5167);
IkReal x5169=(r01*x5163);
IkReal x5170=(sj4*x5169);
IkReal x5171=((1.0)*cj4);
IkReal x5172=(r01*x5166);
IkReal x5173=(sj4*x5164);
IkReal x5174=((1.0)*sj4);
IkReal x5175=((0.03431)*cj4);
evalcond[0]=(x5170+x5168+x5165+(((-1.0)*x5171*x5172)));
evalcond[1]=((((-1.0)*x5172*x5174))+x5173+(((-1.0)*x5169*x5171))+(((-1.0)*x5167*x5171)));
evalcond[2]=((((-0.03431)*x5168))+((px*sj4))+(((-0.03431)*x5170))+((x5172*x5175))+(((-0.03431)*x5165))+(((-1.0)*py*x5171)));
evalcond[3]=((0.00337)+(((-1.0)*py*x5174))+((x5167*x5175))+(((0.03431)*sj4*x5172))+((x5169*x5175))+(((-1.0)*px*x5171))+(((-0.03431)*x5173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x5176=((1.0)*r00);
IkReal x5177=(((py*r01))+((px*r00)));
IkReal x5178=(px*r01);
IkReal x5179=(pz*r01);
IkReal x5180=((-1.0)*pz*x5176);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5176);
r10=r01;
npx=x5177;
npy=(x5178+(((-1.0)*py*x5176)));
npz=(pz*r22);
rxp0_0=x5179;
rxp0_1=x5180;
rxp0_2=(((py*r00))+(((-1.0)*x5178)));
rxp1_0=x5180;
rxp1_1=((-1.0)*x5179);
rxp1_2=x5177;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x5181=pz*pz;
j4eval[0]=((((-1.0)*x5181))+pp);
j4eval[1]=IKsign(((((-100000.0)*x5181))+(((100000.0)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5182=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x5182.valid){
continue;
}
CheckValue<IkReal> x5183 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x5183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5182.value)))+(x5183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x5184=IKcos(j4);
IkReal x5185=(r01*x5184);
IkReal x5186=((1.0)*px);
IkReal x5187=IKsin(j4);
IkReal x5188=(r01*x5187);
IkReal x5189=(r00*x5184);
IkReal x5190=(r00*x5187);
evalcond[0]=(((py*x5185))+(((-1.0)*x5186*x5188)));
evalcond[1]=(((py*x5189))+(((-1.0)*x5186*x5190)));
evalcond[2]=((((-1.0)*(0.00337)*r00))+((px*x5189))+((py*x5190)));
evalcond[3]=((((0.00337)*r01))+(((-1.0)*py*x5188))+(((-1.0)*x5185*x5186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5191=((29.146021568056)*px);
IkReal x5192=(r00*x5191);
IkReal x5193=(cj4*sj4);
IkReal x5194=(r01*x5191);
IkReal x5195=((29.146021568056)*cj4*py*sj4);
IkReal x5196=cj4*cj4;
IkReal x5197=((29.146021568056)*py*x5196);
if( IKabs((x5192+(((-1.0)*r00*x5195))+(((-1.0)*x5193*x5194))+((r01*x5197))+(((-1.0)*x5192*x5196)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5194+((x5192*x5193))+(((-1.0)*r01*x5195))+(((-1.0)*x5194*x5196))+(((-1.0)*r00*x5197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5192+(((-1.0)*r00*x5195))+(((-1.0)*x5193*x5194))+((r01*x5197))+(((-1.0)*x5192*x5196))))+IKsqr((x5194+((x5192*x5193))+(((-1.0)*r01*x5195))+(((-1.0)*x5194*x5196))+(((-1.0)*r00*x5197))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x5192+(((-1.0)*r00*x5195))+(((-1.0)*x5193*x5194))+((r01*x5197))+(((-1.0)*x5192*x5196))), (x5194+((x5192*x5193))+(((-1.0)*r01*x5195))+(((-1.0)*x5194*x5196))+(((-1.0)*r00*x5197))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5198=IKcos(j9);
IkReal x5199=(r00*x5198);
IkReal x5200=(cj4*x5199);
IkReal x5201=IKsin(j9);
IkReal x5202=(r00*x5201);
IkReal x5203=(sj4*x5202);
IkReal x5204=(r01*x5198);
IkReal x5205=(sj4*x5204);
IkReal x5206=((1.0)*cj4);
IkReal x5207=(r01*x5201);
IkReal x5208=(sj4*x5199);
IkReal x5209=((1.0)*sj4);
IkReal x5210=((0.03431)*cj4);
evalcond[0]=(x5205+x5200+x5203+(((-1.0)*x5206*x5207)));
evalcond[1]=((((-1.0)*x5202*x5206))+(((-1.0)*x5207*x5209))+(((-1.0)*x5204*x5206))+x5208);
evalcond[2]=(((px*sj4))+(((-0.03431)*x5200))+(((-0.03431)*x5205))+(((-1.0)*py*x5206))+(((-0.03431)*x5203))+((x5207*x5210)));
evalcond[3]=((0.00337)+(((-1.0)*px*x5206))+(((-1.0)*py*x5209))+(((0.03431)*sj4*x5207))+(((-0.03431)*x5208))+((x5204*x5210))+((x5202*x5210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(px)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5211=((1.0)*r00);
IkReal x5212=(pz*r01);
IkReal x5213=((-1.0)*pz*x5211);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5211);
r10=r01;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=x5212;
rxp0_1=x5213;
rxp0_2=0;
rxp1_0=x5213;
rxp1_1=((-1.0)*x5212);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
px=0;
py=0;
pp=pz*pz;
j4eval[0]=60.0;
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=4.0;
op[1]=0;
op[2]=16.0;
op[3]=0;
op[4]=24.0;
op[5]=0;
op[6]=16.0;
op[7]=0;
op[8]=4.0;
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5214=((0.0104925677645001)*cj4*sj6);
IkReal x5215=((0.0104925677645001)*sj4*sj6);
if( IKabs((((r01*x5214))+(((-1.0)*r00*x5215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5214))+(((-1.0)*r01*x5215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5214))+(((-1.0)*r00*x5215))))+IKsqr(((((-1.0)*r00*x5214))+(((-1.0)*r01*x5215))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x5214))+(((-1.0)*r00*x5215))), ((((-1.0)*r00*x5214))+(((-1.0)*r01*x5215))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5216=IKcos(j9);
IkReal x5217=(r00*x5216);
IkReal x5218=(cj4*x5217);
IkReal x5219=IKsin(j9);
IkReal x5220=(r00*sj4*x5219);
IkReal x5221=(r01*sj4*x5216);
IkReal x5222=(cj4*r01*x5219);
IkReal x5223=(sj4*x5217);
IkReal x5224=(cj4*r00*x5219);
IkReal x5225=(cj4*r01*x5216);
IkReal x5226=(r01*sj4*x5219);
evalcond[0]=((((-1.0)*x5222))+x5221+x5220+x5218);
evalcond[1]=(x5223+(((-1.0)*x5224))+(((-1.0)*x5226))+(((-1.0)*x5225)));
evalcond[2]=((((-0.03431)*x5221))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x5220))+(((0.03431)*x5222))+(((-0.03431)*x5218)));
evalcond[3]=((0.00337)+(((0.00036)*cj6))+(((0.03431)*x5226))+(((0.03431)*x5225))+(((0.03431)*x5224))+(((-0.03431)*x5223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x5227=((1.0)*cj8*r01);
CheckValue<IkReal> x5232 = IKatan2WithCheck(IkReal(((-1.0)*px*x5227)),((-1.0)*py*x5227),IKFAST_ATAN2_MAGTHRESH);
if(!x5232.valid){
continue;
}
IkReal x5228=((-1.0)*(x5232.value));
IkReal x5229=(cj8*r01);
IkReal x5230=((cj8*cj8)*(r01*r01));
if(((((x5230*(px*px)))+((x5230*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x5233=IKPowWithIntegerCheck(IKabs(IKsqrt((((x5230*(px*px)))+((x5230*(py*py)))))),-1);
if(!x5233.valid){
continue;
}
if( (((x5233.value)*(((((0.00337)*x5229))+(((-1.0)*(0.03431)*r01*sj6))+(((0.00036)*cj6*x5229)))))) < -1-IKFAST_SINCOS_THRESH || (((x5233.value)*(((((0.00337)*x5229))+(((-1.0)*(0.03431)*r01*sj6))+(((0.00036)*cj6*x5229)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x5231=IKasin(((x5233.value)*(((((0.00337)*x5229))+(((-1.0)*(0.03431)*r01*sj6))+(((0.00036)*cj6*x5229))))));
j4array[0]=(x5228+(((-1.0)*x5231)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x5228+x5231);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x5234=((0.00337)*r00);
IkReal x5235=((0.00036)*cj6*r00);
IkReal x5236=(cj8*r00);
IkReal x5237=(px*(IKcos(j4)));
IkReal x5238=(py*(IKsin(j4)));
IkReal x5239=((0.03431)*cj6);
IkReal x5240=(r00*sj8);
IkReal x5241=(r01*sj8);
IkReal x5242=((1.0)*r01*sj8);
evalcond[0]=(((x5236*x5238))+((x5236*x5237))+(((-1.0)*cj8*x5234))+(((-1.0)*cj8*x5235))+(((0.03431)*r00*sj6)));
evalcond[1]=((((-1.0)*sj8*x5235))+((r00*x5239))+((x5238*x5240))+((x5237*x5240))+(((-1.0)*sj8*x5234)));
evalcond[2]=((((-1.0)*r01*x5239))+(((0.00036)*cj6*x5241))+(((-1.0)*x5238*x5242))+(((-1.0)*x5237*x5242))+(((0.00337)*x5241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x5243=((1.0)*r00);
IkReal x5244=(((py*r01))+((px*r00)));
IkReal x5245=(px*r01);
IkReal x5246=(pz*r01);
IkReal x5247=((-1.0)*pz*x5243);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5243);
r10=r01;
npx=x5244;
npy=((((-1.0)*py*x5243))+x5245);
npz=(pz*r22);
rxp0_0=x5246;
rxp0_1=x5247;
rxp0_2=(((py*r00))+(((-1.0)*x5245)));
rxp1_0=x5247;
rxp1_1=((-1.0)*x5246);
rxp1_2=x5244;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=cj6;
j9eval[3]=((sj4*sj4)+(cj4*cj4));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x5248=((1.0)*r00);
IkReal x5249=(((py*r01))+((px*r00)));
IkReal x5250=(px*r01);
IkReal x5251=(pz*r01);
IkReal x5252=((-1.0)*pz*x5248);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5248);
r10=r01;
npx=x5249;
npy=(x5250+(((-1.0)*py*x5248)));
npz=(pz*r22);
rxp0_0=x5251;
rxp0_1=x5252;
rxp0_2=(((py*r00))+(((-1.0)*x5250)));
rxp1_0=x5252;
rxp1_1=((-1.0)*x5251);
rxp1_2=x5249;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=cj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x5253=((1.0)*r00);
IkReal x5254=(((py*r01))+((px*r00)));
IkReal x5255=(px*r01);
IkReal x5256=(pz*r01);
IkReal x5257=((-1.0)*pz*x5253);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5253);
r10=r01;
npx=x5254;
npy=((((-1.0)*py*x5253))+x5255);
npz=(pz*r22);
rxp0_0=x5256;
rxp0_1=x5257;
rxp0_2=((((-1.0)*x5255))+((py*r00)));
rxp1_0=x5257;
rxp1_1=((-1.0)*x5256);
rxp1_2=x5254;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5258=((29.146021568056)*px);
IkReal x5259=(r00*x5258);
IkReal x5260=(cj4*sj4);
IkReal x5261=(r01*x5258);
IkReal x5262=((29.146021568056)*cj4*py*sj4);
IkReal x5263=cj4*cj4;
IkReal x5264=((29.146021568056)*py*x5263);
if( IKabs((((r01*x5264))+x5259+(((-1.0)*r00*x5262))+(((-1.0)*x5259*x5263))+(((-1.0)*x5260*x5261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5264))+(((-1.0)*r01*x5262))+x5261+((x5259*x5260))+(((-1.0)*x5261*x5263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5264))+x5259+(((-1.0)*r00*x5262))+(((-1.0)*x5259*x5263))+(((-1.0)*x5260*x5261))))+IKsqr(((((-1.0)*r00*x5264))+(((-1.0)*r01*x5262))+x5261+((x5259*x5260))+(((-1.0)*x5261*x5263))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x5264))+x5259+(((-1.0)*r00*x5262))+(((-1.0)*x5259*x5263))+(((-1.0)*x5260*x5261))), ((((-1.0)*r00*x5264))+(((-1.0)*r01*x5262))+x5261+((x5259*x5260))+(((-1.0)*x5261*x5263))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5265=IKcos(j9);
IkReal x5266=(r00*x5265);
IkReal x5267=(cj4*x5266);
IkReal x5268=IKsin(j9);
IkReal x5269=(r00*x5268);
IkReal x5270=(sj4*x5269);
IkReal x5271=(r01*x5265);
IkReal x5272=(sj4*x5271);
IkReal x5273=((1.0)*cj4);
IkReal x5274=(r01*x5268);
IkReal x5275=(sj4*x5266);
IkReal x5276=((1.0)*sj4);
IkReal x5277=((0.03431)*cj4);
evalcond[0]=(x5267+(((-1.0)*x5273*x5274))+x5272+x5270);
evalcond[1]=((((-1.0)*x5271*x5273))+(((-1.0)*x5274*x5276))+(((-1.0)*x5269*x5273))+x5275);
evalcond[2]=(((px*sj4))+((x5274*x5277))+(((-1.0)*py*x5273))+(((-0.03431)*x5267))+(((-0.03431)*x5270))+(((-0.03431)*x5272)));
evalcond[3]=((0.00337)+((x5269*x5277))+(((-1.0)*py*x5276))+(((-0.03431)*x5275))+((x5271*x5277))+(((0.03431)*sj4*x5274))+(((-1.0)*px*x5273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5278=((29.146021568056)*px);
IkReal x5279=(r00*x5278);
IkReal x5280=(cj4*sj4);
IkReal x5281=(r01*x5278);
IkReal x5282=((29.146021568056)*cj4*py*sj4);
IkReal x5283=cj4*cj4;
IkReal x5284=((29.146021568056)*py*x5283);
if( IKabs((((r01*x5284))+x5279+(((-1.0)*r00*x5282))+(((-1.0)*x5280*x5281))+(((-1.0)*x5279*x5283)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5284))+(((-1.0)*r01*x5282))+(((-1.0)*x5281*x5283))+((x5279*x5280))+x5281)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5284))+x5279+(((-1.0)*r00*x5282))+(((-1.0)*x5280*x5281))+(((-1.0)*x5279*x5283))))+IKsqr(((((-1.0)*r00*x5284))+(((-1.0)*r01*x5282))+(((-1.0)*x5281*x5283))+((x5279*x5280))+x5281))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x5284))+x5279+(((-1.0)*r00*x5282))+(((-1.0)*x5280*x5281))+(((-1.0)*x5279*x5283))), ((((-1.0)*r00*x5284))+(((-1.0)*r01*x5282))+(((-1.0)*x5281*x5283))+((x5279*x5280))+x5281));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5285=IKcos(j9);
IkReal x5286=(r00*x5285);
IkReal x5287=(cj4*x5286);
IkReal x5288=IKsin(j9);
IkReal x5289=(r00*x5288);
IkReal x5290=(sj4*x5289);
IkReal x5291=(r01*x5285);
IkReal x5292=(sj4*x5291);
IkReal x5293=((1.0)*cj4);
IkReal x5294=(r01*x5288);
IkReal x5295=(sj4*x5286);
IkReal x5296=((1.0)*sj4);
IkReal x5297=((0.03431)*cj4);
evalcond[0]=(x5290+x5292+x5287+(((-1.0)*x5293*x5294)));
evalcond[1]=(x5295+(((-1.0)*x5294*x5296))+(((-1.0)*x5291*x5293))+(((-1.0)*x5289*x5293)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x5292))+(((-1.0)*py*x5293))+((x5294*x5297))+(((-0.03431)*x5287))+(((-0.03431)*x5290)));
evalcond[3]=((0.00337)+(((-0.03431)*x5295))+(((-1.0)*py*x5296))+((x5291*x5297))+(((-1.0)*px*x5293))+((x5289*x5297))+(((0.03431)*sj4*x5294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5298=((29.146021568056)*px);
IkReal x5299=(r00*x5298);
IkReal x5300=(cj4*sj4);
IkReal x5301=(r01*x5298);
IkReal x5302=((29.146021568056)*cj4*py*sj4);
IkReal x5303=cj4*cj4;
IkReal x5304=((29.146021568056)*py*x5303);
if( IKabs((x5299+(((-1.0)*r00*x5302))+(((-1.0)*x5299*x5303))+(((-1.0)*x5300*x5301))+((r01*x5304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5301+((x5299*x5300))+(((-1.0)*r01*x5302))+(((-1.0)*x5301*x5303))+(((-1.0)*r00*x5304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5299+(((-1.0)*r00*x5302))+(((-1.0)*x5299*x5303))+(((-1.0)*x5300*x5301))+((r01*x5304))))+IKsqr((x5301+((x5299*x5300))+(((-1.0)*r01*x5302))+(((-1.0)*x5301*x5303))+(((-1.0)*r00*x5304))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x5299+(((-1.0)*r00*x5302))+(((-1.0)*x5299*x5303))+(((-1.0)*x5300*x5301))+((r01*x5304))), (x5301+((x5299*x5300))+(((-1.0)*r01*x5302))+(((-1.0)*x5301*x5303))+(((-1.0)*r00*x5304))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5305=IKcos(j9);
IkReal x5306=(r00*x5305);
IkReal x5307=(cj4*x5306);
IkReal x5308=IKsin(j9);
IkReal x5309=(r00*x5308);
IkReal x5310=(sj4*x5309);
IkReal x5311=(r01*x5305);
IkReal x5312=(sj4*x5311);
IkReal x5313=((1.0)*cj4);
IkReal x5314=(r01*x5308);
IkReal x5315=(sj4*x5306);
IkReal x5316=((1.0)*sj4);
IkReal x5317=((0.03431)*cj4);
evalcond[0]=(x5307+x5310+x5312+(((-1.0)*x5313*x5314)));
evalcond[1]=(x5315+(((-1.0)*x5314*x5316))+(((-1.0)*x5311*x5313))+(((-1.0)*x5309*x5313)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x5313))+(((-0.03431)*x5312))+(((-0.03431)*x5310))+(((-0.03431)*x5307))+((x5314*x5317)));
evalcond[3]=((0.00373)+((x5311*x5317))+(((-1.0)*px*x5313))+(((-0.03431)*x5315))+((x5309*x5317))+(((0.03431)*sj4*x5314))+(((-1.0)*py*x5316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5318=((29.146021568056)*px);
IkReal x5319=(r00*x5318);
IkReal x5320=(cj4*sj4);
IkReal x5321=(r01*x5318);
IkReal x5322=((29.146021568056)*cj4*py*sj4);
IkReal x5323=cj4*cj4;
IkReal x5324=((29.146021568056)*py*x5323);
if( IKabs(((((-1.0)*r00*x5322))+(((-1.0)*x5320*x5321))+((r01*x5324))+x5319+(((-1.0)*x5319*x5323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5321*x5323))+x5321+(((-1.0)*r01*x5322))+(((-1.0)*r00*x5324))+((x5319*x5320)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x5322))+(((-1.0)*x5320*x5321))+((r01*x5324))+x5319+(((-1.0)*x5319*x5323))))+IKsqr(((((-1.0)*x5321*x5323))+x5321+(((-1.0)*r01*x5322))+(((-1.0)*r00*x5324))+((x5319*x5320))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x5322))+(((-1.0)*x5320*x5321))+((r01*x5324))+x5319+(((-1.0)*x5319*x5323))), ((((-1.0)*x5321*x5323))+x5321+(((-1.0)*r01*x5322))+(((-1.0)*r00*x5324))+((x5319*x5320))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5325=IKcos(j9);
IkReal x5326=(r00*x5325);
IkReal x5327=(cj4*x5326);
IkReal x5328=IKsin(j9);
IkReal x5329=(r00*x5328);
IkReal x5330=(sj4*x5329);
IkReal x5331=(r01*x5325);
IkReal x5332=(sj4*x5331);
IkReal x5333=((1.0)*cj4);
IkReal x5334=(r01*x5328);
IkReal x5335=(sj4*x5326);
IkReal x5336=((1.0)*sj4);
IkReal x5337=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5333*x5334))+x5327+x5330+x5332);
evalcond[1]=(x5335+(((-1.0)*x5329*x5333))+(((-1.0)*x5334*x5336))+(((-1.0)*x5331*x5333)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x5332))+(((-0.03431)*x5330))+(((-1.0)*py*x5333))+((x5334*x5337))+(((-0.03431)*x5327)));
evalcond[3]=((0.00301)+(((-0.03431)*x5335))+((x5331*x5337))+((x5329*x5337))+(((0.03431)*sj4*x5334))+(((-1.0)*px*x5333))+(((-1.0)*py*x5336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5338=((29.146021568056)*px);
IkReal x5339=(r00*x5338);
IkReal x5340=(cj4*sj4);
IkReal x5341=(r01*x5338);
IkReal x5342=((29.146021568056)*cj4*py*sj4);
IkReal x5343=cj4*cj4;
IkReal x5344=((29.146021568056)*py*x5343);
if( IKabs(((((-1.0)*x5340*x5341))+x5339+(((-1.0)*r00*x5342))+((r01*x5344))+(((-1.0)*x5339*x5343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5339*x5340))+(((-1.0)*x5341*x5343))+(((-1.0)*r01*x5342))+(((-1.0)*r00*x5344))+x5341)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5340*x5341))+x5339+(((-1.0)*r00*x5342))+((r01*x5344))+(((-1.0)*x5339*x5343))))+IKsqr((((x5339*x5340))+(((-1.0)*x5341*x5343))+(((-1.0)*r01*x5342))+(((-1.0)*r00*x5344))+x5341))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x5340*x5341))+x5339+(((-1.0)*r00*x5342))+((r01*x5344))+(((-1.0)*x5339*x5343))), (((x5339*x5340))+(((-1.0)*x5341*x5343))+(((-1.0)*r01*x5342))+(((-1.0)*r00*x5344))+x5341));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5345=IKcos(j9);
IkReal x5346=(r00*x5345);
IkReal x5347=(cj4*x5346);
IkReal x5348=IKsin(j9);
IkReal x5349=(r00*x5348);
IkReal x5350=(sj4*x5349);
IkReal x5351=(r01*x5345);
IkReal x5352=(sj4*x5351);
IkReal x5353=((1.0)*cj4);
IkReal x5354=(r01*x5348);
IkReal x5355=(sj4*x5346);
IkReal x5356=((1.0)*sj4);
IkReal x5357=((0.03431)*cj4);
evalcond[0]=(x5350+x5352+x5347+(((-1.0)*x5353*x5354)));
evalcond[1]=((((-1.0)*x5354*x5356))+(((-1.0)*x5349*x5353))+(((-1.0)*x5351*x5353))+x5355);
evalcond[2]=(((px*sj4))+((x5354*x5357))+(((-1.0)*py*x5353))+(((-0.03431)*x5352))+(((-0.03431)*x5350))+(((-0.03431)*x5347)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x5354))+(((-1.0)*px*x5353))+((x5349*x5357))+(((-0.03431)*x5355))+(((-1.0)*py*x5356))+((x5351*x5357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5358=((29.146021568056)*px);
IkReal x5359=(r00*x5358);
IkReal x5360=(cj4*sj4);
IkReal x5361=(r01*x5358);
IkReal x5362=((29.146021568056)*cj4*py*sj4);
IkReal x5363=cj4*cj4;
IkReal x5364=((29.146021568056)*py*x5363);
if( IKabs(((((-1.0)*x5360*x5361))+((r01*x5364))+(((-1.0)*r00*x5362))+(((-1.0)*x5359*x5363))+x5359)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5362))+x5361+((x5359*x5360))+(((-1.0)*x5361*x5363))+(((-1.0)*r00*x5364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5360*x5361))+((r01*x5364))+(((-1.0)*r00*x5362))+(((-1.0)*x5359*x5363))+x5359))+IKsqr(((((-1.0)*r01*x5362))+x5361+((x5359*x5360))+(((-1.0)*x5361*x5363))+(((-1.0)*r00*x5364))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x5360*x5361))+((r01*x5364))+(((-1.0)*r00*x5362))+(((-1.0)*x5359*x5363))+x5359), ((((-1.0)*r01*x5362))+x5361+((x5359*x5360))+(((-1.0)*x5361*x5363))+(((-1.0)*r00*x5364))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5365=IKcos(j9);
IkReal x5366=(r00*x5365);
IkReal x5367=(cj4*x5366);
IkReal x5368=IKsin(j9);
IkReal x5369=(r00*x5368);
IkReal x5370=(sj4*x5369);
IkReal x5371=(r01*x5365);
IkReal x5372=(sj4*x5371);
IkReal x5373=((1.0)*cj4);
IkReal x5374=(r01*x5368);
IkReal x5375=(sj4*x5366);
IkReal x5376=((1.0)*sj4);
IkReal x5377=((0.03431)*cj4);
evalcond[0]=(x5367+x5372+x5370+(((-1.0)*x5373*x5374)));
evalcond[1]=((((-1.0)*x5374*x5376))+(((-1.0)*x5369*x5373))+x5375+(((-1.0)*x5371*x5373)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x5372))+(((-0.03431)*x5370))+((x5374*x5377))+(((-1.0)*py*x5373))+(((-0.03431)*x5367)));
evalcond[3]=((0.00337)+(((-0.03431)*x5375))+(((-1.0)*px*x5373))+(((-1.0)*py*x5376))+((x5371*x5377))+(((0.03431)*sj4*x5374))+((x5369*x5377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5378=((0.0982220926843486)*cj4);
IkReal x5379=((29.146021568056)*py);
IkReal x5380=(r01*x5379);
IkReal x5381=((0.0982220926843486)*sj4);
IkReal x5382=((29.146021568056)*cj4*px*sj4);
IkReal x5383=(cj4*sj4);
IkReal x5384=(r00*x5379);
IkReal x5385=cj4*cj4;
IkReal x5386=((29.146021568056)*px*x5385);
if( IKabs(((((-1.0)*x5380*x5385))+(((-1.0)*r00*x5378))+((r00*x5386))+((x5383*x5384))+((r01*x5382))+x5380+(((-1.0)*r01*x5381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5384))+(((-1.0)*r00*x5382))+((x5380*x5383))+(((-1.0)*r01*x5378))+((r01*x5386))+((r00*x5381))+((x5384*x5385)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5380*x5385))+(((-1.0)*r00*x5378))+((r00*x5386))+((x5383*x5384))+((r01*x5382))+x5380+(((-1.0)*r01*x5381))))+IKsqr(((((-1.0)*x5384))+(((-1.0)*r00*x5382))+((x5380*x5383))+(((-1.0)*r01*x5378))+((r01*x5386))+((r00*x5381))+((x5384*x5385))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x5380*x5385))+(((-1.0)*r00*x5378))+((r00*x5386))+((x5383*x5384))+((r01*x5382))+x5380+(((-1.0)*r01*x5381))), ((((-1.0)*x5384))+(((-1.0)*r00*x5382))+((x5380*x5383))+(((-1.0)*r01*x5378))+((r01*x5386))+((r00*x5381))+((x5384*x5385))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5387=IKcos(j9);
IkReal x5388=(r00*x5387);
IkReal x5389=(cj4*x5388);
IkReal x5390=IKsin(j9);
IkReal x5391=(r00*x5390);
IkReal x5392=(sj4*x5391);
IkReal x5393=(r01*x5387);
IkReal x5394=(sj4*x5393);
IkReal x5395=((1.0)*cj4);
IkReal x5396=(r01*x5390);
IkReal x5397=(sj4*x5388);
IkReal x5398=((1.0)*sj4);
IkReal x5399=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5395*x5396))+x5389+x5394+x5392);
evalcond[1]=((((-1.0)*x5396*x5398))+(((-1.0)*x5393*x5395))+x5397+(((-1.0)*x5391*x5395)));
evalcond[2]=((-0.00036)+((px*sj4))+(((-0.03431)*x5389))+((x5396*x5399))+(((-1.0)*py*x5395))+(((-0.03431)*x5394))+(((-0.03431)*x5392)));
evalcond[3]=((0.00337)+(((-1.0)*px*x5395))+(((0.03431)*sj4*x5396))+((x5391*x5399))+((x5393*x5399))+(((-0.03431)*x5397))+(((-1.0)*py*x5398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5400=((0.0982220926843486)*cj4);
IkReal x5401=((29.146021568056)*py);
IkReal x5402=(r01*x5401);
IkReal x5403=((0.0982220926843486)*sj4);
IkReal x5404=((29.146021568056)*cj4*px*sj4);
IkReal x5405=(cj4*sj4);
IkReal x5406=(r00*x5401);
IkReal x5407=cj4*cj4;
IkReal x5408=((29.146021568056)*px*x5407);
if( IKabs((((r00*x5408))+x5402+((r01*x5404))+(((-1.0)*r01*x5403))+(((-1.0)*x5402*x5407))+((x5405*x5406))+(((-1.0)*r00*x5400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x5408))+(((-1.0)*r01*x5400))+(((-1.0)*x5406))+((x5406*x5407))+((r00*x5403))+(((-1.0)*r00*x5404))+((x5402*x5405)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x5408))+x5402+((r01*x5404))+(((-1.0)*r01*x5403))+(((-1.0)*x5402*x5407))+((x5405*x5406))+(((-1.0)*r00*x5400))))+IKsqr((((r01*x5408))+(((-1.0)*r01*x5400))+(((-1.0)*x5406))+((x5406*x5407))+((r00*x5403))+(((-1.0)*r00*x5404))+((x5402*x5405))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r00*x5408))+x5402+((r01*x5404))+(((-1.0)*r01*x5403))+(((-1.0)*x5402*x5407))+((x5405*x5406))+(((-1.0)*r00*x5400))), (((r01*x5408))+(((-1.0)*r01*x5400))+(((-1.0)*x5406))+((x5406*x5407))+((r00*x5403))+(((-1.0)*r00*x5404))+((x5402*x5405))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5409=IKcos(j9);
IkReal x5410=(r00*x5409);
IkReal x5411=(cj4*x5410);
IkReal x5412=IKsin(j9);
IkReal x5413=(r00*x5412);
IkReal x5414=(sj4*x5413);
IkReal x5415=(r01*x5409);
IkReal x5416=(sj4*x5415);
IkReal x5417=((1.0)*cj4);
IkReal x5418=(r01*x5412);
IkReal x5419=(sj4*x5410);
IkReal x5420=((1.0)*sj4);
IkReal x5421=((0.03431)*cj4);
evalcond[0]=(x5411+x5416+x5414+(((-1.0)*x5417*x5418)));
evalcond[1]=(x5419+(((-1.0)*x5413*x5417))+(((-1.0)*x5415*x5417))+(((-1.0)*x5418*x5420)));
evalcond[2]=((0.00036)+((px*sj4))+((x5418*x5421))+(((-0.03431)*x5416))+(((-0.03431)*x5411))+(((-1.0)*py*x5417))+(((-0.03431)*x5414)));
evalcond[3]=((0.00337)+((x5413*x5421))+(((-1.0)*px*x5417))+((x5415*x5421))+(((-0.03431)*x5419))+(((0.03431)*sj4*x5418))+(((-1.0)*py*x5420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5422=(r00*sj6);
IkReal x5423=(r01*sj6);
CheckValue<IkReal> x5424 = IKatan2WithCheck(IkReal((((sj4*x5422))+(((-1.0)*cj4*x5423)))),(((sj4*x5423))+((cj4*x5422))),IKFAST_ATAN2_MAGTHRESH);
if(!x5424.valid){
continue;
}
CheckValue<IkReal> x5425=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x5425.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x5424.value)+(((-1.0)*(1.5707963267949)*(x5425.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x5426=IKcos(j9);
IkReal x5427=(r00*x5426);
IkReal x5428=(cj4*x5427);
IkReal x5429=IKsin(j9);
IkReal x5430=(r00*x5429);
IkReal x5431=(sj4*x5430);
IkReal x5432=(r01*x5426);
IkReal x5433=(sj4*x5432);
IkReal x5434=((1.0)*cj4);
IkReal x5435=(r01*x5429);
IkReal x5436=(sj4*x5427);
IkReal x5437=(x5430*x5434);
IkReal x5438=(x5432*x5434);
IkReal x5439=((1.0)*sj4);
IkReal x5440=(x5435*x5439);
IkReal x5441=(cj4*r01*x5429);
IkReal x5442=((1.0)*cj4*r00*x5426);
IkReal x5443=((1.0)*cj8*sj4);
IkReal x5444=((-1.0)*(((1.0)*sj6)));
IkReal x5445=((1.0)*sj4*sj8);
IkReal x5446=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5434*x5435))+x5431+x5433+x5428);
evalcond[1]=(x5436+(((-1.0)*x5440))+(((-1.0)*x5438))+(((-1.0)*x5437)));
evalcond[2]=((((-1.0)*x5432*x5443))+cj6+(((-1.0)*x5430*x5443))+((cj8*x5441))+(((-1.0)*cj8*x5442)));
evalcond[3]=(x5444+((sj8*x5441))+(((-1.0)*sj8*x5442))+(((-1.0)*x5432*x5445))+(((-1.0)*x5430*x5445)));
evalcond[4]=((((-1.0)*(1.0)*cj6))+(((-1.0)*sj8*x5440))+((sj8*x5436))+(((-1.0)*sj8*x5438))+(((-1.0)*sj8*x5437)));
evalcond[5]=(x5444+(((-1.0)*cj8*x5437))+(((-1.0)*cj8*x5440))+((cj8*x5436))+(((-1.0)*cj8*x5438)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x5428))+(((-0.03431)*x5431))+(((-0.03431)*x5433))+(((-1.0)*(0.00036)*sj6))+(((-1.0)*py*x5434))+((x5435*x5446)));
evalcond[7]=((0.00337)+(((-1.0)*px*x5434))+(((-1.0)*py*x5439))+(((0.00036)*cj6))+(((-0.03431)*x5436))+(((0.03431)*sj4*x5435))+((x5432*x5446))+((x5430*x5446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5447=(cj4*sj6);
IkReal x5448=(sj4*sj6);
CheckValue<IkReal> x5449 = IKatan2WithCheck(IkReal((((r00*x5447))+((r01*x5448)))),(((r01*x5447))+(((-1.0)*r00*x5448))),IKFAST_ATAN2_MAGTHRESH);
if(!x5449.valid){
continue;
}
CheckValue<IkReal> x5450=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x5450.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x5449.value)+(((-1.0)*(1.5707963267949)*(x5450.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x5451=IKcos(j9);
IkReal x5452=(r00*x5451);
IkReal x5453=(cj4*x5452);
IkReal x5454=IKsin(j9);
IkReal x5455=(r00*x5454);
IkReal x5456=(sj4*x5455);
IkReal x5457=(r01*x5451);
IkReal x5458=(sj4*x5457);
IkReal x5459=((1.0)*cj4);
IkReal x5460=(r01*x5454);
IkReal x5461=(sj4*x5452);
IkReal x5462=(x5455*x5459);
IkReal x5463=(x5457*x5459);
IkReal x5464=((1.0)*sj4);
IkReal x5465=(x5460*x5464);
IkReal x5466=(cj4*r01*x5454);
IkReal x5467=((1.0)*cj4*r00*x5451);
IkReal x5468=((1.0)*cj8*sj4);
IkReal x5469=((-1.0)*(((1.0)*sj6)));
IkReal x5470=((1.0)*sj4*sj8);
IkReal x5471=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5459*x5460))+x5453+x5456+x5458);
evalcond[1]=((((-1.0)*x5465))+x5461+(((-1.0)*x5462))+(((-1.0)*x5463)));
evalcond[2]=((((-1.0)*x5455*x5468))+((cj8*x5466))+cj6+(((-1.0)*cj8*x5467))+(((-1.0)*x5457*x5468)));
evalcond[3]=((((-1.0)*x5455*x5470))+(((-1.0)*sj8*x5467))+((sj8*x5466))+x5469+(((-1.0)*x5457*x5470)));
evalcond[4]=((((-1.0)*sj8*x5463))+(((-1.0)*sj8*x5462))+(((-1.0)*(1.0)*cj6))+((sj8*x5461))+(((-1.0)*sj8*x5465)));
evalcond[5]=((((-1.0)*cj8*x5463))+((cj8*x5461))+(((-1.0)*cj8*x5465))+x5469+(((-1.0)*cj8*x5462)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x5459))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x5458))+((x5460*x5471))+(((-0.03431)*x5453))+(((-0.03431)*x5456)));
evalcond[7]=((0.00337)+(((0.03431)*sj4*x5460))+(((-0.03431)*x5461))+(((0.00036)*cj6))+((x5455*x5471))+(((-1.0)*px*x5459))+((x5457*x5471))+(((-1.0)*py*x5464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5472=(cj4*cj6);
IkReal x5473=(cj6*sj4);
CheckValue<IkReal> x5474 = IKatan2WithCheck(IkReal((((r00*x5472))+((r01*x5473)))),((((-1.0)*r00*x5473))+((r01*x5472))),IKFAST_ATAN2_MAGTHRESH);
if(!x5474.valid){
continue;
}
CheckValue<IkReal> x5475=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x5475.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x5474.value)+(((-1.0)*(1.5707963267949)*(x5475.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x5476=IKcos(j9);
IkReal x5477=(r00*x5476);
IkReal x5478=(cj4*x5477);
IkReal x5479=IKsin(j9);
IkReal x5480=(r00*x5479);
IkReal x5481=(sj4*x5480);
IkReal x5482=(r01*x5476);
IkReal x5483=(sj4*x5482);
IkReal x5484=((1.0)*cj4);
IkReal x5485=(r01*x5479);
IkReal x5486=(sj4*x5477);
IkReal x5487=(x5480*x5484);
IkReal x5488=(x5482*x5484);
IkReal x5489=((1.0)*sj4);
IkReal x5490=(x5485*x5489);
IkReal x5491=(cj4*r01*x5479);
IkReal x5492=((1.0)*cj4*r00*x5476);
IkReal x5493=((1.0)*cj8*sj4);
IkReal x5494=((-1.0)*(((1.0)*sj6)));
IkReal x5495=((1.0)*sj4*sj8);
IkReal x5496=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5484*x5485))+x5481+x5483+x5478);
evalcond[1]=((((-1.0)*x5488))+(((-1.0)*x5487))+x5486+(((-1.0)*x5490)));
evalcond[2]=(cj6+(((-1.0)*cj8*x5492))+(((-1.0)*x5482*x5493))+(((-1.0)*x5480*x5493))+((cj8*x5491)));
evalcond[3]=((((-1.0)*sj8*x5492))+(((-1.0)*x5482*x5495))+x5494+(((-1.0)*x5480*x5495))+((sj8*x5491)));
evalcond[4]=((((-1.0)*sj8*x5488))+(((-1.0)*(1.0)*cj6))+((sj8*x5486))+(((-1.0)*sj8*x5487))+(((-1.0)*sj8*x5490)));
evalcond[5]=(((cj8*x5486))+(((-1.0)*cj8*x5487))+(((-1.0)*cj8*x5490))+x5494+(((-1.0)*cj8*x5488)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x5478))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x5483))+((x5485*x5496))+(((-0.03431)*x5481))+(((-1.0)*py*x5484)));
evalcond[7]=((0.00337)+(((-1.0)*py*x5489))+(((-1.0)*px*x5484))+(((0.00036)*cj6))+(((-0.03431)*x5486))+(((0.03431)*sj4*x5485))+((x5480*x5496))+((x5482*x5496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x5497=(r00*sj8);
CheckValue<IkReal> x5502 = IKatan2WithCheck(IkReal((px*x5497)),(py*x5497),IKFAST_ATAN2_MAGTHRESH);
if(!x5502.valid){
continue;
}
IkReal x5498=((-1.0)*(x5502.value));
IkReal x5499=(cj6*r00);
IkReal x5500=((r00*r00)*(sj8*sj8));
if(((((x5500*(px*px)))+((x5500*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x5503=IKPowWithIntegerCheck(IKabs(IKsqrt((((x5500*(px*px)))+((x5500*(py*py)))))),-1);
if(!x5503.valid){
continue;
}
if( (((x5503.value)*(((((-0.00337)*x5497))+(((-0.00036)*sj8*x5499))+(((0.03431)*x5499)))))) < -1-IKFAST_SINCOS_THRESH || (((x5503.value)*(((((-0.00337)*x5497))+(((-0.00036)*sj8*x5499))+(((0.03431)*x5499)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x5501=IKasin(((x5503.value)*(((((-0.00337)*x5497))+(((-0.00036)*sj8*x5499))+(((0.03431)*x5499))))));
j4array[0]=((((-1.0)*x5501))+x5498);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x5501+x5498);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x5504=((0.00337)*cj8);
IkReal x5505=((0.00036)*cj6*cj8);
IkReal x5506=(cj8*r00);
IkReal x5507=(px*(IKcos(j4)));
IkReal x5508=(py*(IKsin(j4)));
IkReal x5509=((0.03431)*r01);
IkReal x5510=((1.0)*cj8*r01);
IkReal x5511=(r01*sj8);
IkReal x5512=((1.0)*r01*sj8);
evalcond[0]=(((x5506*x5507))+(((-1.0)*r00*x5504))+(((0.03431)*r00*sj6))+((x5506*x5508))+(((-1.0)*r00*x5505)));
evalcond[1]=((((-1.0)*x5507*x5510))+(((-1.0)*x5508*x5510))+((r01*x5504))+((r01*x5505))+(((-1.0)*sj6*x5509)));
evalcond[2]=((((0.00337)*x5511))+(((0.00036)*cj6*x5511))+(((-1.0)*x5508*x5512))+(((-1.0)*x5507*x5512))+(((-1.0)*cj6*x5509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x5513=((1.0)*r00);
IkReal x5514=(((py*r01))+((px*r00)));
IkReal x5515=(px*r01);
IkReal x5516=(pz*r01);
IkReal x5517=((-1.0)*pz*x5513);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5513);
r10=r01;
npx=x5514;
npy=((((-1.0)*py*x5513))+x5515);
npz=(pz*r22);
rxp0_0=x5516;
rxp0_1=x5517;
rxp0_2=((((-1.0)*x5515))+((py*r00)));
rxp1_0=x5517;
rxp1_1=((-1.0)*x5516);
rxp1_2=x5514;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=cj6;
j9eval[3]=((sj4*sj4)+(cj4*cj4));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x5518=((1.0)*r00);
IkReal x5519=(((py*r01))+((px*r00)));
IkReal x5520=(px*r01);
IkReal x5521=(pz*r01);
IkReal x5522=((-1.0)*pz*x5518);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5518);
r10=r01;
npx=x5519;
npy=(x5520+(((-1.0)*py*x5518)));
npz=(pz*r22);
rxp0_0=x5521;
rxp0_1=x5522;
rxp0_2=((((-1.0)*x5520))+((py*r00)));
rxp1_0=x5522;
rxp1_1=((-1.0)*x5521);
rxp1_2=x5519;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=cj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x5523=((1.0)*r00);
IkReal x5524=(((py*r01))+((px*r00)));
IkReal x5525=(px*r01);
IkReal x5526=(pz*r01);
IkReal x5527=((-1.0)*pz*x5523);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5523);
r10=r01;
npx=x5524;
npy=((((-1.0)*py*x5523))+x5525);
npz=(pz*r22);
rxp0_0=x5526;
rxp0_1=x5527;
rxp0_2=((((-1.0)*x5525))+((py*r00)));
rxp1_0=x5527;
rxp1_1=((-1.0)*x5526);
rxp1_2=x5524;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5528=((29.146021568056)*px);
IkReal x5529=(r00*x5528);
IkReal x5530=(cj4*sj4);
IkReal x5531=(r01*x5528);
IkReal x5532=((29.146021568056)*cj4*py*sj4);
IkReal x5533=cj4*cj4;
IkReal x5534=((29.146021568056)*py*x5533);
if( IKabs(((((-1.0)*x5530*x5531))+x5529+(((-1.0)*r00*x5532))+(((-1.0)*x5529*x5533))+((r01*x5534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5532))+((x5529*x5530))+(((-1.0)*r00*x5534))+x5531+(((-1.0)*x5531*x5533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5530*x5531))+x5529+(((-1.0)*r00*x5532))+(((-1.0)*x5529*x5533))+((r01*x5534))))+IKsqr(((((-1.0)*r01*x5532))+((x5529*x5530))+(((-1.0)*r00*x5534))+x5531+(((-1.0)*x5531*x5533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x5530*x5531))+x5529+(((-1.0)*r00*x5532))+(((-1.0)*x5529*x5533))+((r01*x5534))), ((((-1.0)*r01*x5532))+((x5529*x5530))+(((-1.0)*r00*x5534))+x5531+(((-1.0)*x5531*x5533))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5535=IKcos(j9);
IkReal x5536=(r00*x5535);
IkReal x5537=(cj4*x5536);
IkReal x5538=IKsin(j9);
IkReal x5539=(r00*x5538);
IkReal x5540=(sj4*x5539);
IkReal x5541=(r01*x5535);
IkReal x5542=(sj4*x5541);
IkReal x5543=((1.0)*cj4);
IkReal x5544=(r01*x5538);
IkReal x5545=(sj4*x5536);
IkReal x5546=((1.0)*sj4);
IkReal x5547=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5543*x5544))+x5540+x5542+x5537);
evalcond[1]=((((-1.0)*x5544*x5546))+(((-1.0)*x5541*x5543))+x5545+(((-1.0)*x5539*x5543)));
evalcond[2]=((((-0.03431)*x5537))+((px*sj4))+(((-1.0)*py*x5543))+(((-0.03431)*x5542))+((x5544*x5547))+(((-0.03431)*x5540)));
evalcond[3]=((0.00337)+(((-0.03431)*x5545))+((x5539*x5547))+(((0.03431)*sj4*x5544))+((x5541*x5547))+(((-1.0)*py*x5546))+(((-1.0)*px*x5543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5548=((29.146021568056)*px);
IkReal x5549=(r00*x5548);
IkReal x5550=(cj4*sj4);
IkReal x5551=(r01*x5548);
IkReal x5552=((29.146021568056)*cj4*py*sj4);
IkReal x5553=cj4*cj4;
IkReal x5554=((29.146021568056)*py*x5553);
if( IKabs(((((-1.0)*r00*x5552))+(((-1.0)*x5549*x5553))+x5549+(((-1.0)*x5550*x5551))+((r01*x5554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5554))+((x5549*x5550))+(((-1.0)*r01*x5552))+x5551+(((-1.0)*x5551*x5553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x5552))+(((-1.0)*x5549*x5553))+x5549+(((-1.0)*x5550*x5551))+((r01*x5554))))+IKsqr(((((-1.0)*r00*x5554))+((x5549*x5550))+(((-1.0)*r01*x5552))+x5551+(((-1.0)*x5551*x5553))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x5552))+(((-1.0)*x5549*x5553))+x5549+(((-1.0)*x5550*x5551))+((r01*x5554))), ((((-1.0)*r00*x5554))+((x5549*x5550))+(((-1.0)*r01*x5552))+x5551+(((-1.0)*x5551*x5553))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5555=IKcos(j9);
IkReal x5556=(r00*x5555);
IkReal x5557=(cj4*x5556);
IkReal x5558=IKsin(j9);
IkReal x5559=(r00*x5558);
IkReal x5560=(sj4*x5559);
IkReal x5561=(r01*x5555);
IkReal x5562=(sj4*x5561);
IkReal x5563=((1.0)*cj4);
IkReal x5564=(r01*x5558);
IkReal x5565=(sj4*x5556);
IkReal x5566=((1.0)*sj4);
IkReal x5567=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5563*x5564))+x5560+x5562+x5557);
evalcond[1]=((((-1.0)*x5564*x5566))+x5565+(((-1.0)*x5561*x5563))+(((-1.0)*x5559*x5563)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x5562))+(((-1.0)*py*x5563))+((x5564*x5567))+(((-0.03431)*x5557))+(((-0.03431)*x5560)));
evalcond[3]=((0.00337)+((x5561*x5567))+(((-1.0)*py*x5566))+(((-0.03431)*x5565))+(((-1.0)*px*x5563))+(((0.03431)*sj4*x5564))+((x5559*x5567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5568=((29.146021568056)*px);
IkReal x5569=(r00*x5568);
IkReal x5570=(cj4*sj4);
IkReal x5571=(r01*x5568);
IkReal x5572=((29.146021568056)*cj4*py*sj4);
IkReal x5573=cj4*cj4;
IkReal x5574=((29.146021568056)*py*x5573);
if( IKabs(((((-1.0)*x5569*x5573))+(((-1.0)*x5570*x5571))+((r01*x5574))+(((-1.0)*r00*x5572))+x5569)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5572))+x5571+((x5569*x5570))+(((-1.0)*r00*x5574))+(((-1.0)*x5571*x5573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5569*x5573))+(((-1.0)*x5570*x5571))+((r01*x5574))+(((-1.0)*r00*x5572))+x5569))+IKsqr(((((-1.0)*r01*x5572))+x5571+((x5569*x5570))+(((-1.0)*r00*x5574))+(((-1.0)*x5571*x5573))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x5569*x5573))+(((-1.0)*x5570*x5571))+((r01*x5574))+(((-1.0)*r00*x5572))+x5569), ((((-1.0)*r01*x5572))+x5571+((x5569*x5570))+(((-1.0)*r00*x5574))+(((-1.0)*x5571*x5573))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5575=IKcos(j9);
IkReal x5576=(r00*x5575);
IkReal x5577=(cj4*x5576);
IkReal x5578=IKsin(j9);
IkReal x5579=(r00*x5578);
IkReal x5580=(sj4*x5579);
IkReal x5581=(r01*x5575);
IkReal x5582=(sj4*x5581);
IkReal x5583=((1.0)*cj4);
IkReal x5584=(r01*x5578);
IkReal x5585=(sj4*x5576);
IkReal x5586=((1.0)*sj4);
IkReal x5587=((0.03431)*cj4);
evalcond[0]=(x5577+x5580+x5582+(((-1.0)*x5583*x5584)));
evalcond[1]=((((-1.0)*x5579*x5583))+x5585+(((-1.0)*x5581*x5583))+(((-1.0)*x5584*x5586)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x5580))+(((-0.03431)*x5582))+(((-1.0)*py*x5583))+(((-0.03431)*x5577))+((x5584*x5587)));
evalcond[3]=((0.00373)+((x5581*x5587))+(((0.03431)*sj4*x5584))+((x5579*x5587))+(((-1.0)*px*x5583))+(((-1.0)*py*x5586))+(((-0.03431)*x5585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5588=((29.146021568056)*px);
IkReal x5589=(r00*x5588);
IkReal x5590=(cj4*sj4);
IkReal x5591=(r01*x5588);
IkReal x5592=((29.146021568056)*cj4*py*sj4);
IkReal x5593=cj4*cj4;
IkReal x5594=((29.146021568056)*py*x5593);
if( IKabs(((((-1.0)*r00*x5592))+(((-1.0)*x5590*x5591))+x5589+(((-1.0)*x5589*x5593))+((r01*x5594)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5594))+((x5589*x5590))+(((-1.0)*r01*x5592))+(((-1.0)*x5591*x5593))+x5591)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x5592))+(((-1.0)*x5590*x5591))+x5589+(((-1.0)*x5589*x5593))+((r01*x5594))))+IKsqr(((((-1.0)*r00*x5594))+((x5589*x5590))+(((-1.0)*r01*x5592))+(((-1.0)*x5591*x5593))+x5591))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x5592))+(((-1.0)*x5590*x5591))+x5589+(((-1.0)*x5589*x5593))+((r01*x5594))), ((((-1.0)*r00*x5594))+((x5589*x5590))+(((-1.0)*r01*x5592))+(((-1.0)*x5591*x5593))+x5591));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5595=IKcos(j9);
IkReal x5596=(r00*x5595);
IkReal x5597=(cj4*x5596);
IkReal x5598=IKsin(j9);
IkReal x5599=(r00*x5598);
IkReal x5600=(sj4*x5599);
IkReal x5601=(r01*x5595);
IkReal x5602=(sj4*x5601);
IkReal x5603=((1.0)*cj4);
IkReal x5604=(r01*x5598);
IkReal x5605=(sj4*x5596);
IkReal x5606=((1.0)*sj4);
IkReal x5607=((0.03431)*cj4);
evalcond[0]=(x5602+x5600+(((-1.0)*x5603*x5604))+x5597);
evalcond[1]=(x5605+(((-1.0)*x5604*x5606))+(((-1.0)*x5601*x5603))+(((-1.0)*x5599*x5603)));
evalcond[2]=(((px*sj4))+((x5604*x5607))+(((-0.03431)*x5600))+(((-1.0)*py*x5603))+(((-0.03431)*x5602))+(((-0.03431)*x5597)));
evalcond[3]=((0.00301)+(((0.03431)*sj4*x5604))+(((-1.0)*px*x5603))+(((-1.0)*py*x5606))+((x5601*x5607))+(((-0.03431)*x5605))+((x5599*x5607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5608=((29.146021568056)*px);
IkReal x5609=(r00*x5608);
IkReal x5610=(cj4*sj4);
IkReal x5611=(r01*x5608);
IkReal x5612=((29.146021568056)*cj4*py*sj4);
IkReal x5613=cj4*cj4;
IkReal x5614=((29.146021568056)*py*x5613);
if( IKabs(((((-1.0)*x5609*x5613))+x5609+(((-1.0)*r00*x5612))+(((-1.0)*x5610*x5611))+((r01*x5614)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5614))+x5611+(((-1.0)*x5611*x5613))+(((-1.0)*r01*x5612))+((x5609*x5610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5609*x5613))+x5609+(((-1.0)*r00*x5612))+(((-1.0)*x5610*x5611))+((r01*x5614))))+IKsqr(((((-1.0)*r00*x5614))+x5611+(((-1.0)*x5611*x5613))+(((-1.0)*r01*x5612))+((x5609*x5610))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x5609*x5613))+x5609+(((-1.0)*r00*x5612))+(((-1.0)*x5610*x5611))+((r01*x5614))), ((((-1.0)*r00*x5614))+x5611+(((-1.0)*x5611*x5613))+(((-1.0)*r01*x5612))+((x5609*x5610))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5615=IKcos(j9);
IkReal x5616=(r00*x5615);
IkReal x5617=(cj4*x5616);
IkReal x5618=IKsin(j9);
IkReal x5619=(r00*x5618);
IkReal x5620=(sj4*x5619);
IkReal x5621=(r01*x5615);
IkReal x5622=(sj4*x5621);
IkReal x5623=((1.0)*cj4);
IkReal x5624=(r01*x5618);
IkReal x5625=(sj4*x5616);
IkReal x5626=((1.0)*sj4);
IkReal x5627=((0.03431)*cj4);
evalcond[0]=(x5620+x5622+x5617+(((-1.0)*x5623*x5624)));
evalcond[1]=(x5625+(((-1.0)*x5619*x5623))+(((-1.0)*x5624*x5626))+(((-1.0)*x5621*x5623)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x5617))+((x5624*x5627))+(((-0.03431)*x5622))+(((-0.03431)*x5620))+(((-1.0)*py*x5623)));
evalcond[3]=((0.00337)+(((-1.0)*px*x5623))+(((-0.03431)*x5625))+(((-1.0)*py*x5626))+((x5619*x5627))+((x5621*x5627))+(((0.03431)*sj4*x5624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5628=((29.146021568056)*px);
IkReal x5629=(r00*x5628);
IkReal x5630=(cj4*sj4);
IkReal x5631=(r01*x5628);
IkReal x5632=((29.146021568056)*cj4*py*sj4);
IkReal x5633=cj4*cj4;
IkReal x5634=((29.146021568056)*py*x5633);
if( IKabs((x5629+((r01*x5634))+(((-1.0)*r00*x5632))+(((-1.0)*x5629*x5633))+(((-1.0)*x5630*x5631)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5632))+x5631+(((-1.0)*x5631*x5633))+((x5629*x5630))+(((-1.0)*r00*x5634)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5629+((r01*x5634))+(((-1.0)*r00*x5632))+(((-1.0)*x5629*x5633))+(((-1.0)*x5630*x5631))))+IKsqr(((((-1.0)*r01*x5632))+x5631+(((-1.0)*x5631*x5633))+((x5629*x5630))+(((-1.0)*r00*x5634))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x5629+((r01*x5634))+(((-1.0)*r00*x5632))+(((-1.0)*x5629*x5633))+(((-1.0)*x5630*x5631))), ((((-1.0)*r01*x5632))+x5631+(((-1.0)*x5631*x5633))+((x5629*x5630))+(((-1.0)*r00*x5634))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5635=IKcos(j9);
IkReal x5636=(r00*x5635);
IkReal x5637=(cj4*x5636);
IkReal x5638=IKsin(j9);
IkReal x5639=(r00*x5638);
IkReal x5640=(sj4*x5639);
IkReal x5641=(r01*x5635);
IkReal x5642=(sj4*x5641);
IkReal x5643=((1.0)*cj4);
IkReal x5644=(r01*x5638);
IkReal x5645=(sj4*x5636);
IkReal x5646=((1.0)*sj4);
IkReal x5647=((0.03431)*cj4);
evalcond[0]=(x5637+x5642+x5640+(((-1.0)*x5643*x5644)));
evalcond[1]=((((-1.0)*x5644*x5646))+(((-1.0)*x5639*x5643))+(((-1.0)*x5641*x5643))+x5645);
evalcond[2]=(((px*sj4))+(((-0.03431)*x5642))+((x5644*x5647))+(((-0.03431)*x5637))+(((-1.0)*py*x5643))+(((-0.03431)*x5640)));
evalcond[3]=((0.00337)+(((-0.03431)*x5645))+(((-1.0)*py*x5646))+(((-1.0)*px*x5643))+(((0.03431)*sj4*x5644))+((x5639*x5647))+((x5641*x5647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5648=((0.0982220926843486)*cj4);
IkReal x5649=((29.146021568056)*py);
IkReal x5650=(r01*x5649);
IkReal x5651=((0.0982220926843486)*sj4);
IkReal x5652=((29.146021568056)*cj4*px*sj4);
IkReal x5653=(cj4*sj4);
IkReal x5654=(r00*x5649);
IkReal x5655=cj4*cj4;
IkReal x5656=((29.146021568056)*px*x5655);
if( IKabs((((r01*x5652))+(((-1.0)*r01*x5651))+(((-1.0)*x5650*x5655))+((r00*x5656))+(((-1.0)*r00*x5648))+((x5653*x5654))+x5650)) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x5656))+(((-1.0)*x5654))+(((-1.0)*r00*x5652))+((x5654*x5655))+((r00*x5651))+(((-1.0)*r01*x5648))+((x5650*x5653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5652))+(((-1.0)*r01*x5651))+(((-1.0)*x5650*x5655))+((r00*x5656))+(((-1.0)*r00*x5648))+((x5653*x5654))+x5650))+IKsqr((((r01*x5656))+(((-1.0)*x5654))+(((-1.0)*r00*x5652))+((x5654*x5655))+((r00*x5651))+(((-1.0)*r01*x5648))+((x5650*x5653))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x5652))+(((-1.0)*r01*x5651))+(((-1.0)*x5650*x5655))+((r00*x5656))+(((-1.0)*r00*x5648))+((x5653*x5654))+x5650), (((r01*x5656))+(((-1.0)*x5654))+(((-1.0)*r00*x5652))+((x5654*x5655))+((r00*x5651))+(((-1.0)*r01*x5648))+((x5650*x5653))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5657=IKcos(j9);
IkReal x5658=(r00*x5657);
IkReal x5659=(cj4*x5658);
IkReal x5660=IKsin(j9);
IkReal x5661=(r00*x5660);
IkReal x5662=(sj4*x5661);
IkReal x5663=(r01*x5657);
IkReal x5664=(sj4*x5663);
IkReal x5665=((1.0)*cj4);
IkReal x5666=(r01*x5660);
IkReal x5667=(sj4*x5658);
IkReal x5668=((1.0)*sj4);
IkReal x5669=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5665*x5666))+x5664+x5662+x5659);
evalcond[1]=((((-1.0)*x5666*x5668))+(((-1.0)*x5661*x5665))+(((-1.0)*x5663*x5665))+x5667);
evalcond[2]=((-0.00036)+((px*sj4))+((x5666*x5669))+(((-1.0)*py*x5665))+(((-0.03431)*x5664))+(((-0.03431)*x5662))+(((-0.03431)*x5659)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x5666))+((x5663*x5669))+(((-0.03431)*x5667))+(((-1.0)*px*x5665))+(((-1.0)*py*x5668))+((x5661*x5669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5670=((0.0982220926843486)*cj4);
IkReal x5671=((29.146021568056)*py);
IkReal x5672=(r01*x5671);
IkReal x5673=((0.0982220926843486)*sj4);
IkReal x5674=((29.146021568056)*cj4*px*sj4);
IkReal x5675=(cj4*sj4);
IkReal x5676=(r00*x5671);
IkReal x5677=cj4*cj4;
IkReal x5678=((29.146021568056)*px*x5677);
if( IKabs((x5672+((x5675*x5676))+(((-1.0)*r00*x5670))+((r01*x5674))+((r00*x5678))+(((-1.0)*x5672*x5677))+(((-1.0)*r01*x5673)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5676))+((x5676*x5677))+(((-1.0)*r00*x5674))+((x5672*x5675))+((r00*x5673))+((r01*x5678))+(((-1.0)*r01*x5670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5672+((x5675*x5676))+(((-1.0)*r00*x5670))+((r01*x5674))+((r00*x5678))+(((-1.0)*x5672*x5677))+(((-1.0)*r01*x5673))))+IKsqr(((((-1.0)*x5676))+((x5676*x5677))+(((-1.0)*r00*x5674))+((x5672*x5675))+((r00*x5673))+((r01*x5678))+(((-1.0)*r01*x5670))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x5672+((x5675*x5676))+(((-1.0)*r00*x5670))+((r01*x5674))+((r00*x5678))+(((-1.0)*x5672*x5677))+(((-1.0)*r01*x5673))), ((((-1.0)*x5676))+((x5676*x5677))+(((-1.0)*r00*x5674))+((x5672*x5675))+((r00*x5673))+((r01*x5678))+(((-1.0)*r01*x5670))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5679=IKcos(j9);
IkReal x5680=(r00*x5679);
IkReal x5681=(cj4*x5680);
IkReal x5682=IKsin(j9);
IkReal x5683=(r00*x5682);
IkReal x5684=(sj4*x5683);
IkReal x5685=(r01*x5679);
IkReal x5686=(sj4*x5685);
IkReal x5687=((1.0)*cj4);
IkReal x5688=(r01*x5682);
IkReal x5689=(sj4*x5680);
IkReal x5690=((1.0)*sj4);
IkReal x5691=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5687*x5688))+x5681+x5686+x5684);
evalcond[1]=((((-1.0)*x5685*x5687))+(((-1.0)*x5688*x5690))+(((-1.0)*x5683*x5687))+x5689);
evalcond[2]=((0.00036)+((px*sj4))+(((-0.03431)*x5684))+(((-1.0)*py*x5687))+(((-0.03431)*x5686))+((x5688*x5691))+(((-0.03431)*x5681)));
evalcond[3]=((0.00337)+(((-1.0)*px*x5687))+(((-0.03431)*x5689))+((x5683*x5691))+((x5685*x5691))+(((0.03431)*sj4*x5688))+(((-1.0)*py*x5690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5692=(r00*sj6);
IkReal x5693=(r01*sj6);
CheckValue<IkReal> x5694 = IKatan2WithCheck(IkReal((((sj4*x5692))+(((-1.0)*cj4*x5693)))),(((cj4*x5692))+((sj4*x5693))),IKFAST_ATAN2_MAGTHRESH);
if(!x5694.valid){
continue;
}
CheckValue<IkReal> x5695=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x5695.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x5694.value)+(((-1.0)*(1.5707963267949)*(x5695.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x5696=IKcos(j9);
IkReal x5697=(r00*x5696);
IkReal x5698=(cj4*x5697);
IkReal x5699=IKsin(j9);
IkReal x5700=(r00*x5699);
IkReal x5701=(sj4*x5700);
IkReal x5702=(r01*x5696);
IkReal x5703=(sj4*x5702);
IkReal x5704=((1.0)*cj4);
IkReal x5705=(r01*x5699);
IkReal x5706=(sj4*x5697);
IkReal x5707=(x5700*x5704);
IkReal x5708=(x5702*x5704);
IkReal x5709=((1.0)*sj4);
IkReal x5710=(x5705*x5709);
IkReal x5711=(cj4*r01*x5699);
IkReal x5712=((1.0)*cj4*r00*x5696);
IkReal x5713=((1.0)*cj8*sj4);
IkReal x5714=((-1.0)*(((1.0)*sj6)));
IkReal x5715=((1.0)*sj4*sj8);
IkReal x5716=((0.03431)*cj4);
evalcond[0]=(x5698+(((-1.0)*x5704*x5705))+x5701+x5703);
evalcond[1]=((((-1.0)*x5708))+(((-1.0)*x5707))+(((-1.0)*x5710))+x5706);
evalcond[2]=(((cj8*x5711))+(((-1.0)*x5700*x5713))+cj6+(((-1.0)*cj8*x5712))+(((-1.0)*x5702*x5713)));
evalcond[3]=((((-1.0)*sj8*x5712))+((sj8*x5711))+(((-1.0)*x5700*x5715))+x5714+(((-1.0)*x5702*x5715)));
evalcond[4]=((((-1.0)*sj8*x5707))+(((-1.0)*sj8*x5710))+(((-1.0)*(1.0)*cj6))+(((-1.0)*sj8*x5708))+((sj8*x5706)));
evalcond[5]=((((-1.0)*cj8*x5710))+x5714+(((-1.0)*cj8*x5707))+(((-1.0)*cj8*x5708))+((cj8*x5706)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x5701))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x5703))+((x5705*x5716))+(((-1.0)*py*x5704))+(((-0.03431)*x5698)));
evalcond[7]=((0.00337)+(((-0.03431)*x5706))+(((0.00036)*cj6))+(((0.03431)*sj4*x5705))+((x5700*x5716))+((x5702*x5716))+(((-1.0)*px*x5704))+(((-1.0)*py*x5709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5717=(cj4*sj6);
IkReal x5718=(sj4*sj6);
CheckValue<IkReal> x5719 = IKatan2WithCheck(IkReal((((r01*x5718))+((r00*x5717)))),(((r01*x5717))+(((-1.0)*r00*x5718))),IKFAST_ATAN2_MAGTHRESH);
if(!x5719.valid){
continue;
}
CheckValue<IkReal> x5720=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x5720.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x5719.value)+(((-1.0)*(1.5707963267949)*(x5720.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x5721=IKcos(j9);
IkReal x5722=(r00*x5721);
IkReal x5723=(cj4*x5722);
IkReal x5724=IKsin(j9);
IkReal x5725=(r00*x5724);
IkReal x5726=(sj4*x5725);
IkReal x5727=(r01*x5721);
IkReal x5728=(sj4*x5727);
IkReal x5729=((1.0)*cj4);
IkReal x5730=(r01*x5724);
IkReal x5731=(sj4*x5722);
IkReal x5732=(x5725*x5729);
IkReal x5733=(x5727*x5729);
IkReal x5734=((1.0)*sj4);
IkReal x5735=(x5730*x5734);
IkReal x5736=(cj4*r01*x5724);
IkReal x5737=((1.0)*cj4*r00*x5721);
IkReal x5738=((1.0)*cj8*sj4);
IkReal x5739=((-1.0)*(((1.0)*sj6)));
IkReal x5740=((1.0)*sj4*sj8);
IkReal x5741=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5729*x5730))+x5726+x5723+x5728);
evalcond[1]=((((-1.0)*x5735))+(((-1.0)*x5733))+(((-1.0)*x5732))+x5731);
evalcond[2]=(((cj8*x5736))+cj6+(((-1.0)*x5727*x5738))+(((-1.0)*cj8*x5737))+(((-1.0)*x5725*x5738)));
evalcond[3]=((((-1.0)*x5725*x5740))+(((-1.0)*x5727*x5740))+(((-1.0)*sj8*x5737))+((sj8*x5736))+x5739);
evalcond[4]=((((-1.0)*sj8*x5732))+(((-1.0)*sj8*x5733))+(((-1.0)*(1.0)*cj6))+((sj8*x5731))+(((-1.0)*sj8*x5735)));
evalcond[5]=(((cj8*x5731))+(((-1.0)*cj8*x5732))+(((-1.0)*cj8*x5735))+x5739+(((-1.0)*cj8*x5733)));
evalcond[6]=(((px*sj4))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x5728))+(((-1.0)*py*x5729))+((x5730*x5741))+(((-0.03431)*x5726))+(((-0.03431)*x5723)));
evalcond[7]=((0.00337)+((x5725*x5741))+(((-0.03431)*x5731))+(((0.03431)*sj4*x5730))+(((-1.0)*px*x5729))+(((0.00036)*cj6))+(((-1.0)*py*x5734))+((x5727*x5741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5742=(cj4*cj6);
IkReal x5743=(cj6*sj4);
CheckValue<IkReal> x5744=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x5744.valid){
continue;
}
CheckValue<IkReal> x5745 = IKatan2WithCheck(IkReal((((r01*x5743))+((r00*x5742)))),((((-1.0)*r00*x5743))+((r01*x5742))),IKFAST_ATAN2_MAGTHRESH);
if(!x5745.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x5744.value)))+(x5745.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x5746=IKcos(j9);
IkReal x5747=(r00*x5746);
IkReal x5748=(cj4*x5747);
IkReal x5749=IKsin(j9);
IkReal x5750=(r00*x5749);
IkReal x5751=(sj4*x5750);
IkReal x5752=(r01*x5746);
IkReal x5753=(sj4*x5752);
IkReal x5754=((1.0)*cj4);
IkReal x5755=(r01*x5749);
IkReal x5756=(sj4*x5747);
IkReal x5757=(x5750*x5754);
IkReal x5758=(x5752*x5754);
IkReal x5759=((1.0)*sj4);
IkReal x5760=(x5755*x5759);
IkReal x5761=(cj4*r01*x5749);
IkReal x5762=((1.0)*cj4*r00*x5746);
IkReal x5763=((1.0)*cj8*sj4);
IkReal x5764=((-1.0)*(((1.0)*sj6)));
IkReal x5765=((1.0)*sj4*sj8);
IkReal x5766=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5754*x5755))+x5753+x5751+x5748);
evalcond[1]=((((-1.0)*x5758))+(((-1.0)*x5757))+x5756+(((-1.0)*x5760)));
evalcond[2]=((((-1.0)*x5750*x5763))+(((-1.0)*x5752*x5763))+cj6+(((-1.0)*cj8*x5762))+((cj8*x5761)));
evalcond[3]=((((-1.0)*x5752*x5765))+(((-1.0)*sj8*x5762))+((sj8*x5761))+(((-1.0)*x5750*x5765))+x5764);
evalcond[4]=((((-1.0)*sj8*x5760))+((sj8*x5756))+(((-1.0)*(1.0)*cj6))+(((-1.0)*sj8*x5757))+(((-1.0)*sj8*x5758)));
evalcond[5]=(((cj8*x5756))+(((-1.0)*cj8*x5757))+x5764+(((-1.0)*cj8*x5760))+(((-1.0)*cj8*x5758)));
evalcond[6]=(((px*sj4))+((x5755*x5766))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x5753))+(((-0.03431)*x5748))+(((-0.03431)*x5751))+(((-1.0)*py*x5754)));
evalcond[7]=((0.00337)+(((0.03431)*sj4*x5755))+(((-1.0)*px*x5754))+(((0.00036)*cj6))+((x5752*x5766))+(((-1.0)*py*x5759))+((x5750*x5766))+(((-0.03431)*x5756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x5767=(cj8*r00);
CheckValue<IkReal> x5771 = IKatan2WithCheck(IkReal((px*x5767)),(py*x5767),IKFAST_ATAN2_MAGTHRESH);
if(!x5771.valid){
continue;
}
IkReal x5768=((-1.0)*(x5771.value));
IkReal x5769=((cj8*cj8)*(r00*r00));
if(((((x5769*(px*px)))+((x5769*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x5772=IKPowWithIntegerCheck(IKabs(IKsqrt((((x5769*(px*px)))+((x5769*(py*py)))))),-1);
if(!x5772.valid){
continue;
}
if( (((x5772.value)*(((((0.03431)*r00*sj6))+(((-0.00337)*x5767))+(((-0.00036)*cj6*x5767)))))) < -1-IKFAST_SINCOS_THRESH || (((x5772.value)*(((((0.03431)*r00*sj6))+(((-0.00337)*x5767))+(((-0.00036)*cj6*x5767)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x5770=IKasin(((x5772.value)*(((((0.03431)*r00*sj6))+(((-0.00337)*x5767))+(((-0.00036)*cj6*x5767))))));
j4array[0]=((((-1.0)*x5770))+x5768);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x5768+x5770);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x5773=((0.03431)*cj6);
IkReal x5774=(r00*sj8);
IkReal x5775=(px*(IKcos(j4)));
IkReal x5776=(py*(IKsin(j4)));
IkReal x5777=((0.00337)*r01);
IkReal x5778=((0.00036)*cj6*r01);
IkReal x5779=((1.0)*cj8*r01);
IkReal x5780=((1.0)*r01*sj8);
evalcond[0]=(((r00*x5773))+((x5774*x5775))+((x5774*x5776))+(((-0.00337)*x5774))+(((-0.00036)*cj6*x5774)));
evalcond[1]=(((cj8*x5777))+(((-1.0)*(0.03431)*r01*sj6))+(((-1.0)*x5775*x5779))+((cj8*x5778))+(((-1.0)*x5776*x5779)));
evalcond[2]=((((-1.0)*x5775*x5780))+((sj8*x5778))+(((-1.0)*r01*x5773))+((sj8*x5777))+(((-1.0)*x5776*x5780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x5781=((1.0)*r00);
IkReal x5782=(((py*r01))+((px*r00)));
IkReal x5783=(px*r01);
IkReal x5784=(pz*r01);
IkReal x5785=((-1.0)*pz*x5781);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5781);
r10=r01;
npx=x5782;
npy=(x5783+(((-1.0)*py*x5781)));
npz=(pz*r22);
rxp0_0=x5784;
rxp0_1=x5785;
rxp0_2=((((-1.0)*x5783))+((py*r00)));
rxp1_0=x5785;
rxp1_1=((-1.0)*x5784);
rxp1_2=x5782;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=cj6;
j9eval[3]=((sj4*sj4)+(cj4*cj4));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x5786=((1.0)*r00);
IkReal x5787=(((py*r01))+((px*r00)));
IkReal x5788=(px*r01);
IkReal x5789=(pz*r01);
IkReal x5790=((-1.0)*pz*x5786);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5786);
r10=r01;
npx=x5787;
npy=((((-1.0)*py*x5786))+x5788);
npz=(pz*r22);
rxp0_0=x5789;
rxp0_1=x5790;
rxp0_2=((((-1.0)*x5788))+((py*r00)));
rxp1_0=x5790;
rxp1_1=((-1.0)*x5789);
rxp1_2=x5787;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=cj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x5791=((1.0)*r00);
IkReal x5792=(((py*r01))+((px*r00)));
IkReal x5793=(px*r01);
IkReal x5794=(pz*r01);
IkReal x5795=((-1.0)*pz*x5791);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x5791);
r10=r01;
npx=x5792;
npy=((((-1.0)*py*x5791))+x5793);
npz=(pz*r22);
rxp0_0=x5794;
rxp0_1=x5795;
rxp0_2=((((-1.0)*x5793))+((py*r00)));
rxp1_0=x5795;
rxp1_1=((-1.0)*x5794);
rxp1_2=x5792;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5796=((29.146021568056)*px);
IkReal x5797=(r00*x5796);
IkReal x5798=(cj4*sj4);
IkReal x5799=(r01*x5796);
IkReal x5800=((29.146021568056)*cj4*py*sj4);
IkReal x5801=cj4*cj4;
IkReal x5802=((29.146021568056)*py*x5801);
if( IKabs((((r01*x5802))+(((-1.0)*r00*x5800))+x5797+(((-1.0)*x5798*x5799))+(((-1.0)*x5797*x5801)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5802))+(((-1.0)*r01*x5800))+((x5797*x5798))+x5799+(((-1.0)*x5799*x5801)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5802))+(((-1.0)*r00*x5800))+x5797+(((-1.0)*x5798*x5799))+(((-1.0)*x5797*x5801))))+IKsqr(((((-1.0)*r00*x5802))+(((-1.0)*r01*x5800))+((x5797*x5798))+x5799+(((-1.0)*x5799*x5801))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x5802))+(((-1.0)*r00*x5800))+x5797+(((-1.0)*x5798*x5799))+(((-1.0)*x5797*x5801))), ((((-1.0)*r00*x5802))+(((-1.0)*r01*x5800))+((x5797*x5798))+x5799+(((-1.0)*x5799*x5801))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5803=IKcos(j9);
IkReal x5804=(r00*x5803);
IkReal x5805=(cj4*x5804);
IkReal x5806=IKsin(j9);
IkReal x5807=(r00*x5806);
IkReal x5808=(sj4*x5807);
IkReal x5809=(r01*x5803);
IkReal x5810=(sj4*x5809);
IkReal x5811=((1.0)*cj4);
IkReal x5812=(r01*x5806);
IkReal x5813=(sj4*x5804);
IkReal x5814=((1.0)*sj4);
IkReal x5815=((0.03431)*cj4);
evalcond[0]=(x5810+(((-1.0)*x5811*x5812))+x5805+x5808);
evalcond[1]=((((-1.0)*x5809*x5811))+x5813+(((-1.0)*x5807*x5811))+(((-1.0)*x5812*x5814)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x5811))+(((-0.03431)*x5808))+(((-0.03431)*x5805))+(((-0.03431)*x5810))+((x5812*x5815)));
evalcond[3]=((0.00337)+(((-1.0)*px*x5811))+(((-1.0)*py*x5814))+((x5809*x5815))+((x5807*x5815))+(((0.03431)*sj4*x5812))+(((-0.03431)*x5813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5816=((29.146021568056)*px);
IkReal x5817=(r00*x5816);
IkReal x5818=(cj4*sj4);
IkReal x5819=(r01*x5816);
IkReal x5820=((29.146021568056)*cj4*py*sj4);
IkReal x5821=cj4*cj4;
IkReal x5822=((29.146021568056)*py*x5821);
if( IKabs((x5817+((r01*x5822))+(((-1.0)*x5818*x5819))+(((-1.0)*x5817*x5821))+(((-1.0)*r00*x5820)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5822))+x5819+((x5817*x5818))+(((-1.0)*x5819*x5821))+(((-1.0)*r01*x5820)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5817+((r01*x5822))+(((-1.0)*x5818*x5819))+(((-1.0)*x5817*x5821))+(((-1.0)*r00*x5820))))+IKsqr(((((-1.0)*r00*x5822))+x5819+((x5817*x5818))+(((-1.0)*x5819*x5821))+(((-1.0)*r01*x5820))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x5817+((r01*x5822))+(((-1.0)*x5818*x5819))+(((-1.0)*x5817*x5821))+(((-1.0)*r00*x5820))), ((((-1.0)*r00*x5822))+x5819+((x5817*x5818))+(((-1.0)*x5819*x5821))+(((-1.0)*r01*x5820))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5823=IKcos(j9);
IkReal x5824=(r00*x5823);
IkReal x5825=(cj4*x5824);
IkReal x5826=IKsin(j9);
IkReal x5827=(r00*x5826);
IkReal x5828=(sj4*x5827);
IkReal x5829=(r01*x5823);
IkReal x5830=(sj4*x5829);
IkReal x5831=((1.0)*cj4);
IkReal x5832=(r01*x5826);
IkReal x5833=(sj4*x5824);
IkReal x5834=((1.0)*sj4);
IkReal x5835=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5831*x5832))+x5828+x5825+x5830);
evalcond[1]=((((-1.0)*x5829*x5831))+(((-1.0)*x5832*x5834))+(((-1.0)*x5827*x5831))+x5833);
evalcond[2]=(((px*sj4))+(((-0.03431)*x5830))+(((-0.03431)*x5828))+(((-0.03431)*x5825))+(((-1.0)*py*x5831))+((x5832*x5835)));
evalcond[3]=((0.00337)+(((-1.0)*px*x5831))+((x5829*x5835))+(((0.03431)*sj4*x5832))+(((-0.03431)*x5833))+((x5827*x5835))+(((-1.0)*py*x5834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5836=((29.146021568056)*px);
IkReal x5837=(r00*x5836);
IkReal x5838=(cj4*sj4);
IkReal x5839=(r01*x5836);
IkReal x5840=((29.146021568056)*cj4*py*sj4);
IkReal x5841=cj4*cj4;
IkReal x5842=((29.146021568056)*py*x5841);
if( IKabs(((((-1.0)*x5838*x5839))+(((-1.0)*x5837*x5841))+(((-1.0)*r00*x5840))+((r01*x5842))+x5837)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5842))+((x5837*x5838))+(((-1.0)*r01*x5840))+(((-1.0)*x5839*x5841))+x5839)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5838*x5839))+(((-1.0)*x5837*x5841))+(((-1.0)*r00*x5840))+((r01*x5842))+x5837))+IKsqr(((((-1.0)*r00*x5842))+((x5837*x5838))+(((-1.0)*r01*x5840))+(((-1.0)*x5839*x5841))+x5839))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x5838*x5839))+(((-1.0)*x5837*x5841))+(((-1.0)*r00*x5840))+((r01*x5842))+x5837), ((((-1.0)*r00*x5842))+((x5837*x5838))+(((-1.0)*r01*x5840))+(((-1.0)*x5839*x5841))+x5839));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5843=IKcos(j9);
IkReal x5844=(r00*x5843);
IkReal x5845=(cj4*x5844);
IkReal x5846=IKsin(j9);
IkReal x5847=(r00*x5846);
IkReal x5848=(sj4*x5847);
IkReal x5849=(r01*x5843);
IkReal x5850=(sj4*x5849);
IkReal x5851=((1.0)*cj4);
IkReal x5852=(r01*x5846);
IkReal x5853=(sj4*x5844);
IkReal x5854=((1.0)*sj4);
IkReal x5855=((0.03431)*cj4);
evalcond[0]=(x5848+x5845+x5850+(((-1.0)*x5851*x5852)));
evalcond[1]=((((-1.0)*x5849*x5851))+x5853+(((-1.0)*x5852*x5854))+(((-1.0)*x5847*x5851)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x5848))+(((-1.0)*py*x5851))+(((-0.03431)*x5850))+(((-0.03431)*x5845))+((x5852*x5855)));
evalcond[3]=((0.00373)+(((0.03431)*sj4*x5852))+((x5847*x5855))+(((-0.03431)*x5853))+((x5849*x5855))+(((-1.0)*py*x5854))+(((-1.0)*px*x5851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5856=((29.146021568056)*px);
IkReal x5857=(r00*x5856);
IkReal x5858=(cj4*sj4);
IkReal x5859=(r01*x5856);
IkReal x5860=((29.146021568056)*cj4*py*sj4);
IkReal x5861=cj4*cj4;
IkReal x5862=((29.146021568056)*py*x5861);
if( IKabs((((r01*x5862))+(((-1.0)*x5858*x5859))+(((-1.0)*x5857*x5861))+(((-1.0)*r00*x5860))+x5857)) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5857*x5858))+(((-1.0)*r00*x5862))+(((-1.0)*r01*x5860))+x5859+(((-1.0)*x5859*x5861)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5862))+(((-1.0)*x5858*x5859))+(((-1.0)*x5857*x5861))+(((-1.0)*r00*x5860))+x5857))+IKsqr((((x5857*x5858))+(((-1.0)*r00*x5862))+(((-1.0)*r01*x5860))+x5859+(((-1.0)*x5859*x5861))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x5862))+(((-1.0)*x5858*x5859))+(((-1.0)*x5857*x5861))+(((-1.0)*r00*x5860))+x5857), (((x5857*x5858))+(((-1.0)*r00*x5862))+(((-1.0)*r01*x5860))+x5859+(((-1.0)*x5859*x5861))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5863=IKcos(j9);
IkReal x5864=(r00*x5863);
IkReal x5865=(cj4*x5864);
IkReal x5866=IKsin(j9);
IkReal x5867=(r00*x5866);
IkReal x5868=(sj4*x5867);
IkReal x5869=(r01*x5863);
IkReal x5870=(sj4*x5869);
IkReal x5871=((1.0)*cj4);
IkReal x5872=(r01*x5866);
IkReal x5873=(sj4*x5864);
IkReal x5874=((1.0)*sj4);
IkReal x5875=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5871*x5872))+x5870+x5868+x5865);
evalcond[1]=((((-1.0)*x5867*x5871))+(((-1.0)*x5869*x5871))+x5873+(((-1.0)*x5872*x5874)));
evalcond[2]=((((-0.03431)*x5868))+((px*sj4))+(((-0.03431)*x5865))+(((-1.0)*py*x5871))+((x5872*x5875))+(((-0.03431)*x5870)));
evalcond[3]=((0.00301)+((x5869*x5875))+((x5867*x5875))+(((0.03431)*sj4*x5872))+(((-1.0)*px*x5871))+(((-1.0)*py*x5874))+(((-0.03431)*x5873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5876=((29.146021568056)*px);
IkReal x5877=(r00*x5876);
IkReal x5878=(cj4*sj4);
IkReal x5879=(r01*x5876);
IkReal x5880=((29.146021568056)*cj4*py*sj4);
IkReal x5881=cj4*cj4;
IkReal x5882=((29.146021568056)*py*x5881);
if( IKabs((x5877+(((-1.0)*x5878*x5879))+(((-1.0)*r00*x5880))+((r01*x5882))+(((-1.0)*x5877*x5881)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5882))+(((-1.0)*x5879*x5881))+((x5877*x5878))+x5879+(((-1.0)*r01*x5880)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5877+(((-1.0)*x5878*x5879))+(((-1.0)*r00*x5880))+((r01*x5882))+(((-1.0)*x5877*x5881))))+IKsqr(((((-1.0)*r00*x5882))+(((-1.0)*x5879*x5881))+((x5877*x5878))+x5879+(((-1.0)*r01*x5880))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x5877+(((-1.0)*x5878*x5879))+(((-1.0)*r00*x5880))+((r01*x5882))+(((-1.0)*x5877*x5881))), ((((-1.0)*r00*x5882))+(((-1.0)*x5879*x5881))+((x5877*x5878))+x5879+(((-1.0)*r01*x5880))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5883=IKcos(j9);
IkReal x5884=(r00*x5883);
IkReal x5885=(cj4*x5884);
IkReal x5886=IKsin(j9);
IkReal x5887=(r00*x5886);
IkReal x5888=(sj4*x5887);
IkReal x5889=(r01*x5883);
IkReal x5890=(sj4*x5889);
IkReal x5891=((1.0)*cj4);
IkReal x5892=(r01*x5886);
IkReal x5893=(sj4*x5884);
IkReal x5894=((1.0)*sj4);
IkReal x5895=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5891*x5892))+x5888+x5885+x5890);
evalcond[1]=((((-1.0)*x5892*x5894))+(((-1.0)*x5889*x5891))+x5893+(((-1.0)*x5887*x5891)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x5890))+((x5892*x5895))+(((-1.0)*py*x5891))+(((-0.03431)*x5888))+(((-0.03431)*x5885)));
evalcond[3]=((0.00337)+(((-0.03431)*x5893))+(((-1.0)*px*x5891))+((x5889*x5895))+(((-1.0)*py*x5894))+((x5887*x5895))+(((0.03431)*sj4*x5892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
evalcond[5]=cj6;
evalcond[6]=((-1.0)*(((1.0)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5896=((29.146021568056)*px);
IkReal x5897=(r00*x5896);
IkReal x5898=(cj4*sj4);
IkReal x5899=(r01*x5896);
IkReal x5900=((29.146021568056)*cj4*py*sj4);
IkReal x5901=cj4*cj4;
IkReal x5902=((29.146021568056)*py*x5901);
if( IKabs((((r01*x5902))+(((-1.0)*r00*x5900))+(((-1.0)*x5898*x5899))+(((-1.0)*x5897*x5901))+x5897)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5902))+(((-1.0)*x5899*x5901))+((x5897*x5898))+(((-1.0)*r01*x5900))+x5899)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5902))+(((-1.0)*r00*x5900))+(((-1.0)*x5898*x5899))+(((-1.0)*x5897*x5901))+x5897))+IKsqr(((((-1.0)*r00*x5902))+(((-1.0)*x5899*x5901))+((x5897*x5898))+(((-1.0)*r01*x5900))+x5899))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x5902))+(((-1.0)*r00*x5900))+(((-1.0)*x5898*x5899))+(((-1.0)*x5897*x5901))+x5897), ((((-1.0)*r00*x5902))+(((-1.0)*x5899*x5901))+((x5897*x5898))+(((-1.0)*r01*x5900))+x5899));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5903=IKcos(j9);
IkReal x5904=(r00*x5903);
IkReal x5905=(cj4*x5904);
IkReal x5906=IKsin(j9);
IkReal x5907=(r00*x5906);
IkReal x5908=(sj4*x5907);
IkReal x5909=(r01*x5903);
IkReal x5910=(sj4*x5909);
IkReal x5911=((1.0)*cj4);
IkReal x5912=(r01*x5906);
IkReal x5913=(sj4*x5904);
IkReal x5914=((1.0)*sj4);
IkReal x5915=((0.03431)*cj4);
evalcond[0]=(x5910+x5908+x5905+(((-1.0)*x5911*x5912)));
evalcond[1]=((((-1.0)*x5909*x5911))+x5913+(((-1.0)*x5907*x5911))+(((-1.0)*x5912*x5914)));
evalcond[2]=(((px*sj4))+((x5912*x5915))+(((-1.0)*py*x5911))+(((-0.03431)*x5910))+(((-0.03431)*x5905))+(((-0.03431)*x5908)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x5912))+(((-1.0)*px*x5911))+((x5907*x5915))+(((-1.0)*py*x5914))+(((-0.03431)*x5913))+((x5909*x5915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5916=((0.0982220926843486)*cj4);
IkReal x5917=((29.146021568056)*py);
IkReal x5918=(r01*x5917);
IkReal x5919=((0.0982220926843486)*sj4);
IkReal x5920=((29.146021568056)*cj4*px*sj4);
IkReal x5921=(cj4*sj4);
IkReal x5922=(r00*x5917);
IkReal x5923=cj4*cj4;
IkReal x5924=((29.146021568056)*px*x5923);
if( IKabs(((((-1.0)*x5918*x5923))+x5918+(((-1.0)*r01*x5919))+((r00*x5924))+((x5921*x5922))+(((-1.0)*r00*x5916))+((r01*x5920)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5920))+((x5918*x5921))+((x5922*x5923))+(((-1.0)*r01*x5916))+((r00*x5919))+((r01*x5924))+(((-1.0)*x5922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5918*x5923))+x5918+(((-1.0)*r01*x5919))+((r00*x5924))+((x5921*x5922))+(((-1.0)*r00*x5916))+((r01*x5920))))+IKsqr(((((-1.0)*r00*x5920))+((x5918*x5921))+((x5922*x5923))+(((-1.0)*r01*x5916))+((r00*x5919))+((r01*x5924))+(((-1.0)*x5922))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x5918*x5923))+x5918+(((-1.0)*r01*x5919))+((r00*x5924))+((x5921*x5922))+(((-1.0)*r00*x5916))+((r01*x5920))), ((((-1.0)*r00*x5920))+((x5918*x5921))+((x5922*x5923))+(((-1.0)*r01*x5916))+((r00*x5919))+((r01*x5924))+(((-1.0)*x5922))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5925=IKcos(j9);
IkReal x5926=(r00*x5925);
IkReal x5927=(cj4*x5926);
IkReal x5928=IKsin(j9);
IkReal x5929=(r00*x5928);
IkReal x5930=(sj4*x5929);
IkReal x5931=(r01*x5925);
IkReal x5932=(sj4*x5931);
IkReal x5933=((1.0)*cj4);
IkReal x5934=(r01*x5928);
IkReal x5935=(sj4*x5926);
IkReal x5936=((1.0)*sj4);
IkReal x5937=((0.03431)*cj4);
evalcond[0]=(x5932+x5930+x5927+(((-1.0)*x5933*x5934)));
evalcond[1]=((((-1.0)*x5929*x5933))+x5935+(((-1.0)*x5931*x5933))+(((-1.0)*x5934*x5936)));
evalcond[2]=((-0.00036)+((px*sj4))+((x5934*x5937))+(((-0.03431)*x5927))+(((-0.03431)*x5932))+(((-1.0)*py*x5933))+(((-0.03431)*x5930)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x5934))+(((-1.0)*py*x5936))+(((-1.0)*px*x5933))+(((-0.03431)*x5935))+((x5929*x5937))+((x5931*x5937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=-1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.4967)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5938=((0.0982220926843486)*cj4);
IkReal x5939=((29.146021568056)*py);
IkReal x5940=(r01*x5939);
IkReal x5941=((0.0982220926843486)*sj4);
IkReal x5942=((29.146021568056)*cj4*px*sj4);
IkReal x5943=(cj4*sj4);
IkReal x5944=(r00*x5939);
IkReal x5945=cj4*cj4;
IkReal x5946=((29.146021568056)*px*x5945);
if( IKabs(((((-1.0)*r01*x5941))+(((-1.0)*x5940*x5945))+x5940+((r00*x5946))+((r01*x5942))+(((-1.0)*r00*x5938))+((x5943*x5944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x5946))+((x5944*x5945))+((r00*x5941))+(((-1.0)*r00*x5942))+(((-1.0)*r01*x5938))+((x5940*x5943))+(((-1.0)*x5944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x5941))+(((-1.0)*x5940*x5945))+x5940+((r00*x5946))+((r01*x5942))+(((-1.0)*r00*x5938))+((x5943*x5944))))+IKsqr((((r01*x5946))+((x5944*x5945))+((r00*x5941))+(((-1.0)*r00*x5942))+(((-1.0)*r01*x5938))+((x5940*x5943))+(((-1.0)*x5944))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r01*x5941))+(((-1.0)*x5940*x5945))+x5940+((r00*x5946))+((r01*x5942))+(((-1.0)*r00*x5938))+((x5943*x5944))), (((r01*x5946))+((x5944*x5945))+((r00*x5941))+(((-1.0)*r00*x5942))+(((-1.0)*r01*x5938))+((x5940*x5943))+(((-1.0)*x5944))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x5947=IKcos(j9);
IkReal x5948=(r00*x5947);
IkReal x5949=(cj4*x5948);
IkReal x5950=IKsin(j9);
IkReal x5951=(r00*x5950);
IkReal x5952=(sj4*x5951);
IkReal x5953=(r01*x5947);
IkReal x5954=(sj4*x5953);
IkReal x5955=((1.0)*cj4);
IkReal x5956=(r01*x5950);
IkReal x5957=(sj4*x5948);
IkReal x5958=((1.0)*sj4);
IkReal x5959=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x5955*x5956))+x5949+x5952+x5954);
evalcond[1]=((((-1.0)*x5953*x5955))+(((-1.0)*x5956*x5958))+(((-1.0)*x5951*x5955))+x5957);
evalcond[2]=((0.00036)+((px*sj4))+(((-0.03431)*x5952))+(((-1.0)*py*x5955))+(((-0.03431)*x5954))+((x5956*x5959))+(((-0.03431)*x5949)));
evalcond[3]=((0.00337)+(((-1.0)*py*x5958))+((x5951*x5959))+(((-0.03431)*x5957))+(((0.03431)*sj4*x5956))+((x5953*x5959))+(((-1.0)*px*x5955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5960=(r00*sj6);
IkReal x5961=(r01*sj6);
CheckValue<IkReal> x5962=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x5962.valid){
continue;
}
CheckValue<IkReal> x5963 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x5961))+((sj4*x5960)))),(((cj4*x5960))+((sj4*x5961))),IKFAST_ATAN2_MAGTHRESH);
if(!x5963.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x5962.value)))+(x5963.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x5964=IKcos(j9);
IkReal x5965=(r00*x5964);
IkReal x5966=(cj4*x5965);
IkReal x5967=IKsin(j9);
IkReal x5968=(r00*x5967);
IkReal x5969=(sj4*x5968);
IkReal x5970=(r01*x5964);
IkReal x5971=(sj4*x5970);
IkReal x5972=((1.0)*cj4);
IkReal x5973=(r01*x5967);
IkReal x5974=(sj4*x5965);
IkReal x5975=(x5968*x5972);
IkReal x5976=(x5970*x5972);
IkReal x5977=((1.0)*sj4);
IkReal x5978=(x5973*x5977);
IkReal x5979=(cj4*r01*x5967);
IkReal x5980=((1.0)*cj4*r00*x5964);
IkReal x5981=((1.0)*cj8*sj4);
IkReal x5982=((-1.0)*(((1.0)*sj6)));
IkReal x5983=((1.0)*sj4*sj8);
IkReal x5984=((0.03431)*cj4);
evalcond[0]=(x5966+x5969+x5971+(((-1.0)*x5972*x5973)));
evalcond[1]=((((-1.0)*x5975))+(((-1.0)*x5978))+x5974+(((-1.0)*x5976)));
evalcond[2]=(((cj8*x5979))+(((-1.0)*cj8*x5980))+cj6+(((-1.0)*x5968*x5981))+(((-1.0)*x5970*x5981)));
evalcond[3]=((((-1.0)*sj8*x5980))+((sj8*x5979))+x5982+(((-1.0)*x5968*x5983))+(((-1.0)*x5970*x5983)));
evalcond[4]=((((-1.0)*(1.0)*cj6))+(((-1.0)*sj8*x5975))+(((-1.0)*sj8*x5978))+((sj8*x5974))+(((-1.0)*sj8*x5976)));
evalcond[5]=((((-1.0)*cj8*x5975))+(((-1.0)*cj8*x5976))+((cj8*x5974))+x5982+(((-1.0)*cj8*x5978)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x5969))+(((-0.03431)*x5971))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x5966))+(((-1.0)*py*x5972))+((x5973*x5984)));
evalcond[7]=((0.00337)+(((-1.0)*px*x5972))+(((-1.0)*py*x5977))+((x5968*x5984))+(((0.00036)*cj6))+((x5970*x5984))+(((-0.03431)*x5974))+(((0.03431)*sj4*x5973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x5985=(cj4*sj6);
IkReal x5986=(sj4*sj6);
CheckValue<IkReal> x5987 = IKatan2WithCheck(IkReal((((r00*x5985))+((r01*x5986)))),((((-1.0)*r00*x5986))+((r01*x5985))),IKFAST_ATAN2_MAGTHRESH);
if(!x5987.valid){
continue;
}
CheckValue<IkReal> x5988=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x5988.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x5987.value)+(((-1.0)*(1.5707963267949)*(x5988.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x5989=IKcos(j9);
IkReal x5990=(r00*x5989);
IkReal x5991=(cj4*x5990);
IkReal x5992=IKsin(j9);
IkReal x5993=(r00*x5992);
IkReal x5994=(sj4*x5993);
IkReal x5995=(r01*x5989);
IkReal x5996=(sj4*x5995);
IkReal x5997=((1.0)*cj4);
IkReal x5998=(r01*x5992);
IkReal x5999=(sj4*x5990);
IkReal x6000=(x5993*x5997);
IkReal x6001=(x5995*x5997);
IkReal x6002=((1.0)*sj4);
IkReal x6003=(x5998*x6002);
IkReal x6004=(cj4*r01*x5992);
IkReal x6005=((1.0)*cj4*r00*x5989);
IkReal x6006=((1.0)*cj8*sj4);
IkReal x6007=((-1.0)*(((1.0)*sj6)));
IkReal x6008=((1.0)*sj4*sj8);
IkReal x6009=((0.03431)*cj4);
evalcond[0]=(x5991+x5996+x5994+(((-1.0)*x5997*x5998)));
evalcond[1]=((((-1.0)*x6003))+(((-1.0)*x6001))+(((-1.0)*x6000))+x5999);
evalcond[2]=((((-1.0)*x5993*x6006))+((cj8*x6004))+(((-1.0)*x5995*x6006))+cj6+(((-1.0)*cj8*x6005)));
evalcond[3]=(((sj8*x6004))+(((-1.0)*sj8*x6005))+x6007+(((-1.0)*x5993*x6008))+(((-1.0)*x5995*x6008)));
evalcond[4]=(((sj8*x5999))+(((-1.0)*sj8*x6003))+(((-1.0)*(1.0)*cj6))+(((-1.0)*sj8*x6000))+(((-1.0)*sj8*x6001)));
evalcond[5]=((((-1.0)*cj8*x6000))+(((-1.0)*cj8*x6003))+(((-1.0)*cj8*x6001))+((cj8*x5999))+x6007);
evalcond[6]=(((px*sj4))+(((-0.03431)*x5991))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x5994))+(((-0.03431)*x5996))+(((-1.0)*py*x5997))+((x5998*x6009)));
evalcond[7]=((0.00337)+(((-0.03431)*x5999))+((x5995*x6009))+(((0.00036)*cj6))+(((0.03431)*sj4*x5998))+((x5993*x6009))+(((-1.0)*px*x5997))+(((-1.0)*py*x6002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6010=(cj4*cj6);
IkReal x6011=(cj6*sj4);
CheckValue<IkReal> x6012=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x6012.valid){
continue;
}
CheckValue<IkReal> x6013 = IKatan2WithCheck(IkReal((((r00*x6010))+((r01*x6011)))),(((r01*x6010))+(((-1.0)*r00*x6011))),IKFAST_ATAN2_MAGTHRESH);
if(!x6013.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x6012.value)))+(x6013.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x6014=IKcos(j9);
IkReal x6015=(r00*x6014);
IkReal x6016=(cj4*x6015);
IkReal x6017=IKsin(j9);
IkReal x6018=(r00*x6017);
IkReal x6019=(sj4*x6018);
IkReal x6020=(r01*x6014);
IkReal x6021=(sj4*x6020);
IkReal x6022=((1.0)*cj4);
IkReal x6023=(r01*x6017);
IkReal x6024=(sj4*x6015);
IkReal x6025=(x6018*x6022);
IkReal x6026=(x6020*x6022);
IkReal x6027=((1.0)*sj4);
IkReal x6028=(x6023*x6027);
IkReal x6029=(cj4*r01*x6017);
IkReal x6030=((1.0)*cj4*r00*x6014);
IkReal x6031=((1.0)*cj8*sj4);
IkReal x6032=((-1.0)*(((1.0)*sj6)));
IkReal x6033=((1.0)*sj4*sj8);
IkReal x6034=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6022*x6023))+x6021+x6019+x6016);
evalcond[1]=((((-1.0)*x6026))+(((-1.0)*x6025))+x6024+(((-1.0)*x6028)));
evalcond[2]=((((-1.0)*x6018*x6031))+(((-1.0)*x6020*x6031))+cj6+((cj8*x6029))+(((-1.0)*cj8*x6030)));
evalcond[3]=((((-1.0)*x6020*x6033))+x6032+(((-1.0)*sj8*x6030))+(((-1.0)*x6018*x6033))+((sj8*x6029)));
evalcond[4]=((((-1.0)*(1.0)*cj6))+((sj8*x6024))+(((-1.0)*sj8*x6025))+(((-1.0)*sj8*x6026))+(((-1.0)*sj8*x6028)));
evalcond[5]=((((-1.0)*cj8*x6028))+x6032+(((-1.0)*cj8*x6026))+(((-1.0)*cj8*x6025))+((cj8*x6024)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x6019))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x6021))+((x6023*x6034))+(((-0.03431)*x6016))+(((-1.0)*py*x6022)));
evalcond[7]=((0.00337)+((x6018*x6034))+(((0.00036)*cj6))+(((-1.0)*py*x6027))+(((-1.0)*px*x6022))+(((0.03431)*sj4*x6023))+(((-0.03431)*x6024))+((x6020*x6034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
evalcond[1]=1.0;
evalcond[2]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
j8array[0]=-1.5707963267949;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j4eval[2];
IkReal x6035=((1.0)*r00);
IkReal x6036=(((py*r01))+((px*r00)));
IkReal x6037=(px*r01);
IkReal x6038=(pz*r01);
IkReal x6039=((-1.0)*pz*x6035);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6035);
r10=r01;
npx=x6036;
npy=((((-1.0)*py*x6035))+x6037);
npz=(pz*r22);
rxp0_0=x6038;
rxp0_1=x6039;
rxp0_2=(((py*r00))+(((-1.0)*x6037)));
rxp1_0=x6039;
rxp1_1=((-1.0)*x6038);
rxp1_2=x6036;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x6040=(cj8*r01*sj8);
IkReal x6041=(((pp*x6040))+(((-1.0)*x6040*(pz*pz))));
j4eval[0]=x6041;
j4eval[1]=IKsign(x6041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6042=((1.0)*r00);
IkReal x6043=(((py*r01))+((px*r00)));
IkReal x6044=(px*r01);
IkReal x6045=(pz*r01);
IkReal x6046=((-1.0)*pz*x6042);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6042);
r10=r01;
npx=x6043;
npy=((((-1.0)*py*x6042))+x6044);
npz=(pz*r22);
rxp0_0=x6045;
rxp0_1=x6046;
rxp0_2=(((py*r00))+(((-1.0)*x6044)));
rxp1_0=x6046;
rxp1_1=((-1.0)*x6045);
rxp1_2=x6043;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x6047=(cj8*r00*sj8);
IkReal x6048=(((pp*x6047))+(((-1.0)*x6047*(pz*pz))));
j4eval[0]=x6048;
j4eval[1]=IKsign(x6048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6049=((1.0)*r00);
IkReal x6050=(((py*r01))+((px*r00)));
IkReal x6051=(px*r01);
IkReal x6052=(pz*r01);
IkReal x6053=((-1.0)*pz*x6049);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6049);
r10=r01;
npx=x6050;
npy=((((-1.0)*py*x6049))+x6051);
npz=(pz*r22);
rxp0_0=x6052;
rxp0_1=x6053;
rxp0_2=((((-1.0)*x6051))+((py*r00)));
rxp1_0=x6053;
rxp1_1=((-1.0)*x6052);
rxp1_2=x6050;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x6054=(cj8*r00*r01*sj8);
IkReal x6055=((((-1.0)*x6054*(pz*pz)))+((pp*x6054)));
j4eval[0]=x6055;
j4eval[1]=IKsign(x6055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x6056=((1.0)*r00);
IkReal x6057=(((py*r01))+((px*r00)));
IkReal x6058=(px*r01);
IkReal x6059=(pz*r01);
IkReal x6060=((-1.0)*pz*x6056);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6056);
r10=r01;
npx=x6057;
npy=((((-1.0)*py*x6056))+x6058);
npz=(pz*r22);
rxp0_0=x6059;
rxp0_1=x6060;
rxp0_2=(((py*r00))+(((-1.0)*x6058)));
rxp1_0=x6060;
rxp1_1=((-1.0)*x6059);
rxp1_2=x6057;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x6061=pz*pz;
j4eval[0]=((((-1.0)*x6061))+pp);
j4eval[1]=IKsign(((((-100000.0)*x6061))+(((100000.0)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6062=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x6062.valid){
continue;
}
CheckValue<IkReal> x6063 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x6063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6062.value)))+(x6063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x6064=IKcos(j4);
IkReal x6065=(r01*x6064);
IkReal x6066=((1.0)*px);
IkReal x6067=IKsin(j4);
IkReal x6068=(r01*x6067);
IkReal x6069=(r00*x6064);
IkReal x6070=(r00*x6067);
evalcond[0]=(((py*x6065))+(((-1.0)*x6066*x6068)));
evalcond[1]=(((py*x6069))+(((-1.0)*x6066*x6070)));
evalcond[2]=(((py*x6070))+(((-1.0)*(0.00337)*r00))+((px*x6069)));
evalcond[3]=((((-1.0)*py*x6068))+(((-1.0)*x6065*x6066))+(((0.00337)*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6071=((29.146021568056)*px);
IkReal x6072=(r00*x6071);
IkReal x6073=(cj4*sj4);
IkReal x6074=(r01*x6071);
IkReal x6075=((29.146021568056)*cj4*py*sj4);
IkReal x6076=cj4*cj4;
IkReal x6077=((29.146021568056)*py*x6076);
if( IKabs(((((-1.0)*r00*x6075))+((r01*x6077))+(((-1.0)*x6072*x6076))+(((-1.0)*x6073*x6074))+x6072)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6074*x6076))+((x6072*x6073))+(((-1.0)*r00*x6077))+(((-1.0)*r01*x6075))+x6074)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6075))+((r01*x6077))+(((-1.0)*x6072*x6076))+(((-1.0)*x6073*x6074))+x6072))+IKsqr(((((-1.0)*x6074*x6076))+((x6072*x6073))+(((-1.0)*r00*x6077))+(((-1.0)*r01*x6075))+x6074))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x6075))+((r01*x6077))+(((-1.0)*x6072*x6076))+(((-1.0)*x6073*x6074))+x6072), ((((-1.0)*x6074*x6076))+((x6072*x6073))+(((-1.0)*r00*x6077))+(((-1.0)*r01*x6075))+x6074));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6078=IKcos(j9);
IkReal x6079=(r00*x6078);
IkReal x6080=(cj4*x6079);
IkReal x6081=IKsin(j9);
IkReal x6082=(r00*x6081);
IkReal x6083=(sj4*x6082);
IkReal x6084=(r01*x6078);
IkReal x6085=(sj4*x6084);
IkReal x6086=((1.0)*cj4);
IkReal x6087=(r01*x6081);
IkReal x6088=(sj4*x6079);
IkReal x6089=((1.0)*sj4);
IkReal x6090=((0.03431)*cj4);
evalcond[0]=(x6083+x6085+x6080+(((-1.0)*x6086*x6087)));
evalcond[1]=(x6088+(((-1.0)*x6084*x6086))+(((-1.0)*x6087*x6089))+(((-1.0)*x6082*x6086)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x6085))+((x6087*x6090))+(((-1.0)*py*x6086))+(((-0.03431)*x6083))+(((-0.03431)*x6080)));
evalcond[3]=((0.00337)+((x6082*x6090))+(((-1.0)*py*x6089))+(((0.03431)*sj4*x6087))+(((-0.03431)*x6088))+(((-1.0)*px*x6086))+((x6084*x6090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x6091=((1.0)*r00);
IkReal x6092=(((py*r01))+((px*r00)));
IkReal x6093=(px*r01);
IkReal x6094=(pz*r01);
IkReal x6095=((-1.0)*pz*x6091);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6091);
r10=r01;
npx=x6092;
npy=((((-1.0)*py*x6091))+x6093);
npz=(pz*r22);
rxp0_0=x6094;
rxp0_1=x6095;
rxp0_2=((((-1.0)*x6093))+((py*r00)));
rxp1_0=x6095;
rxp1_1=((-1.0)*x6094);
rxp1_2=x6092;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x6096=pz*pz;
j4eval[0]=(pp+(((-1.0)*x6096)));
j4eval[1]=IKsign(((((-100000.0)*x6096))+(((100000.0)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6097=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x6097.valid){
continue;
}
CheckValue<IkReal> x6098 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x6098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6097.value)))+(x6098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x6099=IKcos(j4);
IkReal x6100=(r01*x6099);
IkReal x6101=((1.0)*px);
IkReal x6102=IKsin(j4);
IkReal x6103=(r01*x6102);
IkReal x6104=(r00*x6099);
IkReal x6105=(r00*x6102);
evalcond[0]=(((py*x6100))+(((-1.0)*x6101*x6103)));
evalcond[1]=(((py*x6104))+(((-1.0)*x6101*x6105)));
evalcond[2]=(((py*x6105))+(((-1.0)*(0.00337)*r00))+((px*x6104)));
evalcond[3]=((((-1.0)*py*x6103))+(((0.00337)*r01))+(((-1.0)*x6100*x6101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6106=((29.146021568056)*px);
IkReal x6107=(r00*x6106);
IkReal x6108=(cj4*sj4);
IkReal x6109=(r01*x6106);
IkReal x6110=((29.146021568056)*cj4*py*sj4);
IkReal x6111=cj4*cj4;
IkReal x6112=((29.146021568056)*py*x6111);
if( IKabs(((((-1.0)*x6107*x6111))+(((-1.0)*r00*x6110))+(((-1.0)*x6108*x6109))+((r01*x6112))+x6107)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6109*x6111))+(((-1.0)*r01*x6110))+(((-1.0)*r00*x6112))+((x6107*x6108))+x6109)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6107*x6111))+(((-1.0)*r00*x6110))+(((-1.0)*x6108*x6109))+((r01*x6112))+x6107))+IKsqr(((((-1.0)*x6109*x6111))+(((-1.0)*r01*x6110))+(((-1.0)*r00*x6112))+((x6107*x6108))+x6109))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6107*x6111))+(((-1.0)*r00*x6110))+(((-1.0)*x6108*x6109))+((r01*x6112))+x6107), ((((-1.0)*x6109*x6111))+(((-1.0)*r01*x6110))+(((-1.0)*r00*x6112))+((x6107*x6108))+x6109));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6113=IKcos(j9);
IkReal x6114=(r00*x6113);
IkReal x6115=(cj4*x6114);
IkReal x6116=IKsin(j9);
IkReal x6117=(r00*x6116);
IkReal x6118=(sj4*x6117);
IkReal x6119=(r01*x6113);
IkReal x6120=(sj4*x6119);
IkReal x6121=((1.0)*cj4);
IkReal x6122=(r01*x6116);
IkReal x6123=(sj4*x6114);
IkReal x6124=((1.0)*sj4);
IkReal x6125=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6121*x6122))+x6120+x6115+x6118);
evalcond[1]=((((-1.0)*x6119*x6121))+x6123+(((-1.0)*x6122*x6124))+(((-1.0)*x6117*x6121)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x6115))+((x6122*x6125))+(((-0.03431)*x6120))+(((-0.03431)*x6118))+(((-1.0)*py*x6121)));
evalcond[3]=((0.00337)+((x6117*x6125))+(((-1.0)*px*x6121))+((x6119*x6125))+(((-1.0)*py*x6124))+(((-0.03431)*x6123))+(((0.03431)*sj4*x6122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x6126=((1.0)*r00);
IkReal x6127=(((py*r01))+((px*r00)));
IkReal x6128=(px*r01);
IkReal x6129=(pz*r01);
IkReal x6130=((-1.0)*pz*x6126);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6126);
r10=r01;
npx=x6127;
npy=(x6128+(((-1.0)*py*x6126)));
npz=(pz*r22);
rxp0_0=x6129;
rxp0_1=x6130;
rxp0_2=(((py*r00))+(((-1.0)*x6128)));
rxp1_0=x6130;
rxp1_1=((-1.0)*x6129);
rxp1_2=x6127;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x6131=pz*pz;
j4eval[0]=(pp+(((-1.0)*x6131)));
j4eval[1]=IKsign(((((-100000.0)*x6131))+(((100000.0)*pp))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6132=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x6132.valid){
continue;
}
CheckValue<IkReal> x6133 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x6133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6132.value)))+(x6133.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x6134=IKcos(j4);
IkReal x6135=(r01*x6134);
IkReal x6136=((1.0)*px);
IkReal x6137=IKsin(j4);
IkReal x6138=(r01*x6137);
IkReal x6139=(r00*x6134);
IkReal x6140=(r00*x6137);
evalcond[0]=((((-1.0)*x6136*x6138))+((py*x6135)));
evalcond[1]=(((py*x6139))+(((-1.0)*x6136*x6140)));
evalcond[2]=((((-1.0)*(0.00337)*r00))+((py*x6140))+((px*x6139)));
evalcond[3]=((((-1.0)*x6135*x6136))+(((-1.0)*py*x6138))+(((0.00337)*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6141=((29.146021568056)*px);
IkReal x6142=(r00*x6141);
IkReal x6143=(cj4*sj4);
IkReal x6144=(r01*x6141);
IkReal x6145=((29.146021568056)*cj4*py*sj4);
IkReal x6146=cj4*cj4;
IkReal x6147=((29.146021568056)*py*x6146);
if( IKabs(((((-1.0)*x6143*x6144))+((r01*x6147))+(((-1.0)*r00*x6145))+x6142+(((-1.0)*x6142*x6146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6144*x6146))+(((-1.0)*r01*x6145))+(((-1.0)*r00*x6147))+((x6142*x6143))+x6144)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6143*x6144))+((r01*x6147))+(((-1.0)*r00*x6145))+x6142+(((-1.0)*x6142*x6146))))+IKsqr(((((-1.0)*x6144*x6146))+(((-1.0)*r01*x6145))+(((-1.0)*r00*x6147))+((x6142*x6143))+x6144))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6143*x6144))+((r01*x6147))+(((-1.0)*r00*x6145))+x6142+(((-1.0)*x6142*x6146))), ((((-1.0)*x6144*x6146))+(((-1.0)*r01*x6145))+(((-1.0)*r00*x6147))+((x6142*x6143))+x6144));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6148=IKcos(j9);
IkReal x6149=(r00*x6148);
IkReal x6150=(cj4*x6149);
IkReal x6151=IKsin(j9);
IkReal x6152=(r00*x6151);
IkReal x6153=(sj4*x6152);
IkReal x6154=(r01*x6148);
IkReal x6155=(sj4*x6154);
IkReal x6156=((1.0)*cj4);
IkReal x6157=(r01*x6151);
IkReal x6158=(sj4*x6149);
IkReal x6159=((1.0)*sj4);
IkReal x6160=((0.03431)*cj4);
evalcond[0]=(x6153+x6155+x6150+(((-1.0)*x6156*x6157)));
evalcond[1]=(x6158+(((-1.0)*x6157*x6159))+(((-1.0)*x6154*x6156))+(((-1.0)*x6152*x6156)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x6153))+(((-0.03431)*x6155))+((x6157*x6160))+(((-1.0)*py*x6156))+(((-0.03431)*x6150)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x6157))+(((-1.0)*py*x6159))+((x6152*x6160))+(((-0.03431)*x6158))+((x6154*x6160))+(((-1.0)*px*x6156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x6161=((1.0)*r00);
IkReal x6162=(((py*r01))+((px*r00)));
IkReal x6163=(px*r01);
IkReal x6164=(pz*r01);
IkReal x6165=((-1.0)*pz*x6161);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6161);
r10=r01;
npx=x6162;
npy=(x6163+(((-1.0)*py*x6161)));
npz=(pz*r22);
rxp0_0=x6164;
rxp0_1=x6165;
rxp0_2=(((py*r00))+(((-1.0)*x6163)));
rxp1_0=x6165;
rxp1_1=((-1.0)*x6164);
rxp1_2=x6162;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x6166=pz*pz;
j4eval[0]=(pp+(((-1.0)*x6166)));
j4eval[1]=IKsign(((((100000.0)*pp))+(((-100000.0)*x6166))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6167=IKPowWithIntegerCheck(IKsign(((((100000.0)*pp))+(((-1.0)*(100000.0)*(pz*pz))))),-1);
if(!x6167.valid){
continue;
}
CheckValue<IkReal> x6168 = IKatan2WithCheck(IkReal(((337.0)*py)),((337.0)*px),IKFAST_ATAN2_MAGTHRESH);
if(!x6168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6167.value)))+(x6168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x6169=IKcos(j4);
IkReal x6170=(r01*x6169);
IkReal x6171=((1.0)*px);
IkReal x6172=IKsin(j4);
IkReal x6173=(r01*x6172);
IkReal x6174=(r00*x6169);
IkReal x6175=(r00*x6172);
evalcond[0]=((((-1.0)*x6171*x6173))+((py*x6170)));
evalcond[1]=((((-1.0)*x6171*x6175))+((py*x6174)));
evalcond[2]=(((px*x6174))+(((-1.0)*(0.00337)*r00))+((py*x6175)));
evalcond[3]=((((-1.0)*x6170*x6171))+(((0.00337)*r01))+(((-1.0)*py*x6173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6176=((29.146021568056)*px);
IkReal x6177=(r00*x6176);
IkReal x6178=(cj4*sj4);
IkReal x6179=(r01*x6176);
IkReal x6180=((29.146021568056)*cj4*py*sj4);
IkReal x6181=cj4*cj4;
IkReal x6182=((29.146021568056)*py*x6181);
if( IKabs((((r01*x6182))+x6177+(((-1.0)*x6177*x6181))+(((-1.0)*x6178*x6179))+(((-1.0)*r00*x6180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6179+((x6177*x6178))+(((-1.0)*r00*x6182))+(((-1.0)*r01*x6180))+(((-1.0)*x6179*x6181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x6182))+x6177+(((-1.0)*x6177*x6181))+(((-1.0)*x6178*x6179))+(((-1.0)*r00*x6180))))+IKsqr((x6179+((x6177*x6178))+(((-1.0)*r00*x6182))+(((-1.0)*r01*x6180))+(((-1.0)*x6179*x6181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x6182))+x6177+(((-1.0)*x6177*x6181))+(((-1.0)*x6178*x6179))+(((-1.0)*r00*x6180))), (x6179+((x6177*x6178))+(((-1.0)*r00*x6182))+(((-1.0)*r01*x6180))+(((-1.0)*x6179*x6181))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6183=IKcos(j9);
IkReal x6184=(r00*x6183);
IkReal x6185=(cj4*x6184);
IkReal x6186=IKsin(j9);
IkReal x6187=(r00*x6186);
IkReal x6188=(sj4*x6187);
IkReal x6189=(r01*x6183);
IkReal x6190=(sj4*x6189);
IkReal x6191=((1.0)*cj4);
IkReal x6192=(r01*x6186);
IkReal x6193=(sj4*x6184);
IkReal x6194=((1.0)*sj4);
IkReal x6195=((0.03431)*cj4);
evalcond[0]=(x6188+x6185+x6190+(((-1.0)*x6191*x6192)));
evalcond[1]=((((-1.0)*x6192*x6194))+(((-1.0)*x6189*x6191))+(((-1.0)*x6187*x6191))+x6193);
evalcond[2]=(((px*sj4))+(((-1.0)*py*x6191))+(((-0.03431)*x6190))+(((-0.03431)*x6188))+(((-0.03431)*x6185))+((x6192*x6195)));
evalcond[3]=((0.00337)+((x6187*x6195))+((x6189*x6195))+(((-1.0)*px*x6191))+(((-1.0)*py*x6194))+(((-0.03431)*x6193))+(((0.03431)*sj4*x6192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6196=(cj8*r00*r01*sj8);
IkReal x6197=((0.03431)*cj6);
IkReal x6198=(r01*sj8*((((r00*x6197))+(((-0.00036)*cj8*r00*sj6)))));
IkReal x6199=(r01*sj8);
IkReal x6200=(cj8*r00*(((((-1.0)*r01*x6197))+(((0.00337)*x6199))+(((0.00036)*cj6*x6199)))));
CheckValue<IkReal> x6201 = IKatan2WithCheck(IkReal(((((-1.0)*px*x6198))+((py*x6200)))),(((py*x6198))+((px*x6200))),IKFAST_ATAN2_MAGTHRESH);
if(!x6201.valid){
continue;
}
CheckValue<IkReal> x6202=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6196*(pz*pz)))+((pp*x6196)))),-1);
if(!x6202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6201.value)+(((1.5707963267949)*(x6202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x6203=((0.03431)*cj6);
IkReal x6204=(r00*x6203);
IkReal x6205=((0.00337)*sj8);
IkReal x6206=((0.00036)*cj6*sj8);
IkReal x6207=(r00*sj8);
IkReal x6208=IKcos(j4);
IkReal x6209=(px*x6208);
IkReal x6210=IKsin(j4);
IkReal x6211=(py*x6210);
IkReal x6212=(r01*x6203);
IkReal x6213=((0.00036)*cj8*sj6);
IkReal x6214=(cj8*px*x6210);
IkReal x6215=((1.0)*cj8*py*x6208);
IkReal x6216=((1.0)*r01*sj8);
evalcond[0]=(((x6207*x6209))+(((-1.0)*r00*x6206))+(((-1.0)*r00*x6205))+((x6207*x6211))+x6204);
evalcond[1]=((((-1.0)*r01*x6213))+x6212+(((-1.0)*r01*x6215))+((r01*x6214)));
evalcond[2]=((((-1.0)*r00*x6213))+((r00*x6214))+x6204+(((-1.0)*r00*x6215)));
evalcond[3]=(((r01*x6206))+(((-1.0)*x6212))+(((-1.0)*x6209*x6216))+((r01*x6205))+(((-1.0)*x6211*x6216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x6217=((1.0)*r00);
IkReal x6218=(((py*r01))+((px*r00)));
IkReal x6219=(px*r01);
IkReal x6220=(pz*r01);
IkReal x6221=((-1.0)*pz*x6217);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6217);
r10=r01;
npx=x6218;
npy=(x6219+(((-1.0)*py*x6217)));
npz=(pz*r22);
rxp0_0=x6220;
rxp0_1=x6221;
rxp0_2=((((-1.0)*x6219))+((py*r00)));
rxp1_0=x6221;
rxp1_1=((-1.0)*x6220);
rxp1_2=x6218;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=cj6;
j9eval[3]=((sj4*sj4)+(cj4*cj4));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x6222=((1.0)*r00);
IkReal x6223=(((py*r01))+((px*r00)));
IkReal x6224=(px*r01);
IkReal x6225=(pz*r01);
IkReal x6226=((-1.0)*pz*x6222);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6222);
r10=r01;
npx=x6223;
npy=(x6224+(((-1.0)*py*x6222)));
npz=(pz*r22);
rxp0_0=x6225;
rxp0_1=x6226;
rxp0_2=((((-1.0)*x6224))+((py*r00)));
rxp1_0=x6226;
rxp1_1=((-1.0)*x6225);
rxp1_2=x6223;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x6227=((1.0)*r00);
IkReal x6228=(((py*r01))+((px*r00)));
IkReal x6229=(px*r01);
IkReal x6230=(pz*r01);
IkReal x6231=((-1.0)*pz*x6227);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6227);
r10=r01;
npx=x6228;
npy=(x6229+(((-1.0)*py*x6227)));
npz=(pz*r22);
rxp0_0=x6230;
rxp0_1=x6231;
rxp0_2=((((-1.0)*x6229))+((py*r00)));
rxp1_0=x6231;
rxp1_1=((-1.0)*x6230);
rxp1_2=x6228;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=cj8;
j9eval[1]=cj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6232=((29.146021568056)*px);
IkReal x6233=(r00*x6232);
IkReal x6234=(cj4*sj4);
IkReal x6235=(r01*x6232);
IkReal x6236=((29.146021568056)*cj4*py*sj4);
IkReal x6237=cj4*cj4;
IkReal x6238=((29.146021568056)*py*x6237);
if( IKabs(((((-1.0)*r00*x6236))+x6233+(((-1.0)*x6233*x6237))+((r01*x6238))+(((-1.0)*x6234*x6235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6235+(((-1.0)*r01*x6236))+(((-1.0)*r00*x6238))+(((-1.0)*x6235*x6237))+((x6233*x6234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6236))+x6233+(((-1.0)*x6233*x6237))+((r01*x6238))+(((-1.0)*x6234*x6235))))+IKsqr((x6235+(((-1.0)*r01*x6236))+(((-1.0)*r00*x6238))+(((-1.0)*x6235*x6237))+((x6233*x6234))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x6236))+x6233+(((-1.0)*x6233*x6237))+((r01*x6238))+(((-1.0)*x6234*x6235))), (x6235+(((-1.0)*r01*x6236))+(((-1.0)*r00*x6238))+(((-1.0)*x6235*x6237))+((x6233*x6234))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6239=IKcos(j9);
IkReal x6240=(r00*x6239);
IkReal x6241=(cj4*x6240);
IkReal x6242=IKsin(j9);
IkReal x6243=(r00*x6242);
IkReal x6244=(sj4*x6243);
IkReal x6245=(r01*x6239);
IkReal x6246=(sj4*x6245);
IkReal x6247=((1.0)*cj4);
IkReal x6248=(r01*x6242);
IkReal x6249=(sj4*x6240);
IkReal x6250=((1.0)*sj4);
IkReal x6251=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6247*x6248))+x6241+x6246+x6244);
evalcond[1]=((((-1.0)*x6245*x6247))+(((-1.0)*x6248*x6250))+x6249+(((-1.0)*x6243*x6247)));
evalcond[2]=(((px*sj4))+((x6248*x6251))+(((-0.03431)*x6246))+(((-0.03431)*x6241))+(((-1.0)*py*x6247))+(((-0.03431)*x6244)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x6248))+(((-0.03431)*x6249))+(((-1.0)*py*x6250))+((x6243*x6251))+(((-1.0)*px*x6247))+((x6245*x6251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6252=((29.146021568056)*px);
IkReal x6253=(r00*x6252);
IkReal x6254=(cj4*sj4);
IkReal x6255=(r01*x6252);
IkReal x6256=((29.146021568056)*cj4*py*sj4);
IkReal x6257=cj4*cj4;
IkReal x6258=((29.146021568056)*py*x6257);
if( IKabs(((((-1.0)*x6253*x6257))+((r01*x6258))+(((-1.0)*x6254*x6255))+(((-1.0)*r00*x6256))+x6253)) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x6253*x6254))+(((-1.0)*r00*x6258))+(((-1.0)*r01*x6256))+(((-1.0)*x6255*x6257))+x6255)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6253*x6257))+((r01*x6258))+(((-1.0)*x6254*x6255))+(((-1.0)*r00*x6256))+x6253))+IKsqr((((x6253*x6254))+(((-1.0)*r00*x6258))+(((-1.0)*r01*x6256))+(((-1.0)*x6255*x6257))+x6255))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6253*x6257))+((r01*x6258))+(((-1.0)*x6254*x6255))+(((-1.0)*r00*x6256))+x6253), (((x6253*x6254))+(((-1.0)*r00*x6258))+(((-1.0)*r01*x6256))+(((-1.0)*x6255*x6257))+x6255));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6259=IKcos(j9);
IkReal x6260=(r00*x6259);
IkReal x6261=(cj4*x6260);
IkReal x6262=IKsin(j9);
IkReal x6263=(r00*x6262);
IkReal x6264=(sj4*x6263);
IkReal x6265=(r01*x6259);
IkReal x6266=(sj4*x6265);
IkReal x6267=((1.0)*cj4);
IkReal x6268=(r01*x6262);
IkReal x6269=(sj4*x6260);
IkReal x6270=((1.0)*sj4);
IkReal x6271=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6267*x6268))+x6264+x6266+x6261);
evalcond[1]=((((-1.0)*x6268*x6270))+(((-1.0)*x6263*x6267))+(((-1.0)*x6265*x6267))+x6269);
evalcond[2]=(((px*sj4))+(((-0.03431)*x6264))+(((-0.03431)*x6266))+((x6268*x6271))+(((-0.03431)*x6261))+(((-1.0)*py*x6267)));
evalcond[3]=((0.00337)+(((-0.03431)*x6269))+(((-1.0)*px*x6267))+((x6263*x6271))+(((0.03431)*sj4*x6268))+(((-1.0)*py*x6270))+((x6265*x6271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6272=((0.0982220926843486)*cj4);
IkReal x6273=((29.146021568056)*py);
IkReal x6274=(r01*x6273);
IkReal x6275=((0.0982220926843486)*sj4);
IkReal x6276=((29.146021568056)*cj4*px*sj4);
IkReal x6277=(cj4*sj4);
IkReal x6278=(r00*x6273);
IkReal x6279=cj4*cj4;
IkReal x6280=((29.146021568056)*px*x6279);
if( IKabs((((x6277*x6278))+((r01*x6276))+(((-1.0)*x6274*x6279))+(((-1.0)*r01*x6275))+x6274+((r00*x6280))+(((-1.0)*r00*x6272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6278))+((r00*x6275))+(((-1.0)*r00*x6276))+((r01*x6280))+((x6274*x6277))+(((-1.0)*r01*x6272))+((x6278*x6279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6277*x6278))+((r01*x6276))+(((-1.0)*x6274*x6279))+(((-1.0)*r01*x6275))+x6274+((r00*x6280))+(((-1.0)*r00*x6272))))+IKsqr(((((-1.0)*x6278))+((r00*x6275))+(((-1.0)*r00*x6276))+((r01*x6280))+((x6274*x6277))+(((-1.0)*r01*x6272))+((x6278*x6279))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((x6277*x6278))+((r01*x6276))+(((-1.0)*x6274*x6279))+(((-1.0)*r01*x6275))+x6274+((r00*x6280))+(((-1.0)*r00*x6272))), ((((-1.0)*x6278))+((r00*x6275))+(((-1.0)*r00*x6276))+((r01*x6280))+((x6274*x6277))+(((-1.0)*r01*x6272))+((x6278*x6279))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6281=IKcos(j9);
IkReal x6282=(r00*x6281);
IkReal x6283=(cj4*x6282);
IkReal x6284=IKsin(j9);
IkReal x6285=(r00*x6284);
IkReal x6286=(sj4*x6285);
IkReal x6287=(r01*x6281);
IkReal x6288=(sj4*x6287);
IkReal x6289=((1.0)*cj4);
IkReal x6290=(r01*x6284);
IkReal x6291=(sj4*x6282);
IkReal x6292=((1.0)*sj4);
IkReal x6293=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6289*x6290))+x6283+x6288+x6286);
evalcond[1]=((((-1.0)*x6285*x6289))+x6291+(((-1.0)*x6290*x6292))+(((-1.0)*x6287*x6289)));
evalcond[2]=((-0.00036)+((px*sj4))+(((-0.03431)*x6283))+(((-0.03431)*x6288))+(((-1.0)*py*x6289))+((x6290*x6293))+(((-0.03431)*x6286)));
evalcond[3]=((0.00337)+((x6287*x6293))+(((-0.03431)*x6291))+(((-1.0)*px*x6289))+(((-1.0)*py*x6292))+(((0.03431)*sj4*x6290))+((x6285*x6293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6294=((0.0982220926843486)*cj4);
IkReal x6295=((29.146021568056)*py);
IkReal x6296=(r01*x6295);
IkReal x6297=((0.0982220926843486)*sj4);
IkReal x6298=((29.146021568056)*cj4*px*sj4);
IkReal x6299=(cj4*sj4);
IkReal x6300=(r00*x6295);
IkReal x6301=cj4*cj4;
IkReal x6302=((29.146021568056)*px*x6301);
if( IKabs(((((-1.0)*r00*x6294))+(((-1.0)*r01*x6297))+((r01*x6298))+((r00*x6302))+((x6299*x6300))+x6296+(((-1.0)*x6296*x6301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x6297))+(((-1.0)*r01*x6294))+((x6296*x6299))+(((-1.0)*x6300))+(((-1.0)*r00*x6298))+((r01*x6302))+((x6300*x6301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6294))+(((-1.0)*r01*x6297))+((r01*x6298))+((r00*x6302))+((x6299*x6300))+x6296+(((-1.0)*x6296*x6301))))+IKsqr((((r00*x6297))+(((-1.0)*r01*x6294))+((x6296*x6299))+(((-1.0)*x6300))+(((-1.0)*r00*x6298))+((r01*x6302))+((x6300*x6301))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x6294))+(((-1.0)*r01*x6297))+((r01*x6298))+((r00*x6302))+((x6299*x6300))+x6296+(((-1.0)*x6296*x6301))), (((r00*x6297))+(((-1.0)*r01*x6294))+((x6296*x6299))+(((-1.0)*x6300))+(((-1.0)*r00*x6298))+((r01*x6302))+((x6300*x6301))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6303=IKcos(j9);
IkReal x6304=(r00*x6303);
IkReal x6305=(cj4*x6304);
IkReal x6306=IKsin(j9);
IkReal x6307=(r00*x6306);
IkReal x6308=(sj4*x6307);
IkReal x6309=(r01*x6303);
IkReal x6310=(sj4*x6309);
IkReal x6311=((1.0)*cj4);
IkReal x6312=(r01*x6306);
IkReal x6313=(sj4*x6304);
IkReal x6314=((1.0)*sj4);
IkReal x6315=((0.03431)*cj4);
evalcond[0]=(x6308+x6305+(((-1.0)*x6311*x6312))+x6310);
evalcond[1]=((((-1.0)*x6309*x6311))+x6313+(((-1.0)*x6307*x6311))+(((-1.0)*x6312*x6314)));
evalcond[2]=((0.00036)+((px*sj4))+(((-0.03431)*x6308))+(((-0.03431)*x6310))+(((-0.03431)*x6305))+((x6312*x6315))+(((-1.0)*py*x6311)));
evalcond[3]=((0.00337)+(((-1.0)*px*x6311))+(((-0.03431)*x6313))+(((-1.0)*py*x6314))+((x6307*x6315))+(((0.03431)*sj4*x6312))+((x6309*x6315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6316=((29.146021568056)*px);
IkReal x6317=(r00*x6316);
IkReal x6318=(cj4*sj4);
IkReal x6319=(r01*x6316);
IkReal x6320=((29.146021568056)*cj4*py*sj4);
IkReal x6321=cj4*cj4;
IkReal x6322=((29.146021568056)*py*x6321);
if( IKabs(((((-1.0)*x6318*x6319))+(((-1.0)*r00*x6320))+((r01*x6322))+x6317+(((-1.0)*x6317*x6321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6319*x6321))+(((-1.0)*r00*x6322))+(((-1.0)*r01*x6320))+((x6317*x6318))+x6319)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6318*x6319))+(((-1.0)*r00*x6320))+((r01*x6322))+x6317+(((-1.0)*x6317*x6321))))+IKsqr(((((-1.0)*x6319*x6321))+(((-1.0)*r00*x6322))+(((-1.0)*r01*x6320))+((x6317*x6318))+x6319))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6318*x6319))+(((-1.0)*r00*x6320))+((r01*x6322))+x6317+(((-1.0)*x6317*x6321))), ((((-1.0)*x6319*x6321))+(((-1.0)*r00*x6322))+(((-1.0)*r01*x6320))+((x6317*x6318))+x6319));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6323=IKcos(j9);
IkReal x6324=(r00*x6323);
IkReal x6325=(cj4*x6324);
IkReal x6326=IKsin(j9);
IkReal x6327=(r00*x6326);
IkReal x6328=(sj4*x6327);
IkReal x6329=(r01*x6323);
IkReal x6330=(sj4*x6329);
IkReal x6331=((1.0)*cj4);
IkReal x6332=(r01*x6326);
IkReal x6333=(sj4*x6324);
IkReal x6334=((1.0)*sj4);
IkReal x6335=((0.03431)*cj4);
evalcond[0]=(x6328+x6325+(((-1.0)*x6331*x6332))+x6330);
evalcond[1]=((((-1.0)*x6329*x6331))+(((-1.0)*x6332*x6334))+x6333+(((-1.0)*x6327*x6331)));
evalcond[2]=(((px*sj4))+((x6332*x6335))+(((-1.0)*py*x6331))+(((-0.03431)*x6330))+(((-0.03431)*x6328))+(((-0.03431)*x6325)));
evalcond[3]=((0.00337)+(((-1.0)*py*x6334))+((x6327*x6335))+((x6329*x6335))+(((-0.03431)*x6333))+(((-1.0)*px*x6331))+(((0.03431)*sj4*x6332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6336=((29.146021568056)*px);
IkReal x6337=(r00*x6336);
IkReal x6338=(cj4*sj4);
IkReal x6339=(r01*x6336);
IkReal x6340=((29.146021568056)*cj4*py*sj4);
IkReal x6341=cj4*cj4;
IkReal x6342=((29.146021568056)*py*x6341);
if( IKabs(((((-1.0)*r00*x6340))+(((-1.0)*x6337*x6341))+x6337+(((-1.0)*x6338*x6339))+((r01*x6342)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6339*x6341))+((x6337*x6338))+(((-1.0)*r00*x6342))+x6339+(((-1.0)*r01*x6340)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6340))+(((-1.0)*x6337*x6341))+x6337+(((-1.0)*x6338*x6339))+((r01*x6342))))+IKsqr(((((-1.0)*x6339*x6341))+((x6337*x6338))+(((-1.0)*r00*x6342))+x6339+(((-1.0)*r01*x6340))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x6340))+(((-1.0)*x6337*x6341))+x6337+(((-1.0)*x6338*x6339))+((r01*x6342))), ((((-1.0)*x6339*x6341))+((x6337*x6338))+(((-1.0)*r00*x6342))+x6339+(((-1.0)*r01*x6340))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6343=IKcos(j9);
IkReal x6344=(r00*x6343);
IkReal x6345=(cj4*x6344);
IkReal x6346=IKsin(j9);
IkReal x6347=(r00*x6346);
IkReal x6348=(sj4*x6347);
IkReal x6349=(r01*x6343);
IkReal x6350=(sj4*x6349);
IkReal x6351=((1.0)*cj4);
IkReal x6352=(r01*x6346);
IkReal x6353=(sj4*x6344);
IkReal x6354=((1.0)*sj4);
IkReal x6355=((0.03431)*cj4);
evalcond[0]=(x6348+x6345+(((-1.0)*x6351*x6352))+x6350);
evalcond[1]=((((-1.0)*x6352*x6354))+(((-1.0)*x6347*x6351))+(((-1.0)*x6349*x6351))+x6353);
evalcond[2]=(((px*sj4))+(((-0.03431)*x6348))+(((-1.0)*py*x6351))+((x6352*x6355))+(((-0.03431)*x6345))+(((-0.03431)*x6350)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x6352))+(((-0.03431)*x6353))+((x6349*x6355))+(((-1.0)*py*x6354))+((x6347*x6355))+(((-1.0)*px*x6351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6356=((29.146021568056)*px);
IkReal x6357=(r00*x6356);
IkReal x6358=(cj4*sj4);
IkReal x6359=(r01*x6356);
IkReal x6360=((29.146021568056)*cj4*py*sj4);
IkReal x6361=cj4*cj4;
IkReal x6362=((29.146021568056)*py*x6361);
if( IKabs(((((-1.0)*x6357*x6361))+(((-1.0)*x6358*x6359))+(((-1.0)*r00*x6360))+((r01*x6362))+x6357)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6360))+(((-1.0)*r00*x6362))+(((-1.0)*x6359*x6361))+x6359+((x6357*x6358)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6357*x6361))+(((-1.0)*x6358*x6359))+(((-1.0)*r00*x6360))+((r01*x6362))+x6357))+IKsqr(((((-1.0)*r01*x6360))+(((-1.0)*r00*x6362))+(((-1.0)*x6359*x6361))+x6359+((x6357*x6358))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6357*x6361))+(((-1.0)*x6358*x6359))+(((-1.0)*r00*x6360))+((r01*x6362))+x6357), ((((-1.0)*r01*x6360))+(((-1.0)*r00*x6362))+(((-1.0)*x6359*x6361))+x6359+((x6357*x6358))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6363=IKcos(j9);
IkReal x6364=(r00*x6363);
IkReal x6365=(cj4*x6364);
IkReal x6366=IKsin(j9);
IkReal x6367=(r00*x6366);
IkReal x6368=(sj4*x6367);
IkReal x6369=(r01*x6363);
IkReal x6370=(sj4*x6369);
IkReal x6371=((1.0)*cj4);
IkReal x6372=(r01*x6366);
IkReal x6373=(sj4*x6364);
IkReal x6374=((1.0)*sj4);
IkReal x6375=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6371*x6372))+x6370+x6365+x6368);
evalcond[1]=((((-1.0)*x6367*x6371))+x6373+(((-1.0)*x6369*x6371))+(((-1.0)*x6372*x6374)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x6370))+((x6372*x6375))+(((-1.0)*py*x6371))+(((-0.03431)*x6365))+(((-0.03431)*x6368)));
evalcond[3]=((0.00373)+(((-1.0)*px*x6371))+((x6369*x6375))+(((0.03431)*sj4*x6372))+((x6367*x6375))+(((-0.03431)*x6373))+(((-1.0)*py*x6374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6376=((29.146021568056)*px);
IkReal x6377=(r00*x6376);
IkReal x6378=(cj4*sj4);
IkReal x6379=(r01*x6376);
IkReal x6380=((29.146021568056)*cj4*py*sj4);
IkReal x6381=cj4*cj4;
IkReal x6382=((29.146021568056)*py*x6381);
if( IKabs(((((-1.0)*x6378*x6379))+(((-1.0)*r00*x6380))+x6377+((r01*x6382))+(((-1.0)*x6377*x6381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6380))+(((-1.0)*x6379*x6381))+x6379+(((-1.0)*r00*x6382))+((x6377*x6378)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6378*x6379))+(((-1.0)*r00*x6380))+x6377+((r01*x6382))+(((-1.0)*x6377*x6381))))+IKsqr(((((-1.0)*r01*x6380))+(((-1.0)*x6379*x6381))+x6379+(((-1.0)*r00*x6382))+((x6377*x6378))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6378*x6379))+(((-1.0)*r00*x6380))+x6377+((r01*x6382))+(((-1.0)*x6377*x6381))), ((((-1.0)*r01*x6380))+(((-1.0)*x6379*x6381))+x6379+(((-1.0)*r00*x6382))+((x6377*x6378))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6383=IKcos(j9);
IkReal x6384=(r00*x6383);
IkReal x6385=(cj4*x6384);
IkReal x6386=IKsin(j9);
IkReal x6387=(r00*x6386);
IkReal x6388=(sj4*x6387);
IkReal x6389=(r01*x6383);
IkReal x6390=(sj4*x6389);
IkReal x6391=((1.0)*cj4);
IkReal x6392=(r01*x6386);
IkReal x6393=(sj4*x6384);
IkReal x6394=((1.0)*sj4);
IkReal x6395=((0.03431)*cj4);
evalcond[0]=(x6390+(((-1.0)*x6391*x6392))+x6388+x6385);
evalcond[1]=((((-1.0)*x6389*x6391))+x6393+(((-1.0)*x6387*x6391))+(((-1.0)*x6392*x6394)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x6388))+(((-0.03431)*x6385))+(((-0.03431)*x6390))+(((-1.0)*py*x6391))+((x6392*x6395)));
evalcond[3]=((0.00301)+((x6389*x6395))+(((-1.0)*px*x6391))+(((-0.03431)*x6393))+(((-1.0)*py*x6394))+(((0.03431)*sj4*x6392))+((x6387*x6395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6396=(cj6*r00);
IkReal x6397=(cj6*r01);
CheckValue<IkReal> x6398 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x6397))+((sj4*x6396)))),(((sj4*x6397))+((cj4*x6396))),IKFAST_ATAN2_MAGTHRESH);
if(!x6398.valid){
continue;
}
CheckValue<IkReal> x6399=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x6399.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x6398.value)+(((-1.0)*(1.5707963267949)*(x6399.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x6400=IKcos(j9);
IkReal x6401=(r00*x6400);
IkReal x6402=(cj4*x6401);
IkReal x6403=IKsin(j9);
IkReal x6404=(r00*x6403);
IkReal x6405=(sj4*x6404);
IkReal x6406=(r01*x6400);
IkReal x6407=(sj4*x6406);
IkReal x6408=((1.0)*cj4);
IkReal x6409=(r01*x6403);
IkReal x6410=(sj4*x6401);
IkReal x6411=(x6404*x6408);
IkReal x6412=(x6406*x6408);
IkReal x6413=((1.0)*sj4);
IkReal x6414=(x6409*x6413);
IkReal x6415=(cj4*r01*x6403);
IkReal x6416=((1.0)*cj4*r00*x6400);
IkReal x6417=((1.0)*sj4*sj8);
IkReal x6418=((-1.0)*(((1.0)*cj6)));
IkReal x6419=((1.0)*cj8*sj4);
IkReal x6420=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6408*x6409))+x6405+x6407+x6402);
evalcond[1]=((((-1.0)*x6411))+x6410+(((-1.0)*x6412))+(((-1.0)*x6414)));
evalcond[2]=((((-1.0)*cj8*x6414))+(((-1.0)*cj8*x6412))+(((-1.0)*cj8*x6411))+((cj8*x6410))+sj6);
evalcond[3]=((((-1.0)*sj8*x6416))+(((-1.0)*x6404*x6417))+(((-1.0)*x6406*x6417))+((sj8*x6415))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=(((sj8*x6410))+(((-1.0)*sj8*x6411))+x6418+(((-1.0)*sj8*x6414))+(((-1.0)*sj8*x6412)));
evalcond[5]=(((cj8*x6415))+x6418+(((-1.0)*cj8*x6416))+(((-1.0)*x6404*x6419))+(((-1.0)*x6406*x6419)));
evalcond[6]=(((px*sj4))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x6402))+(((-0.03431)*x6407))+((x6409*x6420))+(((-0.03431)*x6405))+(((-1.0)*py*x6408)));
evalcond[7]=((0.00337)+(((-0.03431)*x6410))+(((0.00036)*cj6))+(((-1.0)*px*x6408))+((x6404*x6420))+((x6406*x6420))+(((0.03431)*sj4*x6409))+(((-1.0)*py*x6413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6421=(r00*sj6);
IkReal x6422=(r01*sj6);
CheckValue<IkReal> x6423=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x6423.valid){
continue;
}
CheckValue<IkReal> x6424 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x6422))+((sj4*x6421)))),(((sj4*x6422))+((cj4*x6421))),IKFAST_ATAN2_MAGTHRESH);
if(!x6424.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((-1.0)*(1.5707963267949)*(x6423.value)))+(x6424.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x6425=IKcos(j9);
IkReal x6426=(r00*x6425);
IkReal x6427=(cj4*x6426);
IkReal x6428=IKsin(j9);
IkReal x6429=(r00*x6428);
IkReal x6430=(sj4*x6429);
IkReal x6431=(r01*x6425);
IkReal x6432=(sj4*x6431);
IkReal x6433=((1.0)*cj4);
IkReal x6434=(r01*x6428);
IkReal x6435=(sj4*x6426);
IkReal x6436=(x6429*x6433);
IkReal x6437=(x6431*x6433);
IkReal x6438=((1.0)*sj4);
IkReal x6439=(x6434*x6438);
IkReal x6440=(cj4*r01*x6428);
IkReal x6441=((1.0)*cj4*r00*x6425);
IkReal x6442=((1.0)*sj4*sj8);
IkReal x6443=((-1.0)*(((1.0)*cj6)));
IkReal x6444=((1.0)*cj8*sj4);
IkReal x6445=((0.03431)*cj4);
evalcond[0]=(x6430+x6432+x6427+(((-1.0)*x6433*x6434)));
evalcond[1]=(x6435+(((-1.0)*x6439))+(((-1.0)*x6437))+(((-1.0)*x6436)));
evalcond[2]=((((-1.0)*cj8*x6436))+(((-1.0)*cj8*x6437))+sj6+((cj8*x6435))+(((-1.0)*cj8*x6439)));
evalcond[3]=((((-1.0)*x6431*x6442))+(((-1.0)*x6429*x6442))+(((-1.0)*sj8*x6441))+(((-1.0)*(1.0)*sj6))+((sj8*x6440)));
evalcond[4]=((((-1.0)*sj8*x6439))+(((-1.0)*sj8*x6436))+(((-1.0)*sj8*x6437))+((sj8*x6435))+x6443);
evalcond[5]=((((-1.0)*x6429*x6444))+((cj8*x6440))+x6443+(((-1.0)*cj8*x6441))+(((-1.0)*x6431*x6444)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x6432))+(((-0.03431)*x6430))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x6427))+((x6434*x6445))+(((-1.0)*py*x6433)));
evalcond[7]=((0.00337)+((x6429*x6445))+(((-0.03431)*x6435))+(((0.00036)*cj6))+(((-1.0)*px*x6433))+((x6431*x6445))+(((0.03431)*sj4*x6434))+(((-1.0)*py*x6438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6446=(cj4*cj6);
IkReal x6447=(cj6*sj4);
CheckValue<IkReal> x6448 = IKatan2WithCheck(IkReal((((r00*x6446))+((r01*x6447)))),(((r01*x6446))+(((-1.0)*r00*x6447))),IKFAST_ATAN2_MAGTHRESH);
if(!x6448.valid){
continue;
}
CheckValue<IkReal> x6449=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x6449.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x6448.value)+(((-1.0)*(1.5707963267949)*(x6449.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x6450=IKcos(j9);
IkReal x6451=(r00*x6450);
IkReal x6452=(cj4*x6451);
IkReal x6453=IKsin(j9);
IkReal x6454=(r00*x6453);
IkReal x6455=(sj4*x6454);
IkReal x6456=(r01*x6450);
IkReal x6457=(sj4*x6456);
IkReal x6458=((1.0)*cj4);
IkReal x6459=(r01*x6453);
IkReal x6460=(sj4*x6451);
IkReal x6461=(x6454*x6458);
IkReal x6462=(x6456*x6458);
IkReal x6463=((1.0)*sj4);
IkReal x6464=(x6459*x6463);
IkReal x6465=(cj4*r01*x6453);
IkReal x6466=((1.0)*cj4*r00*x6450);
IkReal x6467=((1.0)*sj4*sj8);
IkReal x6468=((-1.0)*(((1.0)*cj6)));
IkReal x6469=((1.0)*cj8*sj4);
IkReal x6470=((0.03431)*cj4);
evalcond[0]=(x6457+x6455+x6452+(((-1.0)*x6458*x6459)));
evalcond[1]=(x6460+(((-1.0)*x6462))+(((-1.0)*x6461))+(((-1.0)*x6464)));
evalcond[2]=((((-1.0)*cj8*x6461))+(((-1.0)*cj8*x6464))+sj6+((cj8*x6460))+(((-1.0)*cj8*x6462)));
evalcond[3]=((((-1.0)*x6456*x6467))+(((-1.0)*sj8*x6466))+((sj8*x6465))+(((-1.0)*x6454*x6467))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=((((-1.0)*sj8*x6462))+x6468+((sj8*x6460))+(((-1.0)*sj8*x6464))+(((-1.0)*sj8*x6461)));
evalcond[5]=(((cj8*x6465))+x6468+(((-1.0)*x6456*x6469))+(((-1.0)*cj8*x6466))+(((-1.0)*x6454*x6469)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x6458))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x6452))+((x6459*x6470))+(((-0.03431)*x6455))+(((-0.03431)*x6457)));
evalcond[7]=((0.00337)+(((0.03431)*sj4*x6459))+(((-1.0)*py*x6463))+((x6454*x6470))+(((0.00036)*cj6))+((x6456*x6470))+(((-0.03431)*x6460))+(((-1.0)*px*x6458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6471=(cj8*r00*sj8);
IkReal x6472=((1.0)*px);
IkReal x6473=(cj6*r00);
IkReal x6474=((0.03431)*x6473);
IkReal x6475=(sj8*((x6474+(((-1.0)*(0.00036)*cj8*r00*sj6)))));
IkReal x6476=(cj8*((x6474+(((-0.00036)*sj8*x6473))+(((-0.00337)*r00*sj8)))));
CheckValue<IkReal> x6477 = IKatan2WithCheck(IkReal(((((-1.0)*x6472*x6475))+(((-1.0)*py*x6476)))),(((py*x6475))+(((-1.0)*x6472*x6476))),IKFAST_ATAN2_MAGTHRESH);
if(!x6477.valid){
continue;
}
CheckValue<IkReal> x6478=IKPowWithIntegerCheck(IKsign((((pp*x6471))+(((-1.0)*x6471*(pz*pz))))),-1);
if(!x6478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6477.value)+(((1.5707963267949)*(x6478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x6479=((0.03431)*cj6);
IkReal x6480=(r00*x6479);
IkReal x6481=((0.00337)*sj8);
IkReal x6482=((0.00036)*cj6*sj8);
IkReal x6483=(r00*sj8);
IkReal x6484=IKcos(j4);
IkReal x6485=(px*x6484);
IkReal x6486=IKsin(j4);
IkReal x6487=(py*x6486);
IkReal x6488=(r01*x6479);
IkReal x6489=((0.00036)*cj8*sj6);
IkReal x6490=(cj8*px*x6486);
IkReal x6491=((1.0)*cj8*py*x6484);
IkReal x6492=((1.0)*r01*sj8);
evalcond[0]=(((x6483*x6487))+(((-1.0)*r00*x6482))+(((-1.0)*r00*x6481))+x6480+((x6483*x6485)));
evalcond[1]=(((r01*x6490))+x6488+(((-1.0)*r01*x6491))+(((-1.0)*r01*x6489)));
evalcond[2]=(((r00*x6490))+(((-1.0)*r00*x6491))+x6480+(((-1.0)*r00*x6489)));
evalcond[3]=((((-1.0)*x6485*x6492))+(((-1.0)*x6488))+((r01*x6481))+((r01*x6482))+(((-1.0)*x6487*x6492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x6493=((1.0)*r00);
IkReal x6494=(((py*r01))+((px*r00)));
IkReal x6495=(px*r01);
IkReal x6496=(pz*r01);
IkReal x6497=((-1.0)*pz*x6493);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6493);
r10=r01;
npx=x6494;
npy=((((-1.0)*py*x6493))+x6495);
npz=(pz*r22);
rxp0_0=x6496;
rxp0_1=x6497;
rxp0_2=((((-1.0)*x6495))+((py*r00)));
rxp1_0=x6497;
rxp1_1=((-1.0)*x6496);
rxp1_2=x6494;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=cj6;
j9eval[3]=((sj4*sj4)+(cj4*cj4));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x6498=((1.0)*r00);
IkReal x6499=(((py*r01))+((px*r00)));
IkReal x6500=(px*r01);
IkReal x6501=(pz*r01);
IkReal x6502=((-1.0)*pz*x6498);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6498);
r10=r01;
npx=x6499;
npy=((((-1.0)*py*x6498))+x6500);
npz=(pz*r22);
rxp0_0=x6501;
rxp0_1=x6502;
rxp0_2=(((py*r00))+(((-1.0)*x6500)));
rxp1_0=x6502;
rxp1_1=((-1.0)*x6501);
rxp1_2=x6499;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x6503=((1.0)*r00);
IkReal x6504=(((py*r01))+((px*r00)));
IkReal x6505=(px*r01);
IkReal x6506=(pz*r01);
IkReal x6507=((-1.0)*pz*x6503);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6503);
r10=r01;
npx=x6504;
npy=((((-1.0)*py*x6503))+x6505);
npz=(pz*r22);
rxp0_0=x6506;
rxp0_1=x6507;
rxp0_2=((((-1.0)*x6505))+((py*r00)));
rxp1_0=x6507;
rxp1_1=((-1.0)*x6506);
rxp1_2=x6504;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=cj8;
j9eval[1]=cj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6508=((29.146021568056)*px);
IkReal x6509=(r00*x6508);
IkReal x6510=(cj4*sj4);
IkReal x6511=(r01*x6508);
IkReal x6512=((29.146021568056)*cj4*py*sj4);
IkReal x6513=cj4*cj4;
IkReal x6514=((29.146021568056)*py*x6513);
if( IKabs((((r01*x6514))+(((-1.0)*x6510*x6511))+(((-1.0)*r00*x6512))+x6509+(((-1.0)*x6509*x6513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6511+(((-1.0)*r00*x6514))+((x6509*x6510))+(((-1.0)*x6511*x6513))+(((-1.0)*r01*x6512)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x6514))+(((-1.0)*x6510*x6511))+(((-1.0)*r00*x6512))+x6509+(((-1.0)*x6509*x6513))))+IKsqr((x6511+(((-1.0)*r00*x6514))+((x6509*x6510))+(((-1.0)*x6511*x6513))+(((-1.0)*r01*x6512))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x6514))+(((-1.0)*x6510*x6511))+(((-1.0)*r00*x6512))+x6509+(((-1.0)*x6509*x6513))), (x6511+(((-1.0)*r00*x6514))+((x6509*x6510))+(((-1.0)*x6511*x6513))+(((-1.0)*r01*x6512))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6515=IKcos(j9);
IkReal x6516=(r00*x6515);
IkReal x6517=(cj4*x6516);
IkReal x6518=IKsin(j9);
IkReal x6519=(r00*x6518);
IkReal x6520=(sj4*x6519);
IkReal x6521=(r01*x6515);
IkReal x6522=(sj4*x6521);
IkReal x6523=((1.0)*cj4);
IkReal x6524=(r01*x6518);
IkReal x6525=(sj4*x6516);
IkReal x6526=((1.0)*sj4);
IkReal x6527=((0.03431)*cj4);
evalcond[0]=(x6517+(((-1.0)*x6523*x6524))+x6522+x6520);
evalcond[1]=((((-1.0)*x6519*x6523))+(((-1.0)*x6521*x6523))+(((-1.0)*x6524*x6526))+x6525);
evalcond[2]=(((px*sj4))+(((-0.03431)*x6517))+(((-0.03431)*x6520))+(((-1.0)*py*x6523))+(((-0.03431)*x6522))+((x6524*x6527)));
evalcond[3]=((0.00337)+(((-1.0)*py*x6526))+(((-1.0)*px*x6523))+((x6519*x6527))+((x6521*x6527))+(((-0.03431)*x6525))+(((0.03431)*sj4*x6524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6528=((29.146021568056)*px);
IkReal x6529=(r00*x6528);
IkReal x6530=(cj4*sj4);
IkReal x6531=(r01*x6528);
IkReal x6532=((29.146021568056)*cj4*py*sj4);
IkReal x6533=cj4*cj4;
IkReal x6534=((29.146021568056)*py*x6533);
if( IKabs(((((-1.0)*x6529*x6533))+((r01*x6534))+(((-1.0)*r00*x6532))+(((-1.0)*x6530*x6531))+x6529)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6532))+x6531+(((-1.0)*r00*x6534))+((x6529*x6530))+(((-1.0)*x6531*x6533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6529*x6533))+((r01*x6534))+(((-1.0)*r00*x6532))+(((-1.0)*x6530*x6531))+x6529))+IKsqr(((((-1.0)*r01*x6532))+x6531+(((-1.0)*r00*x6534))+((x6529*x6530))+(((-1.0)*x6531*x6533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6529*x6533))+((r01*x6534))+(((-1.0)*r00*x6532))+(((-1.0)*x6530*x6531))+x6529), ((((-1.0)*r01*x6532))+x6531+(((-1.0)*r00*x6534))+((x6529*x6530))+(((-1.0)*x6531*x6533))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6535=IKcos(j9);
IkReal x6536=(r00*x6535);
IkReal x6537=(cj4*x6536);
IkReal x6538=IKsin(j9);
IkReal x6539=(r00*x6538);
IkReal x6540=(sj4*x6539);
IkReal x6541=(r01*x6535);
IkReal x6542=(sj4*x6541);
IkReal x6543=((1.0)*cj4);
IkReal x6544=(r01*x6538);
IkReal x6545=(sj4*x6536);
IkReal x6546=((1.0)*sj4);
IkReal x6547=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6543*x6544))+x6537+x6540+x6542);
evalcond[1]=((((-1.0)*x6544*x6546))+(((-1.0)*x6541*x6543))+(((-1.0)*x6539*x6543))+x6545);
evalcond[2]=(((px*sj4))+(((-1.0)*py*x6543))+(((-0.03431)*x6540))+((x6544*x6547))+(((-0.03431)*x6542))+(((-0.03431)*x6537)));
evalcond[3]=((0.00337)+((x6541*x6547))+(((-1.0)*px*x6543))+((x6539*x6547))+(((0.03431)*sj4*x6544))+(((-0.03431)*x6545))+(((-1.0)*py*x6546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6548=((0.0982220926843486)*cj4);
IkReal x6549=((29.146021568056)*py);
IkReal x6550=(r01*x6549);
IkReal x6551=((0.0982220926843486)*sj4);
IkReal x6552=((29.146021568056)*cj4*px*sj4);
IkReal x6553=(cj4*sj4);
IkReal x6554=(r00*x6549);
IkReal x6555=cj4*cj4;
IkReal x6556=((29.146021568056)*px*x6555);
if( IKabs(((((-1.0)*r01*x6551))+(((-1.0)*r00*x6548))+((r01*x6552))+((x6553*x6554))+x6550+(((-1.0)*x6550*x6555))+((r00*x6556)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6548))+((x6550*x6553))+(((-1.0)*x6554))+((x6554*x6555))+((r01*x6556))+(((-1.0)*r00*x6552))+((r00*x6551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x6551))+(((-1.0)*r00*x6548))+((r01*x6552))+((x6553*x6554))+x6550+(((-1.0)*x6550*x6555))+((r00*x6556))))+IKsqr(((((-1.0)*r01*x6548))+((x6550*x6553))+(((-1.0)*x6554))+((x6554*x6555))+((r01*x6556))+(((-1.0)*r00*x6552))+((r00*x6551))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r01*x6551))+(((-1.0)*r00*x6548))+((r01*x6552))+((x6553*x6554))+x6550+(((-1.0)*x6550*x6555))+((r00*x6556))), ((((-1.0)*r01*x6548))+((x6550*x6553))+(((-1.0)*x6554))+((x6554*x6555))+((r01*x6556))+(((-1.0)*r00*x6552))+((r00*x6551))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6557=IKcos(j9);
IkReal x6558=(r00*x6557);
IkReal x6559=(cj4*x6558);
IkReal x6560=IKsin(j9);
IkReal x6561=(r00*x6560);
IkReal x6562=(sj4*x6561);
IkReal x6563=(r01*x6557);
IkReal x6564=(sj4*x6563);
IkReal x6565=((1.0)*cj4);
IkReal x6566=(r01*x6560);
IkReal x6567=(sj4*x6558);
IkReal x6568=((1.0)*sj4);
IkReal x6569=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6565*x6566))+x6559+x6562+x6564);
evalcond[1]=((((-1.0)*x6563*x6565))+(((-1.0)*x6561*x6565))+(((-1.0)*x6566*x6568))+x6567);
evalcond[2]=((-0.00036)+((px*sj4))+(((-1.0)*py*x6565))+((x6566*x6569))+(((-0.03431)*x6562))+(((-0.03431)*x6564))+(((-0.03431)*x6559)));
evalcond[3]=((0.00337)+(((-1.0)*px*x6565))+((x6561*x6569))+(((-1.0)*py*x6568))+(((-0.03431)*x6567))+((x6563*x6569))+(((0.03431)*sj4*x6566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6570=((0.0982220926843486)*cj4);
IkReal x6571=((29.146021568056)*py);
IkReal x6572=(r01*x6571);
IkReal x6573=((0.0982220926843486)*sj4);
IkReal x6574=((29.146021568056)*cj4*px*sj4);
IkReal x6575=(cj4*sj4);
IkReal x6576=(r00*x6571);
IkReal x6577=cj4*cj4;
IkReal x6578=((29.146021568056)*px*x6577);
if( IKabs((((r00*x6578))+(((-1.0)*x6572*x6577))+(((-1.0)*r00*x6570))+((x6575*x6576))+x6572+(((-1.0)*r01*x6573))+((r01*x6574)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6570))+((r00*x6573))+(((-1.0)*r00*x6574))+(((-1.0)*x6576))+((r01*x6578))+((x6572*x6575))+((x6576*x6577)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x6578))+(((-1.0)*x6572*x6577))+(((-1.0)*r00*x6570))+((x6575*x6576))+x6572+(((-1.0)*r01*x6573))+((r01*x6574))))+IKsqr(((((-1.0)*r01*x6570))+((r00*x6573))+(((-1.0)*r00*x6574))+(((-1.0)*x6576))+((r01*x6578))+((x6572*x6575))+((x6576*x6577))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r00*x6578))+(((-1.0)*x6572*x6577))+(((-1.0)*r00*x6570))+((x6575*x6576))+x6572+(((-1.0)*r01*x6573))+((r01*x6574))), ((((-1.0)*r01*x6570))+((r00*x6573))+(((-1.0)*r00*x6574))+(((-1.0)*x6576))+((r01*x6578))+((x6572*x6575))+((x6576*x6577))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6579=IKcos(j9);
IkReal x6580=(r00*x6579);
IkReal x6581=(cj4*x6580);
IkReal x6582=IKsin(j9);
IkReal x6583=(r00*x6582);
IkReal x6584=(sj4*x6583);
IkReal x6585=(r01*x6579);
IkReal x6586=(sj4*x6585);
IkReal x6587=((1.0)*cj4);
IkReal x6588=(r01*x6582);
IkReal x6589=(sj4*x6580);
IkReal x6590=((1.0)*sj4);
IkReal x6591=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6587*x6588))+x6586+x6584+x6581);
evalcond[1]=((((-1.0)*x6583*x6587))+x6589+(((-1.0)*x6585*x6587))+(((-1.0)*x6588*x6590)));
evalcond[2]=((0.00036)+((px*sj4))+(((-1.0)*py*x6587))+((x6588*x6591))+(((-0.03431)*x6584))+(((-0.03431)*x6581))+(((-0.03431)*x6586)));
evalcond[3]=((0.00337)+(((-1.0)*py*x6590))+(((-0.03431)*x6589))+((x6583*x6591))+(((-1.0)*px*x6587))+(((0.03431)*sj4*x6588))+((x6585*x6591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6592=((29.146021568056)*px);
IkReal x6593=(r00*x6592);
IkReal x6594=(cj4*sj4);
IkReal x6595=(r01*x6592);
IkReal x6596=((29.146021568056)*cj4*py*sj4);
IkReal x6597=cj4*cj4;
IkReal x6598=((29.146021568056)*py*x6597);
if( IKabs(((((-1.0)*x6593*x6597))+(((-1.0)*x6594*x6595))+(((-1.0)*r00*x6596))+x6593+((r01*x6598)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6598))+((x6593*x6594))+(((-1.0)*x6595*x6597))+x6595+(((-1.0)*r01*x6596)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6593*x6597))+(((-1.0)*x6594*x6595))+(((-1.0)*r00*x6596))+x6593+((r01*x6598))))+IKsqr(((((-1.0)*r00*x6598))+((x6593*x6594))+(((-1.0)*x6595*x6597))+x6595+(((-1.0)*r01*x6596))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6593*x6597))+(((-1.0)*x6594*x6595))+(((-1.0)*r00*x6596))+x6593+((r01*x6598))), ((((-1.0)*r00*x6598))+((x6593*x6594))+(((-1.0)*x6595*x6597))+x6595+(((-1.0)*r01*x6596))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6599=IKcos(j9);
IkReal x6600=(r00*x6599);
IkReal x6601=(cj4*x6600);
IkReal x6602=IKsin(j9);
IkReal x6603=(r00*x6602);
IkReal x6604=(sj4*x6603);
IkReal x6605=(r01*x6599);
IkReal x6606=(sj4*x6605);
IkReal x6607=((1.0)*cj4);
IkReal x6608=(r01*x6602);
IkReal x6609=(sj4*x6600);
IkReal x6610=((1.0)*sj4);
IkReal x6611=((0.03431)*cj4);
evalcond[0]=(x6606+x6604+x6601+(((-1.0)*x6607*x6608)));
evalcond[1]=((((-1.0)*x6605*x6607))+(((-1.0)*x6608*x6610))+x6609+(((-1.0)*x6603*x6607)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x6607))+(((-0.03431)*x6601))+((x6608*x6611))+(((-0.03431)*x6606))+(((-0.03431)*x6604)));
evalcond[3]=((0.00337)+((x6605*x6611))+(((-1.0)*py*x6610))+((x6603*x6611))+(((-1.0)*px*x6607))+(((-0.03431)*x6609))+(((0.03431)*sj4*x6608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6612=((29.146021568056)*px);
IkReal x6613=(r00*x6612);
IkReal x6614=(cj4*sj4);
IkReal x6615=(r01*x6612);
IkReal x6616=((29.146021568056)*cj4*py*sj4);
IkReal x6617=cj4*cj4;
IkReal x6618=((29.146021568056)*py*x6617);
if( IKabs(((((-1.0)*r00*x6616))+x6613+((r01*x6618))+(((-1.0)*x6614*x6615))+(((-1.0)*x6613*x6617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6615+(((-1.0)*r01*x6616))+(((-1.0)*r00*x6618))+((x6613*x6614))+(((-1.0)*x6615*x6617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6616))+x6613+((r01*x6618))+(((-1.0)*x6614*x6615))+(((-1.0)*x6613*x6617))))+IKsqr((x6615+(((-1.0)*r01*x6616))+(((-1.0)*r00*x6618))+((x6613*x6614))+(((-1.0)*x6615*x6617))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x6616))+x6613+((r01*x6618))+(((-1.0)*x6614*x6615))+(((-1.0)*x6613*x6617))), (x6615+(((-1.0)*r01*x6616))+(((-1.0)*r00*x6618))+((x6613*x6614))+(((-1.0)*x6615*x6617))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6619=IKcos(j9);
IkReal x6620=(r00*x6619);
IkReal x6621=(cj4*x6620);
IkReal x6622=IKsin(j9);
IkReal x6623=(r00*x6622);
IkReal x6624=(sj4*x6623);
IkReal x6625=(r01*x6619);
IkReal x6626=(sj4*x6625);
IkReal x6627=((1.0)*cj4);
IkReal x6628=(r01*x6622);
IkReal x6629=(sj4*x6620);
IkReal x6630=((1.0)*sj4);
IkReal x6631=((0.03431)*cj4);
evalcond[0]=(x6621+x6626+x6624+(((-1.0)*x6627*x6628)));
evalcond[1]=((((-1.0)*x6625*x6627))+(((-1.0)*x6628*x6630))+x6629+(((-1.0)*x6623*x6627)));
evalcond[2]=(((x6628*x6631))+((px*sj4))+(((-0.03431)*x6621))+(((-0.03431)*x6626))+(((-1.0)*py*x6627))+(((-0.03431)*x6624)));
evalcond[3]=((0.00337)+((x6623*x6631))+((x6625*x6631))+(((-1.0)*py*x6630))+(((-0.03431)*x6629))+(((0.03431)*sj4*x6628))+(((-1.0)*px*x6627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6632=((29.146021568056)*px);
IkReal x6633=(r00*x6632);
IkReal x6634=(cj4*sj4);
IkReal x6635=(r01*x6632);
IkReal x6636=((29.146021568056)*cj4*py*sj4);
IkReal x6637=cj4*cj4;
IkReal x6638=((29.146021568056)*py*x6637);
if( IKabs(((((-1.0)*x6633*x6637))+(((-1.0)*x6634*x6635))+x6633+((r01*x6638))+(((-1.0)*r00*x6636)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6636))+x6635+((x6633*x6634))+(((-1.0)*r00*x6638))+(((-1.0)*x6635*x6637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6633*x6637))+(((-1.0)*x6634*x6635))+x6633+((r01*x6638))+(((-1.0)*r00*x6636))))+IKsqr(((((-1.0)*r01*x6636))+x6635+((x6633*x6634))+(((-1.0)*r00*x6638))+(((-1.0)*x6635*x6637))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6633*x6637))+(((-1.0)*x6634*x6635))+x6633+((r01*x6638))+(((-1.0)*r00*x6636))), ((((-1.0)*r01*x6636))+x6635+((x6633*x6634))+(((-1.0)*r00*x6638))+(((-1.0)*x6635*x6637))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6639=IKcos(j9);
IkReal x6640=(r00*x6639);
IkReal x6641=(cj4*x6640);
IkReal x6642=IKsin(j9);
IkReal x6643=(r00*x6642);
IkReal x6644=(sj4*x6643);
IkReal x6645=(r01*x6639);
IkReal x6646=(sj4*x6645);
IkReal x6647=((1.0)*cj4);
IkReal x6648=(r01*x6642);
IkReal x6649=(sj4*x6640);
IkReal x6650=((1.0)*sj4);
IkReal x6651=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6647*x6648))+x6644+x6641+x6646);
evalcond[1]=(x6649+(((-1.0)*x6643*x6647))+(((-1.0)*x6648*x6650))+(((-1.0)*x6645*x6647)));
evalcond[2]=((((-0.03431)*x6644))+((px*sj4))+(((-1.0)*py*x6647))+(((-0.03431)*x6641))+(((-0.03431)*x6646))+((x6648*x6651)));
evalcond[3]=((0.00373)+(((-1.0)*py*x6650))+(((0.03431)*sj4*x6648))+(((-0.03431)*x6649))+((x6643*x6651))+(((-1.0)*px*x6647))+((x6645*x6651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6652=((29.146021568056)*px);
IkReal x6653=(r00*x6652);
IkReal x6654=(cj4*sj4);
IkReal x6655=(r01*x6652);
IkReal x6656=((29.146021568056)*cj4*py*sj4);
IkReal x6657=cj4*cj4;
IkReal x6658=((29.146021568056)*py*x6657);
if( IKabs(((((-1.0)*r00*x6656))+(((-1.0)*x6654*x6655))+x6653+((r01*x6658))+(((-1.0)*x6653*x6657)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6655+(((-1.0)*r01*x6656))+((x6653*x6654))+(((-1.0)*x6655*x6657))+(((-1.0)*r00*x6658)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6656))+(((-1.0)*x6654*x6655))+x6653+((r01*x6658))+(((-1.0)*x6653*x6657))))+IKsqr((x6655+(((-1.0)*r01*x6656))+((x6653*x6654))+(((-1.0)*x6655*x6657))+(((-1.0)*r00*x6658))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x6656))+(((-1.0)*x6654*x6655))+x6653+((r01*x6658))+(((-1.0)*x6653*x6657))), (x6655+(((-1.0)*r01*x6656))+((x6653*x6654))+(((-1.0)*x6655*x6657))+(((-1.0)*r00*x6658))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6659=IKcos(j9);
IkReal x6660=(r00*x6659);
IkReal x6661=(cj4*x6660);
IkReal x6662=IKsin(j9);
IkReal x6663=(r00*x6662);
IkReal x6664=(sj4*x6663);
IkReal x6665=(r01*x6659);
IkReal x6666=(sj4*x6665);
IkReal x6667=((1.0)*cj4);
IkReal x6668=(r01*x6662);
IkReal x6669=(sj4*x6660);
IkReal x6670=((1.0)*sj4);
IkReal x6671=((0.03431)*cj4);
evalcond[0]=(x6664+x6666+x6661+(((-1.0)*x6667*x6668)));
evalcond[1]=(x6669+(((-1.0)*x6665*x6667))+(((-1.0)*x6668*x6670))+(((-1.0)*x6663*x6667)));
evalcond[2]=(((px*sj4))+((x6668*x6671))+(((-0.03431)*x6661))+(((-0.03431)*x6664))+(((-0.03431)*x6666))+(((-1.0)*py*x6667)));
evalcond[3]=((0.00301)+((x6665*x6671))+(((-1.0)*px*x6667))+((x6663*x6671))+(((0.03431)*sj4*x6668))+(((-1.0)*py*x6670))+(((-0.03431)*x6669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6672=(cj6*r00);
IkReal x6673=(cj6*r01);
CheckValue<IkReal> x6674 = IKatan2WithCheck(IkReal((((sj4*x6672))+(((-1.0)*cj4*x6673)))),(((cj4*x6672))+((sj4*x6673))),IKFAST_ATAN2_MAGTHRESH);
if(!x6674.valid){
continue;
}
CheckValue<IkReal> x6675=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x6675.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x6674.value)+(((-1.0)*(1.5707963267949)*(x6675.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x6676=IKcos(j9);
IkReal x6677=(r00*x6676);
IkReal x6678=(cj4*x6677);
IkReal x6679=IKsin(j9);
IkReal x6680=(r00*x6679);
IkReal x6681=(sj4*x6680);
IkReal x6682=(r01*x6676);
IkReal x6683=(sj4*x6682);
IkReal x6684=((1.0)*cj4);
IkReal x6685=(r01*x6679);
IkReal x6686=(sj4*x6677);
IkReal x6687=(x6680*x6684);
IkReal x6688=(x6682*x6684);
IkReal x6689=((1.0)*sj4);
IkReal x6690=(x6685*x6689);
IkReal x6691=(cj4*r01*x6679);
IkReal x6692=((1.0)*cj4*r00*x6676);
IkReal x6693=((1.0)*sj4*sj8);
IkReal x6694=((-1.0)*(((1.0)*cj6)));
IkReal x6695=((1.0)*cj8*sj4);
IkReal x6696=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6684*x6685))+x6683+x6681+x6678);
evalcond[1]=((((-1.0)*x6687))+(((-1.0)*x6688))+x6686+(((-1.0)*x6690)));
evalcond[2]=((((-1.0)*cj8*x6690))+(((-1.0)*cj8*x6688))+(((-1.0)*cj8*x6687))+sj6+((cj8*x6686)));
evalcond[3]=((((-1.0)*sj8*x6692))+(((-1.0)*x6680*x6693))+(((-1.0)*x6682*x6693))+(((-1.0)*(1.0)*sj6))+((sj8*x6691)));
evalcond[4]=(((sj8*x6686))+(((-1.0)*sj8*x6690))+(((-1.0)*sj8*x6688))+x6694+(((-1.0)*sj8*x6687)));
evalcond[5]=(((cj8*x6691))+(((-1.0)*x6682*x6695))+(((-1.0)*cj8*x6692))+(((-1.0)*x6680*x6695))+x6694);
evalcond[6]=(((px*sj4))+(((-1.0)*py*x6684))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x6681))+((x6685*x6696))+(((-0.03431)*x6678))+(((-0.03431)*x6683)));
evalcond[7]=((0.00337)+(((0.03431)*sj4*x6685))+((x6680*x6696))+(((0.00036)*cj6))+(((-0.03431)*x6686))+(((-1.0)*py*x6689))+((x6682*x6696))+(((-1.0)*px*x6684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6697=(r00*sj6);
IkReal x6698=(r01*sj6);
CheckValue<IkReal> x6699 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x6698))+((sj4*x6697)))),(((sj4*x6698))+((cj4*x6697))),IKFAST_ATAN2_MAGTHRESH);
if(!x6699.valid){
continue;
}
CheckValue<IkReal> x6700=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x6700.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x6699.value)+(((-1.0)*(1.5707963267949)*(x6700.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x6701=IKcos(j9);
IkReal x6702=(r00*x6701);
IkReal x6703=(cj4*x6702);
IkReal x6704=IKsin(j9);
IkReal x6705=(r00*x6704);
IkReal x6706=(sj4*x6705);
IkReal x6707=(r01*x6701);
IkReal x6708=(sj4*x6707);
IkReal x6709=((1.0)*cj4);
IkReal x6710=(r01*x6704);
IkReal x6711=(sj4*x6702);
IkReal x6712=(x6705*x6709);
IkReal x6713=(x6707*x6709);
IkReal x6714=((1.0)*sj4);
IkReal x6715=(x6710*x6714);
IkReal x6716=(cj4*r01*x6704);
IkReal x6717=((1.0)*cj4*r00*x6701);
IkReal x6718=((1.0)*sj4*sj8);
IkReal x6719=((-1.0)*(((1.0)*cj6)));
IkReal x6720=((1.0)*cj8*sj4);
IkReal x6721=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6709*x6710))+x6708+x6706+x6703);
evalcond[1]=((((-1.0)*x6713))+x6711+(((-1.0)*x6712))+(((-1.0)*x6715)));
evalcond[2]=((((-1.0)*cj8*x6712))+(((-1.0)*cj8*x6715))+(((-1.0)*cj8*x6713))+sj6+((cj8*x6711)));
evalcond[3]=((((-1.0)*x6705*x6718))+((sj8*x6716))+(((-1.0)*sj8*x6717))+(((-1.0)*x6707*x6718))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=((((-1.0)*sj8*x6715))+(((-1.0)*sj8*x6712))+x6719+(((-1.0)*sj8*x6713))+((sj8*x6711)));
evalcond[5]=((((-1.0)*x6707*x6720))+((cj8*x6716))+(((-1.0)*cj8*x6717))+(((-1.0)*x6705*x6720))+x6719);
evalcond[6]=(((px*sj4))+(((-0.03431)*x6703))+(((-1.0)*(0.00036)*sj6))+(((-1.0)*py*x6709))+((x6710*x6721))+(((-0.03431)*x6708))+(((-0.03431)*x6706)));
evalcond[7]=((0.00337)+((x6707*x6721))+(((-1.0)*px*x6709))+(((0.00036)*cj6))+(((0.03431)*sj4*x6710))+(((-1.0)*py*x6714))+((x6705*x6721))+(((-0.03431)*x6711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6722=(cj4*cj6);
IkReal x6723=(cj6*sj4);
CheckValue<IkReal> x6724 = IKatan2WithCheck(IkReal((((r00*x6722))+((r01*x6723)))),((((-1.0)*r00*x6723))+((r01*x6722))),IKFAST_ATAN2_MAGTHRESH);
if(!x6724.valid){
continue;
}
CheckValue<IkReal> x6725=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x6725.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x6724.value)+(((-1.0)*(1.5707963267949)*(x6725.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x6726=IKcos(j9);
IkReal x6727=(r00*x6726);
IkReal x6728=(cj4*x6727);
IkReal x6729=IKsin(j9);
IkReal x6730=(r00*x6729);
IkReal x6731=(sj4*x6730);
IkReal x6732=(r01*x6726);
IkReal x6733=(sj4*x6732);
IkReal x6734=((1.0)*cj4);
IkReal x6735=(r01*x6729);
IkReal x6736=(sj4*x6727);
IkReal x6737=(x6730*x6734);
IkReal x6738=(x6732*x6734);
IkReal x6739=((1.0)*sj4);
IkReal x6740=(x6735*x6739);
IkReal x6741=(cj4*r01*x6729);
IkReal x6742=((1.0)*cj4*r00*x6726);
IkReal x6743=((1.0)*sj4*sj8);
IkReal x6744=((-1.0)*(((1.0)*cj6)));
IkReal x6745=((1.0)*cj8*sj4);
IkReal x6746=((0.03431)*cj4);
evalcond[0]=(x6733+x6731+(((-1.0)*x6734*x6735))+x6728);
evalcond[1]=((((-1.0)*x6740))+x6736+(((-1.0)*x6737))+(((-1.0)*x6738)));
evalcond[2]=((((-1.0)*cj8*x6738))+(((-1.0)*cj8*x6737))+sj6+((cj8*x6736))+(((-1.0)*cj8*x6740)));
evalcond[3]=((((-1.0)*x6730*x6743))+((sj8*x6741))+(((-1.0)*x6732*x6743))+(((-1.0)*sj8*x6742))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=((((-1.0)*sj8*x6740))+((sj8*x6736))+x6744+(((-1.0)*sj8*x6737))+(((-1.0)*sj8*x6738)));
evalcond[5]=(((cj8*x6741))+x6744+(((-1.0)*cj8*x6742))+(((-1.0)*x6730*x6745))+(((-1.0)*x6732*x6745)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x6733))+((x6735*x6746))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x6731))+(((-1.0)*py*x6734))+(((-0.03431)*x6728)));
evalcond[7]=((0.00337)+((x6730*x6746))+(((0.03431)*sj4*x6735))+(((-1.0)*px*x6734))+(((0.00036)*cj6))+(((-0.03431)*x6736))+(((-1.0)*py*x6739))+((x6732*x6746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6747=(cj8*r01*sj8);
IkReal x6748=(cj6*r01);
IkReal x6749=((0.03431)*x6748);
IkReal x6750=(sj8*(((((-1.0)*(0.00036)*cj8*r01*sj6))+x6749)));
IkReal x6751=(cj8*(((((-1.0)*x6749))+(((0.00036)*sj8*x6748))+(((0.00337)*r01*sj8)))));
CheckValue<IkReal> x6752=IKPowWithIntegerCheck(IKsign((((pp*x6747))+(((-1.0)*x6747*(pz*pz))))),-1);
if(!x6752.valid){
continue;
}
CheckValue<IkReal> x6753 = IKatan2WithCheck(IkReal(((((-1.0)*px*x6750))+((py*x6751)))),(((px*x6751))+((py*x6750))),IKFAST_ATAN2_MAGTHRESH);
if(!x6753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6752.value)))+(x6753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x6754=((0.03431)*cj6);
IkReal x6755=(r00*x6754);
IkReal x6756=((0.00337)*sj8);
IkReal x6757=((0.00036)*cj6*sj8);
IkReal x6758=(r00*sj8);
IkReal x6759=IKcos(j4);
IkReal x6760=(px*x6759);
IkReal x6761=IKsin(j4);
IkReal x6762=(py*x6761);
IkReal x6763=(r01*x6754);
IkReal x6764=((0.00036)*cj8*sj6);
IkReal x6765=(cj8*px*x6761);
IkReal x6766=((1.0)*cj8*py*x6759);
IkReal x6767=((1.0)*r01*sj8);
evalcond[0]=(((x6758*x6760))+(((-1.0)*r00*x6757))+((x6758*x6762))+(((-1.0)*r00*x6756))+x6755);
evalcond[1]=(((r01*x6765))+(((-1.0)*r01*x6766))+(((-1.0)*r01*x6764))+x6763);
evalcond[2]=(((r00*x6765))+(((-1.0)*r00*x6766))+x6755+(((-1.0)*r00*x6764)));
evalcond[3]=((((-1.0)*x6762*x6767))+(((-1.0)*x6763))+((r01*x6757))+((r01*x6756))+(((-1.0)*x6760*x6767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[4];
IkReal x6768=((1.0)*r00);
IkReal x6769=(((py*r01))+((px*r00)));
IkReal x6770=(px*r01);
IkReal x6771=(pz*r01);
IkReal x6772=((-1.0)*pz*x6768);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6768);
r10=r01;
npx=x6769;
npy=((((-1.0)*py*x6768))+x6770);
npz=(pz*r22);
rxp0_0=x6771;
rxp0_1=x6772;
rxp0_2=(((py*r00))+(((-1.0)*x6770)));
rxp1_0=x6772;
rxp1_1=((-1.0)*x6771);
rxp1_2=x6769;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=cj6;
j9eval[3]=((sj4*sj4)+(cj4*cj4));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x6773=((1.0)*r00);
IkReal x6774=(((py*r01))+((px*r00)));
IkReal x6775=(px*r01);
IkReal x6776=(pz*r01);
IkReal x6777=((-1.0)*pz*x6773);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6773);
r10=r01;
npx=x6774;
npy=((((-1.0)*py*x6773))+x6775);
npz=(pz*r22);
rxp0_0=x6776;
rxp0_1=x6777;
rxp0_2=((((-1.0)*x6775))+((py*r00)));
rxp1_0=x6777;
rxp1_1=((-1.0)*x6776);
rxp1_2=x6774;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=sj8;
j9eval[1]=sj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(sj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal j9eval[4];
IkReal x6778=((1.0)*r00);
IkReal x6779=(((py*r01))+((px*r00)));
IkReal x6780=(px*r01);
IkReal x6781=(pz*r01);
IkReal x6782=((-1.0)*pz*x6778);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x6778);
r10=r01;
npx=x6779;
npy=(x6780+(((-1.0)*py*x6778)));
npz=(pz*r22);
rxp0_0=x6781;
rxp0_1=x6782;
rxp0_2=((((-1.0)*x6780))+((py*r00)));
rxp1_0=x6782;
rxp1_1=((-1.0)*x6781);
rxp1_2=x6779;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
j9eval[0]=cj8;
j9eval[1]=cj6;
j9eval[2]=((sj4*sj4)+(cj4*cj4));
j9eval[3]=IKsign(cj8);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  || IKabs(j9eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=((-1.0)*(((1.0)*r22)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6783=((29.146021568056)*px);
IkReal x6784=(r00*x6783);
IkReal x6785=(cj4*sj4);
IkReal x6786=(r01*x6783);
IkReal x6787=((29.146021568056)*cj4*py*sj4);
IkReal x6788=cj4*cj4;
IkReal x6789=((29.146021568056)*py*x6788);
if( IKabs(((((-1.0)*x6785*x6786))+x6784+((r01*x6789))+(((-1.0)*x6784*x6788))+(((-1.0)*r00*x6787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6789))+(((-1.0)*x6786*x6788))+((x6784*x6785))+(((-1.0)*r01*x6787))+x6786)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6785*x6786))+x6784+((r01*x6789))+(((-1.0)*x6784*x6788))+(((-1.0)*r00*x6787))))+IKsqr(((((-1.0)*r00*x6789))+(((-1.0)*x6786*x6788))+((x6784*x6785))+(((-1.0)*r01*x6787))+x6786))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6785*x6786))+x6784+((r01*x6789))+(((-1.0)*x6784*x6788))+(((-1.0)*r00*x6787))), ((((-1.0)*r00*x6789))+(((-1.0)*x6786*x6788))+((x6784*x6785))+(((-1.0)*r01*x6787))+x6786));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6790=IKcos(j9);
IkReal x6791=(r00*x6790);
IkReal x6792=(cj4*x6791);
IkReal x6793=IKsin(j9);
IkReal x6794=(r00*x6793);
IkReal x6795=(sj4*x6794);
IkReal x6796=(r01*x6790);
IkReal x6797=(sj4*x6796);
IkReal x6798=((1.0)*cj4);
IkReal x6799=(r01*x6793);
IkReal x6800=(sj4*x6791);
IkReal x6801=((1.0)*sj4);
IkReal x6802=((0.03431)*cj4);
evalcond[0]=(x6797+x6795+x6792+(((-1.0)*x6798*x6799)));
evalcond[1]=(x6800+(((-1.0)*x6796*x6798))+(((-1.0)*x6794*x6798))+(((-1.0)*x6799*x6801)));
evalcond[2]=(((px*sj4))+(((-0.03431)*x6797))+((x6799*x6802))+(((-0.03431)*x6792))+(((-0.03431)*x6795))+(((-1.0)*py*x6798)));
evalcond[3]=((0.00337)+(((-1.0)*px*x6798))+(((-1.0)*py*x6801))+(((-0.03431)*x6800))+((x6794*x6802))+((x6796*x6802))+(((0.03431)*sj4*x6799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=0;
evalcond[3]=r22;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*cj6)));
evalcond[6]=sj6;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6803=((29.146021568056)*px);
IkReal x6804=(r00*x6803);
IkReal x6805=(cj4*sj4);
IkReal x6806=(r01*x6803);
IkReal x6807=((29.146021568056)*cj4*py*sj4);
IkReal x6808=cj4*cj4;
IkReal x6809=((29.146021568056)*py*x6808);
if( IKabs((x6804+((r01*x6809))+(((-1.0)*x6805*x6806))+(((-1.0)*r00*x6807))+(((-1.0)*x6804*x6808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6806+((x6804*x6805))+(((-1.0)*r01*x6807))+(((-1.0)*r00*x6809))+(((-1.0)*x6806*x6808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6804+((r01*x6809))+(((-1.0)*x6805*x6806))+(((-1.0)*r00*x6807))+(((-1.0)*x6804*x6808))))+IKsqr((x6806+((x6804*x6805))+(((-1.0)*r01*x6807))+(((-1.0)*r00*x6809))+(((-1.0)*x6806*x6808))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x6804+((r01*x6809))+(((-1.0)*x6805*x6806))+(((-1.0)*r00*x6807))+(((-1.0)*x6804*x6808))), (x6806+((x6804*x6805))+(((-1.0)*r01*x6807))+(((-1.0)*r00*x6809))+(((-1.0)*x6806*x6808))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6810=IKcos(j9);
IkReal x6811=(r00*x6810);
IkReal x6812=(cj4*x6811);
IkReal x6813=IKsin(j9);
IkReal x6814=(r00*x6813);
IkReal x6815=(sj4*x6814);
IkReal x6816=(r01*x6810);
IkReal x6817=(sj4*x6816);
IkReal x6818=((1.0)*cj4);
IkReal x6819=(r01*x6813);
IkReal x6820=(sj4*x6811);
IkReal x6821=((1.0)*sj4);
IkReal x6822=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6818*x6819))+x6812+x6815+x6817);
evalcond[1]=((((-1.0)*x6816*x6818))+(((-1.0)*x6819*x6821))+(((-1.0)*x6814*x6818))+x6820);
evalcond[2]=(((px*sj4))+(((-0.03431)*x6815))+(((-1.0)*py*x6818))+((x6819*x6822))+(((-0.03431)*x6812))+(((-0.03431)*x6817)));
evalcond[3]=((0.00337)+(((-1.0)*py*x6821))+(((-0.03431)*x6820))+(((-1.0)*px*x6818))+(((0.03431)*sj4*x6819))+((x6816*x6822))+((x6814*x6822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6823=((0.0982220926843486)*cj4);
IkReal x6824=((29.146021568056)*py);
IkReal x6825=(r01*x6824);
IkReal x6826=((0.0982220926843486)*sj4);
IkReal x6827=((29.146021568056)*cj4*px*sj4);
IkReal x6828=(cj4*sj4);
IkReal x6829=(r00*x6824);
IkReal x6830=cj4*cj4;
IkReal x6831=((29.146021568056)*px*x6830);
if( IKabs((((r01*x6827))+(((-1.0)*r00*x6823))+((x6828*x6829))+((r00*x6831))+x6825+(((-1.0)*x6825*x6830))+(((-1.0)*r01*x6826)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x6825*x6828))+((r01*x6831))+((x6829*x6830))+(((-1.0)*x6829))+((r00*x6826))+(((-1.0)*r01*x6823))+(((-1.0)*r00*x6827)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x6827))+(((-1.0)*r00*x6823))+((x6828*x6829))+((r00*x6831))+x6825+(((-1.0)*x6825*x6830))+(((-1.0)*r01*x6826))))+IKsqr((((x6825*x6828))+((r01*x6831))+((x6829*x6830))+(((-1.0)*x6829))+((r00*x6826))+(((-1.0)*r01*x6823))+(((-1.0)*r00*x6827))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x6827))+(((-1.0)*r00*x6823))+((x6828*x6829))+((r00*x6831))+x6825+(((-1.0)*x6825*x6830))+(((-1.0)*r01*x6826))), (((x6825*x6828))+((r01*x6831))+((x6829*x6830))+(((-1.0)*x6829))+((r00*x6826))+(((-1.0)*r01*x6823))+(((-1.0)*r00*x6827))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6832=IKcos(j9);
IkReal x6833=(r00*x6832);
IkReal x6834=(cj4*x6833);
IkReal x6835=IKsin(j9);
IkReal x6836=(r00*x6835);
IkReal x6837=(sj4*x6836);
IkReal x6838=(r01*x6832);
IkReal x6839=(sj4*x6838);
IkReal x6840=((1.0)*cj4);
IkReal x6841=(r01*x6835);
IkReal x6842=(sj4*x6833);
IkReal x6843=((1.0)*sj4);
IkReal x6844=((0.03431)*cj4);
evalcond[0]=(x6837+x6839+x6834+(((-1.0)*x6840*x6841)));
evalcond[1]=(x6842+(((-1.0)*x6841*x6843))+(((-1.0)*x6836*x6840))+(((-1.0)*x6838*x6840)));
evalcond[2]=((-0.00036)+((px*sj4))+((x6841*x6844))+(((-0.03431)*x6834))+(((-0.03431)*x6839))+(((-0.03431)*x6837))+(((-1.0)*py*x6840)));
evalcond[3]=((0.00337)+(((-1.0)*py*x6843))+(((-1.0)*px*x6840))+(((0.03431)*sj4*x6841))+((x6838*x6844))+((x6836*x6844))+(((-0.03431)*x6842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6845=((0.0982220926843486)*cj4);
IkReal x6846=((29.146021568056)*py);
IkReal x6847=(r01*x6846);
IkReal x6848=((0.0982220926843486)*sj4);
IkReal x6849=((29.146021568056)*cj4*px*sj4);
IkReal x6850=(cj4*sj4);
IkReal x6851=(r00*x6846);
IkReal x6852=cj4*cj4;
IkReal x6853=((29.146021568056)*px*x6852);
if( IKabs((((r01*x6849))+x6847+(((-1.0)*r00*x6845))+(((-1.0)*x6847*x6852))+((r00*x6853))+(((-1.0)*r01*x6848))+((x6850*x6851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x6851*x6852))+(((-1.0)*r00*x6849))+((r01*x6853))+(((-1.0)*r01*x6845))+((x6847*x6850))+((r00*x6848))+(((-1.0)*x6851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x6849))+x6847+(((-1.0)*r00*x6845))+(((-1.0)*x6847*x6852))+((r00*x6853))+(((-1.0)*r01*x6848))+((x6850*x6851))))+IKsqr((((x6851*x6852))+(((-1.0)*r00*x6849))+((r01*x6853))+(((-1.0)*r01*x6845))+((x6847*x6850))+((r00*x6848))+(((-1.0)*x6851))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x6849))+x6847+(((-1.0)*r00*x6845))+(((-1.0)*x6847*x6852))+((r00*x6853))+(((-1.0)*r01*x6848))+((x6850*x6851))), (((x6851*x6852))+(((-1.0)*r00*x6849))+((r01*x6853))+(((-1.0)*r01*x6845))+((x6847*x6850))+((r00*x6848))+(((-1.0)*x6851))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6854=IKcos(j9);
IkReal x6855=(r00*x6854);
IkReal x6856=(cj4*x6855);
IkReal x6857=IKsin(j9);
IkReal x6858=(r00*x6857);
IkReal x6859=(sj4*x6858);
IkReal x6860=(r01*x6854);
IkReal x6861=(sj4*x6860);
IkReal x6862=((1.0)*cj4);
IkReal x6863=(r01*x6857);
IkReal x6864=(sj4*x6855);
IkReal x6865=((1.0)*sj4);
IkReal x6866=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6862*x6863))+x6859+x6856+x6861);
evalcond[1]=((((-1.0)*x6858*x6862))+(((-1.0)*x6860*x6862))+x6864+(((-1.0)*x6863*x6865)));
evalcond[2]=((0.00036)+((px*sj4))+(((-0.03431)*x6859))+((x6863*x6866))+(((-1.0)*py*x6862))+(((-0.03431)*x6861))+(((-0.03431)*x6856)));
evalcond[3]=((0.00337)+((x6858*x6866))+(((0.03431)*sj4*x6863))+((x6860*x6866))+(((-1.0)*px*x6862))+(((-0.03431)*x6864))+(((-1.0)*py*x6865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=r22;
evalcond[3]=0;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6867=((29.146021568056)*px);
IkReal x6868=(r00*x6867);
IkReal x6869=(cj4*sj4);
IkReal x6870=(r01*x6867);
IkReal x6871=((29.146021568056)*cj4*py*sj4);
IkReal x6872=cj4*cj4;
IkReal x6873=((29.146021568056)*py*x6872);
if( IKabs(((((-1.0)*x6868*x6872))+(((-1.0)*r00*x6871))+(((-1.0)*x6869*x6870))+((r01*x6873))+x6868)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6870*x6872))+(((-1.0)*r01*x6871))+x6870+((x6868*x6869))+(((-1.0)*r00*x6873)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6868*x6872))+(((-1.0)*r00*x6871))+(((-1.0)*x6869*x6870))+((r01*x6873))+x6868))+IKsqr(((((-1.0)*x6870*x6872))+(((-1.0)*r01*x6871))+x6870+((x6868*x6869))+(((-1.0)*r00*x6873))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6868*x6872))+(((-1.0)*r00*x6871))+(((-1.0)*x6869*x6870))+((r01*x6873))+x6868), ((((-1.0)*x6870*x6872))+(((-1.0)*r01*x6871))+x6870+((x6868*x6869))+(((-1.0)*r00*x6873))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6874=IKcos(j9);
IkReal x6875=(r00*x6874);
IkReal x6876=(cj4*x6875);
IkReal x6877=IKsin(j9);
IkReal x6878=(r00*x6877);
IkReal x6879=(sj4*x6878);
IkReal x6880=(r01*x6874);
IkReal x6881=(sj4*x6880);
IkReal x6882=((1.0)*cj4);
IkReal x6883=(r01*x6877);
IkReal x6884=(sj4*x6875);
IkReal x6885=((1.0)*sj4);
IkReal x6886=((0.03431)*cj4);
evalcond[0]=(x6876+x6879+x6881+(((-1.0)*x6882*x6883)));
evalcond[1]=((((-1.0)*x6883*x6885))+(((-1.0)*x6878*x6882))+(((-1.0)*x6880*x6882))+x6884);
evalcond[2]=(((px*sj4))+((x6883*x6886))+(((-1.0)*py*x6882))+(((-0.03431)*x6879))+(((-0.03431)*x6876))+(((-0.03431)*x6881)));
evalcond[3]=((0.00337)+(((-1.0)*py*x6885))+((x6880*x6886))+(((-1.0)*px*x6882))+((x6878*x6886))+(((0.03431)*sj4*x6883))+(((-0.03431)*x6884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=((-1.0)*(((1.0)*r22)));
evalcond[3]=0;
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
evalcond[5]=((-1.0)*(((1.0)*sj6)));
evalcond[6]=((-1.0)*(((1.0)*cj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6887=((29.146021568056)*px);
IkReal x6888=(r00*x6887);
IkReal x6889=(cj4*sj4);
IkReal x6890=(r01*x6887);
IkReal x6891=((29.146021568056)*cj4*py*sj4);
IkReal x6892=cj4*cj4;
IkReal x6893=((29.146021568056)*py*x6892);
if( IKabs(((((-1.0)*r00*x6891))+x6888+(((-1.0)*x6888*x6892))+((r01*x6893))+(((-1.0)*x6889*x6890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6893))+((x6888*x6889))+(((-1.0)*x6890*x6892))+x6890+(((-1.0)*r01*x6891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6891))+x6888+(((-1.0)*x6888*x6892))+((r01*x6893))+(((-1.0)*x6889*x6890))))+IKsqr(((((-1.0)*r00*x6893))+((x6888*x6889))+(((-1.0)*x6890*x6892))+x6890+(((-1.0)*r01*x6891))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*r00*x6891))+x6888+(((-1.0)*x6888*x6892))+((r01*x6893))+(((-1.0)*x6889*x6890))), ((((-1.0)*r00*x6893))+((x6888*x6889))+(((-1.0)*x6890*x6892))+x6890+(((-1.0)*r01*x6891))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6894=IKcos(j9);
IkReal x6895=(r00*x6894);
IkReal x6896=(cj4*x6895);
IkReal x6897=IKsin(j9);
IkReal x6898=(r00*x6897);
IkReal x6899=(sj4*x6898);
IkReal x6900=(r01*x6894);
IkReal x6901=(sj4*x6900);
IkReal x6902=((1.0)*cj4);
IkReal x6903=(r01*x6897);
IkReal x6904=(sj4*x6895);
IkReal x6905=((1.0)*sj4);
IkReal x6906=((0.03431)*cj4);
evalcond[0]=(x6896+x6899+x6901+(((-1.0)*x6902*x6903)));
evalcond[1]=((((-1.0)*x6900*x6902))+(((-1.0)*x6898*x6902))+(((-1.0)*x6903*x6905))+x6904);
evalcond[2]=(((px*sj4))+(((-0.03431)*x6899))+(((-0.03431)*x6896))+(((-1.0)*py*x6902))+(((-0.03431)*x6901))+((x6903*x6906)));
evalcond[3]=((0.00337)+(((0.03431)*sj4*x6903))+(((-0.03431)*x6904))+((x6900*x6906))+(((-1.0)*px*x6902))+(((-1.0)*py*x6905))+((x6898*x6906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6907=((29.146021568056)*px);
IkReal x6908=(r00*x6907);
IkReal x6909=(cj4*sj4);
IkReal x6910=(r01*x6907);
IkReal x6911=((29.146021568056)*cj4*py*sj4);
IkReal x6912=cj4*cj4;
IkReal x6913=((29.146021568056)*py*x6912);
if( IKabs(((((-1.0)*x6908*x6912))+(((-1.0)*r00*x6911))+x6908+(((-1.0)*x6909*x6910))+((r01*x6913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6911))+x6910+((x6908*x6909))+(((-1.0)*x6910*x6912))+(((-1.0)*r00*x6913)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6908*x6912))+(((-1.0)*r00*x6911))+x6908+(((-1.0)*x6909*x6910))+((r01*x6913))))+IKsqr(((((-1.0)*r01*x6911))+x6910+((x6908*x6909))+(((-1.0)*x6910*x6912))+(((-1.0)*r00*x6913))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x6908*x6912))+(((-1.0)*r00*x6911))+x6908+(((-1.0)*x6909*x6910))+((r01*x6913))), ((((-1.0)*r01*x6911))+x6910+((x6908*x6909))+(((-1.0)*x6910*x6912))+(((-1.0)*r00*x6913))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6914=IKcos(j9);
IkReal x6915=(r00*x6914);
IkReal x6916=(cj4*x6915);
IkReal x6917=IKsin(j9);
IkReal x6918=(r00*x6917);
IkReal x6919=(sj4*x6918);
IkReal x6920=(r01*x6914);
IkReal x6921=(sj4*x6920);
IkReal x6922=((1.0)*cj4);
IkReal x6923=(r01*x6917);
IkReal x6924=(sj4*x6915);
IkReal x6925=((1.0)*sj4);
IkReal x6926=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6922*x6923))+x6921+x6919+x6916);
evalcond[1]=(x6924+(((-1.0)*x6918*x6922))+(((-1.0)*x6923*x6925))+(((-1.0)*x6920*x6922)));
evalcond[2]=((((-0.03431)*x6919))+((px*sj4))+((x6923*x6926))+(((-1.0)*py*x6922))+(((-0.03431)*x6921))+(((-0.03431)*x6916)));
evalcond[3]=((0.00373)+(((-1.0)*px*x6922))+(((-1.0)*py*x6925))+((x6918*x6926))+(((0.03431)*sj4*x6923))+(((-0.03431)*x6924))+((x6920*x6926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=1.0;
evalcond[2]=(cj8*r22);
evalcond[3]=((-1.0)*(((1.0)*r22*sj8)));
evalcond[4]=((-0.16132)+(((-1.0)*(1.0)*pz)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6927=((29.146021568056)*px);
IkReal x6928=(r00*x6927);
IkReal x6929=(cj4*sj4);
IkReal x6930=(r01*x6927);
IkReal x6931=((29.146021568056)*cj4*py*sj4);
IkReal x6932=cj4*cj4;
IkReal x6933=((29.146021568056)*py*x6932);
if( IKabs((x6928+(((-1.0)*x6928*x6932))+((r01*x6933))+(((-1.0)*r00*x6931))+(((-1.0)*x6929*x6930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6931))+x6930+(((-1.0)*r00*x6933))+((x6928*x6929))+(((-1.0)*x6930*x6932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6928+(((-1.0)*x6928*x6932))+((r01*x6933))+(((-1.0)*r00*x6931))+(((-1.0)*x6929*x6930))))+IKsqr(((((-1.0)*r01*x6931))+x6930+(((-1.0)*r00*x6933))+((x6928*x6929))+(((-1.0)*x6930*x6932))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((x6928+(((-1.0)*x6928*x6932))+((r01*x6933))+(((-1.0)*r00*x6931))+(((-1.0)*x6929*x6930))), ((((-1.0)*r01*x6931))+x6930+(((-1.0)*r00*x6933))+((x6928*x6929))+(((-1.0)*x6930*x6932))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x6934=IKcos(j9);
IkReal x6935=(r00*x6934);
IkReal x6936=(cj4*x6935);
IkReal x6937=IKsin(j9);
IkReal x6938=(r00*x6937);
IkReal x6939=(sj4*x6938);
IkReal x6940=(r01*x6934);
IkReal x6941=(sj4*x6940);
IkReal x6942=((1.0)*cj4);
IkReal x6943=(r01*x6937);
IkReal x6944=(sj4*x6935);
IkReal x6945=((1.0)*sj4);
IkReal x6946=((0.03431)*cj4);
evalcond[0]=(x6939+x6936+x6941+(((-1.0)*x6942*x6943)));
evalcond[1]=((((-1.0)*x6943*x6945))+x6944+(((-1.0)*x6938*x6942))+(((-1.0)*x6940*x6942)));
evalcond[2]=(((px*sj4))+(((-1.0)*py*x6942))+((x6943*x6946))+(((-0.03431)*x6936))+(((-0.03431)*x6939))+(((-0.03431)*x6941)));
evalcond[3]=((0.00301)+((x6940*x6946))+(((-1.0)*px*x6942))+(((-0.03431)*x6944))+(((-1.0)*py*x6945))+((x6938*x6946))+(((0.03431)*sj4*x6943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6947=(cj6*r00);
IkReal x6948=(cj6*r01);
CheckValue<IkReal> x6949 = IKatan2WithCheck(IkReal((((sj4*x6947))+(((-1.0)*cj4*x6948)))),(((sj4*x6948))+((cj4*x6947))),IKFAST_ATAN2_MAGTHRESH);
if(!x6949.valid){
continue;
}
CheckValue<IkReal> x6950=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x6950.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x6949.value)+(((-1.0)*(1.5707963267949)*(x6950.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x6951=IKcos(j9);
IkReal x6952=(r00*x6951);
IkReal x6953=(cj4*x6952);
IkReal x6954=IKsin(j9);
IkReal x6955=(r00*x6954);
IkReal x6956=(sj4*x6955);
IkReal x6957=(r01*x6951);
IkReal x6958=(sj4*x6957);
IkReal x6959=((1.0)*cj4);
IkReal x6960=(r01*x6954);
IkReal x6961=(sj4*x6952);
IkReal x6962=(x6955*x6959);
IkReal x6963=(x6957*x6959);
IkReal x6964=((1.0)*sj4);
IkReal x6965=(x6960*x6964);
IkReal x6966=(cj4*r01*x6954);
IkReal x6967=((1.0)*cj4*r00*x6951);
IkReal x6968=((1.0)*sj4*sj8);
IkReal x6969=((-1.0)*(((1.0)*cj6)));
IkReal x6970=((1.0)*cj8*sj4);
IkReal x6971=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x6959*x6960))+x6956+x6953+x6958);
evalcond[1]=((((-1.0)*x6963))+(((-1.0)*x6965))+(((-1.0)*x6962))+x6961);
evalcond[2]=((((-1.0)*cj8*x6963))+(((-1.0)*cj8*x6965))+sj6+(((-1.0)*cj8*x6962))+((cj8*x6961)));
evalcond[3]=((((-1.0)*sj8*x6967))+(((-1.0)*x6955*x6968))+((sj8*x6966))+(((-1.0)*x6957*x6968))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=((((-1.0)*sj8*x6965))+(((-1.0)*sj8*x6963))+((sj8*x6961))+x6969+(((-1.0)*sj8*x6962)));
evalcond[5]=(((cj8*x6966))+(((-1.0)*x6955*x6970))+(((-1.0)*cj8*x6967))+(((-1.0)*x6957*x6970))+x6969);
evalcond[6]=(((px*sj4))+(((-0.03431)*x6958))+(((-0.03431)*x6956))+(((-1.0)*(0.00036)*sj6))+((x6960*x6971))+(((-1.0)*py*x6959))+(((-0.03431)*x6953)));
evalcond[7]=((0.00337)+(((-0.03431)*x6961))+(((0.00036)*cj6))+(((0.03431)*sj4*x6960))+((x6955*x6971))+(((-1.0)*px*x6959))+(((-1.0)*py*x6964))+((x6957*x6971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6972=(r00*sj6);
IkReal x6973=(r01*sj6);
CheckValue<IkReal> x6974 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x6973))+((sj4*x6972)))),(((cj4*x6972))+((sj4*x6973))),IKFAST_ATAN2_MAGTHRESH);
if(!x6974.valid){
continue;
}
CheckValue<IkReal> x6975=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x6975.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x6974.value)+(((-1.0)*(1.5707963267949)*(x6975.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x6976=IKcos(j9);
IkReal x6977=(r00*x6976);
IkReal x6978=(cj4*x6977);
IkReal x6979=IKsin(j9);
IkReal x6980=(r00*x6979);
IkReal x6981=(sj4*x6980);
IkReal x6982=(r01*x6976);
IkReal x6983=(sj4*x6982);
IkReal x6984=((1.0)*cj4);
IkReal x6985=(r01*x6979);
IkReal x6986=(sj4*x6977);
IkReal x6987=(x6980*x6984);
IkReal x6988=(x6982*x6984);
IkReal x6989=((1.0)*sj4);
IkReal x6990=(x6985*x6989);
IkReal x6991=(cj4*r01*x6979);
IkReal x6992=((1.0)*cj4*r00*x6976);
IkReal x6993=((1.0)*sj4*sj8);
IkReal x6994=((-1.0)*(((1.0)*cj6)));
IkReal x6995=((1.0)*cj8*sj4);
IkReal x6996=((0.03431)*cj4);
evalcond[0]=(x6981+x6983+(((-1.0)*x6984*x6985))+x6978);
evalcond[1]=(x6986+(((-1.0)*x6987))+(((-1.0)*x6988))+(((-1.0)*x6990)));
evalcond[2]=(((cj8*x6986))+(((-1.0)*cj8*x6987))+sj6+(((-1.0)*cj8*x6990))+(((-1.0)*cj8*x6988)));
evalcond[3]=((((-1.0)*x6980*x6993))+(((-1.0)*x6982*x6993))+((sj8*x6991))+(((-1.0)*sj8*x6992))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=((((-1.0)*sj8*x6990))+(((-1.0)*sj8*x6987))+((sj8*x6986))+(((-1.0)*sj8*x6988))+x6994);
evalcond[5]=((((-1.0)*cj8*x6992))+((cj8*x6991))+(((-1.0)*x6982*x6995))+(((-1.0)*x6980*x6995))+x6994);
evalcond[6]=(((px*sj4))+(((-1.0)*py*x6984))+((x6985*x6996))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x6981))+(((-0.03431)*x6978))+(((-0.03431)*x6983)));
evalcond[7]=((0.00337)+(((0.03431)*sj4*x6985))+(((-1.0)*py*x6989))+(((0.00036)*cj6))+(((-1.0)*px*x6984))+((x6980*x6996))+(((-0.03431)*x6986))+((x6982*x6996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x6997=(cj4*cj6);
IkReal x6998=(cj6*sj4);
CheckValue<IkReal> x6999 = IKatan2WithCheck(IkReal((((r01*x6998))+((r00*x6997)))),(((r01*x6997))+(((-1.0)*r00*x6998))),IKFAST_ATAN2_MAGTHRESH);
if(!x6999.valid){
continue;
}
CheckValue<IkReal> x7000=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x7000.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x6999.value)+(((-1.0)*(1.5707963267949)*(x7000.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x7001=IKcos(j9);
IkReal x7002=(r00*x7001);
IkReal x7003=(cj4*x7002);
IkReal x7004=IKsin(j9);
IkReal x7005=(r00*x7004);
IkReal x7006=(sj4*x7005);
IkReal x7007=(r01*x7001);
IkReal x7008=(sj4*x7007);
IkReal x7009=((1.0)*cj4);
IkReal x7010=(r01*x7004);
IkReal x7011=(sj4*x7002);
IkReal x7012=(x7005*x7009);
IkReal x7013=(x7007*x7009);
IkReal x7014=((1.0)*sj4);
IkReal x7015=(x7010*x7014);
IkReal x7016=(cj4*r01*x7004);
IkReal x7017=((1.0)*cj4*r00*x7001);
IkReal x7018=((1.0)*sj4*sj8);
IkReal x7019=((-1.0)*(((1.0)*cj6)));
IkReal x7020=((1.0)*cj8*sj4);
IkReal x7021=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x7009*x7010))+x7006+x7003+x7008);
evalcond[1]=((((-1.0)*x7015))+(((-1.0)*x7013))+(((-1.0)*x7012))+x7011);
evalcond[2]=((((-1.0)*cj8*x7015))+(((-1.0)*cj8*x7013))+sj6+(((-1.0)*cj8*x7012))+((cj8*x7011)));
evalcond[3]=((((-1.0)*sj8*x7017))+(((-1.0)*x7005*x7018))+((sj8*x7016))+(((-1.0)*x7007*x7018))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=(x7019+(((-1.0)*sj8*x7012))+(((-1.0)*sj8*x7013))+(((-1.0)*sj8*x7015))+((sj8*x7011)));
evalcond[5]=((((-1.0)*x7007*x7020))+x7019+((cj8*x7016))+(((-1.0)*cj8*x7017))+(((-1.0)*x7005*x7020)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x7006))+(((-1.0)*(0.00036)*sj6))+(((-1.0)*py*x7009))+(((-0.03431)*x7003))+(((-0.03431)*x7008))+((x7010*x7021)));
evalcond[7]=((0.00337)+((x7007*x7021))+(((-1.0)*px*x7009))+(((0.00036)*cj6))+(((-1.0)*py*x7014))+((x7005*x7021))+(((0.03431)*sj4*x7010))+(((-0.03431)*x7011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7022=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x7022.valid){
continue;
}
CheckValue<IkReal> x7023 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj5*cj7*sj6))+((sj5*sj7)))),(cj5*cj6),IKFAST_ATAN2_MAGTHRESH);
if(!x7023.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7022.value)))+(x7023.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x7024=((1.0)*cj5);
evalcond[0]=(((r22*(IKcos(j8))))+(((-1.0)*cj6*x7024)));
evalcond[1]=((((-1.0)*cj7*sj6*x7024))+((sj5*sj7))+(((-1.0)*(1.0)*r22*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x7025=((1.0)*r00);
IkReal x7026=(((py*r01))+((px*r00)));
IkReal x7027=(px*r01);
IkReal x7028=(pz*r01);
IkReal x7029=((-1.0)*pz*x7025);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x7025);
r10=r01;
npx=x7026;
npy=((((-1.0)*py*x7025))+x7027);
npz=(pz*r22);
rxp0_0=x7028;
rxp0_1=x7029;
rxp0_2=((((-1.0)*x7027))+((py*r00)));
rxp1_0=x7029;
rxp1_1=((-1.0)*x7028);
rxp1_2=x7026;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x7030=(cj8*r01);
IkReal x7031=((((-1.0)*x7030*(pz*pz)))+((pp*x7030)));
j4eval[0]=x7031;
j4eval[1]=IKsign(x7031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7032=((1.0)*r00);
IkReal x7033=(((py*r01))+((px*r00)));
IkReal x7034=(px*r01);
IkReal x7035=(pz*r01);
IkReal x7036=((-1.0)*pz*x7032);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x7032);
r10=r01;
npx=x7033;
npy=((((-1.0)*py*x7032))+x7034);
npz=(pz*r22);
rxp0_0=x7035;
rxp0_1=x7036;
rxp0_2=(((py*r00))+(((-1.0)*x7034)));
rxp1_0=x7036;
rxp1_1=((-1.0)*x7035);
rxp1_2=x7033;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x7037=(cj8*r00);
IkReal x7038=(((pp*x7037))+(((-1.0)*x7037*(pz*pz))));
j4eval[0]=x7038;
j4eval[1]=IKsign(x7038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7039=((1.0)*r00);
IkReal x7040=(((py*r01))+((px*r00)));
IkReal x7041=(px*r01);
IkReal x7042=(pz*r01);
IkReal x7043=((-1.0)*pz*x7039);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x7039);
r10=r01;
npx=x7040;
npy=(x7041+(((-1.0)*py*x7039)));
npz=(pz*r22);
rxp0_0=x7042;
rxp0_1=x7043;
rxp0_2=(((py*r00))+(((-1.0)*x7041)));
rxp1_0=x7043;
rxp1_1=((-1.0)*x7042);
rxp1_2=x7040;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x7044=(cj8*r00*r01);
IkReal x7045=(((pp*x7044))+(((-1.0)*x7044*(pz*pz))));
j4eval[0]=x7045;
j4eval[1]=IKsign(x7045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7046=(cj7*sj5);
IkReal x7047=(cj5*sj7);
IkReal x7048=(sj6*x7047);
IkReal x7049=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=(x7048+x7046);
evalcond[2]=((-1.0)*cj6*x7049);
evalcond[3]=((((-1.0)*cj7*sj6*x7049))+((sj5*sj7))+(((-1.0)*(1.0)*r22)));
evalcond[4]=((((0.16769)*x7048))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.00036)*cj5*sj6))+(((0.32901)*sj5))+(((0.16769)*x7046)));
evalcond[5]=(cj6*cj7);
evalcond[6]=(((sj6*x7046))+x7047);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7050=((1.0)*r00);
IkReal x7051=(((py*r01))+((px*r00)));
IkReal x7052=(px*r01);
IkReal x7053=(pz*r01);
IkReal x7054=((-1.0)*pz*x7050);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x7050);
r10=r01;
npx=x7051;
npy=((((-1.0)*py*x7050))+x7052);
npz=(pz*r22);
rxp0_0=x7053;
rxp0_1=x7054;
rxp0_2=(((py*r00))+(((-1.0)*x7052)));
rxp1_0=x7054;
rxp1_1=((-1.0)*x7053);
rxp1_2=x7051;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x7055=((((-1.0)*(1.0)*r01*(pz*pz)))+((pp*r01)));
IkReal x7056=((337.0)*r01);
IkReal x7057=((36.0)*r01*sj5*sj6);
IkReal x7058=((20200.0)*r01*sj5*sj6*sj7);
j4eval[0]=x7055;
j4eval[1]=IKsign(x7055);
j4eval[2]=((IKabs(((((-1.0)*py*x7058))+((py*x7057))+((px*x7056)))))+(IKabs(((((-1.0)*px*x7057))+((px*x7058))+((py*x7056))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7059=((1.0)*r00);
IkReal x7060=(((py*r01))+((px*r00)));
IkReal x7061=(px*r01);
IkReal x7062=(pz*r01);
IkReal x7063=((-1.0)*pz*x7059);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x7059);
r10=r01;
npx=x7060;
npy=((((-1.0)*py*x7059))+x7061);
npz=(pz*r22);
rxp0_0=x7062;
rxp0_1=x7063;
rxp0_2=((((-1.0)*x7061))+((py*r00)));
rxp1_0=x7063;
rxp1_1=((-1.0)*x7062);
rxp1_2=x7060;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x7064=(((pp*r00))+(((-1.0)*(1.0)*r00*(pz*pz))));
IkReal x7065=((337.0)*r00);
IkReal x7066=((36.0)*r00*sj5*sj6);
IkReal x7067=((20200.0)*r00*sj5*sj6*sj7);
j4eval[0]=x7064;
j4eval[1]=IKsign(x7064);
j4eval[2]=((IKabs(((((-1.0)*px*x7066))+((px*x7067))+((py*x7065)))))+(IKabs((((py*x7066))+(((-1.0)*py*x7067))+((px*x7065))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7068=((1.0)*r00);
IkReal x7069=(((py*r01))+((px*r00)));
IkReal x7070=(px*r01);
IkReal x7071=(pz*r01);
IkReal x7072=((-1.0)*pz*x7068);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x7068);
r10=r01;
npx=x7069;
npy=(x7070+(((-1.0)*py*x7068)));
npz=(pz*r22);
rxp0_0=x7071;
rxp0_1=x7072;
rxp0_2=((((-1.0)*x7070))+((py*r00)));
rxp1_0=x7072;
rxp1_1=((-1.0)*x7071);
rxp1_2=x7069;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x7073=((((-1.0)*(1.0)*r01*(pz*pz)))+((pp*r01)));
IkReal x7074=((337.0)*r01);
IkReal x7075=((3431.0)*r01*sj6);
IkReal x7076=((36.0)*r01*sj5*sj6);
IkReal x7077=((16769.0)*r01*sj5*sj6*sj7);
j4eval[0]=x7073;
j4eval[1]=IKsign(x7073);
j4eval[2]=((IKabs((((py*x7075))+((py*x7076))+(((-1.0)*py*x7077))+((px*x7074)))))+(IKabs((((py*x7074))+(((-1.0)*px*x7075))+(((-1.0)*px*x7076))+((px*x7077))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7078=(cj7*sj5);
IkReal x7079=(cj5*sj7);
IkReal x7080=(sj6*x7079);
IkReal x7081=((1.0)*cj5);
evalcond[0]=((IKabs(py))+(IKabs(px)));
evalcond[1]=(x7078+x7080);
evalcond[2]=((-1.0)*cj6*x7081);
evalcond[3]=((((-1.0)*cj7*sj6*x7081))+((sj5*sj7))+(((-1.0)*(1.0)*r22)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((-1.0)*(0.00036)*cj5*sj6))+(((0.32901)*sj5))+(((0.16769)*x7078))+(((0.16769)*x7080)));
evalcond[5]=(cj6*cj7);
evalcond[6]=(x7079+((sj6*x7078)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7082=((1.0)*r00);
IkReal x7083=(pz*r01);
IkReal x7084=((-1.0)*pz*x7082);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x7082);
r10=r01;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=x7083;
rxp0_1=x7084;
rxp0_2=0;
rxp1_0=x7084;
rxp1_1=((-1.0)*x7083);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
px=0;
py=0;
pp=pz*pz;
j4eval[0]=0.000681414;
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=-4.54276e-5;
op[1]=0;
op[2]=-0.0001817104;
op[3]=0;
op[4]=-0.0002725656;
op[5]=0;
op[6]=-0.0001817104;
op[7]=0;
op[8]=-4.54276e-5;
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x7085=(cj4*sj6);
IkReal x7086=((1.0)*r00);
IkReal x7087=(sj4*sj6);
if( IKabs(((((-1.0)*x7086*x7087))+((r01*x7085)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7087))+(((-1.0)*x7085*x7086)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x7086*x7087))+((r01*x7085))))+IKsqr(((((-1.0)*r01*x7087))+(((-1.0)*x7085*x7086))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x7086*x7087))+((r01*x7085))), ((((-1.0)*r01*x7087))+(((-1.0)*x7085*x7086))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x7088=IKcos(j9);
IkReal x7089=(r00*x7088);
IkReal x7090=(sj4*x7089);
IkReal x7091=IKsin(j9);
IkReal x7092=(cj4*r00*x7091);
IkReal x7093=(cj4*r01*x7088);
IkReal x7094=(r01*sj4*x7091);
IkReal x7095=(cj4*x7089);
IkReal x7096=(r00*sj4*x7091);
IkReal x7097=(r01*sj4*x7088);
IkReal x7098=((1.0)*sj6);
IkReal x7099=(cj4*r01*x7091);
IkReal x7100=(sj5*sj6);
evalcond[0]=(x7090+(((-1.0)*x7094))+(((-1.0)*x7092))+(((-1.0)*x7093)));
evalcond[1]=((0.00337)+(((-0.03431)*x7090))+(((0.03431)*x7093))+(((0.03431)*x7092))+(((0.03431)*x7094)));
evalcond[2]=((((-1.0)*x7099))+(((-1.0)*sj5*sj7*x7098))+x7096+x7095+x7097);
evalcond[3]=((((-1.0)*x7098))+x7099+(((-1.0)*x7095))+(((-1.0)*x7097))+(((-1.0)*x7096)));
evalcond[4]=((((-0.03431)*x7095))+(((-0.03431)*x7097))+(((0.00036)*x7100))+(((-0.16769)*sj7*x7100))+(((-0.03431)*x7096))+(((0.03431)*x7099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7101=((0.00337)*r01);
IkReal x7102=(r01*sj5*sj6);
IkReal x7103=((((0.03431)*r01*sj6))+(((0.00036)*x7102))+(((-0.16769)*sj7*x7102)));
CheckValue<IkReal> x7104=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r01*(pz*pz)))+((pp*r01)))),-1);
if(!x7104.valid){
continue;
}
CheckValue<IkReal> x7105 = IKatan2WithCheck(IkReal(((((-1.0)*px*x7103))+((py*x7101)))),(((py*x7103))+((px*x7101))),IKFAST_ATAN2_MAGTHRESH);
if(!x7105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7104.value)))+(x7105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7106=IKcos(j4);
IkReal x7107=(r01*x7106);
IkReal x7108=(py*x7107);
IkReal x7109=((0.00036)*sj5*sj6);
IkReal x7110=(r01*x7109);
IkReal x7111=IKsin(j4);
IkReal x7112=(px*r01*x7111);
IkReal x7113=(r01*sj5*sj6*sj7);
IkReal x7114=(py*r00);
IkReal x7115=(x7106*x7114);
IkReal x7116=(r00*x7109);
IkReal x7117=(px*r00);
IkReal x7118=(x7111*x7117);
IkReal x7119=(r00*sj5*sj6*sj7);
IkReal x7120=((0.03431)*sj6);
evalcond[0]=((((-1.0)*x7112))+(((0.202)*x7113))+(((-1.0)*x7110))+x7108);
evalcond[1]=((((-1.0)*x7116))+(((0.202)*x7119))+x7115+(((-1.0)*x7118)));
evalcond[2]=((((-0.16769)*x7113))+(((-1.0)*x7108))+((r01*x7120))+x7112+x7110);
evalcond[3]=((((-1.0)*x7115))+((r00*x7120))+(((-0.16769)*x7119))+x7118+x7116);
evalcond[4]=(((x7106*x7117))+(((-1.0)*(0.00337)*r00))+((x7111*x7114)));
evalcond[5]=((((-1.0)*py*r01*x7111))+(((-1.0)*px*x7107))+(((0.00337)*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x7121=(cj4*sj6);
IkReal x7122=((1.0)*r00);
IkReal x7123=(sj4*sj6);
if( IKabs(((((-1.0)*x7122*x7123))+((r01*x7121)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7123))+(((-1.0)*x7121*x7122)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x7122*x7123))+((r01*x7121))))+IKsqr(((((-1.0)*r01*x7123))+(((-1.0)*x7121*x7122))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x7122*x7123))+((r01*x7121))), ((((-1.0)*r01*x7123))+(((-1.0)*x7121*x7122))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x7124=IKcos(j9);
IkReal x7125=(r00*x7124);
IkReal x7126=(sj4*x7125);
IkReal x7127=((1.0)*cj4);
IkReal x7128=IKsin(j9);
IkReal x7129=(r00*x7128);
IkReal x7130=(r01*x7124);
IkReal x7131=((1.0)*sj4);
IkReal x7132=(r01*x7128);
IkReal x7133=(cj4*x7125);
IkReal x7134=(sj4*x7129);
IkReal x7135=(sj4*x7130);
IkReal x7136=((1.0)*sj6);
IkReal x7137=(cj4*x7128);
IkReal x7138=(r01*x7137);
IkReal x7139=(sj5*sj6);
evalcond[0]=((((-1.0)*x7127*x7130))+x7126+(((-1.0)*x7127*x7129))+(((-1.0)*x7131*x7132)));
evalcond[1]=((((-1.0)*x7127*x7132))+x7135+x7134+x7133+(((-1.0)*sj5*sj7*x7136)));
evalcond[2]=((((-1.0)*x7129*x7131))+(((-1.0)*x7125*x7127))+(((-1.0)*x7136))+(((-1.0)*x7130*x7131))+x7138);
evalcond[3]=((0.00337)+(((-0.03431)*x7126))+(((-1.0)*px*x7127))+(((0.03431)*r00*x7137))+(((-1.0)*py*x7131))+(((0.03431)*cj4*x7130))+(((0.03431)*sj4*x7132)));
evalcond[4]=(((px*sj4))+(((-1.0)*py*x7127))+(((-0.03431)*x7133))+(((-0.03431)*x7134))+(((-0.03431)*x7135))+(((0.03431)*x7138))+(((-0.16769)*sj7*x7139))+(((0.00036)*x7139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7140=((0.00337)*r00);
IkReal x7141=(r00*sj5*sj6);
IkReal x7142=((((0.202)*sj7*x7141))+(((-0.00036)*x7141)));
CheckValue<IkReal> x7143=IKPowWithIntegerCheck(IKsign((((pp*r00))+(((-1.0)*(1.0)*r00*(pz*pz))))),-1);
if(!x7143.valid){
continue;
}
CheckValue<IkReal> x7144 = IKatan2WithCheck(IkReal((((py*x7140))+((px*x7142)))),((((-1.0)*py*x7142))+((px*x7140))),IKFAST_ATAN2_MAGTHRESH);
if(!x7144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7143.value)))+(x7144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7145=IKcos(j4);
IkReal x7146=(r01*x7145);
IkReal x7147=(py*x7146);
IkReal x7148=((0.00036)*sj5*sj6);
IkReal x7149=(r01*x7148);
IkReal x7150=IKsin(j4);
IkReal x7151=(px*r01*x7150);
IkReal x7152=(r01*sj5*sj6*sj7);
IkReal x7153=(py*r00);
IkReal x7154=(x7145*x7153);
IkReal x7155=(r00*x7148);
IkReal x7156=(px*r00);
IkReal x7157=(x7150*x7156);
IkReal x7158=(r00*sj5*sj6*sj7);
IkReal x7159=((0.03431)*sj6);
evalcond[0]=((((-1.0)*x7151))+(((-1.0)*x7149))+x7147+(((0.202)*x7152)));
evalcond[1]=((((0.202)*x7158))+(((-1.0)*x7155))+(((-1.0)*x7157))+x7154);
evalcond[2]=(((r01*x7159))+(((-1.0)*x7147))+(((-0.16769)*x7152))+x7149+x7151);
evalcond[3]=((((-1.0)*x7154))+(((-0.16769)*x7158))+((r00*x7159))+x7155+x7157);
evalcond[4]=((((-1.0)*(0.00337)*r00))+((x7145*x7156))+((x7150*x7153)));
evalcond[5]=((((-1.0)*px*x7146))+(((-1.0)*py*r01*x7150))+(((0.00337)*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x7160=(cj4*sj6);
IkReal x7161=((1.0)*r00);
IkReal x7162=(sj4*sj6);
if( IKabs((((r01*x7160))+(((-1.0)*x7161*x7162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x7160*x7161))+(((-1.0)*r01*x7162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x7160))+(((-1.0)*x7161*x7162))))+IKsqr(((((-1.0)*x7160*x7161))+(((-1.0)*r01*x7162))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((r01*x7160))+(((-1.0)*x7161*x7162))), ((((-1.0)*x7160*x7161))+(((-1.0)*r01*x7162))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x7163=IKcos(j9);
IkReal x7164=(r00*x7163);
IkReal x7165=(sj4*x7164);
IkReal x7166=((1.0)*cj4);
IkReal x7167=IKsin(j9);
IkReal x7168=(r00*x7167);
IkReal x7169=(r01*x7163);
IkReal x7170=((1.0)*sj4);
IkReal x7171=(r01*x7167);
IkReal x7172=(cj4*x7164);
IkReal x7173=(sj4*x7168);
IkReal x7174=(sj4*x7169);
IkReal x7175=((1.0)*sj6);
IkReal x7176=(cj4*x7167);
IkReal x7177=(r01*x7176);
IkReal x7178=(sj5*sj6);
evalcond[0]=((((-1.0)*x7170*x7171))+x7165+(((-1.0)*x7166*x7169))+(((-1.0)*x7166*x7168)));
evalcond[1]=((((-1.0)*x7166*x7171))+(((-1.0)*sj5*sj7*x7175))+x7172+x7173+x7174);
evalcond[2]=((((-1.0)*x7169*x7170))+(((-1.0)*x7164*x7166))+(((-1.0)*x7175))+(((-1.0)*x7168*x7170))+x7177);
evalcond[3]=((0.00337)+(((0.03431)*sj4*x7171))+(((-1.0)*px*x7166))+(((-1.0)*py*x7170))+(((0.03431)*cj4*x7169))+(((-0.03431)*x7165))+(((0.03431)*r00*x7176)));
evalcond[4]=(((px*sj4))+(((0.03431)*x7177))+(((-0.03431)*x7174))+(((-0.03431)*x7172))+(((-0.16769)*sj7*x7178))+(((-0.03431)*x7173))+(((0.00036)*x7178))+(((-1.0)*py*x7166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7179=((0.00337)*r01);
IkReal x7180=(r01*sj5*sj6);
IkReal x7181=((((-0.00036)*x7180))+(((0.202)*sj7*x7180)));
CheckValue<IkReal> x7182=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r01*(pz*pz)))+((pp*r01)))),-1);
if(!x7182.valid){
continue;
}
CheckValue<IkReal> x7183 = IKatan2WithCheck(IkReal((((px*x7181))+((py*x7179)))),((((-1.0)*py*x7181))+((px*x7179))),IKFAST_ATAN2_MAGTHRESH);
if(!x7183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7182.value)))+(x7183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7184=IKcos(j4);
IkReal x7185=(r01*x7184);
IkReal x7186=(py*x7185);
IkReal x7187=((0.00036)*sj5*sj6);
IkReal x7188=(r01*x7187);
IkReal x7189=IKsin(j4);
IkReal x7190=(px*r01*x7189);
IkReal x7191=(r01*sj5*sj6*sj7);
IkReal x7192=(py*r00);
IkReal x7193=(x7184*x7192);
IkReal x7194=(r00*x7187);
IkReal x7195=(px*r00);
IkReal x7196=(x7189*x7195);
IkReal x7197=(r00*sj5*sj6*sj7);
IkReal x7198=((0.03431)*sj6);
evalcond[0]=((((0.202)*x7191))+(((-1.0)*x7190))+(((-1.0)*x7188))+x7186);
evalcond[1]=((((-1.0)*x7196))+(((0.202)*x7197))+x7193+(((-1.0)*x7194)));
evalcond[2]=(x7190+(((-0.16769)*x7191))+(((-1.0)*x7186))+x7188+((r01*x7198)));
evalcond[3]=((((-0.16769)*x7197))+((r00*x7198))+x7194+x7196+(((-1.0)*x7193)));
evalcond[4]=((((-1.0)*(0.00337)*r00))+((x7189*x7192))+((x7184*x7195)));
evalcond[5]=((((-1.0)*px*x7185))+(((-1.0)*py*r01*x7189))+(((0.00337)*r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x7199=(cj4*sj6);
IkReal x7200=((1.0)*r00);
IkReal x7201=(sj4*sj6);
if( IKabs(((((-1.0)*x7200*x7201))+((r01*x7199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x7199*x7200))+(((-1.0)*r01*x7201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x7200*x7201))+((r01*x7199))))+IKsqr(((((-1.0)*x7199*x7200))+(((-1.0)*r01*x7201))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x7200*x7201))+((r01*x7199))), ((((-1.0)*x7199*x7200))+(((-1.0)*r01*x7201))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x7202=IKcos(j9);
IkReal x7203=(r00*x7202);
IkReal x7204=(sj4*x7203);
IkReal x7205=((1.0)*cj4);
IkReal x7206=IKsin(j9);
IkReal x7207=(r00*x7206);
IkReal x7208=(r01*x7202);
IkReal x7209=((1.0)*sj4);
IkReal x7210=(r01*x7206);
IkReal x7211=(cj4*x7203);
IkReal x7212=(sj4*x7207);
IkReal x7213=(sj4*x7208);
IkReal x7214=((1.0)*sj6);
IkReal x7215=(cj4*x7206);
IkReal x7216=(r01*x7215);
IkReal x7217=(sj5*sj6);
evalcond[0]=((((-1.0)*x7209*x7210))+(((-1.0)*x7205*x7207))+x7204+(((-1.0)*x7205*x7208)));
evalcond[1]=((((-1.0)*sj5*sj7*x7214))+(((-1.0)*x7205*x7210))+x7213+x7211+x7212);
evalcond[2]=((((-1.0)*x7208*x7209))+x7216+(((-1.0)*x7203*x7205))+(((-1.0)*x7214))+(((-1.0)*x7207*x7209)));
evalcond[3]=((0.00337)+(((-1.0)*py*x7209))+(((-1.0)*px*x7205))+(((-0.03431)*x7204))+(((0.03431)*sj4*x7210))+(((0.03431)*r00*x7215))+(((0.03431)*cj4*x7208)));
evalcond[4]=(((px*sj4))+(((0.00036)*x7217))+(((-1.0)*py*x7205))+(((0.03431)*x7216))+(((-0.03431)*x7211))+(((-0.03431)*x7213))+(((-0.16769)*sj7*x7217))+(((-0.03431)*x7212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7218=(cj7*sj5);
IkReal x7219=(cj5*sj7);
IkReal x7220=(sj6*x7219);
IkReal x7221=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=(x7218+x7220);
evalcond[2]=((-1.0)*cj6*x7221);
evalcond[3]=((((-1.0)*cj7*sj6*x7221))+((sj5*sj7))+r22);
evalcond[4]=((((-1.0)*(1.0)*pz))+(((-1.0)*(0.00036)*cj5*sj6))+(((0.16769)*x7220))+(((0.32901)*sj5))+(((0.16769)*x7218)));
evalcond[5]=(cj6*cj7);
evalcond[6]=(x7219+((sj6*x7218)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7222=((1.0)*r00);
IkReal x7223=(((py*r01))+((px*r00)));
IkReal x7224=(px*r01);
IkReal x7225=(pz*r01);
IkReal x7226=((-1.0)*pz*x7222);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x7222);
r10=r01;
npx=x7223;
npy=((((-1.0)*py*x7222))+x7224);
npz=(pz*r22);
rxp0_0=x7225;
rxp0_1=x7226;
rxp0_2=(((py*r00))+(((-1.0)*x7224)));
rxp1_0=x7226;
rxp1_1=((-1.0)*x7225);
rxp1_2=x7223;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x7227=((((-1.0)*(1.0)*r01*(pz*pz)))+((pp*r01)));
IkReal x7228=((337.0)*r01);
IkReal x7229=((36.0)*r01*sj5*sj6);
IkReal x7230=((20200.0)*r01*sj5*sj6*sj7);
j4eval[0]=x7227;
j4eval[1]=IKsign(x7227);
j4eval[2]=((IKabs((((py*x7228))+(((-1.0)*px*x7229))+((px*x7230)))))+(IKabs(((((-1.0)*py*x7230))+((py*x7229))+((px*x7228))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7231=((1.0)*r00);
IkReal x7232=(((py*r01))+((px*r00)));
IkReal x7233=(px*r01);
IkReal x7234=(pz*r01);
IkReal x7235=((-1.0)*pz*x7231);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x7231);
r10=r01;
npx=x7232;
npy=(x7233+(((-1.0)*py*x7231)));
npz=(pz*r22);
rxp0_0=x7234;
rxp0_1=x7235;
rxp0_2=(((py*r00))+(((-1.0)*x7233)));
rxp1_0=x7235;
rxp1_1=((-1.0)*x7234);
rxp1_2=x7232;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x7236=(((pp*r00))+(((-1.0)*(1.0)*r00*(pz*pz))));
IkReal x7237=((337.0)*r00);
IkReal x7238=((36.0)*r00*sj5*sj6);
IkReal x7239=((20200.0)*r00*sj5*sj6*sj7);
j4eval[0]=x7236;
j4eval[1]=IKsign(x7236);
j4eval[2]=((IKabs(((((-1.0)*py*x7239))+((px*x7237))+((py*x7238)))))+(IKabs(((((-1.0)*px*x7238))+((px*x7239))+((py*x7237))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7240=((1.0)*r00);
IkReal x7241=(((py*r01))+((px*r00)));
IkReal x7242=(px*r01);
IkReal x7243=(pz*r01);
IkReal x7244=((-1.0)*pz*x7240);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x7240);
r10=r01;
npx=x7241;
npy=((((-1.0)*py*x7240))+x7242);
npz=(pz*r22);
rxp0_0=x7243;
rxp0_1=x7244;
rxp0_2=(((py*r00))+(((-1.0)*x7242)));
rxp1_0=x7244;
rxp1_1=((-1.0)*x7243);
rxp1_2=x7241;
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x7245=((((-1.0)*(1.0)*r01*(pz*pz)))+((pp*r01)));
IkReal x7246=((337.0)*r01);
IkReal x7247=((3431.0)*r01*sj6);
IkReal x7248=((36.0)*r01*sj5*sj6);
IkReal x7249=((16769.0)*r01*sj5*sj6*sj7);
j4eval[0]=x7245;
j4eval[1]=IKsign(x7245);
j4eval[2]=((IKabs((((py*x7248))+((px*x7246))+(((-1.0)*py*x7249))+(((-1.0)*py*x7247)))))+(IKabs((((px*x7247))+(((-1.0)*px*x7248))+((px*x7249))+((py*x7246))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7250=(cj7*sj5);
IkReal x7251=(cj5*sj7);
IkReal x7252=(sj6*x7251);
IkReal x7253=((1.0)*cj5);
evalcond[0]=((IKabs(py))+(IKabs(px)));
evalcond[1]=(x7252+x7250);
evalcond[2]=((-1.0)*cj6*x7253);
evalcond[3]=(((sj5*sj7))+r22+(((-1.0)*cj7*sj6*x7253)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((-1.0)*(0.00036)*cj5*sj6))+(((0.32901)*sj5))+(((0.16769)*x7252))+(((0.16769)*x7250)));
evalcond[5]=(cj6*cj7);
evalcond[6]=(x7251+((sj6*x7250)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7254=((1.0)*r00);
IkReal x7255=(pz*r01);
IkReal x7256=((-1.0)*pz*x7254);
r21=0;
r20=0;
r02=0;
r12=0;
r11=((-1.0)*x7254);
r10=r01;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=x7255;
rxp0_1=x7256;
rxp0_2=0;
rxp1_0=x7256;
rxp1_1=((-1.0)*x7255);
rxp1_2=0;
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
px=0;
py=0;
pp=pz*pz;
j4eval[0]=0.000681414;
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[8+1], zeror[8];
int numroots;
op[0]=-4.54276e-5;
op[1]=0;
op[2]=-0.0001817104;
op[3]=0;
op[4]=-0.0002725656;
op[5]=0;
op[6]=-0.0001817104;
op[7]=0;
op[8]=-4.54276e-5;
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x7257=(r00*sj6);
IkReal x7258=(r01*sj6);
if( IKabs((((sj4*x7257))+(((-1.0)*cj4*x7258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x7258))+((cj4*x7257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x7257))+(((-1.0)*cj4*x7258))))+IKsqr((((sj4*x7258))+((cj4*x7257))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((sj4*x7257))+(((-1.0)*cj4*x7258))), (((sj4*x7258))+((cj4*x7257))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x7259=IKcos(j9);
IkReal x7260=(r00*x7259);
IkReal x7261=(sj4*x7260);
IkReal x7262=IKsin(j9);
IkReal x7263=(cj4*r00*x7262);
IkReal x7264=(cj4*r01*x7259);
IkReal x7265=(r01*sj4*x7262);
IkReal x7266=((1.0)*sj6);
IkReal x7267=(cj4*x7260);
IkReal x7268=(r00*sj4*x7262);
IkReal x7269=(r01*sj4*x7259);
IkReal x7270=(cj4*r01*x7262);
IkReal x7271=((((-1.0)*x7270))+x7267+x7268+x7269);
IkReal x7272=(sj5*sj6);
evalcond[0]=((((-1.0)*x7264))+(((-1.0)*x7265))+x7261+(((-1.0)*x7263)));
evalcond[1]=((((-1.0)*x7266))+x7271);
evalcond[2]=((0.00337)+(((-0.03431)*x7261))+(((0.03431)*x7265))+(((0.03431)*x7263))+(((0.03431)*x7264)));
evalcond[3]=((((-1.0)*sj5*sj7*x7266))+x7271);
evalcond[4]=((((-0.03431)*x7268))+(((0.03431)*x7270))+(((-0.03431)*x7269))+(((0.00036)*x7272))+(((-0.16769)*sj7*x7272))+(((-0.03431)*x7267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7273=((0.00337)*r01);
IkReal x7274=(r01*sj5*sj6);
IkReal x7275=((((-0.00036)*x7274))+(((0.16769)*sj7*x7274))+(((0.03431)*r01*sj6)));
CheckValue<IkReal> x7276=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r01*(pz*pz)))+((pp*r01)))),-1);
if(!x7276.valid){
continue;
}
CheckValue<IkReal> x7277 = IKatan2WithCheck(IkReal((((px*x7275))+((py*x7273)))),((((-1.0)*py*x7275))+((px*x7273))),IKFAST_ATAN2_MAGTHRESH);
if(!x7277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7276.value)))+(x7277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7278=(r01*sj5*sj6*sj7);
IkReal x7279=IKcos(j4);
IkReal x7280=(r01*x7279);
IkReal x7281=((0.00036)*sj5*sj6);
IkReal x7282=((1.0)*px);
IkReal x7283=IKsin(j4);
IkReal x7284=(r01*x7283);
IkReal x7285=((((-1.0)*x7282*x7284))+((py*x7280))+(((-1.0)*r01*x7281)));
IkReal x7286=(r00*sj5*sj6*sj7);
IkReal x7287=(r00*x7279);
IkReal x7288=(r00*x7283);
IkReal x7289=((((-1.0)*r00*x7281))+(((-1.0)*x7282*x7288))+((py*x7287)));
IkReal x7290=((0.03431)*sj6);
evalcond[0]=(x7285+(((0.202)*x7278)));
evalcond[1]=(x7289+(((0.202)*x7286)));
evalcond[2]=((((0.16769)*x7278))+x7285+((r01*x7290)));
evalcond[3]=(x7289+(((0.16769)*x7286))+((r00*x7290)));
evalcond[4]=((((-1.0)*(0.00337)*r00))+((py*x7288))+((px*x7287)));
evalcond[5]=((((0.00337)*r01))+(((-1.0)*py*x7284))+(((-1.0)*x7280*x7282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x7291=(r00*sj6);
IkReal x7292=(r01*sj6);
if( IKabs(((((-1.0)*cj4*x7292))+((sj4*x7291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x7291))+((sj4*x7292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x7292))+((sj4*x7291))))+IKsqr((((cj4*x7291))+((sj4*x7292))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj4*x7292))+((sj4*x7291))), (((cj4*x7291))+((sj4*x7292))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x7293=IKcos(j9);
IkReal x7294=(r00*x7293);
IkReal x7295=(sj4*x7294);
IkReal x7296=((1.0)*cj4);
IkReal x7297=IKsin(j9);
IkReal x7298=(r00*x7297);
IkReal x7299=(r01*x7293);
IkReal x7300=((1.0)*sj4);
IkReal x7301=(r01*x7297);
IkReal x7302=((1.0)*sj6);
IkReal x7303=(cj4*x7294);
IkReal x7304=(sj4*x7298);
IkReal x7305=(sj4*x7299);
IkReal x7306=(x7303+x7304+x7305+(((-1.0)*x7296*x7301)));
IkReal x7307=((0.03431)*cj4);
IkReal x7308=(sj5*sj6);
evalcond[0]=((((-1.0)*x7300*x7301))+(((-1.0)*x7296*x7299))+(((-1.0)*x7296*x7298))+x7295);
evalcond[1]=(x7306+(((-1.0)*x7302)));
evalcond[2]=(x7306+(((-1.0)*sj5*sj7*x7302)));
evalcond[3]=((0.00337)+(((-0.03431)*x7295))+(((-1.0)*px*x7296))+((x7298*x7307))+(((-1.0)*py*x7300))+(((0.03431)*sj4*x7301))+((x7299*x7307)));
evalcond[4]=((((-1.0)*py*x7296))+((px*sj4))+(((-0.03431)*x7303))+((x7301*x7307))+(((-0.03431)*x7304))+(((-0.03431)*x7305))+(((-0.16769)*sj7*x7308))+(((0.00036)*x7308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7309=((0.00337)*r00);
IkReal x7310=(r00*sj5*sj6);
IkReal x7311=((((0.202)*sj7*x7310))+(((-0.00036)*x7310)));
CheckValue<IkReal> x7312=IKPowWithIntegerCheck(IKsign((((pp*r00))+(((-1.0)*(1.0)*r00*(pz*pz))))),-1);
if(!x7312.valid){
continue;
}
CheckValue<IkReal> x7313 = IKatan2WithCheck(IkReal((((px*x7311))+((py*x7309)))),(((px*x7309))+(((-1.0)*py*x7311))),IKFAST_ATAN2_MAGTHRESH);
if(!x7313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7312.value)))+(x7313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7314=(r01*sj5*sj6*sj7);
IkReal x7315=IKcos(j4);
IkReal x7316=(r01*x7315);
IkReal x7317=((0.00036)*sj5*sj6);
IkReal x7318=((1.0)*px);
IkReal x7319=IKsin(j4);
IkReal x7320=(r01*x7319);
IkReal x7321=((((-1.0)*r01*x7317))+(((-1.0)*x7318*x7320))+((py*x7316)));
IkReal x7322=(r00*sj5*sj6*sj7);
IkReal x7323=(r00*x7315);
IkReal x7324=(r00*x7319);
IkReal x7325=((((-1.0)*x7318*x7324))+((py*x7323))+(((-1.0)*r00*x7317)));
IkReal x7326=((0.03431)*sj6);
evalcond[0]=(x7321+(((0.202)*x7314)));
evalcond[1]=((((0.202)*x7322))+x7325);
evalcond[2]=(x7321+(((0.16769)*x7314))+((r01*x7326)));
evalcond[3]=(x7325+(((0.16769)*x7322))+((r00*x7326)));
evalcond[4]=(((py*x7324))+(((-1.0)*(0.00337)*r00))+((px*x7323)));
evalcond[5]=((((0.00337)*r01))+(((-1.0)*py*x7320))+(((-1.0)*x7316*x7318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x7327=(r00*sj6);
IkReal x7328=(r01*sj6);
if( IKabs((((sj4*x7327))+(((-1.0)*cj4*x7328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x7327))+((sj4*x7328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x7327))+(((-1.0)*cj4*x7328))))+IKsqr((((cj4*x7327))+((sj4*x7328))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((sj4*x7327))+(((-1.0)*cj4*x7328))), (((cj4*x7327))+((sj4*x7328))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x7329=IKcos(j9);
IkReal x7330=(r00*x7329);
IkReal x7331=(sj4*x7330);
IkReal x7332=((1.0)*cj4);
IkReal x7333=IKsin(j9);
IkReal x7334=(r00*x7333);
IkReal x7335=(r01*x7329);
IkReal x7336=((1.0)*sj4);
IkReal x7337=(r01*x7333);
IkReal x7338=((1.0)*sj6);
IkReal x7339=(cj4*x7330);
IkReal x7340=(sj4*x7334);
IkReal x7341=(sj4*x7335);
IkReal x7342=(x7340+x7341+x7339+(((-1.0)*x7332*x7337)));
IkReal x7343=((0.03431)*cj4);
IkReal x7344=(sj5*sj6);
evalcond[0]=((((-1.0)*x7332*x7335))+x7331+(((-1.0)*x7332*x7334))+(((-1.0)*x7336*x7337)));
evalcond[1]=(x7342+(((-1.0)*x7338)));
evalcond[2]=(x7342+(((-1.0)*sj5*sj7*x7338)));
evalcond[3]=((0.00337)+((x7335*x7343))+((x7334*x7343))+(((-0.03431)*x7331))+(((-1.0)*px*x7332))+(((0.03431)*sj4*x7337))+(((-1.0)*py*x7336)));
evalcond[4]=(((px*sj4))+(((-0.03431)*x7341))+(((-0.03431)*x7340))+((x7337*x7343))+(((0.00036)*x7344))+(((-0.16769)*sj7*x7344))+(((-0.03431)*x7339))+(((-1.0)*py*x7332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7345=((0.00337)*r01);
IkReal x7346=(r01*sj5*sj6);
IkReal x7347=((((0.202)*sj7*x7346))+(((-0.00036)*x7346)));
CheckValue<IkReal> x7348=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r01*(pz*pz)))+((pp*r01)))),-1);
if(!x7348.valid){
continue;
}
CheckValue<IkReal> x7349 = IKatan2WithCheck(IkReal((((px*x7347))+((py*x7345)))),((((-1.0)*py*x7347))+((px*x7345))),IKFAST_ATAN2_MAGTHRESH);
if(!x7349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7348.value)))+(x7349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7350=(r01*sj5*sj6*sj7);
IkReal x7351=IKcos(j4);
IkReal x7352=(r01*x7351);
IkReal x7353=((0.00036)*sj5*sj6);
IkReal x7354=((1.0)*px);
IkReal x7355=IKsin(j4);
IkReal x7356=(r01*x7355);
IkReal x7357=((((-1.0)*x7354*x7356))+((py*x7352))+(((-1.0)*r01*x7353)));
IkReal x7358=(r00*sj5*sj6*sj7);
IkReal x7359=(r00*x7351);
IkReal x7360=(r00*x7355);
IkReal x7361=(((py*x7359))+(((-1.0)*r00*x7353))+(((-1.0)*x7354*x7360)));
IkReal x7362=((0.03431)*sj6);
evalcond[0]=(x7357+(((0.202)*x7350)));
evalcond[1]=((((0.202)*x7358))+x7361);
evalcond[2]=(x7357+(((0.16769)*x7350))+((r01*x7362)));
evalcond[3]=(((r00*x7362))+x7361+(((0.16769)*x7358)));
evalcond[4]=((((-1.0)*(0.00337)*r00))+((px*x7359))+((py*x7360)));
evalcond[5]=((((-1.0)*x7352*x7354))+(((0.00337)*r01))+(((-1.0)*py*x7356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x7363=(r00*sj6);
IkReal x7364=(r01*sj6);
if( IKabs((((sj4*x7363))+(((-1.0)*cj4*x7364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x7363))+((sj4*x7364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x7363))+(((-1.0)*cj4*x7364))))+IKsqr((((cj4*x7363))+((sj4*x7364))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((sj4*x7363))+(((-1.0)*cj4*x7364))), (((cj4*x7363))+((sj4*x7364))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[5];
IkReal x7365=IKcos(j9);
IkReal x7366=(r00*x7365);
IkReal x7367=(sj4*x7366);
IkReal x7368=((1.0)*cj4);
IkReal x7369=IKsin(j9);
IkReal x7370=(r00*x7369);
IkReal x7371=(r01*x7365);
IkReal x7372=((1.0)*sj4);
IkReal x7373=(r01*x7369);
IkReal x7374=((1.0)*sj6);
IkReal x7375=(cj4*x7366);
IkReal x7376=(sj4*x7370);
IkReal x7377=(sj4*x7371);
IkReal x7378=((((-1.0)*x7368*x7373))+x7376+x7375+x7377);
IkReal x7379=((0.03431)*cj4);
IkReal x7380=(sj5*sj6);
evalcond[0]=((((-1.0)*x7368*x7371))+x7367+(((-1.0)*x7372*x7373))+(((-1.0)*x7368*x7370)));
evalcond[1]=((((-1.0)*x7374))+x7378);
evalcond[2]=(x7378+(((-1.0)*sj5*sj7*x7374)));
evalcond[3]=((0.00337)+(((-1.0)*py*x7372))+(((-1.0)*px*x7368))+(((-0.03431)*x7367))+(((0.03431)*sj4*x7373))+((x7370*x7379))+((x7371*x7379)));
evalcond[4]=(((px*sj4))+(((0.00036)*x7380))+(((-0.03431)*x7375))+(((-0.03431)*x7376))+(((-0.03431)*x7377))+(((-0.16769)*sj7*x7380))+((x7373*x7379))+(((-1.0)*py*x7368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7381=(cj8*r00*r01);
IkReal x7382=(cj6*cj8*r01);
IkReal x7383=((0.16769)*sj7);
IkReal x7384=(r00*(((((0.00337)*cj8*r01))+(((0.00036)*x7382))+(((-1.0)*x7382*x7383))+(((((0.03431)*cj7*r01))*((sj5*sj6))))+((((cj5*sj7))*(((0.03431)*r01)))))));
IkReal x7385=(cj5*cj8*r00);
IkReal x7386=(cj8*r00*sj5*sj6);
IkReal x7387=(r01*(((((0.32901)*x7385))+(((-1.0)*(0.03431)*cj6*cj7*r00))+(((-1.0)*x7383*x7386))+(((0.16769)*cj7*x7385))+(((0.00036)*x7386)))));
CheckValue<IkReal> x7388=IKPowWithIntegerCheck(IKsign((((pp*x7381))+(((-1.0)*x7381*(pz*pz))))),-1);
if(!x7388.valid){
continue;
}
CheckValue<IkReal> x7389 = IKatan2WithCheck(IkReal(((((-1.0)*px*x7387))+((py*x7384)))),(((py*x7387))+((px*x7384))),IKFAST_ATAN2_MAGTHRESH);
if(!x7389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7388.value)))+(x7389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x7390=((0.00337)*cj8);
IkReal x7391=((0.03431)*cj5*sj7);
IkReal x7392=((0.00036)*cj6*cj8);
IkReal x7393=((0.16769)*cj6*cj8*sj7);
IkReal x7394=((0.03431)*cj7*sj5*sj6);
IkReal x7395=IKcos(j4);
IkReal x7396=(cj8*px*r00);
IkReal x7397=(py*r00);
IkReal x7398=IKsin(j4);
IkReal x7399=(cj8*x7398);
IkReal x7400=((0.32901)*cj5*cj8);
IkReal x7401=((0.03431)*cj6*cj7);
IkReal x7402=((0.16769)*cj5*cj7*cj8);
IkReal x7403=(px*r01);
IkReal x7404=((0.00036)*cj8*sj5*sj6);
IkReal x7405=(py*r01);
IkReal x7406=((1.0)*cj8*x7395);
IkReal x7407=((0.16769)*cj8*sj5*sj6*sj7);
evalcond[0]=((((-1.0)*r00*x7391))+(((-1.0)*r00*x7390))+(((-1.0)*r00*x7392))+((x7397*x7399))+(((-1.0)*r00*x7394))+((x7395*x7396))+((r00*x7393)));
evalcond[1]=(((r01*x7404))+((x7399*x7403))+(((-1.0)*r01*x7401))+(((-1.0)*x7405*x7406))+(((-1.0)*r01*x7407))+((r01*x7402))+((r01*x7400)));
evalcond[2]=((((-1.0)*r00*x7407))+(((-1.0)*r00*x7401))+((r00*x7404))+((r00*x7402))+((x7396*x7398))+(((-1.0)*x7397*x7406))+((r00*x7400)));
evalcond[3]=((((-1.0)*r01*x7393))+((r01*x7392))+(((-1.0)*cj8*x7398*x7405))+((r01*x7391))+((r01*x7390))+(((-1.0)*x7403*x7406))+((r01*x7394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x7408=(cj4*cj5*cj7);
IkReal x7409=((1.0)*cj4);
IkReal x7410=(cj6*r00*sj7);
IkReal x7411=((1.0)*r00);
IkReal x7412=(cj5*cj7*sj4);
IkReal x7413=(cj6*r01*sj7);
IkReal x7414=(r00*sj5*sj6*sj7);
IkReal x7415=(r01*sj5*sj6*sj7);
if( IKabs(((((-1.0)*x7409*x7415))+((r01*x7408))+(((-1.0)*x7411*x7412))+(((-1.0)*sj4*x7413))+((sj4*x7414))+(((-1.0)*x7409*x7410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x7409*x7413))+((sj4*x7415))+(((-1.0)*r01*x7412))+((sj4*x7410))+((cj4*x7414))+(((-1.0)*x7408*x7411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x7409*x7415))+((r01*x7408))+(((-1.0)*x7411*x7412))+(((-1.0)*sj4*x7413))+((sj4*x7414))+(((-1.0)*x7409*x7410))))+IKsqr(((((-1.0)*x7409*x7413))+((sj4*x7415))+(((-1.0)*r01*x7412))+((sj4*x7410))+((cj4*x7414))+(((-1.0)*x7408*x7411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x7409*x7415))+((r01*x7408))+(((-1.0)*x7411*x7412))+(((-1.0)*sj4*x7413))+((sj4*x7414))+(((-1.0)*x7409*x7410))), ((((-1.0)*x7409*x7413))+((sj4*x7415))+(((-1.0)*r01*x7412))+((sj4*x7410))+((cj4*x7414))+(((-1.0)*x7408*x7411))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x7416=(cj6*sj7);
IkReal x7417=IKcos(j9);
IkReal x7418=(r00*x7417);
IkReal x7419=(sj4*x7418);
IkReal x7420=((1.0)*cj4);
IkReal x7421=IKsin(j9);
IkReal x7422=(r00*x7421);
IkReal x7423=(x7420*x7422);
IkReal x7424=(r01*x7417);
IkReal x7425=(x7420*x7424);
IkReal x7426=((1.0)*sj4);
IkReal x7427=(r01*x7421);
IkReal x7428=(x7426*x7427);
IkReal x7429=(cj5*cj7);
IkReal x7430=(cj4*x7418);
IkReal x7431=(sj4*x7422);
IkReal x7432=(sj4*x7424);
IkReal x7433=((1.0)*sj6);
IkReal x7434=(cj4*r01*x7421);
IkReal x7435=((1.0)*cj4*r00*x7417);
IkReal x7436=((1.0)*sj4*sj8);
IkReal x7437=((1.0)*cj8*sj4);
IkReal x7438=(sj5*sj6);
IkReal x7439=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x7416))+x7419+(((-1.0)*x7423))+(((-1.0)*x7428))+(((-1.0)*x7425)));
evalcond[1]=((((-1.0)*sj5*sj7*x7433))+(((-1.0)*x7420*x7427))+x7432+x7430+x7431+x7429);
evalcond[2]=((((-1.0)*x7433))+(((-1.0)*sj8*x7435))+(((-1.0)*x7422*x7436))+((sj8*x7434))+(((-1.0)*x7424*x7436)));
evalcond[3]=((((-1.0)*sj8*x7423))+((cj6*sj5))+(((-1.0)*sj8*x7425))+(((-1.0)*sj8*x7428))+((sj8*x7419)));
evalcond[4]=((((-1.0)*cj8*x7435))+((cj8*x7434))+((cj6*cj7))+(((-1.0)*x7422*x7437))+(((-1.0)*x7424*x7437)));
evalcond[5]=((((-1.0)*cj8*x7425))+((cj5*sj7))+(((-1.0)*cj8*x7423))+(((-1.0)*cj8*x7428))+((cj8*x7419))+((cj7*x7438)));
evalcond[6]=((0.00337)+(((-0.03431)*x7419))+(((-0.16769)*x7416))+(((-1.0)*py*x7426))+(((0.00036)*cj6))+((x7424*x7439))+(((0.03431)*sj4*x7427))+((x7422*x7439))+(((-1.0)*px*x7420)));
evalcond[7]=(((px*sj4))+(((-0.16769)*sj7*x7438))+(((-0.03431)*x7432))+(((0.00036)*x7438))+(((0.32901)*cj5))+((x7427*x7439))+(((-1.0)*py*x7420))+(((-0.03431)*x7431))+(((-0.03431)*x7430))+(((0.16769)*x7429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7440=(cj8*r00);
IkReal x7441=(cj6*cj8*r00);
IkReal x7442=((0.16769)*sj7);
IkReal x7443=((0.03431)*cj7*r00);
IkReal x7444=((((-0.00036)*x7441))+(((-0.00337)*x7440))+((x7441*x7442))+(((-0.03431)*cj5*r00*sj7))+(((-1.0)*sj5*sj6*x7443)));
IkReal x7445=(cj5*cj8*r00);
IkReal x7446=(cj8*r00*sj5*sj6);
IkReal x7447=((((-1.0)*cj6*x7443))+(((0.16769)*cj7*x7445))+(((0.00036)*x7446))+(((-1.0)*x7442*x7446))+(((0.32901)*x7445)));
CheckValue<IkReal> x7448 = IKatan2WithCheck(IkReal(((((-1.0)*px*x7447))+(((-1.0)*py*x7444)))),((((-1.0)*px*x7444))+((py*x7447))),IKFAST_ATAN2_MAGTHRESH);
if(!x7448.valid){
continue;
}
CheckValue<IkReal> x7449=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7440*(pz*pz)))+((pp*x7440)))),-1);
if(!x7449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7448.value)+(((1.5707963267949)*(x7449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x7450=((0.00337)*cj8);
IkReal x7451=((0.03431)*cj5*sj7);
IkReal x7452=((0.00036)*cj6*cj8);
IkReal x7453=((0.16769)*cj6*cj8*sj7);
IkReal x7454=((0.03431)*cj7*sj5*sj6);
IkReal x7455=IKcos(j4);
IkReal x7456=(cj8*px*r00);
IkReal x7457=(py*r00);
IkReal x7458=IKsin(j4);
IkReal x7459=(cj8*x7458);
IkReal x7460=((0.32901)*cj5*cj8);
IkReal x7461=((0.03431)*cj6*cj7);
IkReal x7462=((0.16769)*cj5*cj7*cj8);
IkReal x7463=(px*r01);
IkReal x7464=((0.00036)*cj8*sj5*sj6);
IkReal x7465=(py*r01);
IkReal x7466=((1.0)*cj8*x7455);
IkReal x7467=((0.16769)*cj8*sj5*sj6*sj7);
evalcond[0]=((((-1.0)*r00*x7451))+(((-1.0)*r00*x7454))+(((-1.0)*r00*x7450))+(((-1.0)*r00*x7452))+((r00*x7453))+((x7455*x7456))+((x7457*x7459)));
evalcond[1]=(((x7459*x7463))+(((-1.0)*x7465*x7466))+(((-1.0)*r01*x7461))+((r01*x7464))+((r01*x7462))+((r01*x7460))+(((-1.0)*r01*x7467)));
evalcond[2]=(((x7456*x7458))+(((-1.0)*x7457*x7466))+(((-1.0)*r00*x7461))+((r00*x7462))+((r00*x7460))+(((-1.0)*r00*x7467))+((r00*x7464)));
evalcond[3]=(((r01*x7451))+((r01*x7452))+(((-1.0)*r01*x7453))+((r01*x7450))+(((-1.0)*x7463*x7466))+(((-1.0)*cj8*x7458*x7465))+((r01*x7454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x7468=(cj4*cj5*cj7);
IkReal x7469=((1.0)*cj4);
IkReal x7470=(cj6*r00*sj7);
IkReal x7471=((1.0)*r00);
IkReal x7472=(cj5*cj7*sj4);
IkReal x7473=(cj6*r01*sj7);
IkReal x7474=(r00*sj5*sj6*sj7);
IkReal x7475=(r01*sj5*sj6*sj7);
if( IKabs((((sj4*x7474))+(((-1.0)*x7471*x7472))+(((-1.0)*sj4*x7473))+((r01*x7468))+(((-1.0)*x7469*x7470))+(((-1.0)*x7469*x7475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x7468*x7471))+(((-1.0)*x7469*x7473))+((sj4*x7470))+((sj4*x7475))+(((-1.0)*r01*x7472))+((cj4*x7474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x7474))+(((-1.0)*x7471*x7472))+(((-1.0)*sj4*x7473))+((r01*x7468))+(((-1.0)*x7469*x7470))+(((-1.0)*x7469*x7475))))+IKsqr(((((-1.0)*x7468*x7471))+(((-1.0)*x7469*x7473))+((sj4*x7470))+((sj4*x7475))+(((-1.0)*r01*x7472))+((cj4*x7474))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((sj4*x7474))+(((-1.0)*x7471*x7472))+(((-1.0)*sj4*x7473))+((r01*x7468))+(((-1.0)*x7469*x7470))+(((-1.0)*x7469*x7475))), ((((-1.0)*x7468*x7471))+(((-1.0)*x7469*x7473))+((sj4*x7470))+((sj4*x7475))+(((-1.0)*r01*x7472))+((cj4*x7474))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x7476=(cj6*sj7);
IkReal x7477=IKcos(j9);
IkReal x7478=(r00*x7477);
IkReal x7479=(sj4*x7478);
IkReal x7480=((1.0)*cj4);
IkReal x7481=IKsin(j9);
IkReal x7482=(r00*x7481);
IkReal x7483=(x7480*x7482);
IkReal x7484=(r01*x7477);
IkReal x7485=(x7480*x7484);
IkReal x7486=((1.0)*sj4);
IkReal x7487=(r01*x7481);
IkReal x7488=(x7486*x7487);
IkReal x7489=(cj5*cj7);
IkReal x7490=(cj4*x7478);
IkReal x7491=(sj4*x7482);
IkReal x7492=(sj4*x7484);
IkReal x7493=((1.0)*sj6);
IkReal x7494=(cj4*r01*x7481);
IkReal x7495=((1.0)*cj4*r00*x7477);
IkReal x7496=((1.0)*sj4*sj8);
IkReal x7497=((1.0)*cj8*sj4);
IkReal x7498=(sj5*sj6);
IkReal x7499=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x7483))+(((-1.0)*x7488))+(((-1.0)*x7476))+(((-1.0)*x7485))+x7479);
evalcond[1]=((((-1.0)*x7480*x7487))+x7489+(((-1.0)*sj5*sj7*x7493))+x7490+x7491+x7492);
evalcond[2]=(((sj8*x7494))+(((-1.0)*sj8*x7495))+(((-1.0)*x7493))+(((-1.0)*x7482*x7496))+(((-1.0)*x7484*x7496)));
evalcond[3]=(((cj6*sj5))+(((-1.0)*sj8*x7485))+(((-1.0)*sj8*x7488))+((sj8*x7479))+(((-1.0)*sj8*x7483)));
evalcond[4]=((((-1.0)*x7484*x7497))+((cj8*x7494))+((cj6*cj7))+(((-1.0)*cj8*x7495))+(((-1.0)*x7482*x7497)));
evalcond[5]=(((cj5*sj7))+(((-1.0)*cj8*x7483))+((cj7*x7498))+((cj8*x7479))+(((-1.0)*cj8*x7485))+(((-1.0)*cj8*x7488)));
evalcond[6]=((0.00337)+(((0.00036)*cj6))+(((-1.0)*py*x7486))+((x7482*x7499))+(((-1.0)*px*x7480))+(((-0.16769)*x7476))+((x7484*x7499))+(((0.03431)*sj4*x7487))+(((-0.03431)*x7479)));
evalcond[7]=(((px*sj4))+((x7487*x7499))+(((0.32901)*cj5))+(((-0.16769)*sj7*x7498))+(((-0.03431)*x7491))+(((-1.0)*py*x7480))+(((0.16769)*x7489))+(((0.00036)*x7498))+(((-0.03431)*x7492))+(((-0.03431)*x7490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7500=(cj8*r01);
IkReal x7501=(cj6*cj8*r01);
IkReal x7502=((0.16769)*sj7);
IkReal x7503=((0.03431)*cj7*r01);
IkReal x7504=((((-1.0)*x7501*x7502))+(((0.00036)*x7501))+(((0.00337)*x7500))+((sj5*sj6*x7503))+((((cj5*sj7))*(((0.03431)*r01)))));
IkReal x7505=(cj5*cj8*r01);
IkReal x7506=(cj8*r01*sj5*sj6);
IkReal x7507=((((0.16769)*cj7*x7505))+(((-1.0)*x7502*x7506))+(((-1.0)*cj6*x7503))+(((0.32901)*x7505))+(((0.00036)*x7506)));
CheckValue<IkReal> x7508 = IKatan2WithCheck(IkReal((((py*x7504))+(((-1.0)*px*x7507)))),(((px*x7504))+((py*x7507))),IKFAST_ATAN2_MAGTHRESH);
if(!x7508.valid){
continue;
}
CheckValue<IkReal> x7509=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7500*(pz*pz)))+((pp*x7500)))),-1);
if(!x7509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7508.value)+(((1.5707963267949)*(x7509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x7510=((0.00337)*cj8);
IkReal x7511=((0.03431)*cj5*sj7);
IkReal x7512=((0.00036)*cj6*cj8);
IkReal x7513=((0.16769)*cj6*cj8*sj7);
IkReal x7514=((0.03431)*cj7*sj5*sj6);
IkReal x7515=IKcos(j4);
IkReal x7516=(cj8*px*r00);
IkReal x7517=(py*r00);
IkReal x7518=IKsin(j4);
IkReal x7519=(cj8*x7518);
IkReal x7520=((0.32901)*cj5*cj8);
IkReal x7521=((0.03431)*cj6*cj7);
IkReal x7522=((0.16769)*cj5*cj7*cj8);
IkReal x7523=(px*r01);
IkReal x7524=((0.00036)*cj8*sj5*sj6);
IkReal x7525=(py*r01);
IkReal x7526=((1.0)*cj8*x7515);
IkReal x7527=((0.16769)*cj8*sj5*sj6*sj7);
evalcond[0]=(((r00*x7513))+(((-1.0)*r00*x7510))+(((-1.0)*r00*x7512))+(((-1.0)*r00*x7511))+((x7515*x7516))+((x7517*x7519))+(((-1.0)*r00*x7514)));
evalcond[1]=(((r01*x7522))+((r01*x7520))+(((-1.0)*r01*x7527))+(((-1.0)*r01*x7521))+(((-1.0)*x7525*x7526))+((r01*x7524))+((x7519*x7523)));
evalcond[2]=(((x7516*x7518))+(((-1.0)*r00*x7527))+(((-1.0)*x7517*x7526))+((r00*x7520))+((r00*x7522))+((r00*x7524))+(((-1.0)*r00*x7521)));
evalcond[3]=((((-1.0)*r01*x7513))+((r01*x7511))+((r01*x7512))+(((-1.0)*x7523*x7526))+(((-1.0)*cj8*x7518*x7525))+((r01*x7510))+((r01*x7514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x7528=(cj4*cj5*cj7);
IkReal x7529=((1.0)*cj4);
IkReal x7530=(cj6*r00*sj7);
IkReal x7531=((1.0)*r00);
IkReal x7532=(cj5*cj7*sj4);
IkReal x7533=(cj6*r01*sj7);
IkReal x7534=(r00*sj5*sj6*sj7);
IkReal x7535=(r01*sj5*sj6*sj7);
if( IKabs(((((-1.0)*x7529*x7530))+(((-1.0)*x7529*x7535))+((r01*x7528))+(((-1.0)*x7531*x7532))+(((-1.0)*sj4*x7533))+((sj4*x7534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x7534))+(((-1.0)*x7529*x7533))+(((-1.0)*r01*x7532))+((sj4*x7530))+((sj4*x7535))+(((-1.0)*x7528*x7531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x7529*x7530))+(((-1.0)*x7529*x7535))+((r01*x7528))+(((-1.0)*x7531*x7532))+(((-1.0)*sj4*x7533))+((sj4*x7534))))+IKsqr((((cj4*x7534))+(((-1.0)*x7529*x7533))+(((-1.0)*r01*x7532))+((sj4*x7530))+((sj4*x7535))+(((-1.0)*x7528*x7531))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*x7529*x7530))+(((-1.0)*x7529*x7535))+((r01*x7528))+(((-1.0)*x7531*x7532))+(((-1.0)*sj4*x7533))+((sj4*x7534))), (((cj4*x7534))+(((-1.0)*x7529*x7533))+(((-1.0)*r01*x7532))+((sj4*x7530))+((sj4*x7535))+(((-1.0)*x7528*x7531))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x7536=(cj6*sj7);
IkReal x7537=IKcos(j9);
IkReal x7538=(r00*x7537);
IkReal x7539=(sj4*x7538);
IkReal x7540=((1.0)*cj4);
IkReal x7541=IKsin(j9);
IkReal x7542=(r00*x7541);
IkReal x7543=(x7540*x7542);
IkReal x7544=(r01*x7537);
IkReal x7545=(x7540*x7544);
IkReal x7546=((1.0)*sj4);
IkReal x7547=(r01*x7541);
IkReal x7548=(x7546*x7547);
IkReal x7549=(cj5*cj7);
IkReal x7550=(cj4*x7538);
IkReal x7551=(sj4*x7542);
IkReal x7552=(sj4*x7544);
IkReal x7553=((1.0)*sj6);
IkReal x7554=(cj4*r01*x7541);
IkReal x7555=((1.0)*cj4*r00*x7537);
IkReal x7556=((1.0)*sj4*sj8);
IkReal x7557=((1.0)*cj8*sj4);
IkReal x7558=(sj5*sj6);
IkReal x7559=((0.03431)*cj4);
evalcond[0]=((((-1.0)*x7545))+(((-1.0)*x7548))+(((-1.0)*x7536))+x7539+(((-1.0)*x7543)));
evalcond[1]=(x7549+(((-1.0)*sj5*sj7*x7553))+x7550+x7552+x7551+(((-1.0)*x7540*x7547)));
evalcond[2]=((((-1.0)*sj8*x7555))+(((-1.0)*x7542*x7556))+(((-1.0)*x7544*x7556))+(((-1.0)*x7553))+((sj8*x7554)));
evalcond[3]=(((sj8*x7539))+(((-1.0)*sj8*x7548))+((cj6*sj5))+(((-1.0)*sj8*x7543))+(((-1.0)*sj8*x7545)));
evalcond[4]=(((cj8*x7554))+(((-1.0)*cj8*x7555))+(((-1.0)*x7542*x7557))+((cj6*cj7))+(((-1.0)*x7544*x7557)));
evalcond[5]=(((cj5*sj7))+((cj8*x7539))+(((-1.0)*cj8*x7548))+(((-1.0)*cj8*x7545))+((cj7*x7558))+(((-1.0)*cj8*x7543)));
evalcond[6]=((0.00337)+(((-0.16769)*x7536))+(((-1.0)*px*x7540))+((x7542*x7559))+(((0.00036)*cj6))+(((-1.0)*py*x7546))+((x7544*x7559))+(((-0.03431)*x7539))+(((0.03431)*sj4*x7547)));
evalcond[7]=((((0.16769)*x7549))+((px*sj4))+((x7547*x7559))+(((-0.03431)*x7551))+(((-0.03431)*x7552))+(((0.32901)*cj5))+(((-1.0)*py*x7540))+(((-0.03431)*x7550))+(((0.00036)*x7558))+(((-0.16769)*sj7*x7558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x7563 = IKatan2WithCheck(IkReal(((0.03431)*r21)),((0.03431)*r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7563.valid){
continue;
}
IkReal x7560=((-1.0)*(((1.0)*(x7563.value))));
IkReal x7561=(cj5*sj6);
if((((((0.0011771761)*(r21*r21)))+(((0.0011771761)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x7564=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0011771761)*(r21*r21)))+(((0.0011771761)*(r20*r20)))))),-1);
if(!x7564.valid){
continue;
}
if( (((x7564.value)*(((((0.16769)*sj7*x7561))+(((-0.00036)*x7561))+(((-1.0)*(1.0)*pz))+(((0.32901)*sj5))+(((0.16769)*cj7*sj5)))))) < -1-IKFAST_SINCOS_THRESH || (((x7564.value)*(((((0.16769)*sj7*x7561))+(((-0.00036)*x7561))+(((-1.0)*(1.0)*pz))+(((0.32901)*sj5))+(((0.16769)*cj7*sj5)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x7562=IKasin(((x7564.value)*(((((0.16769)*sj7*x7561))+(((-0.00036)*x7561))+(((-1.0)*(1.0)*pz))+(((0.32901)*sj5))+(((0.16769)*cj7*sj5))))));
j9array[0]=(x7560+(((-1.0)*x7562)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+x7560+x7562);
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*r20*(IKsin(j9))))+(((-1.0)*(1.0)*r21*(IKcos(j9))))+((cj5*sj6*sj7))+((cj7*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x7565=(((cj9*rxp1_2))+((rxp0_2*sj9)));
j4eval[0]=x7565;
j4eval[1]=IKsign(x7565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x7566=r21*r21;
IkReal x7567=(cj9*r20);
IkReal x7568=cj9*cj9;
IkReal x7569=(x7566+(((-1.0)*x7566*x7568))+((x7568*(r20*r20)))+(((-2.0)*r21*sj9*x7567))+(r22*r22));
IkReal x7570=(sj5*sj7);
IkReal x7571=(cj5*cj6);
IkReal x7572=(r21*sj9);
IkReal x7573=((1.0)*cj9*r20);
IkReal x7574=(cj5*cj7*sj6);
j8eval[0]=x7569;
j8eval[1]=((IKabs((((r22*x7570))+((x7571*x7572))+(((-1.0)*x7571*x7573))+(((-1.0)*r22*x7574)))))+(IKabs((((r22*x7571))+(((-1.0)*sj5*sj7*x7572))+((x7567*x7570))+((x7572*x7574))+(((-1.0)*x7573*x7574))))));
j8eval[2]=IKsign(x7569);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7575=r20*r20;
IkReal x7576=cj9*cj9;
IkReal x7577=((-1.0)+(((-1.0)*x7575*x7576))+((x7576*(r21*r21)))+x7575+(((2.0)*cj9*r20*r21*sj9)));
j4eval[0]=x7577;
j4eval[1]=IKsign(x7577);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x7579 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x7579)==0){
continue;
}
IkReal x7578=pow(x7579,-0.5);
CheckValue<IkReal> x7580 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x7580.valid){
continue;
}
IkReal gconst12=((-1.0)*(((1.0)*(x7580.value))));
IkReal gconst13=((-1.0)*rxp1_2*x7578);
IkReal gconst14=(rxp0_2*x7578);
IkReal x7581=(cj7*sj5);
IkReal x7582=(gconst13*r20);
IkReal x7583=(gconst14*r21);
IkReal x7584=(cj5*sj6);
IkReal x7585=(sj7*x7584);
CheckValue<IkReal> x7586 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x7586.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j9+(x7586.value))))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x7583))+x7581+x7585+(((-1.0)*x7582)));
evalcond[2]=((((-0.00036)*x7584))+(((0.16769)*x7581))+(((-1.0)*(1.0)*pz))+(((0.32901)*sj5))+(((0.03431)*x7582))+(((0.03431)*x7583))+(((0.16769)*x7585)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7587=(gconst14*r20);
IkReal x7588=(sj5*sj7);
IkReal x7589=(cj5*cj6);
IkReal x7590=(gconst13*r21);
IkReal x7591=((1.0)*gconst14*r20);
IkReal x7592=(cj5*cj7*sj6);
CheckValue<IkReal> x7593=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst13*r21*x7587))+(((gconst13*gconst13)*(r21*r21)))+(((gconst14*gconst14)*(r20*r20)))+(r22*r22))),-1);
if(!x7593.valid){
continue;
}
CheckValue<IkReal> x7594 = IKatan2WithCheck(IkReal(((((-1.0)*x7589*x7591))+((r22*x7588))+((x7589*x7590))+(((-1.0)*r22*x7592)))),((((-1.0)*x7591*x7592))+((x7587*x7588))+(((-1.0)*sj5*sj7*x7590))+((r22*x7589))+((x7590*x7592))),IKFAST_ATAN2_MAGTHRESH);
if(!x7594.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7593.value)))+(x7594.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x7595=((1.0)*cj5);
IkReal x7596=IKcos(j8);
IkReal x7597=IKsin(j8);
IkReal x7598=(gconst13*r21);
IkReal x7599=(gconst14*r20);
IkReal x7600=((1.0)*x7597);
evalcond[0]=((((-1.0)*x7599*x7600))+((r22*x7596))+((x7597*x7598))+(((-1.0)*cj6*x7595)));
evalcond[1]=(((x7596*x7598))+(((-1.0)*r22*x7600))+(((-1.0)*cj7*sj6*x7595))+((sj5*sj7))+(((-1.0)*x7596*x7599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7601=((1.0)*sj8);
IkReal x7602=(gconst13*sj6);
IkReal x7603=((1.0)*r01);
IkReal x7604=(gconst14*sj6);
IkReal x7605=(cj6*sj7);
IkReal x7606=(cj6*gconst13*sj7*sj8);
CheckValue<IkReal> x7607 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x7602))+(((-1.0)*cj8*r02*x7605))+(((-1.0)*x7603*x7604))+(((-1.0)*x7603*x7606))+((((gconst14*r00))*((cj6*sj7*sj8)))))),(((cj8*r12*x7605))+((r11*x7606))+(((-1.0)*cj6*gconst14*r10*sj7*x7601))+((r11*x7604))+((r10*x7602))),IKFAST_ATAN2_MAGTHRESH);
if(!x7607.valid){
continue;
}
CheckValue<IkReal> x7608=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x7601*(gconst13*gconst13)))+(((-1.0)*x7601*(gconst14*gconst14)))))))+(((-1.0)*cj8*gconst14*r20))+((cj8*gconst13*r21)))),-1);
if(!x7608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7607.value)+(((1.5707963267949)*(x7608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x7609=(cj6*sj7);
IkReal x7610=(gconst13*r00);
IkReal x7611=IKcos(j4);
IkReal x7612=((1.0)*x7611);
IkReal x7613=(gconst13*r10);
IkReal x7614=IKsin(j4);
IkReal x7615=((1.0)*x7614);
IkReal x7616=(gconst14*r01);
IkReal x7617=(gconst14*r11);
IkReal x7618=(cj5*cj7);
IkReal x7619=(gconst13*r00*x7614);
IkReal x7620=(gconst14*r01*x7614);
IkReal x7621=((1.0)*sj6);
IkReal x7622=(cj8*x7611);
IkReal x7623=(cj8*x7614);
IkReal x7624=(gconst13*r01);
IkReal x7625=(sj8*x7611);
IkReal x7626=(gconst13*r11);
IkReal x7627=(sj8*x7614);
IkReal x7628=(gconst14*r00);
IkReal x7629=((1.0)*sj8*x7611);
IkReal x7630=(gconst14*r10);
IkReal x7631=((1.0)*sj8*x7614);
IkReal x7632=((1.0)*cj8*x7614);
IkReal x7633=(r02*sj8);
IkReal x7634=(r12*sj8);
IkReal x7635=(cj8*gconst13*x7611);
IkReal x7636=((1.0)*cj8*x7611);
IkReal x7637=((0.03431)*x7611);
IkReal x7638=((0.03431)*x7614);
IkReal x7639=(sj5*sj6);
evalcond[0]=((((-1.0)*x7615*x7617))+(((-1.0)*x7612*x7616))+(((-1.0)*x7610*x7612))+(((-1.0)*x7613*x7615))+(((-1.0)*x7609)));
evalcond[1]=((((-1.0)*sj5*sj7*x7621))+(((-1.0)*x7612*x7617))+(((-1.0)*x7612*x7613))+x7620+x7618+x7619);
evalcond[2]=(((r12*x7623))+(((-1.0)*x7621))+((x7626*x7627))+((x7624*x7625))+(((-1.0)*x7628*x7629))+(((-1.0)*x7630*x7631))+((r02*x7622)));
evalcond[3]=(((x7627*x7628))+(((-1.0)*x7624*x7631))+((r12*x7622))+(((-1.0)*x7629*x7630))+((cj6*sj5))+((x7625*x7626))+(((-1.0)*r02*x7632)));
evalcond[4]=(((r01*x7635))+(((-1.0)*x7628*x7636))+((x7623*x7626))+(((-1.0)*x7612*x7633))+(((-1.0)*x7630*x7632))+((cj6*cj7))+(((-1.0)*x7615*x7634)));
evalcond[5]=((0.00337)+((x7610*x7637))+(((-0.16769)*x7609))+(((0.00036)*cj6))+((x7617*x7638))+(((-1.0)*px*x7612))+(((-1.0)*py*x7615))+((x7613*x7638))+((x7616*x7637)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x7612*x7634))+((x7623*x7628))+((x7614*x7633))+(((-1.0)*x7630*x7636))+((cj7*x7639))+((r11*x7635))+(((-1.0)*x7624*x7632)));
evalcond[7]=(((x7613*x7637))+(((0.00036)*x7639))+(((-0.03431)*x7620))+(((0.32901)*cj5))+(((-0.16769)*sj7*x7639))+(((0.16769)*x7618))+((px*x7614))+(((-1.0)*py*x7612))+(((-0.03431)*x7619))+((x7617*x7637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7641 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x7641)==0){
continue;
}
IkReal x7640=((1.0)*(pow(x7641,-0.5)));
CheckValue<IkReal> x7642 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x7642.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(1.0)*(x7642.value))));
IkReal gconst16=(rxp1_2*x7640);
IkReal gconst17=((-1.0)*rxp0_2*x7640);
IkReal x7643=(cj7*sj5);
IkReal x7644=(gconst16*r20);
IkReal x7645=(gconst17*r21);
IkReal x7646=(cj5*sj6);
IkReal x7647=(sj7*x7646);
CheckValue<IkReal> x7648 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x7648.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9+(x7648.value))))), 6.28318530717959)));
evalcond[1]=(x7647+x7643+(((-1.0)*x7644))+(((-1.0)*x7645)));
evalcond[2]=((((-1.0)*(1.0)*pz))+(((0.03431)*x7645))+(((0.32901)*sj5))+(((0.16769)*x7647))+(((-0.00036)*x7646))+(((0.16769)*x7643))+(((0.03431)*x7644)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7649=(gconst17*r20);
IkReal x7650=(sj5*sj7);
IkReal x7651=(cj5*cj6);
IkReal x7652=(gconst16*r21);
IkReal x7653=((1.0)*gconst17*r20);
IkReal x7654=(cj5*cj7*sj6);
CheckValue<IkReal> x7655=IKPowWithIntegerCheck(IKsign(((((gconst17*gconst17)*(r20*r20)))+(((gconst16*gconst16)*(r21*r21)))+(r22*r22)+(((-2.0)*gconst16*r21*x7649)))),-1);
if(!x7655.valid){
continue;
}
CheckValue<IkReal> x7656 = IKatan2WithCheck(IkReal((((x7651*x7652))+(((-1.0)*r22*x7654))+(((-1.0)*x7651*x7653))+((r22*x7650)))),((((-1.0)*x7653*x7654))+(((-1.0)*sj5*sj7*x7652))+((r22*x7651))+((x7649*x7650))+((x7652*x7654))),IKFAST_ATAN2_MAGTHRESH);
if(!x7656.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7655.value)))+(x7656.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x7657=((1.0)*cj5);
IkReal x7658=IKcos(j8);
IkReal x7659=IKsin(j8);
IkReal x7660=(gconst16*r21);
IkReal x7661=(gconst17*r20);
IkReal x7662=((1.0)*x7659);
evalcond[0]=((((-1.0)*x7661*x7662))+(((-1.0)*cj6*x7657))+((r22*x7658))+((x7659*x7660)));
evalcond[1]=((((-1.0)*r22*x7662))+((sj5*sj7))+((x7658*x7660))+(((-1.0)*x7658*x7661))+(((-1.0)*cj7*sj6*x7657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7663=((1.0)*sj8);
IkReal x7664=(gconst16*sj6);
IkReal x7665=((1.0)*r01);
IkReal x7666=(gconst17*sj6);
IkReal x7667=(cj6*sj7);
IkReal x7668=(cj6*gconst16*sj7*sj8);
CheckValue<IkReal> x7669=IKPowWithIntegerCheck(IKsign((((cj8*gconst16*r21))+(((-1.0)*cj8*gconst17*r20))+((r22*(((((-1.0)*x7663*(gconst16*gconst16)))+(((-1.0)*x7663*(gconst17*gconst17))))))))),-1);
if(!x7669.valid){
continue;
}
CheckValue<IkReal> x7670 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x7664))+((((gconst17*r00))*((cj6*sj7*sj8))))+(((-1.0)*cj8*r02*x7667))+(((-1.0)*x7665*x7668))+(((-1.0)*x7665*x7666)))),((((-1.0)*cj6*gconst17*r10*sj7*x7663))+((r10*x7664))+((cj8*r12*x7667))+((r11*x7666))+((r11*x7668))),IKFAST_ATAN2_MAGTHRESH);
if(!x7670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7669.value)))+(x7670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x7671=(cj6*sj7);
IkReal x7672=(gconst16*r00);
IkReal x7673=IKcos(j4);
IkReal x7674=((1.0)*x7673);
IkReal x7675=(gconst16*r10);
IkReal x7676=IKsin(j4);
IkReal x7677=((1.0)*x7676);
IkReal x7678=(gconst17*r01);
IkReal x7679=(gconst17*r11);
IkReal x7680=(cj5*cj7);
IkReal x7681=(gconst16*r00*x7676);
IkReal x7682=(gconst17*r01*x7676);
IkReal x7683=((1.0)*sj6);
IkReal x7684=(cj8*x7673);
IkReal x7685=(cj8*x7676);
IkReal x7686=(gconst16*r01);
IkReal x7687=(sj8*x7673);
IkReal x7688=(gconst16*r11);
IkReal x7689=(sj8*x7676);
IkReal x7690=(gconst17*r00);
IkReal x7691=((1.0)*sj8*x7673);
IkReal x7692=(gconst17*r10);
IkReal x7693=((1.0)*sj8*x7676);
IkReal x7694=((1.0)*cj8*x7676);
IkReal x7695=(r02*sj8);
IkReal x7696=(r12*sj8);
IkReal x7697=(cj8*gconst16*x7673);
IkReal x7698=((1.0)*cj8*x7673);
IkReal x7699=((0.03431)*x7673);
IkReal x7700=((0.03431)*x7676);
IkReal x7701=(sj5*sj6);
evalcond[0]=((((-1.0)*x7672*x7674))+(((-1.0)*x7671))+(((-1.0)*x7677*x7679))+(((-1.0)*x7675*x7677))+(((-1.0)*x7674*x7678)));
evalcond[1]=((((-1.0)*x7674*x7675))+(((-1.0)*sj5*sj7*x7683))+x7682+x7681+x7680+(((-1.0)*x7674*x7679)));
evalcond[2]=((((-1.0)*x7683))+(((-1.0)*x7690*x7691))+((r02*x7684))+((x7686*x7687))+((r12*x7685))+((x7688*x7689))+(((-1.0)*x7692*x7693)));
evalcond[3]=((((-1.0)*r02*x7694))+((x7687*x7688))+((cj6*sj5))+(((-1.0)*x7686*x7693))+((x7689*x7690))+(((-1.0)*x7691*x7692))+((r12*x7684)));
evalcond[4]=((((-1.0)*x7674*x7695))+(((-1.0)*x7677*x7696))+(((-1.0)*x7692*x7694))+((cj6*cj7))+((r01*x7697))+((x7685*x7688))+(((-1.0)*x7690*x7698)));
evalcond[5]=((0.00337)+((x7672*x7699))+((x7678*x7699))+((x7675*x7700))+(((0.00036)*cj6))+((x7679*x7700))+(((-1.0)*py*x7677))+(((-1.0)*px*x7674))+(((-0.16769)*x7671)));
evalcond[6]=(((cj5*sj7))+((r11*x7697))+((cj7*x7701))+(((-1.0)*x7686*x7694))+((x7685*x7690))+((x7676*x7695))+(((-1.0)*x7692*x7698))+(((-1.0)*x7674*x7696)));
evalcond[7]=(((x7675*x7699))+((x7679*x7699))+((px*x7676))+(((-0.03431)*x7682))+(((0.16769)*x7680))+(((-1.0)*py*x7674))+(((0.32901)*cj5))+(((-0.03431)*x7681))+(((0.00036)*x7701))+(((-0.16769)*sj7*x7701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7702=cj9*cj9;
IkReal x7703=(cj5*cj7);
IkReal x7704=(cj9*r01);
IkReal x7705=(r00*sj9);
IkReal x7706=(cj6*sj7);
IkReal x7707=(cj9*r11);
IkReal x7708=(r10*sj9);
IkReal x7709=((1.0)*sj5*sj6*sj7);
IkReal x7710=((1.0)*cj5*cj7);
IkReal x7711=(sj5*sj6*sj7);
CheckValue<IkReal> x7712=IKPowWithIntegerCheck(IKsign(((-1.0)+(((r20*r20)*(((1.0)+(((-1.0)*x7702))))))+(((2.0)*cj9*r20*r21*sj9))+((x7702*(r21*r21))))),-1);
if(!x7712.valid){
continue;
}
CheckValue<IkReal> x7713 = IKatan2WithCheck(IkReal((((x7706*x7707))+((x7703*x7704))+((x7703*x7705))+((x7706*x7708))+(((-1.0)*x7705*x7709))+(((-1.0)*x7704*x7709)))),((((-1.0)*x7708*x7710))+(((-1.0)*x7707*x7710))+((x7707*x7711))+((x7704*x7706))+((x7705*x7706))+((x7708*x7711))),IKFAST_ATAN2_MAGTHRESH);
if(!x7713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7712.value)))+(x7713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x7714=(cj6*sj7);
IkReal x7715=(cj9*r01);
IkReal x7716=IKcos(j4);
IkReal x7717=((1.0)*x7716);
IkReal x7718=(cj9*r11);
IkReal x7719=IKsin(j4);
IkReal x7720=((1.0)*x7719);
IkReal x7721=(r00*sj9);
IkReal x7722=(r10*sj9);
IkReal x7723=(cj5*cj7);
IkReal x7724=(cj9*r01*x7719);
IkReal x7725=(r00*sj9*x7719);
IkReal x7726=(sj5*sj6*sj7);
IkReal x7727=((0.03431)*x7716);
IkReal x7728=((0.03431)*x7719);
evalcond[0]=((((-1.0)*x7717*x7721))+(((-1.0)*x7715*x7717))+(((-1.0)*x7718*x7720))+(((-1.0)*x7714))+(((-1.0)*x7720*x7722)));
evalcond[1]=(x7724+x7725+x7723+(((-1.0)*x7717*x7722))+(((-1.0)*x7717*x7718))+(((-1.0)*x7726)));
evalcond[2]=((0.00337)+(((-1.0)*py*x7720))+(((-1.0)*px*x7717))+((x7718*x7728))+((x7715*x7727))+(((0.00036)*cj6))+((x7722*x7728))+((x7721*x7727))+(((-0.16769)*x7714)));
evalcond[3]=((((-0.03431)*x7725))+((x7722*x7727))+(((-1.0)*py*x7717))+((px*x7719))+(((0.00036)*sj5*sj6))+(((0.32901)*cj5))+(((-0.03431)*x7724))+((x7718*x7727))+(((-0.16769)*x7726))+(((0.16769)*x7723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[2];
IkReal x7729=((1.0)*sj4);
IkReal x7730=(((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*r00*sj9*x7729))+(((-1.0)*cj9*r01*x7729)));
j8eval[0]=x7730;
j8eval[1]=IKsign(x7730);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7731=((1.0)*cj4);
IkReal x7732=((1.0)*sj4);
IkReal x7733=((((-1.0)*cj9*r11*x7732))+(((-1.0)*cj9*r01*x7731))+(((-1.0)*r10*sj9*x7732))+(((-1.0)*r00*sj9*x7731)));
j8eval[0]=x7733;
j8eval[1]=IKsign(x7733);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x7734=r21*r21;
IkReal x7735=(cj9*r20);
IkReal x7736=cj9*cj9;
IkReal x7737=((((-2.0)*r21*sj9*x7735))+((x7736*(r20*r20)))+x7734+(((-1.0)*x7734*x7736))+(r22*r22));
IkReal x7738=(sj5*sj7);
IkReal x7739=(cj5*cj6);
IkReal x7740=(r21*sj9);
IkReal x7741=((1.0)*cj9*r20);
IkReal x7742=(cj5*cj7*sj6);
j8eval[0]=x7737;
j8eval[1]=((IKabs(((((-1.0)*x7741*x7742))+((x7740*x7742))+(((-1.0)*sj5*sj7*x7740))+((r22*x7739))+((x7735*x7738)))))+(IKabs((((x7739*x7740))+(((-1.0)*r22*x7742))+((r22*x7738))+(((-1.0)*x7739*x7741))))));
j8eval[2]=IKsign(x7737);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7743=(cj9*r21);
IkReal x7744=(r20*sj9);
IkReal x7745=((1.0)*cj4);
IkReal x7746=(cj9*r01);
IkReal x7747=(r00*sj9);
IkReal x7748=((1.0)*sj4);
IkReal x7749=(cj9*r11);
IkReal x7750=(r10*sj9);
IkReal x7751=(sj4*x7746);
IkReal x7752=(sj4*x7747);
IkReal x7753=((0.03431)*cj4);
IkReal x7754=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*x7744))+(((-1.0)*x7743)));
evalcond[2]=((((-1.0)*x7745*x7747))+(((-1.0)*x7748*x7750))+(((-1.0)*x7748*x7749))+(((-1.0)*x7745*x7746)));
evalcond[3]=((0.4967)+(((0.03431)*x7744))+(((-1.0)*(1.0)*pz))+(((0.03431)*x7743)));
evalcond[4]=(x7752+x7751+(((-1.0)*x7745*x7750))+(((-1.0)*x7745*x7749)));
evalcond[5]=((0.00337)+((x7749*x7754))+((x7747*x7753))+(((-1.0)*px*x7745))+(((0.00036)*cj6))+((x7750*x7754))+(((-1.0)*py*x7748))+((x7746*x7753)));
evalcond[6]=(((px*sj4))+((x7749*x7753))+(((-1.0)*py*x7745))+(((-0.03431)*x7751))+(((0.00036)*sj6))+((x7750*x7753))+(((-0.03431)*x7752)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x7755=((1.0)*cj4);
IkReal x7756=((((-1.0)*r10*sj9*x7755))+(((-1.0)*cj9*r11*x7755))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x7756;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x7756);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x7757=((1.0)*cj4);
IkReal x7758=((1.0)*sj9);
IkReal x7759=((((-1.0)*r00*sj9*x7757))+(((-1.0)*cj9*r01*x7757))+(((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*r10*sj4*x7758)));
j8eval[0]=x7759;
j8eval[1]=IKsign(x7759);
j8eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj6*cj9*r20))+(((-1.0)*cj6*r21*x7758))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x7760=(cj4*r21);
IkReal x7761=(r11*x7760);
IkReal x7762=((1.0)*sj4);
IkReal x7763=(r01*r21);
IkReal x7764=(r21*sj9);
IkReal x7765=(cj9*r20*sj9);
IkReal x7766=cj9*cj9;
IkReal x7767=(r20*x7766);
IkReal x7768=(((cj4*r12*r22))+((cj9*r00*sj4*x7764))+((r01*sj4*x7765))+(((-1.0)*r02*r22*x7762))+((sj4*x7763*x7766))+x7761+(((-1.0)*cj4*r11*x7765))+(((-1.0)*x7762*x7763))+((cj4*r10*x7767))+(((-1.0)*x7761*x7766))+(((-1.0)*cj9*r10*sj9*x7760))+(((-1.0)*r00*sj4*x7767)));
j8eval[0]=x7768;
j8eval[1]=IKsign(x7768);
j8eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*sj6*x7764))+((sj6*((cj9*r20))))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7769=(cj9*r21);
IkReal x7770=(r20*sj9);
IkReal x7771=((1.0)*cj4);
IkReal x7772=(cj9*r01);
IkReal x7773=(r00*sj9);
IkReal x7774=((1.0)*sj4);
IkReal x7775=(cj9*r11);
IkReal x7776=(r10*sj9);
IkReal x7777=(sj4*x7772);
IkReal x7778=(sj4*x7773);
IkReal x7779=((0.03431)*cj4);
IkReal x7780=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x7770))+(((-1.0)*x7769)));
evalcond[2]=((((-1.0)*x7771*x7773))+(((-1.0)*x7774*x7775))+(((-1.0)*x7771*x7772))+(((-1.0)*x7774*x7776)));
evalcond[3]=((0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x7770))+(((0.03431)*x7769)));
evalcond[4]=((((-1.0)*x7771*x7776))+x7778+x7777+(((-1.0)*x7771*x7775)));
evalcond[5]=((0.00373)+(((-1.0)*px*x7771))+((x7776*x7780))+(((-1.0)*py*x7774))+((x7773*x7779))+((x7772*x7779))+((x7775*x7780)));
evalcond[6]=(((px*sj4))+((x7776*x7779))+((x7775*x7779))+(((-0.03431)*x7778))+(((-0.03431)*x7777))+(((-1.0)*py*x7771)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x7781=((1.0)*cj9);
IkReal x7782=((1.0)*sj9);
IkReal x7783=((((-1.0)*cj4*r00*x7782))+(((-1.0)*r11*sj4*x7781))+(((-1.0)*r10*sj4*x7782))+(((-1.0)*cj4*r01*x7781)));
j8eval[0]=x7783;
j8eval[1]=((IKabs(((((-1.0)*r21*x7782))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x7783);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x7784=((1.0)*sj9);
IkReal x7785=(((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9))+(((-1.0)*cj4*r10*x7784)));
j8eval[0]=x7785;
j8eval[1]=IKsign(x7785);
j8eval[2]=((IKabs(((((-1.0)*r21*x7784))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x7786=(cj4*r01);
IkReal x7787=(r21*x7786);
IkReal x7788=(r11*sj4);
IkReal x7789=(r21*x7788);
IkReal x7790=(cj4*r00);
IkReal x7791=cj9*cj9;
IkReal x7792=(r20*x7791);
IkReal x7793=(r10*sj4);
IkReal x7794=((1.0)*cj9*r21*sj9);
IkReal x7795=((1.0)*cj9*r20*sj9);
IkReal x7796=((1.0)*x7791);
IkReal x7797=((((-1.0)*x7789*x7796))+(((-1.0)*x7787*x7796))+(((-1.0)*x7790*x7794))+x7789+x7787+(((-1.0)*x7788*x7795))+((r12*r22*sj4))+((cj4*r02*r22))+(((-1.0)*x7786*x7795))+((x7790*x7792))+((x7792*x7793))+(((-1.0)*x7793*x7794)));
j8eval[0]=x7797;
j8eval[1]=IKsign(x7797);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7798=(cj4*r01);
IkReal x7799=(r21*x7798);
IkReal x7800=(r11*sj4);
IkReal x7801=(r21*x7800);
IkReal x7802=(cj4*r00);
IkReal x7803=cj9*cj9;
IkReal x7804=(r20*x7803);
IkReal x7805=(r10*sj4);
IkReal x7806=((1.0)*cj9*r21*sj9);
IkReal x7807=((1.0)*cj9*r20*sj9);
IkReal x7808=((1.0)*x7803);
CheckValue<IkReal> x7809=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7798*x7807))+(((-1.0)*x7805*x7806))+(((-1.0)*x7801*x7808))+x7799+((x7804*x7805))+((x7802*x7804))+(((-1.0)*x7802*x7806))+((r12*r22*sj4))+(((-1.0)*x7799*x7808))+((cj4*r02*r22))+(((-1.0)*x7800*x7807))+x7801)),-1);
if(!x7809.valid){
continue;
}
CheckValue<IkReal> x7810 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x7810.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7809.value)))+(x7810.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7811=IKcos(j8);
IkReal x7812=IKsin(j8);
IkReal x7813=(r21*sj9);
IkReal x7814=(cj9*r20);
IkReal x7815=((1.0)*x7812);
IkReal x7816=((1.0)*x7811);
IkReal x7817=(cj4*x7811);
IkReal x7818=(r12*sj4);
IkReal x7819=(r01*sj9);
IkReal x7820=(cj4*x7812);
IkReal x7821=(r11*sj4*sj9);
IkReal x7822=(cj9*r00);
IkReal x7823=((1.0)*cj4*x7812);
IkReal x7824=(cj9*r10*sj4);
IkReal x7825=(r02*sj4);
IkReal x7826=(r11*sj9);
IkReal x7827=(cj9*r00*sj4);
IkReal x7828=(cj9*r10);
IkReal x7829=((1.0)*cj4*x7811);
IkReal x7830=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x7814*x7815))+((x7812*x7813))+((r22*x7811)));
evalcond[1]=((((-1.0)*r22*x7815))+((x7811*x7813))+(((-1.0)*x7814*x7816)));
evalcond[2]=(((r02*x7817))+((x7811*x7818))+((x7812*x7821))+(((-1.0)*x7815*x7824))+(((-1.0)*x7822*x7823))+((x7819*x7820)));
evalcond[3]=((((-1.0)*x7816*x7830))+(((-1.0)*x7828*x7829))+((x7811*x7827))+(((-1.0)*r12*x7823))+((x7812*x7825))+((x7817*x7826)));
evalcond[4]=((1.0)+((x7820*x7826))+(((-1.0)*x7816*x7825))+((x7812*x7827))+((r12*x7817))+(((-1.0)*x7823*x7828))+(((-1.0)*x7815*x7830)));
evalcond[5]=((1.0)+(((-1.0)*x7822*x7829))+((x7811*x7821))+(((-1.0)*x7816*x7824))+(((-1.0)*x7815*x7818))+(((-1.0)*r02*x7823))+((x7817*x7819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7831=((1.0)*sj9);
CheckValue<IkReal> x7832=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x7831))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x7832.valid){
continue;
}
CheckValue<IkReal> x7833 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x7831))+((cj9*r20)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x7833.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7832.value)))+(x7833.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7834=IKcos(j8);
IkReal x7835=IKsin(j8);
IkReal x7836=(r21*sj9);
IkReal x7837=(cj9*r20);
IkReal x7838=((1.0)*x7835);
IkReal x7839=((1.0)*x7834);
IkReal x7840=(cj4*x7834);
IkReal x7841=(r12*sj4);
IkReal x7842=(r01*sj9);
IkReal x7843=(cj4*x7835);
IkReal x7844=(r11*sj4*sj9);
IkReal x7845=(cj9*r00);
IkReal x7846=((1.0)*cj4*x7835);
IkReal x7847=(cj9*r10*sj4);
IkReal x7848=(r02*sj4);
IkReal x7849=(r11*sj9);
IkReal x7850=(cj9*r00*sj4);
IkReal x7851=(cj9*r10);
IkReal x7852=((1.0)*cj4*x7834);
IkReal x7853=(r01*sj4*sj9);
evalcond[0]=(((r22*x7834))+(((-1.0)*x7837*x7838))+((x7835*x7836)));
evalcond[1]=((((-1.0)*r22*x7838))+((x7834*x7836))+(((-1.0)*x7837*x7839)));
evalcond[2]=(((r02*x7840))+(((-1.0)*x7845*x7846))+((x7834*x7841))+((x7835*x7844))+((x7842*x7843))+(((-1.0)*x7838*x7847)));
evalcond[3]=(((x7835*x7848))+((x7840*x7849))+((x7834*x7850))+(((-1.0)*x7839*x7853))+(((-1.0)*r12*x7846))+(((-1.0)*x7851*x7852)));
evalcond[4]=((1.0)+((x7843*x7849))+((x7835*x7850))+(((-1.0)*x7846*x7851))+((r12*x7840))+(((-1.0)*x7838*x7853))+(((-1.0)*x7839*x7848)));
evalcond[5]=((1.0)+(((-1.0)*x7838*x7841))+(((-1.0)*x7839*x7847))+((x7840*x7842))+((x7834*x7844))+(((-1.0)*x7845*x7852))+(((-1.0)*r02*x7846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7854=((1.0)*sj9);
IkReal x7855=((1.0)*cj9);
CheckValue<IkReal> x7856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x7854))+(((-1.0)*cj4*r01*x7855))+(((-1.0)*cj4*r00*x7854))+(((-1.0)*r11*sj4*x7855)))),-1);
if(!x7856.valid){
continue;
}
CheckValue<IkReal> x7857 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x7854))),IKFAST_ATAN2_MAGTHRESH);
if(!x7857.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7856.value)))+(x7857.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7858=IKcos(j8);
IkReal x7859=IKsin(j8);
IkReal x7860=(r21*sj9);
IkReal x7861=(cj9*r20);
IkReal x7862=((1.0)*x7859);
IkReal x7863=((1.0)*x7858);
IkReal x7864=(cj4*x7858);
IkReal x7865=(r12*sj4);
IkReal x7866=(r01*sj9);
IkReal x7867=(cj4*x7859);
IkReal x7868=(r11*sj4*sj9);
IkReal x7869=(cj9*r00);
IkReal x7870=((1.0)*cj4*x7859);
IkReal x7871=(cj9*r10*sj4);
IkReal x7872=(r02*sj4);
IkReal x7873=(r11*sj9);
IkReal x7874=(cj9*r00*sj4);
IkReal x7875=(cj9*r10);
IkReal x7876=((1.0)*cj4*x7858);
IkReal x7877=(r01*sj4*sj9);
evalcond[0]=(((x7859*x7860))+(((-1.0)*x7861*x7862))+((r22*x7858)));
evalcond[1]=(((x7858*x7860))+(((-1.0)*x7861*x7863))+(((-1.0)*r22*x7862)));
evalcond[2]=((((-1.0)*x7862*x7871))+((x7859*x7868))+((x7858*x7865))+((x7866*x7867))+(((-1.0)*x7869*x7870))+((r02*x7864)));
evalcond[3]=(((x7859*x7872))+(((-1.0)*r12*x7870))+(((-1.0)*x7863*x7877))+(((-1.0)*x7875*x7876))+((x7864*x7873))+((x7858*x7874)));
evalcond[4]=((1.0)+(((-1.0)*x7862*x7877))+(((-1.0)*x7863*x7872))+(((-1.0)*x7870*x7875))+((x7859*x7874))+((r12*x7864))+((x7867*x7873)));
evalcond[5]=((1.0)+(((-1.0)*r02*x7870))+((x7858*x7868))+(((-1.0)*x7862*x7865))+(((-1.0)*x7863*x7871))+(((-1.0)*x7869*x7876))+((x7864*x7866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7878=(cj9*r21);
IkReal x7879=(r20*sj9);
IkReal x7880=((1.0)*cj4);
IkReal x7881=(cj9*r01);
IkReal x7882=(r00*sj9);
IkReal x7883=((1.0)*sj4);
IkReal x7884=(cj9*r11);
IkReal x7885=(r10*sj9);
IkReal x7886=(sj4*x7881);
IkReal x7887=(sj4*x7882);
IkReal x7888=((0.03431)*cj4);
IkReal x7889=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x7878))+(((-1.0)*x7879)));
evalcond[2]=((((-1.0)*x7880*x7882))+(((-1.0)*x7883*x7884))+(((-1.0)*x7880*x7881))+(((-1.0)*x7883*x7885)));
evalcond[3]=((0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x7879))+(((0.03431)*x7878)));
evalcond[4]=(x7887+x7886+(((-1.0)*x7880*x7884))+(((-1.0)*x7880*x7885)));
evalcond[5]=((0.00301)+((x7885*x7889))+((x7881*x7888))+((x7882*x7888))+((x7884*x7889))+(((-1.0)*py*x7883))+(((-1.0)*px*x7880)));
evalcond[6]=(((px*sj4))+((x7885*x7888))+(((-0.03431)*x7886))+(((-0.03431)*x7887))+((x7884*x7888))+(((-1.0)*py*x7880)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x7890=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x7890;
j8eval[1]=IKsign(x7890);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x7891=((1.0)*cj9);
IkReal x7892=((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x7891))+((r00*sj4*sj9)));
j8eval[0]=x7892;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x7891)))))+(IKabs(r22)));
j8eval[2]=IKsign(x7892);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x7893=((1.0)*r21);
IkReal x7894=(cj4*r01);
IkReal x7895=((1.0)*r22);
IkReal x7896=(r11*sj4);
IkReal x7897=(cj4*r00);
IkReal x7898=(cj9*r21*sj9);
IkReal x7899=(cj9*r20*sj9);
IkReal x7900=(r10*sj4);
IkReal x7901=cj9*cj9;
IkReal x7902=(r21*x7901);
IkReal x7903=((1.0)*r20*x7901);
IkReal x7904=(((x7898*x7900))+(((-1.0)*x7900*x7903))+(((-1.0)*r12*sj4*x7895))+((x7897*x7898))+((x7896*x7902))+((x7894*x7902))+((x7894*x7899))+(((-1.0)*x7897*x7903))+(((-1.0)*x7893*x7896))+(((-1.0)*x7893*x7894))+((x7896*x7899))+(((-1.0)*cj4*r02*x7895)));
j8eval[0]=x7904;
j8eval[1]=((IKabs(((((-1.0)*sj9*x7893))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x7904);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7905=((1.0)*r21);
IkReal x7906=(cj4*r01);
IkReal x7907=((1.0)*r22);
IkReal x7908=(r11*sj4);
IkReal x7909=(cj4*r00);
IkReal x7910=(cj9*r21*sj9);
IkReal x7911=(cj9*r20*sj9);
IkReal x7912=(r10*sj4);
IkReal x7913=cj9*cj9;
IkReal x7914=(r21*x7913);
IkReal x7915=((1.0)*r20*x7913);
CheckValue<IkReal> x7916=IKPowWithIntegerCheck(IKsign((((x7908*x7914))+((x7906*x7914))+(((-1.0)*x7905*x7906))+(((-1.0)*cj4*r02*x7907))+(((-1.0)*x7905*x7908))+(((-1.0)*x7912*x7915))+((x7908*x7911))+((x7909*x7910))+((x7906*x7911))+(((-1.0)*x7909*x7915))+(((-1.0)*r12*sj4*x7907))+((x7910*x7912)))),-1);
if(!x7916.valid){
continue;
}
CheckValue<IkReal> x7917 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x7905))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x7917.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7916.value)))+(x7917.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7918=IKcos(j8);
IkReal x7919=IKsin(j8);
IkReal x7920=(r21*sj9);
IkReal x7921=(cj9*r20);
IkReal x7922=((1.0)*x7919);
IkReal x7923=((1.0)*x7918);
IkReal x7924=(cj4*x7918);
IkReal x7925=(r12*sj4);
IkReal x7926=(r01*sj9);
IkReal x7927=(cj4*x7919);
IkReal x7928=(r11*sj4*sj9);
IkReal x7929=(cj9*r00);
IkReal x7930=((1.0)*cj4*x7919);
IkReal x7931=(cj9*r10*sj4);
IkReal x7932=(r02*sj4);
IkReal x7933=(r11*sj9);
IkReal x7934=(cj9*r00*sj4);
IkReal x7935=(cj9*r10);
IkReal x7936=((1.0)*cj4*x7918);
IkReal x7937=(r01*sj4*sj9);
evalcond[0]=(((r22*x7918))+((x7919*x7920))+(((-1.0)*x7921*x7922)));
evalcond[1]=((((-1.0)*x7921*x7923))+(((-1.0)*r22*x7922))+((x7918*x7920)));
evalcond[2]=((((-1.0)*x7922*x7931))+((x7919*x7928))+((x7918*x7925))+((x7926*x7927))+(((-1.0)*x7929*x7930))+((r02*x7924)));
evalcond[3]=((((-1.0)*x7935*x7936))+((x7918*x7934))+((x7919*x7932))+(((-1.0)*x7923*x7937))+((x7924*x7933))+(((-1.0)*r12*x7930)));
evalcond[4]=((-1.0)+((x7919*x7934))+((r12*x7924))+(((-1.0)*x7930*x7935))+(((-1.0)*x7922*x7937))+(((-1.0)*x7923*x7932))+((x7927*x7933)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x7930))+((x7918*x7928))+(((-1.0)*x7923*x7931))+(((-1.0)*x7922*x7925))+((x7924*x7926))+(((-1.0)*x7929*x7936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7938=((1.0)*cj9);
CheckValue<IkReal> x7939=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r11*x7938))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x7939.valid){
continue;
}
CheckValue<IkReal> x7940 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x7938)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x7940.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7939.value)))+(x7940.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7941=IKcos(j8);
IkReal x7942=IKsin(j8);
IkReal x7943=(r21*sj9);
IkReal x7944=(cj9*r20);
IkReal x7945=((1.0)*x7942);
IkReal x7946=((1.0)*x7941);
IkReal x7947=(cj4*x7941);
IkReal x7948=(r12*sj4);
IkReal x7949=(r01*sj9);
IkReal x7950=(cj4*x7942);
IkReal x7951=(r11*sj4*sj9);
IkReal x7952=(cj9*r00);
IkReal x7953=((1.0)*cj4*x7942);
IkReal x7954=(cj9*r10*sj4);
IkReal x7955=(r02*sj4);
IkReal x7956=(r11*sj9);
IkReal x7957=(cj9*r00*sj4);
IkReal x7958=(cj9*r10);
IkReal x7959=((1.0)*cj4*x7941);
IkReal x7960=(r01*sj4*sj9);
evalcond[0]=(((r22*x7941))+(((-1.0)*x7944*x7945))+((x7942*x7943)));
evalcond[1]=((((-1.0)*x7944*x7946))+(((-1.0)*r22*x7945))+((x7941*x7943)));
evalcond[2]=((((-1.0)*x7945*x7954))+((x7941*x7948))+((r02*x7947))+(((-1.0)*x7952*x7953))+((x7942*x7951))+((x7949*x7950)));
evalcond[3]=((((-1.0)*r12*x7953))+((x7947*x7956))+((x7941*x7957))+(((-1.0)*x7946*x7960))+(((-1.0)*x7958*x7959))+((x7942*x7955)));
evalcond[4]=((-1.0)+(((-1.0)*x7953*x7958))+(((-1.0)*x7945*x7960))+((x7942*x7957))+((r12*x7947))+(((-1.0)*x7946*x7955))+((x7950*x7956)));
evalcond[5]=((-1.0)+(((-1.0)*x7952*x7959))+(((-1.0)*x7946*x7954))+(((-1.0)*x7945*x7948))+((x7941*x7951))+((x7947*x7949))+(((-1.0)*r02*x7953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7961=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x7961.valid){
continue;
}
CheckValue<IkReal> x7962 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x7962.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7961.value)))+(x7962.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7963=IKcos(j8);
IkReal x7964=IKsin(j8);
IkReal x7965=(r21*sj9);
IkReal x7966=(cj9*r20);
IkReal x7967=((1.0)*x7964);
IkReal x7968=((1.0)*x7963);
IkReal x7969=(cj4*x7963);
IkReal x7970=(r12*sj4);
IkReal x7971=(r01*sj9);
IkReal x7972=(cj4*x7964);
IkReal x7973=(r11*sj4*sj9);
IkReal x7974=(cj9*r00);
IkReal x7975=((1.0)*cj4*x7964);
IkReal x7976=(cj9*r10*sj4);
IkReal x7977=(r02*sj4);
IkReal x7978=(r11*sj9);
IkReal x7979=(cj9*r00*sj4);
IkReal x7980=(cj9*r10);
IkReal x7981=((1.0)*cj4*x7963);
IkReal x7982=(r01*sj4*sj9);
evalcond[0]=(((r22*x7963))+((x7964*x7965))+(((-1.0)*x7966*x7967)));
evalcond[1]=(((x7963*x7965))+(((-1.0)*x7966*x7968))+(((-1.0)*r22*x7967)));
evalcond[2]=(((x7964*x7973))+((r02*x7969))+((x7963*x7970))+((x7971*x7972))+(((-1.0)*x7967*x7976))+(((-1.0)*x7974*x7975)));
evalcond[3]=((((-1.0)*x7980*x7981))+(((-1.0)*x7968*x7982))+(((-1.0)*r12*x7975))+((x7963*x7979))+((x7964*x7977))+((x7969*x7978)));
evalcond[4]=((-1.0)+(((-1.0)*x7968*x7977))+((x7964*x7979))+(((-1.0)*x7967*x7982))+((x7972*x7978))+((r12*x7969))+(((-1.0)*x7975*x7980)));
evalcond[5]=((-1.0)+(((-1.0)*x7974*x7981))+(((-1.0)*x7967*x7970))+((x7963*x7973))+(((-1.0)*x7968*x7976))+((x7969*x7971))+(((-1.0)*r02*x7975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7983=(cj9*r21);
IkReal x7984=(r20*sj9);
IkReal x7985=((1.0)*cj4);
IkReal x7986=(cj9*r01);
IkReal x7987=(r00*sj9);
IkReal x7988=((1.0)*sj4);
IkReal x7989=(cj9*r11);
IkReal x7990=(r10*sj9);
IkReal x7991=(sj4*x7986);
IkReal x7992=(sj4*x7987);
IkReal x7993=((0.03431)*cj4);
IkReal x7994=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x7983))+(((-1.0)*x7984)));
evalcond[2]=((((-1.0)*x7988*x7990))+(((-1.0)*x7985*x7987))+(((-1.0)*x7985*x7986))+(((-1.0)*x7988*x7989)));
evalcond[3]=((0.4967)+(((0.03431)*x7984))+(((-1.0)*(1.0)*pz))+(((0.03431)*x7983)));
evalcond[4]=((((-1.0)*x7985*x7989))+(((-1.0)*x7985*x7990))+x7991+x7992);
evalcond[5]=((0.00337)+((x7986*x7993))+(((-1.0)*py*x7988))+((x7987*x7993))+((x7989*x7994))+((x7990*x7994))+(((-1.0)*px*x7985)));
evalcond[6]=((0.00036)+((px*sj4))+((x7989*x7993))+((x7990*x7993))+(((-0.03431)*x7992))+(((-1.0)*py*x7985))+(((-0.03431)*x7991)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x7995=((1.0)*sj9);
IkReal x7996=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x7995))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x7996;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*r21*x7995)))))+(IKabs(r22)));
j8eval[2]=IKsign(x7996);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x7997=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x7997;
j8eval[1]=IKsign(x7997);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x7998=(cj4*r11);
IkReal x7999=((1.0)*r21);
IkReal x8000=(r01*sj4);
IkReal x8001=(cj9*r20*sj9);
IkReal x8002=(cj4*r10);
IkReal x8003=cj9*cj9;
IkReal x8004=(r20*x8003);
IkReal x8005=(((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*cj9*r21*sj9*x8002))+(((-1.0)*x7999*x8000))+(((-1.0)*r02*r22*sj4))+(((-1.0)*r00*sj4*x8004))+(((-1.0)*cj4*r11*x8001))+((r21*x7998))+((r21*x8000*x8003))+((x8002*x8004))+(((-1.0)*r21*x7998*x8003))+((x8000*x8001)));
j8eval[0]=x8005;
j8eval[1]=IKsign(x8005);
j8eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*sj9*x7999))+((cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8006=((1.0)*r21);
IkReal x8007=(cj4*r11);
IkReal x8008=(r01*sj4);
IkReal x8009=(cj9*r20*sj9);
IkReal x8010=(cj4*r10);
IkReal x8011=cj9*cj9;
IkReal x8012=(r20*x8011);
CheckValue<IkReal> x8013=IKPowWithIntegerCheck(IKsign((((x8010*x8012))+((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*x8006*x8008))+(((-1.0)*r02*r22*sj4))+(((-1.0)*r21*x8007*x8011))+(((-1.0)*cj9*r21*sj9*x8010))+((r21*x8008*x8011))+((r21*x8007))+(((-1.0)*cj4*r11*x8009))+((x8008*x8009))+(((-1.0)*r00*sj4*x8012)))),-1);
if(!x8013.valid){
continue;
}
CheckValue<IkReal> x8014 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*sj9*x8006))),IKFAST_ATAN2_MAGTHRESH);
if(!x8014.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8013.value)))+(x8014.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8015=IKcos(j8);
IkReal x8016=IKsin(j8);
IkReal x8017=(r21*sj9);
IkReal x8018=(cj9*r20);
IkReal x8019=((1.0)*x8016);
IkReal x8020=((1.0)*x8015);
IkReal x8021=(cj4*x8015);
IkReal x8022=(r12*sj4);
IkReal x8023=(r01*sj9);
IkReal x8024=(cj4*x8016);
IkReal x8025=(r11*sj4*sj9);
IkReal x8026=(cj9*r00);
IkReal x8027=((1.0)*cj4*x8016);
IkReal x8028=(cj9*r10*sj4);
IkReal x8029=(r02*sj4);
IkReal x8030=(r11*sj9);
IkReal x8031=(cj9*r00*sj4);
IkReal x8032=(cj9*r10);
IkReal x8033=(r01*sj4*sj9);
IkReal x8034=((1.0)*cj4*x8015);
evalcond[0]=(((x8016*x8017))+(((-1.0)*x8018*x8019))+((r22*x8015)));
evalcond[1]=(((x8015*x8017))+(((-1.0)*x8018*x8020))+(((-1.0)*r22*x8019)));
evalcond[2]=((-1.0)+((x8015*x8022))+((r02*x8021))+(((-1.0)*x8019*x8028))+(((-1.0)*x8026*x8027))+((x8016*x8025))+((x8023*x8024)));
evalcond[3]=((((-1.0)*x8019*x8033))+(((-1.0)*x8020*x8029))+(((-1.0)*x8027*x8032))+((r12*x8021))+((x8024*x8030))+((x8016*x8031)));
evalcond[4]=((((-1.0)*r02*x8027))+(((-1.0)*x8020*x8028))+((x8015*x8025))+((x8021*x8023))+(((-1.0)*x8026*x8034))+(((-1.0)*x8019*x8022)));
evalcond[5]=((1.0)+((x8016*x8029))+(((-1.0)*r12*x8027))+(((-1.0)*x8020*x8033))+((x8021*x8030))+(((-1.0)*x8032*x8034))+((x8015*x8031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8035 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x8035.valid){
continue;
}
CheckValue<IkReal> x8036=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x8036.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8035.value)+(((1.5707963267949)*(x8036.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8037=IKcos(j8);
IkReal x8038=IKsin(j8);
IkReal x8039=(r21*sj9);
IkReal x8040=(cj9*r20);
IkReal x8041=((1.0)*x8038);
IkReal x8042=((1.0)*x8037);
IkReal x8043=(cj4*x8037);
IkReal x8044=(r12*sj4);
IkReal x8045=(r01*sj9);
IkReal x8046=(cj4*x8038);
IkReal x8047=(r11*sj4*sj9);
IkReal x8048=(cj9*r00);
IkReal x8049=((1.0)*cj4*x8038);
IkReal x8050=(cj9*r10*sj4);
IkReal x8051=(r02*sj4);
IkReal x8052=(r11*sj9);
IkReal x8053=(cj9*r00*sj4);
IkReal x8054=(cj9*r10);
IkReal x8055=(r01*sj4*sj9);
IkReal x8056=((1.0)*cj4*x8037);
evalcond[0]=(((r22*x8037))+(((-1.0)*x8040*x8041))+((x8038*x8039)));
evalcond[1]=((((-1.0)*r22*x8041))+(((-1.0)*x8040*x8042))+((x8037*x8039)));
evalcond[2]=((-1.0)+((x8037*x8044))+(((-1.0)*x8048*x8049))+(((-1.0)*x8041*x8050))+((r02*x8043))+((x8045*x8046))+((x8038*x8047)));
evalcond[3]=(((x8038*x8053))+(((-1.0)*x8041*x8055))+(((-1.0)*x8042*x8051))+(((-1.0)*x8049*x8054))+((x8046*x8052))+((r12*x8043)));
evalcond[4]=(((x8043*x8045))+(((-1.0)*r02*x8049))+(((-1.0)*x8042*x8050))+(((-1.0)*x8048*x8056))+(((-1.0)*x8041*x8044))+((x8037*x8047)));
evalcond[5]=((1.0)+(((-1.0)*x8042*x8055))+((x8037*x8053))+((x8038*x8051))+(((-1.0)*x8054*x8056))+(((-1.0)*r12*x8049))+((x8043*x8052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8057=((1.0)*sj9);
CheckValue<IkReal> x8058 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x8057))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8058.valid){
continue;
}
CheckValue<IkReal> x8059=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x8057))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x8059.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8058.value)+(((1.5707963267949)*(x8059.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8060=IKcos(j8);
IkReal x8061=IKsin(j8);
IkReal x8062=(r21*sj9);
IkReal x8063=(cj9*r20);
IkReal x8064=((1.0)*x8061);
IkReal x8065=((1.0)*x8060);
IkReal x8066=(cj4*x8060);
IkReal x8067=(r12*sj4);
IkReal x8068=(r01*sj9);
IkReal x8069=(cj4*x8061);
IkReal x8070=(r11*sj4*sj9);
IkReal x8071=(cj9*r00);
IkReal x8072=((1.0)*cj4*x8061);
IkReal x8073=(cj9*r10*sj4);
IkReal x8074=(r02*sj4);
IkReal x8075=(r11*sj9);
IkReal x8076=(cj9*r00*sj4);
IkReal x8077=(cj9*r10);
IkReal x8078=(r01*sj4*sj9);
IkReal x8079=((1.0)*cj4*x8060);
evalcond[0]=(((r22*x8060))+((x8061*x8062))+(((-1.0)*x8063*x8064)));
evalcond[1]=((((-1.0)*x8063*x8065))+(((-1.0)*r22*x8064))+((x8060*x8062)));
evalcond[2]=((-1.0)+(((-1.0)*x8071*x8072))+((x8061*x8070))+((r02*x8066))+((x8060*x8067))+((x8068*x8069))+(((-1.0)*x8064*x8073)));
evalcond[3]=((((-1.0)*x8064*x8078))+((x8069*x8075))+(((-1.0)*x8072*x8077))+((r12*x8066))+(((-1.0)*x8065*x8074))+((x8061*x8076)));
evalcond[4]=(((x8060*x8070))+(((-1.0)*x8071*x8079))+((x8066*x8068))+(((-1.0)*r02*x8072))+(((-1.0)*x8064*x8067))+(((-1.0)*x8065*x8073)));
evalcond[5]=((1.0)+(((-1.0)*x8065*x8078))+((x8061*x8074))+((x8060*x8076))+((x8066*x8075))+(((-1.0)*x8077*x8079))+(((-1.0)*r12*x8072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8080=(cj9*r21);
IkReal x8081=(r20*sj9);
IkReal x8082=((1.0)*cj4);
IkReal x8083=(cj9*r01);
IkReal x8084=(r00*sj9);
IkReal x8085=((1.0)*sj4);
IkReal x8086=(cj9*r11);
IkReal x8087=(r10*sj9);
IkReal x8088=(sj4*x8083);
IkReal x8089=(sj4*x8084);
IkReal x8090=((0.03431)*cj4);
IkReal x8091=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x8080))+(((-1.0)*x8081)));
evalcond[2]=((((-1.0)*x8085*x8087))+(((-1.0)*x8085*x8086))+(((-1.0)*x8082*x8083))+(((-1.0)*x8082*x8084)));
evalcond[3]=((0.4967)+(((0.03431)*x8081))+(((-1.0)*(1.0)*pz))+(((0.03431)*x8080)));
evalcond[4]=(x8088+x8089+(((-1.0)*x8082*x8086))+(((-1.0)*x8082*x8087)));
evalcond[5]=((0.00337)+(((-1.0)*px*x8082))+((x8084*x8090))+((x8086*x8091))+((x8087*x8091))+(((-1.0)*py*x8085))+((x8083*x8090)));
evalcond[6]=((-0.00036)+((px*sj4))+(((-0.03431)*x8089))+(((-0.03431)*x8088))+((x8086*x8090))+((x8087*x8090))+(((-1.0)*py*x8082)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x8092=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x8092;
j8eval[1]=IKsign(x8092);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x8093=((1.0)*sj9);
IkReal x8094=(((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*x8093)));
j8eval[0]=x8094;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x8093))+((cj9*r20))))));
j8eval[2]=IKsign(x8094);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x8095=(r01*sj4);
IkReal x8096=((1.0)*r21);
IkReal x8097=(cj4*r11);
IkReal x8098=(cj9*r20*sj9);
IkReal x8099=cj9*cj9;
IkReal x8100=(r00*sj4);
IkReal x8101=(r20*x8099);
IkReal x8102=(((r21*x8095))+(((-1.0)*r01*sj4*x8098))+(((-1.0)*cj4*r10*x8101))+((r02*r22*sj4))+((x8100*x8101))+(((-1.0)*x8096*x8097))+(((-1.0)*r21*x8095*x8099))+(((-1.0)*cj9*r21*sj9*x8100))+((x8097*x8098))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+((r21*x8097*x8099)));
j8eval[0]=x8102;
j8eval[1]=IKsign(x8102);
j8eval[2]=((IKabs(((((-1.0)*sj9*x8096))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8103=((1.0)*r21);
IkReal x8104=(r01*sj4);
IkReal x8105=(cj4*r11);
IkReal x8106=(cj9*r20*sj9);
IkReal x8107=cj9*cj9;
IkReal x8108=(r00*sj4);
IkReal x8109=(r20*x8107);
CheckValue<IkReal> x8110 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x8103))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8110.valid){
continue;
}
CheckValue<IkReal> x8111=IKPowWithIntegerCheck(IKsign((((x8105*x8106))+(((-1.0)*x8103*x8105))+(((-1.0)*r01*sj4*x8106))+((r21*x8105*x8107))+((r02*r22*sj4))+(((-1.0)*cj9*r21*sj9*x8108))+((x8108*x8109))+(((-1.0)*r21*x8104*x8107))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*cj4*r10*x8109))+((r21*x8104)))),-1);
if(!x8111.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8110.value)+(((1.5707963267949)*(x8111.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8112=IKcos(j8);
IkReal x8113=IKsin(j8);
IkReal x8114=(r21*sj9);
IkReal x8115=(cj9*r20);
IkReal x8116=((1.0)*x8113);
IkReal x8117=((1.0)*x8112);
IkReal x8118=(cj4*x8112);
IkReal x8119=(r12*sj4);
IkReal x8120=(r01*sj9);
IkReal x8121=(cj4*x8113);
IkReal x8122=(r11*sj4*sj9);
IkReal x8123=(cj9*r00);
IkReal x8124=((1.0)*cj4*x8113);
IkReal x8125=(cj9*r10*sj4);
IkReal x8126=(r02*sj4);
IkReal x8127=(r11*sj9);
IkReal x8128=(cj9*r00*sj4);
IkReal x8129=(cj9*r10);
IkReal x8130=(r01*sj4*sj9);
IkReal x8131=((1.0)*cj4*x8112);
evalcond[0]=((((-1.0)*x8115*x8116))+((x8113*x8114))+((r22*x8112)));
evalcond[1]=((((-1.0)*r22*x8116))+(((-1.0)*x8115*x8117))+((x8112*x8114)));
evalcond[2]=((1.0)+((x8113*x8122))+((x8112*x8119))+(((-1.0)*x8123*x8124))+(((-1.0)*x8116*x8125))+((r02*x8118))+((x8120*x8121)));
evalcond[3]=((((-1.0)*x8124*x8129))+(((-1.0)*x8116*x8130))+(((-1.0)*x8117*x8126))+((x8121*x8127))+((x8113*x8128))+((r12*x8118)));
evalcond[4]=((((-1.0)*x8123*x8131))+(((-1.0)*r02*x8124))+(((-1.0)*x8116*x8119))+((x8118*x8120))+(((-1.0)*x8117*x8125))+((x8112*x8122)));
evalcond[5]=((-1.0)+((x8112*x8128))+(((-1.0)*x8117*x8130))+(((-1.0)*x8129*x8131))+((x8113*x8126))+((x8118*x8127))+(((-1.0)*r12*x8124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8132=((1.0)*sj9);
CheckValue<IkReal> x8133 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x8132))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8133.valid){
continue;
}
CheckValue<IkReal> x8134=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*x8132)))),-1);
if(!x8134.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8133.value)+(((1.5707963267949)*(x8134.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8135=IKcos(j8);
IkReal x8136=IKsin(j8);
IkReal x8137=(r21*sj9);
IkReal x8138=(cj9*r20);
IkReal x8139=((1.0)*x8136);
IkReal x8140=((1.0)*x8135);
IkReal x8141=(cj4*x8135);
IkReal x8142=(r12*sj4);
IkReal x8143=(r01*sj9);
IkReal x8144=(cj4*x8136);
IkReal x8145=(r11*sj4*sj9);
IkReal x8146=(cj9*r00);
IkReal x8147=((1.0)*cj4*x8136);
IkReal x8148=(cj9*r10*sj4);
IkReal x8149=(r02*sj4);
IkReal x8150=(r11*sj9);
IkReal x8151=(cj9*r00*sj4);
IkReal x8152=(cj9*r10);
IkReal x8153=(r01*sj4*sj9);
IkReal x8154=((1.0)*cj4*x8135);
evalcond[0]=(((r22*x8135))+((x8136*x8137))+(((-1.0)*x8138*x8139)));
evalcond[1]=((((-1.0)*x8138*x8140))+(((-1.0)*r22*x8139))+((x8135*x8137)));
evalcond[2]=((1.0)+((r02*x8141))+(((-1.0)*x8146*x8147))+(((-1.0)*x8139*x8148))+((x8136*x8145))+((x8143*x8144))+((x8135*x8142)));
evalcond[3]=((((-1.0)*x8139*x8153))+(((-1.0)*x8140*x8149))+((r12*x8141))+((x8144*x8150))+(((-1.0)*x8147*x8152))+((x8136*x8151)));
evalcond[4]=((((-1.0)*r02*x8147))+((x8135*x8145))+(((-1.0)*x8146*x8154))+(((-1.0)*x8140*x8148))+(((-1.0)*x8139*x8142))+((x8141*x8143)));
evalcond[5]=((-1.0)+((x8135*x8151))+((x8136*x8149))+(((-1.0)*x8152*x8154))+(((-1.0)*x8140*x8153))+((x8141*x8150))+(((-1.0)*r12*x8147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8155 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x8155.valid){
continue;
}
CheckValue<IkReal> x8156=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x8156.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8155.value)+(((1.5707963267949)*(x8156.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8157=IKcos(j8);
IkReal x8158=IKsin(j8);
IkReal x8159=(r21*sj9);
IkReal x8160=(cj9*r20);
IkReal x8161=((1.0)*x8158);
IkReal x8162=((1.0)*x8157);
IkReal x8163=(cj4*x8157);
IkReal x8164=(r12*sj4);
IkReal x8165=(r01*sj9);
IkReal x8166=(cj4*x8158);
IkReal x8167=(r11*sj4*sj9);
IkReal x8168=(cj9*r00);
IkReal x8169=((1.0)*cj4*x8158);
IkReal x8170=(cj9*r10*sj4);
IkReal x8171=(r02*sj4);
IkReal x8172=(r11*sj9);
IkReal x8173=(cj9*r00*sj4);
IkReal x8174=(cj9*r10);
IkReal x8175=(r01*sj4*sj9);
IkReal x8176=((1.0)*cj4*x8157);
evalcond[0]=(((r22*x8157))+((x8158*x8159))+(((-1.0)*x8160*x8161)));
evalcond[1]=(((x8157*x8159))+(((-1.0)*r22*x8161))+(((-1.0)*x8160*x8162)));
evalcond[2]=((1.0)+((r02*x8163))+((x8165*x8166))+((x8157*x8164))+((x8158*x8167))+(((-1.0)*x8168*x8169))+(((-1.0)*x8161*x8170)));
evalcond[3]=(((x8158*x8173))+(((-1.0)*x8161*x8175))+((r12*x8163))+(((-1.0)*x8169*x8174))+(((-1.0)*x8162*x8171))+((x8166*x8172)));
evalcond[4]=((((-1.0)*x8162*x8170))+((x8163*x8165))+((x8157*x8167))+(((-1.0)*x8168*x8176))+(((-1.0)*r02*x8169))+(((-1.0)*x8161*x8164)));
evalcond[5]=((-1.0)+((x8157*x8173))+(((-1.0)*r12*x8169))+((x8163*x8172))+((x8158*x8171))+(((-1.0)*x8174*x8176))+(((-1.0)*x8162*x8175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8177=(r21*sj9);
IkReal x8178=(cj4*r21);
IkReal x8179=(r11*x8178);
IkReal x8180=((1.0)*sj4);
IkReal x8181=(r01*r21);
IkReal x8182=(cj9*r20*sj9);
IkReal x8183=cj9*cj9;
IkReal x8184=(r20*x8183);
CheckValue<IkReal> x8185=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8179*x8183))+((cj4*r12*r22))+((cj9*r00*sj4*x8177))+(((-1.0)*cj9*r10*sj9*x8178))+((sj4*x8181*x8183))+(((-1.0)*cj4*r11*x8182))+(((-1.0)*x8180*x8181))+((cj4*r10*x8184))+(((-1.0)*r02*r22*x8180))+((r01*sj4*x8182))+(((-1.0)*r00*sj4*x8184))+x8179)),-1);
if(!x8185.valid){
continue;
}
CheckValue<IkReal> x8186 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*sj6*x8177))+((sj6*((cj9*r20))))),IKFAST_ATAN2_MAGTHRESH);
if(!x8186.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8185.value)))+(x8186.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8187=IKcos(j8);
IkReal x8188=IKsin(j8);
IkReal x8189=(r21*sj9);
IkReal x8190=(cj9*r20);
IkReal x8191=((1.0)*x8188);
IkReal x8192=((1.0)*x8187);
IkReal x8193=(cj4*x8187);
IkReal x8194=(r02*sj4);
IkReal x8195=(r11*sj9);
IkReal x8196=(cj4*x8188);
IkReal x8197=(cj9*r00*sj4);
IkReal x8198=(cj9*r10);
IkReal x8199=((1.0)*cj4*x8188);
IkReal x8200=(r01*sj4*sj9);
IkReal x8201=((1.0)*cj4*x8187);
IkReal x8202=(r12*sj4);
IkReal x8203=(r01*sj9);
IkReal x8204=(r11*sj4*sj9);
IkReal x8205=(cj9*r00);
IkReal x8206=(cj9*r10*sj4);
evalcond[0]=(((r22*x8187))+((x8188*x8189))+(((-1.0)*x8190*x8191)));
evalcond[1]=(((x8187*x8189))+(((-1.0)*x8190*x8192))+(((-1.0)*r22*x8191)));
evalcond[2]=(((x8188*x8197))+(((-1.0)*x8198*x8199))+((x8195*x8196))+cj6+((r12*x8193))+(((-1.0)*x8191*x8200))+(((-1.0)*x8192*x8194)));
evalcond[3]=(((x8188*x8194))+((x8187*x8197))+sj6+(((-1.0)*r12*x8199))+((x8193*x8195))+(((-1.0)*x8192*x8200))+(((-1.0)*x8198*x8201)));
evalcond[4]=((((-1.0)*x8191*x8206))+((x8196*x8203))+((r02*x8193))+((x8187*x8202))+(((-1.0)*x8199*x8205))+((x8188*x8204))+(((-1.0)*(1.0)*sj6)));
evalcond[5]=((((-1.0)*x8191*x8202))+((x8193*x8203))+(((-1.0)*r02*x8199))+(((-1.0)*x8192*x8206))+(((-1.0)*x8201*x8205))+cj6+((x8187*x8204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8207=((1.0)*sj9);
IkReal x8208=((1.0)*cj4);
CheckValue<IkReal> x8209=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*r01*x8208))+(((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*r00*sj9*x8208))+(((-1.0)*r10*sj4*x8207)))),-1);
if(!x8209.valid){
continue;
}
CheckValue<IkReal> x8210 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*cj6*r21*x8207))),IKFAST_ATAN2_MAGTHRESH);
if(!x8210.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8209.value)))+(x8210.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8211=IKcos(j8);
IkReal x8212=IKsin(j8);
IkReal x8213=(r21*sj9);
IkReal x8214=(cj9*r20);
IkReal x8215=((1.0)*x8212);
IkReal x8216=((1.0)*x8211);
IkReal x8217=(cj4*x8211);
IkReal x8218=(r02*sj4);
IkReal x8219=(r11*sj9);
IkReal x8220=(cj4*x8212);
IkReal x8221=(cj9*r00*sj4);
IkReal x8222=(cj9*r10);
IkReal x8223=((1.0)*cj4*x8212);
IkReal x8224=(r01*sj4*sj9);
IkReal x8225=((1.0)*cj4*x8211);
IkReal x8226=(r12*sj4);
IkReal x8227=(r01*sj9);
IkReal x8228=(r11*sj4*sj9);
IkReal x8229=(cj9*r00);
IkReal x8230=(cj9*r10*sj4);
evalcond[0]=(((x8212*x8213))+((r22*x8211))+(((-1.0)*x8214*x8215)));
evalcond[1]=((((-1.0)*x8214*x8216))+((x8211*x8213))+(((-1.0)*r22*x8215)));
evalcond[2]=((((-1.0)*x8215*x8224))+cj6+(((-1.0)*x8222*x8223))+(((-1.0)*x8216*x8218))+((r12*x8217))+((x8212*x8221))+((x8219*x8220)));
evalcond[3]=((((-1.0)*x8216*x8224))+sj6+((x8211*x8221))+(((-1.0)*r12*x8223))+((x8217*x8219))+((x8212*x8218))+(((-1.0)*x8222*x8225)));
evalcond[4]=(((x8220*x8227))+(((-1.0)*x8215*x8230))+((x8212*x8228))+(((-1.0)*x8223*x8229))+((x8211*x8226))+((r02*x8217))+(((-1.0)*(1.0)*sj6)));
evalcond[5]=((((-1.0)*r02*x8223))+((x8211*x8228))+(((-1.0)*x8216*x8230))+cj6+((x8217*x8227))+(((-1.0)*x8215*x8226))+(((-1.0)*x8225*x8229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8231=((1.0)*cj4);
CheckValue<IkReal> x8232 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x8232.valid){
continue;
}
CheckValue<IkReal> x8233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9*x8231))+(((-1.0)*cj9*r11*x8231))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x8233.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8232.value)+(((1.5707963267949)*(x8233.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8234=IKcos(j8);
IkReal x8235=IKsin(j8);
IkReal x8236=(r21*sj9);
IkReal x8237=(cj9*r20);
IkReal x8238=((1.0)*x8235);
IkReal x8239=((1.0)*x8234);
IkReal x8240=(cj4*x8234);
IkReal x8241=(r02*sj4);
IkReal x8242=(r11*sj9);
IkReal x8243=(cj4*x8235);
IkReal x8244=(cj9*r00*sj4);
IkReal x8245=(cj9*r10);
IkReal x8246=((1.0)*cj4*x8235);
IkReal x8247=(r01*sj4*sj9);
IkReal x8248=((1.0)*cj4*x8234);
IkReal x8249=(r12*sj4);
IkReal x8250=(r01*sj9);
IkReal x8251=(r11*sj4*sj9);
IkReal x8252=(cj9*r00);
IkReal x8253=(cj9*r10*sj4);
evalcond[0]=((((-1.0)*x8237*x8238))+((r22*x8234))+((x8235*x8236)));
evalcond[1]=(((x8234*x8236))+(((-1.0)*r22*x8238))+(((-1.0)*x8237*x8239)));
evalcond[2]=(((r12*x8240))+((x8235*x8244))+cj6+(((-1.0)*x8245*x8246))+(((-1.0)*x8239*x8241))+((x8242*x8243))+(((-1.0)*x8238*x8247)));
evalcond[3]=(((x8240*x8242))+((x8234*x8244))+(((-1.0)*x8245*x8248))+(((-1.0)*x8239*x8247))+sj6+(((-1.0)*r12*x8246))+((x8235*x8241)));
evalcond[4]=((((-1.0)*x8238*x8253))+((x8235*x8251))+(((-1.0)*x8246*x8252))+((x8234*x8249))+((x8243*x8250))+(((-1.0)*(1.0)*sj6))+((r02*x8240)));
evalcond[5]=(((x8234*x8251))+(((-1.0)*x8238*x8249))+(((-1.0)*x8248*x8252))+((x8240*x8250))+(((-1.0)*x8239*x8253))+cj6+(((-1.0)*r02*x8246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8254=(cj9*r21);
IkReal x8255=(r20*sj9);
IkReal x8256=((1.0)*cj4);
IkReal x8257=(cj9*r01);
IkReal x8258=(r00*sj9);
IkReal x8259=((1.0)*sj4);
IkReal x8260=(cj9*r11);
IkReal x8261=(r10*sj9);
IkReal x8262=(sj4*x8257);
IkReal x8263=(sj4*x8258);
IkReal x8264=((0.03431)*cj4);
IkReal x8265=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*x8255))+(((-1.0)*x8254)));
evalcond[2]=((((-1.0)*x8259*x8261))+(((-1.0)*x8256*x8258))+(((-1.0)*x8259*x8260))+(((-1.0)*x8256*x8257)));
evalcond[3]=((0.16132)+(((0.03431)*x8255))+(((-1.0)*(1.0)*pz))+(((0.03431)*x8254)));
evalcond[4]=(x8263+x8262+(((-1.0)*x8256*x8261))+(((-1.0)*x8256*x8260)));
evalcond[5]=((0.00337)+((x8257*x8264))+(((-1.0)*px*x8256))+(((0.00036)*cj6))+(((-1.0)*py*x8259))+((x8258*x8264))+((x8261*x8265))+((x8260*x8265)));
evalcond[6]=(((px*sj4))+((x8260*x8264))+((x8261*x8264))+(((-0.03431)*x8262))+(((-1.0)*py*x8256))+(((-0.03431)*x8263))+(((0.00036)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x8266=((1.0)*cj4);
IkReal x8267=((((-1.0)*r10*sj9*x8266))+((cj9*r01*sj4))+(((-1.0)*cj9*r11*x8266))+((r00*sj4*sj9)));
j8eval[0]=x8267;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x8267);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x8268=((1.0)*cj4);
IkReal x8269=((1.0)*sj9);
IkReal x8270=((((-1.0)*r10*sj4*x8269))+(((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*cj9*r01*x8268))+(((-1.0)*r00*sj9*x8268)));
j8eval[0]=x8270;
j8eval[1]=IKsign(x8270);
j8eval[2]=((IKabs((((cj6*cj9*r20))+(((-1.0)*cj6*r21*x8269)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x8271=(r21*sj4);
IkReal x8272=(r01*x8271);
IkReal x8273=((1.0)*cj4);
IkReal x8274=(r11*r21);
IkReal x8275=(r21*sj9);
IkReal x8276=(cj9*r20*sj9);
IkReal x8277=cj9*cj9;
IkReal x8278=(r20*x8277);
IkReal x8279=((((-1.0)*cj4*r10*x8278))+(((-1.0)*r12*r22*x8273))+((cj4*r11*x8276))+((r00*sj4*x8278))+(((-1.0)*cj9*r00*sj9*x8271))+((cj4*x8274*x8277))+x8272+((cj4*cj9*r10*x8275))+(((-1.0)*r01*sj4*x8276))+(((-1.0)*x8272*x8277))+((r02*r22*sj4))+(((-1.0)*x8273*x8274)));
j8eval[0]=x8279;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*sj6*x8275))+((sj6*((cj9*r20))))))));
j8eval[2]=IKsign(x8279);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x8280=(cj9*r21);
IkReal x8281=(r20*sj9);
IkReal x8282=((1.0)*cj4);
IkReal x8283=(cj9*r01);
IkReal x8284=(r00*sj9);
IkReal x8285=((1.0)*sj4);
IkReal x8286=(cj9*r11);
IkReal x8287=(r10*sj9);
IkReal x8288=(sj4*x8283);
IkReal x8289=(sj4*x8284);
IkReal x8290=((0.03431)*cj4);
IkReal x8291=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x8281))+(((-1.0)*x8280)));
evalcond[2]=((((-1.0)*x8285*x8286))+(((-1.0)*x8285*x8287))+(((-1.0)*x8282*x8284))+(((-1.0)*x8282*x8283)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x8280))+(((0.03431)*x8281)));
evalcond[4]=(x8289+x8288+(((-1.0)*x8282*x8287))+(((-1.0)*x8282*x8286)));
evalcond[5]=((0.00373)+((x8283*x8290))+((x8284*x8290))+((x8286*x8291))+(((-1.0)*px*x8282))+(((-1.0)*py*x8285))+((x8287*x8291)));
evalcond[6]=(((px*sj4))+((x8286*x8290))+(((-0.03431)*x8289))+(((-1.0)*py*x8282))+(((-0.03431)*x8288))+((x8287*x8290)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x8292=((1.0)*cj9);
IkReal x8293=((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x8292))+((r00*sj4*sj9)));
j8eval[0]=x8293;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x8292)))))+(IKabs(r22)));
j8eval[2]=IKsign(x8293);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x8294=((1.0)*cj9);
IkReal x8295=((1.0)*sj9);
IkReal x8296=((((-1.0)*cj4*r01*x8294))+(((-1.0)*r10*sj4*x8295))+(((-1.0)*cj4*r00*x8295))+(((-1.0)*r11*sj4*x8294)));
j8eval[0]=x8296;
j8eval[1]=((IKabs(((((-1.0)*r21*x8295))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x8296);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x8297=((1.0)*r21);
IkReal x8298=(cj4*r01);
IkReal x8299=((1.0)*r22);
IkReal x8300=(r11*sj4);
IkReal x8301=(cj4*r00);
IkReal x8302=(cj9*r21*sj9);
IkReal x8303=(cj9*r20*sj9);
IkReal x8304=(r10*sj4);
IkReal x8305=cj9*cj9;
IkReal x8306=(r21*x8305);
IkReal x8307=((1.0)*r20*x8305);
IkReal x8308=(((x8298*x8306))+(((-1.0)*x8304*x8307))+((x8298*x8303))+(((-1.0)*cj4*r02*x8299))+((x8300*x8303))+(((-1.0)*x8301*x8307))+((x8300*x8306))+(((-1.0)*r12*sj4*x8299))+((x8302*x8304))+(((-1.0)*x8297*x8298))+(((-1.0)*x8297*x8300))+((x8301*x8302)));
j8eval[0]=x8308;
j8eval[1]=((IKabs(((((-1.0)*sj9*x8297))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x8308);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8309=((1.0)*r21);
IkReal x8310=(cj4*r01);
IkReal x8311=((1.0)*r22);
IkReal x8312=(r11*sj4);
IkReal x8313=(cj4*r00);
IkReal x8314=(cj9*r21*sj9);
IkReal x8315=(cj9*r20*sj9);
IkReal x8316=(r10*sj4);
IkReal x8317=cj9*cj9;
IkReal x8318=(r21*x8317);
IkReal x8319=((1.0)*r20*x8317);
CheckValue<IkReal> x8320 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x8309))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8320.valid){
continue;
}
CheckValue<IkReal> x8321=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02*x8311))+(((-1.0)*r12*sj4*x8311))+((x8312*x8318))+((x8313*x8314))+((x8310*x8318))+(((-1.0)*x8316*x8319))+((x8310*x8315))+(((-1.0)*x8313*x8319))+(((-1.0)*x8309*x8312))+((x8314*x8316))+((x8312*x8315))+(((-1.0)*x8309*x8310)))),-1);
if(!x8321.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8320.value)+(((1.5707963267949)*(x8321.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8322=IKcos(j8);
IkReal x8323=IKsin(j8);
IkReal x8324=(r21*sj9);
IkReal x8325=(cj9*r20);
IkReal x8326=((1.0)*x8323);
IkReal x8327=((1.0)*x8322);
IkReal x8328=(cj4*x8322);
IkReal x8329=(r12*sj4);
IkReal x8330=(r01*sj9);
IkReal x8331=(cj4*x8323);
IkReal x8332=(r11*sj4*sj9);
IkReal x8333=(cj9*r00);
IkReal x8334=((1.0)*cj4*x8323);
IkReal x8335=(cj9*r10*sj4);
IkReal x8336=(r02*sj4);
IkReal x8337=(r11*sj9);
IkReal x8338=(cj9*r00*sj4);
IkReal x8339=(cj9*r10);
IkReal x8340=((1.0)*cj4*x8322);
IkReal x8341=(r01*sj4*sj9);
evalcond[0]=(((r22*x8322))+((x8323*x8324))+(((-1.0)*x8325*x8326)));
evalcond[1]=(((x8322*x8324))+(((-1.0)*x8325*x8327))+(((-1.0)*r22*x8326)));
evalcond[2]=(((r02*x8328))+(((-1.0)*x8333*x8334))+(((-1.0)*x8326*x8335))+((x8322*x8329))+((x8330*x8331))+((x8323*x8332)));
evalcond[3]=((((-1.0)*x8327*x8341))+(((-1.0)*x8339*x8340))+((x8323*x8336))+(((-1.0)*r12*x8334))+((x8322*x8338))+((x8328*x8337)));
evalcond[4]=((1.0)+(((-1.0)*x8326*x8341))+((x8331*x8337))+((x8323*x8338))+((r12*x8328))+(((-1.0)*x8327*x8336))+(((-1.0)*x8334*x8339)));
evalcond[5]=((-1.0)+(((-1.0)*x8327*x8335))+((x8322*x8332))+(((-1.0)*x8326*x8329))+(((-1.0)*x8333*x8340))+((x8328*x8330))+(((-1.0)*r02*x8334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8342=((1.0)*sj9);
IkReal x8343=((1.0)*cj9);
CheckValue<IkReal> x8344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x8343))+(((-1.0)*cj4*r00*x8342))+(((-1.0)*r10*sj4*x8342))+(((-1.0)*cj4*r01*x8343)))),-1);
if(!x8344.valid){
continue;
}
CheckValue<IkReal> x8345 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x8342))),IKFAST_ATAN2_MAGTHRESH);
if(!x8345.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8344.value)))+(x8345.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8346=IKcos(j8);
IkReal x8347=IKsin(j8);
IkReal x8348=(r21*sj9);
IkReal x8349=(cj9*r20);
IkReal x8350=((1.0)*x8347);
IkReal x8351=((1.0)*x8346);
IkReal x8352=(cj4*x8346);
IkReal x8353=(r12*sj4);
IkReal x8354=(r01*sj9);
IkReal x8355=(cj4*x8347);
IkReal x8356=(r11*sj4*sj9);
IkReal x8357=(cj9*r00);
IkReal x8358=((1.0)*cj4*x8347);
IkReal x8359=(cj9*r10*sj4);
IkReal x8360=(r02*sj4);
IkReal x8361=(r11*sj9);
IkReal x8362=(cj9*r00*sj4);
IkReal x8363=(cj9*r10);
IkReal x8364=((1.0)*cj4*x8346);
IkReal x8365=(r01*sj4*sj9);
evalcond[0]=(((x8347*x8348))+(((-1.0)*x8349*x8350))+((r22*x8346)));
evalcond[1]=((((-1.0)*r22*x8350))+(((-1.0)*x8349*x8351))+((x8346*x8348)));
evalcond[2]=((((-1.0)*x8357*x8358))+((x8347*x8356))+((x8354*x8355))+((x8346*x8353))+(((-1.0)*x8350*x8359))+((r02*x8352)));
evalcond[3]=(((x8352*x8361))+(((-1.0)*r12*x8358))+(((-1.0)*x8351*x8365))+((x8347*x8360))+(((-1.0)*x8363*x8364))+((x8346*x8362)));
evalcond[4]=((1.0)+(((-1.0)*x8350*x8365))+(((-1.0)*x8358*x8363))+((r12*x8352))+((x8355*x8361))+((x8347*x8362))+(((-1.0)*x8351*x8360)));
evalcond[5]=((-1.0)+(((-1.0)*x8350*x8353))+((x8346*x8356))+((x8352*x8354))+(((-1.0)*r02*x8358))+(((-1.0)*x8357*x8364))+(((-1.0)*x8351*x8359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8366=((1.0)*cj9);
CheckValue<IkReal> x8367=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj4*r10*sj9))+(((-1.0)*cj4*r11*x8366))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x8367.valid){
continue;
}
CheckValue<IkReal> x8368 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8366))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x8368.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8367.value)))+(x8368.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8369=IKcos(j8);
IkReal x8370=IKsin(j8);
IkReal x8371=(r21*sj9);
IkReal x8372=(cj9*r20);
IkReal x8373=((1.0)*x8370);
IkReal x8374=((1.0)*x8369);
IkReal x8375=(cj4*x8369);
IkReal x8376=(r12*sj4);
IkReal x8377=(r01*sj9);
IkReal x8378=(cj4*x8370);
IkReal x8379=(r11*sj4*sj9);
IkReal x8380=(cj9*r00);
IkReal x8381=((1.0)*cj4*x8370);
IkReal x8382=(cj9*r10*sj4);
IkReal x8383=(r02*sj4);
IkReal x8384=(r11*sj9);
IkReal x8385=(cj9*r00*sj4);
IkReal x8386=(cj9*r10);
IkReal x8387=((1.0)*cj4*x8369);
IkReal x8388=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x8372*x8373))+((x8370*x8371))+((r22*x8369)));
evalcond[1]=((((-1.0)*x8372*x8374))+((x8369*x8371))+(((-1.0)*r22*x8373)));
evalcond[2]=((((-1.0)*x8380*x8381))+((x8370*x8379))+((x8369*x8376))+((x8377*x8378))+(((-1.0)*x8373*x8382))+((r02*x8375)));
evalcond[3]=((((-1.0)*r12*x8381))+(((-1.0)*x8374*x8388))+((x8370*x8383))+(((-1.0)*x8386*x8387))+((x8375*x8384))+((x8369*x8385)));
evalcond[4]=((1.0)+((x8378*x8384))+(((-1.0)*x8381*x8386))+((x8370*x8385))+((r12*x8375))+(((-1.0)*x8373*x8388))+(((-1.0)*x8374*x8383)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x8381))+(((-1.0)*x8373*x8376))+(((-1.0)*x8380*x8387))+(((-1.0)*x8374*x8382))+((x8375*x8377))+((x8369*x8379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8389=(cj9*r21);
IkReal x8390=(r20*sj9);
IkReal x8391=((1.0)*cj4);
IkReal x8392=(cj9*r01);
IkReal x8393=(r00*sj9);
IkReal x8394=((1.0)*sj4);
IkReal x8395=(cj9*r11);
IkReal x8396=(r10*sj9);
IkReal x8397=(sj4*x8392);
IkReal x8398=(sj4*x8393);
IkReal x8399=((0.03431)*cj4);
IkReal x8400=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x8389))+(((-1.0)*x8390)));
evalcond[2]=((((-1.0)*x8394*x8395))+(((-1.0)*x8391*x8393))+(((-1.0)*x8391*x8392))+(((-1.0)*x8394*x8396)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x8389))+(((0.03431)*x8390)));
evalcond[4]=(x8397+x8398+(((-1.0)*x8391*x8395))+(((-1.0)*x8391*x8396)));
evalcond[5]=((0.00301)+((x8393*x8399))+((x8395*x8400))+(((-1.0)*px*x8391))+(((-1.0)*py*x8394))+((x8396*x8400))+((x8392*x8399)));
evalcond[6]=(((x8396*x8399))+((px*sj4))+(((-0.03431)*x8397))+(((-0.03431)*x8398))+((x8395*x8399))+(((-1.0)*py*x8391)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x8401=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x8401;
j8eval[1]=IKsign(x8401);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x8402=((1.0)*sj9);
IkReal x8403=(((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+(((-1.0)*cj4*r10*x8402))+((r00*sj4*sj9)));
j8eval[0]=x8403;
j8eval[1]=IKsign(x8403);
j8eval[2]=((IKabs(((((-1.0)*r21*x8402))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x8404=(cj4*r01);
IkReal x8405=(r21*x8404);
IkReal x8406=(r11*sj4);
IkReal x8407=(r21*x8406);
IkReal x8408=(cj4*r00);
IkReal x8409=cj9*cj9;
IkReal x8410=(r20*x8409);
IkReal x8411=(r10*sj4);
IkReal x8412=((1.0)*cj9*r21*sj9);
IkReal x8413=((1.0)*cj9*r20*sj9);
IkReal x8414=((1.0)*x8409);
IkReal x8415=(x8405+x8407+(((-1.0)*x8411*x8412))+(((-1.0)*x8405*x8414))+(((-1.0)*x8408*x8412))+((x8408*x8410))+((r12*r22*sj4))+(((-1.0)*x8406*x8413))+(((-1.0)*x8404*x8413))+((cj4*r02*r22))+(((-1.0)*x8407*x8414))+((x8410*x8411)));
j8eval[0]=x8415;
j8eval[1]=IKsign(x8415);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8416=(cj4*r01);
IkReal x8417=(r21*x8416);
IkReal x8418=(r11*sj4);
IkReal x8419=(r21*x8418);
IkReal x8420=(cj4*r00);
IkReal x8421=cj9*cj9;
IkReal x8422=(r20*x8421);
IkReal x8423=(r10*sj4);
IkReal x8424=((1.0)*cj9*r21*sj9);
IkReal x8425=((1.0)*cj9*r20*sj9);
IkReal x8426=((1.0)*x8421);
CheckValue<IkReal> x8427=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8418*x8425))+x8417+x8419+(((-1.0)*x8423*x8424))+(((-1.0)*x8417*x8426))+((x8422*x8423))+((r12*r22*sj4))+((x8420*x8422))+(((-1.0)*x8420*x8424))+(((-1.0)*x8419*x8426))+((cj4*r02*r22))+(((-1.0)*x8416*x8425)))),-1);
if(!x8427.valid){
continue;
}
CheckValue<IkReal> x8428 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x8428.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8427.value)))+(x8428.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8429=IKcos(j8);
IkReal x8430=IKsin(j8);
IkReal x8431=(r21*sj9);
IkReal x8432=(cj9*r20);
IkReal x8433=((1.0)*x8430);
IkReal x8434=((1.0)*x8429);
IkReal x8435=(cj4*x8429);
IkReal x8436=(r12*sj4);
IkReal x8437=(r01*sj9);
IkReal x8438=(cj4*x8430);
IkReal x8439=(r11*sj4*sj9);
IkReal x8440=(cj9*r00);
IkReal x8441=((1.0)*cj4*x8430);
IkReal x8442=(cj9*r10*sj4);
IkReal x8443=(r02*sj4);
IkReal x8444=(r11*sj9);
IkReal x8445=(cj9*r00*sj4);
IkReal x8446=(cj9*r10);
IkReal x8447=((1.0)*cj4*x8429);
IkReal x8448=(r01*sj4*sj9);
evalcond[0]=(((r22*x8429))+(((-1.0)*x8432*x8433))+((x8430*x8431)));
evalcond[1]=(((x8429*x8431))+(((-1.0)*r22*x8433))+(((-1.0)*x8432*x8434)));
evalcond[2]=(((x8437*x8438))+((x8430*x8439))+((r02*x8435))+((x8429*x8436))+(((-1.0)*x8433*x8442))+(((-1.0)*x8440*x8441)));
evalcond[3]=(((x8435*x8444))+(((-1.0)*x8434*x8448))+((x8430*x8443))+(((-1.0)*r12*x8441))+((x8429*x8445))+(((-1.0)*x8446*x8447)));
evalcond[4]=((-1.0)+((x8430*x8445))+(((-1.0)*x8434*x8443))+(((-1.0)*x8441*x8446))+(((-1.0)*x8433*x8448))+((r12*x8435))+((x8438*x8444)));
evalcond[5]=((1.0)+(((-1.0)*x8440*x8447))+((x8435*x8437))+(((-1.0)*x8434*x8442))+(((-1.0)*r02*x8441))+(((-1.0)*x8433*x8436))+((x8429*x8439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8449=((1.0)*sj9);
CheckValue<IkReal> x8450 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8449))+((cj9*r20)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x8450.valid){
continue;
}
CheckValue<IkReal> x8451=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x8449))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x8451.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8450.value)+(((1.5707963267949)*(x8451.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8452=IKcos(j8);
IkReal x8453=IKsin(j8);
IkReal x8454=(r21*sj9);
IkReal x8455=(cj9*r20);
IkReal x8456=((1.0)*x8453);
IkReal x8457=((1.0)*x8452);
IkReal x8458=(cj4*x8452);
IkReal x8459=(r12*sj4);
IkReal x8460=(r01*sj9);
IkReal x8461=(cj4*x8453);
IkReal x8462=(r11*sj4*sj9);
IkReal x8463=(cj9*r00);
IkReal x8464=((1.0)*cj4*x8453);
IkReal x8465=(cj9*r10*sj4);
IkReal x8466=(r02*sj4);
IkReal x8467=(r11*sj9);
IkReal x8468=(cj9*r00*sj4);
IkReal x8469=(cj9*r10);
IkReal x8470=((1.0)*cj4*x8452);
IkReal x8471=(r01*sj4*sj9);
evalcond[0]=(((x8453*x8454))+((r22*x8452))+(((-1.0)*x8455*x8456)));
evalcond[1]=(((x8452*x8454))+(((-1.0)*r22*x8456))+(((-1.0)*x8455*x8457)));
evalcond[2]=(((r02*x8458))+((x8460*x8461))+(((-1.0)*x8463*x8464))+((x8453*x8462))+((x8452*x8459))+(((-1.0)*x8456*x8465)));
evalcond[3]=(((x8452*x8468))+(((-1.0)*x8469*x8470))+((x8458*x8467))+(((-1.0)*x8457*x8471))+((x8453*x8466))+(((-1.0)*r12*x8464)));
evalcond[4]=((-1.0)+((r12*x8458))+((x8453*x8468))+(((-1.0)*x8457*x8466))+(((-1.0)*x8464*x8469))+((x8461*x8467))+(((-1.0)*x8456*x8471)));
evalcond[5]=((1.0)+((x8458*x8460))+(((-1.0)*x8463*x8470))+(((-1.0)*r02*x8464))+((x8452*x8462))+(((-1.0)*x8457*x8465))+(((-1.0)*x8456*x8459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8472=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x8472.valid){
continue;
}
CheckValue<IkReal> x8473 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x8473.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8472.value)))+(x8473.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8474=IKcos(j8);
IkReal x8475=IKsin(j8);
IkReal x8476=(r21*sj9);
IkReal x8477=(cj9*r20);
IkReal x8478=((1.0)*x8475);
IkReal x8479=((1.0)*x8474);
IkReal x8480=(cj4*x8474);
IkReal x8481=(r12*sj4);
IkReal x8482=(r01*sj9);
IkReal x8483=(cj4*x8475);
IkReal x8484=(r11*sj4*sj9);
IkReal x8485=(cj9*r00);
IkReal x8486=((1.0)*cj4*x8475);
IkReal x8487=(cj9*r10*sj4);
IkReal x8488=(r02*sj4);
IkReal x8489=(r11*sj9);
IkReal x8490=(cj9*r00*sj4);
IkReal x8491=(cj9*r10);
IkReal x8492=((1.0)*cj4*x8474);
IkReal x8493=(r01*sj4*sj9);
evalcond[0]=(((x8475*x8476))+(((-1.0)*x8477*x8478))+((r22*x8474)));
evalcond[1]=((((-1.0)*r22*x8478))+(((-1.0)*x8477*x8479))+((x8474*x8476)));
evalcond[2]=((((-1.0)*x8485*x8486))+((x8475*x8484))+((x8482*x8483))+((r02*x8480))+((x8474*x8481))+(((-1.0)*x8478*x8487)));
evalcond[3]=(((x8475*x8488))+(((-1.0)*x8491*x8492))+((x8474*x8490))+(((-1.0)*r12*x8486))+(((-1.0)*x8479*x8493))+((x8480*x8489)));
evalcond[4]=((-1.0)+((x8475*x8490))+(((-1.0)*x8486*x8491))+(((-1.0)*x8478*x8493))+(((-1.0)*x8479*x8488))+((x8483*x8489))+((r12*x8480)));
evalcond[5]=((1.0)+((x8480*x8482))+(((-1.0)*x8478*x8481))+(((-1.0)*x8485*x8492))+(((-1.0)*r02*x8486))+(((-1.0)*x8479*x8487))+((x8474*x8484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8494=(cj9*r21);
IkReal x8495=(r20*sj9);
IkReal x8496=((1.0)*cj4);
IkReal x8497=(cj9*r01);
IkReal x8498=(r00*sj9);
IkReal x8499=((1.0)*sj4);
IkReal x8500=(cj9*r11);
IkReal x8501=(r10*sj9);
IkReal x8502=(sj4*x8497);
IkReal x8503=(sj4*x8498);
IkReal x8504=((0.03431)*cj4);
IkReal x8505=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x8495))+(((-1.0)*x8494)));
evalcond[2]=((((-1.0)*x8496*x8498))+(((-1.0)*x8496*x8497))+(((-1.0)*x8499*x8500))+(((-1.0)*x8499*x8501)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x8494))+(((0.03431)*x8495)));
evalcond[4]=((((-1.0)*x8496*x8500))+x8502+x8503+(((-1.0)*x8496*x8501)));
evalcond[5]=((0.00337)+((x8497*x8504))+((x8501*x8505))+((x8500*x8505))+(((-1.0)*px*x8496))+(((-1.0)*py*x8499))+((x8498*x8504)));
evalcond[6]=((0.00036)+((px*sj4))+(((-0.03431)*x8503))+((x8500*x8504))+((x8501*x8504))+(((-0.03431)*x8502))+(((-1.0)*py*x8496)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x8506=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x8506;
j8eval[1]=IKsign(x8506);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x8507=((1.0)*sj9);
IkReal x8508=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x8507))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x8508;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*r21*x8507)))))+(IKabs(r22)));
j8eval[2]=IKsign(x8508);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x8509=(r01*sj4);
IkReal x8510=((1.0)*r21);
IkReal x8511=(cj4*r11);
IkReal x8512=(cj9*r20*sj9);
IkReal x8513=cj9*cj9;
IkReal x8514=(r00*sj4);
IkReal x8515=(r20*x8513);
IkReal x8516=((((-1.0)*r21*x8509*x8513))+((x8511*x8512))+(((-1.0)*x8510*x8511))+(((-1.0)*cj4*r10*x8515))+((x8514*x8515))+(((-1.0)*r01*sj4*x8512))+((r02*r22*sj4))+((r21*x8511*x8513))+(((-1.0)*cj4*r12*r22))+(((-1.0)*cj9*r21*sj9*x8514))+((cj4*cj9*r10*r21*sj9))+((r21*x8509)));
j8eval[0]=x8516;
j8eval[1]=IKsign(x8516);
j8eval[2]=((IKabs(((((-1.0)*sj9*x8510))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8517=((1.0)*r21);
IkReal x8518=(r01*sj4);
IkReal x8519=(cj4*r11);
IkReal x8520=(cj9*r20*sj9);
IkReal x8521=cj9*cj9;
IkReal x8522=(r00*sj4);
IkReal x8523=(r20*x8521);
CheckValue<IkReal> x8524 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x8517))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8524.valid){
continue;
}
CheckValue<IkReal> x8525=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8517*x8519))+((r21*x8519*x8521))+((r21*x8518))+(((-1.0)*cj9*r21*sj9*x8522))+((x8519*x8520))+(((-1.0)*r01*sj4*x8520))+(((-1.0)*cj4*r10*x8523))+((r02*r22*sj4))+((x8522*x8523))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*r21*x8518*x8521)))),-1);
if(!x8525.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8524.value)+(((1.5707963267949)*(x8525.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8526=IKcos(j8);
IkReal x8527=IKsin(j8);
IkReal x8528=(r21*sj9);
IkReal x8529=(cj9*r20);
IkReal x8530=((1.0)*x8527);
IkReal x8531=((1.0)*x8526);
IkReal x8532=(cj4*x8526);
IkReal x8533=(r12*sj4);
IkReal x8534=(r01*sj9);
IkReal x8535=(cj4*x8527);
IkReal x8536=(r11*sj4*sj9);
IkReal x8537=(cj9*r00);
IkReal x8538=((1.0)*cj4*x8527);
IkReal x8539=(cj9*r10*sj4);
IkReal x8540=(r02*sj4);
IkReal x8541=(r11*sj9);
IkReal x8542=(cj9*r00*sj4);
IkReal x8543=(cj9*r10);
IkReal x8544=(r01*sj4*sj9);
IkReal x8545=((1.0)*cj4*x8526);
evalcond[0]=((((-1.0)*x8529*x8530))+((x8527*x8528))+((r22*x8526)));
evalcond[1]=(((x8526*x8528))+(((-1.0)*x8529*x8531))+(((-1.0)*r22*x8530)));
evalcond[2]=((-1.0)+((x8534*x8535))+(((-1.0)*x8530*x8539))+(((-1.0)*x8537*x8538))+((x8527*x8536))+((x8526*x8533))+((r02*x8532)));
evalcond[3]=((((-1.0)*x8538*x8543))+(((-1.0)*x8531*x8540))+((x8527*x8542))+((r12*x8532))+(((-1.0)*x8530*x8544))+((x8535*x8541)));
evalcond[4]=(((x8526*x8536))+(((-1.0)*x8530*x8533))+(((-1.0)*x8531*x8539))+(((-1.0)*r02*x8538))+(((-1.0)*x8537*x8545))+((x8532*x8534)));
evalcond[5]=((-1.0)+((x8526*x8542))+(((-1.0)*r12*x8538))+(((-1.0)*x8531*x8544))+(((-1.0)*x8543*x8545))+((x8527*x8540))+((x8532*x8541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8546=((1.0)*sj9);
CheckValue<IkReal> x8547=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+(((-1.0)*cj4*r10*x8546))+((r00*sj4*sj9)))),-1);
if(!x8547.valid){
continue;
}
CheckValue<IkReal> x8548 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x8546))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8548.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8547.value)))+(x8548.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8549=IKcos(j8);
IkReal x8550=IKsin(j8);
IkReal x8551=(r21*sj9);
IkReal x8552=(cj9*r20);
IkReal x8553=((1.0)*x8550);
IkReal x8554=((1.0)*x8549);
IkReal x8555=(cj4*x8549);
IkReal x8556=(r12*sj4);
IkReal x8557=(r01*sj9);
IkReal x8558=(cj4*x8550);
IkReal x8559=(r11*sj4*sj9);
IkReal x8560=(cj9*r00);
IkReal x8561=((1.0)*cj4*x8550);
IkReal x8562=(cj9*r10*sj4);
IkReal x8563=(r02*sj4);
IkReal x8564=(r11*sj9);
IkReal x8565=(cj9*r00*sj4);
IkReal x8566=(cj9*r10);
IkReal x8567=(r01*sj4*sj9);
IkReal x8568=((1.0)*cj4*x8549);
evalcond[0]=(((x8550*x8551))+(((-1.0)*x8552*x8553))+((r22*x8549)));
evalcond[1]=((((-1.0)*r22*x8553))+((x8549*x8551))+(((-1.0)*x8552*x8554)));
evalcond[2]=((-1.0)+((x8557*x8558))+(((-1.0)*x8560*x8561))+((x8550*x8559))+((r02*x8555))+(((-1.0)*x8553*x8562))+((x8549*x8556)));
evalcond[3]=(((x8550*x8565))+((x8558*x8564))+(((-1.0)*x8554*x8563))+(((-1.0)*x8561*x8566))+(((-1.0)*x8553*x8567))+((r12*x8555)));
evalcond[4]=((((-1.0)*x8553*x8556))+(((-1.0)*x8554*x8562))+(((-1.0)*x8560*x8568))+((x8549*x8559))+((x8555*x8557))+(((-1.0)*r02*x8561)));
evalcond[5]=((-1.0)+(((-1.0)*x8554*x8567))+(((-1.0)*x8566*x8568))+((x8549*x8565))+((x8550*x8563))+((x8555*x8564))+(((-1.0)*r12*x8561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8569 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x8569.valid){
continue;
}
CheckValue<IkReal> x8570=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x8570.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8569.value)+(((1.5707963267949)*(x8570.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8571=IKcos(j8);
IkReal x8572=IKsin(j8);
IkReal x8573=(r21*sj9);
IkReal x8574=(cj9*r20);
IkReal x8575=((1.0)*x8572);
IkReal x8576=((1.0)*x8571);
IkReal x8577=(cj4*x8571);
IkReal x8578=(r12*sj4);
IkReal x8579=(r01*sj9);
IkReal x8580=(cj4*x8572);
IkReal x8581=(r11*sj4*sj9);
IkReal x8582=(cj9*r00);
IkReal x8583=((1.0)*cj4*x8572);
IkReal x8584=(cj9*r10*sj4);
IkReal x8585=(r02*sj4);
IkReal x8586=(r11*sj9);
IkReal x8587=(cj9*r00*sj4);
IkReal x8588=(cj9*r10);
IkReal x8589=(r01*sj4*sj9);
IkReal x8590=((1.0)*cj4*x8571);
evalcond[0]=((((-1.0)*x8574*x8575))+((r22*x8571))+((x8572*x8573)));
evalcond[1]=((((-1.0)*x8574*x8576))+(((-1.0)*r22*x8575))+((x8571*x8573)));
evalcond[2]=((-1.0)+((x8579*x8580))+(((-1.0)*x8582*x8583))+((x8571*x8578))+((x8572*x8581))+((r02*x8577))+(((-1.0)*x8575*x8584)));
evalcond[3]=((((-1.0)*x8583*x8588))+((x8572*x8587))+(((-1.0)*x8576*x8585))+((r12*x8577))+((x8580*x8586))+(((-1.0)*x8575*x8589)));
evalcond[4]=(((x8577*x8579))+(((-1.0)*r02*x8583))+(((-1.0)*x8575*x8578))+((x8571*x8581))+(((-1.0)*x8576*x8584))+(((-1.0)*x8582*x8590)));
evalcond[5]=((-1.0)+(((-1.0)*x8576*x8589))+(((-1.0)*x8588*x8590))+((x8577*x8586))+((x8571*x8587))+((x8572*x8585))+(((-1.0)*r12*x8583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8591=(cj9*r21);
IkReal x8592=(r20*sj9);
IkReal x8593=((1.0)*cj4);
IkReal x8594=(cj9*r01);
IkReal x8595=(r00*sj9);
IkReal x8596=((1.0)*sj4);
IkReal x8597=(cj9*r11);
IkReal x8598=(r10*sj9);
IkReal x8599=(sj4*x8594);
IkReal x8600=(sj4*x8595);
IkReal x8601=((0.03431)*cj4);
IkReal x8602=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x8592))+(((-1.0)*x8591)));
evalcond[2]=((((-1.0)*x8596*x8598))+(((-1.0)*x8596*x8597))+(((-1.0)*x8593*x8595))+(((-1.0)*x8593*x8594)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x8591))+(((0.03431)*x8592)));
evalcond[4]=(x8600+(((-1.0)*x8593*x8597))+(((-1.0)*x8593*x8598))+x8599);
evalcond[5]=((0.00337)+((x8594*x8601))+((x8598*x8602))+((x8597*x8602))+(((-1.0)*px*x8593))+((x8595*x8601))+(((-1.0)*py*x8596)));
evalcond[6]=((-0.00036)+((px*sj4))+((x8597*x8601))+((x8598*x8601))+(((-0.03431)*x8600))+(((-1.0)*py*x8593))+(((-0.03431)*x8599)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x8603=((1.0)*sj9);
IkReal x8604=(((cj4*cj9*r11))+(((-1.0)*r00*sj4*x8603))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)));
j8eval[0]=x8604;
j8eval[1]=((IKabs(((((-1.0)*r21*x8603))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x8604);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x8605=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x8605;
j8eval[1]=IKsign(x8605);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x8606=(cj4*r11);
IkReal x8607=((1.0)*r21);
IkReal x8608=(r01*sj4);
IkReal x8609=(cj9*r20*sj9);
IkReal x8610=(cj4*r10);
IkReal x8611=cj9*cj9;
IkReal x8612=(r20*x8611);
IkReal x8613=(((cj9*r00*r21*sj4*sj9))+((r21*x8608*x8611))+((cj4*r12*r22))+((r21*x8606))+((x8608*x8609))+(((-1.0)*r00*sj4*x8612))+(((-1.0)*r21*x8606*x8611))+(((-1.0)*r02*r22*sj4))+(((-1.0)*cj9*r21*sj9*x8610))+(((-1.0)*x8607*x8608))+((x8610*x8612))+(((-1.0)*cj4*r11*x8609)));
j8eval[0]=x8613;
j8eval[1]=IKsign(x8613);
j8eval[2]=((IKabs(((((-1.0)*sj9*x8607))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8614=((1.0)*r21);
IkReal x8615=(cj4*r11);
IkReal x8616=(r01*sj4);
IkReal x8617=(cj9*r20*sj9);
IkReal x8618=(cj4*r10);
IkReal x8619=cj9*cj9;
IkReal x8620=(r20*x8619);
CheckValue<IkReal> x8621 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x8614))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8621.valid){
continue;
}
CheckValue<IkReal> x8622=IKPowWithIntegerCheck(IKsign((((cj9*r00*r21*sj4*sj9))+((x8618*x8620))+((cj4*r12*r22))+((r21*x8615))+(((-1.0)*cj4*r11*x8617))+(((-1.0)*x8614*x8616))+(((-1.0)*r00*sj4*x8620))+(((-1.0)*r02*r22*sj4))+(((-1.0)*r21*x8615*x8619))+((r21*x8616*x8619))+(((-1.0)*cj9*r21*sj9*x8618))+((x8616*x8617)))),-1);
if(!x8622.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8621.value)+(((1.5707963267949)*(x8622.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8623=IKcos(j8);
IkReal x8624=IKsin(j8);
IkReal x8625=(r21*sj9);
IkReal x8626=(cj9*r20);
IkReal x8627=((1.0)*x8624);
IkReal x8628=((1.0)*x8623);
IkReal x8629=(cj4*x8623);
IkReal x8630=(r12*sj4);
IkReal x8631=(r01*sj9);
IkReal x8632=(cj4*x8624);
IkReal x8633=(r11*sj4*sj9);
IkReal x8634=(cj9*r00);
IkReal x8635=((1.0)*cj4*x8624);
IkReal x8636=(cj9*r10*sj4);
IkReal x8637=(r02*sj4);
IkReal x8638=(r11*sj9);
IkReal x8639=(cj9*r00*sj4);
IkReal x8640=(cj9*r10);
IkReal x8641=(r01*sj4*sj9);
IkReal x8642=((1.0)*cj4*x8623);
evalcond[0]=((((-1.0)*x8626*x8627))+((x8624*x8625))+((r22*x8623)));
evalcond[1]=(((x8623*x8625))+(((-1.0)*r22*x8627))+(((-1.0)*x8626*x8628)));
evalcond[2]=((1.0)+((x8623*x8630))+((r02*x8629))+((x8631*x8632))+(((-1.0)*x8634*x8635))+(((-1.0)*x8627*x8636))+((x8624*x8633)));
evalcond[3]=((((-1.0)*x8635*x8640))+((x8624*x8639))+((r12*x8629))+(((-1.0)*x8627*x8641))+((x8632*x8638))+(((-1.0)*x8628*x8637)));
evalcond[4]=(((x8629*x8631))+((x8623*x8633))+(((-1.0)*x8628*x8636))+(((-1.0)*r02*x8635))+(((-1.0)*x8634*x8642))+(((-1.0)*x8627*x8630)));
evalcond[5]=((1.0)+(((-1.0)*r12*x8635))+(((-1.0)*x8640*x8642))+(((-1.0)*x8628*x8641))+((x8624*x8637))+((x8623*x8639))+((x8629*x8638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
CheckValue<IkReal> x8644=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x8644.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8643.value)+(((1.5707963267949)*(x8644.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8645=IKcos(j8);
IkReal x8646=IKsin(j8);
IkReal x8647=(r21*sj9);
IkReal x8648=(cj9*r20);
IkReal x8649=((1.0)*x8646);
IkReal x8650=((1.0)*x8645);
IkReal x8651=(cj4*x8645);
IkReal x8652=(r12*sj4);
IkReal x8653=(r01*sj9);
IkReal x8654=(cj4*x8646);
IkReal x8655=(r11*sj4*sj9);
IkReal x8656=(cj9*r00);
IkReal x8657=((1.0)*cj4*x8646);
IkReal x8658=(cj9*r10*sj4);
IkReal x8659=(r02*sj4);
IkReal x8660=(r11*sj9);
IkReal x8661=(cj9*r00*sj4);
IkReal x8662=(cj9*r10);
IkReal x8663=(r01*sj4*sj9);
IkReal x8664=((1.0)*cj4*x8645);
evalcond[0]=(((r22*x8645))+((x8646*x8647))+(((-1.0)*x8648*x8649)));
evalcond[1]=(((x8645*x8647))+(((-1.0)*r22*x8649))+(((-1.0)*x8648*x8650)));
evalcond[2]=((1.0)+(((-1.0)*x8649*x8658))+(((-1.0)*x8656*x8657))+((r02*x8651))+((x8645*x8652))+((x8646*x8655))+((x8653*x8654)));
evalcond[3]=((((-1.0)*x8649*x8663))+((x8646*x8661))+(((-1.0)*x8657*x8662))+(((-1.0)*x8650*x8659))+((x8654*x8660))+((r12*x8651)));
evalcond[4]=((((-1.0)*x8656*x8664))+(((-1.0)*x8649*x8652))+(((-1.0)*x8650*x8658))+(((-1.0)*r02*x8657))+((x8651*x8653))+((x8645*x8655)));
evalcond[5]=((1.0)+(((-1.0)*r12*x8657))+((x8651*x8660))+(((-1.0)*x8650*x8663))+((x8645*x8661))+(((-1.0)*x8662*x8664))+((x8646*x8659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8665=((1.0)*sj9);
CheckValue<IkReal> x8666=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+(((-1.0)*r00*sj4*x8665))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x8666.valid){
continue;
}
CheckValue<IkReal> x8667 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x8665))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8667.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8666.value)))+(x8667.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8668=IKcos(j8);
IkReal x8669=IKsin(j8);
IkReal x8670=(r21*sj9);
IkReal x8671=(cj9*r20);
IkReal x8672=((1.0)*x8669);
IkReal x8673=((1.0)*x8668);
IkReal x8674=(cj4*x8668);
IkReal x8675=(r12*sj4);
IkReal x8676=(r01*sj9);
IkReal x8677=(cj4*x8669);
IkReal x8678=(r11*sj4*sj9);
IkReal x8679=(cj9*r00);
IkReal x8680=((1.0)*cj4*x8669);
IkReal x8681=(cj9*r10*sj4);
IkReal x8682=(r02*sj4);
IkReal x8683=(r11*sj9);
IkReal x8684=(cj9*r00*sj4);
IkReal x8685=(cj9*r10);
IkReal x8686=(r01*sj4*sj9);
IkReal x8687=((1.0)*cj4*x8668);
evalcond[0]=((((-1.0)*x8671*x8672))+((x8669*x8670))+((r22*x8668)));
evalcond[1]=(((x8668*x8670))+(((-1.0)*r22*x8672))+(((-1.0)*x8671*x8673)));
evalcond[2]=((1.0)+((r02*x8674))+((x8668*x8675))+((x8676*x8677))+((x8669*x8678))+(((-1.0)*x8679*x8680))+(((-1.0)*x8672*x8681)));
evalcond[3]=(((x8669*x8684))+((r12*x8674))+(((-1.0)*x8673*x8682))+(((-1.0)*x8680*x8685))+((x8677*x8683))+(((-1.0)*x8672*x8686)));
evalcond[4]=((((-1.0)*r02*x8680))+(((-1.0)*x8679*x8687))+(((-1.0)*x8673*x8681))+(((-1.0)*x8672*x8675))+((x8674*x8676))+((x8668*x8678)));
evalcond[5]=((1.0)+(((-1.0)*x8685*x8687))+(((-1.0)*x8673*x8686))+((x8669*x8682))+((x8668*x8684))+((x8674*x8683))+(((-1.0)*r12*x8680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8688=(r21*sj9);
IkReal x8689=(r21*sj4);
IkReal x8690=(r01*x8689);
IkReal x8691=((1.0)*cj4);
IkReal x8692=(r11*r21);
IkReal x8693=(cj9*r20*sj9);
IkReal x8694=cj9*cj9;
IkReal x8695=(r20*x8694);
CheckValue<IkReal> x8696 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*sj6*x8688))+((sj6*((cj9*r20))))),IKFAST_ATAN2_MAGTHRESH);
if(!x8696.valid){
continue;
}
CheckValue<IkReal> x8697=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8690*x8694))+(((-1.0)*cj9*r00*sj9*x8689))+((cj4*x8692*x8694))+(((-1.0)*r12*r22*x8691))+(((-1.0)*x8691*x8692))+((r00*sj4*x8695))+(((-1.0)*r01*sj4*x8693))+(((-1.0)*cj4*r10*x8695))+((r02*r22*sj4))+x8690+((cj4*r11*x8693))+((cj4*cj9*r10*x8688)))),-1);
if(!x8697.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8696.value)+(((1.5707963267949)*(x8697.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8698=IKcos(j8);
IkReal x8699=IKsin(j8);
IkReal x8700=(r21*sj9);
IkReal x8701=(cj9*r20);
IkReal x8702=((1.0)*x8699);
IkReal x8703=((1.0)*x8698);
IkReal x8704=(cj4*x8698);
IkReal x8705=(r02*sj4);
IkReal x8706=(r11*sj9);
IkReal x8707=(cj4*x8699);
IkReal x8708=(cj9*r00*sj4);
IkReal x8709=(cj9*r10);
IkReal x8710=((1.0)*cj4*x8699);
IkReal x8711=(r01*sj4*sj9);
IkReal x8712=((-1.0)*(((1.0)*sj6)));
IkReal x8713=(r12*sj4);
IkReal x8714=(r01*sj9);
IkReal x8715=(r11*sj4*sj9);
IkReal x8716=(cj9*r00);
IkReal x8717=(cj9*r10*sj4);
IkReal x8718=((1.0)*cj4*x8698);
evalcond[0]=((((-1.0)*x8701*x8702))+((x8699*x8700))+((r22*x8698)));
evalcond[1]=((((-1.0)*x8701*x8703))+(((-1.0)*r22*x8702))+((x8698*x8700)));
evalcond[2]=(((r12*x8704))+(((-1.0)*x8709*x8710))+((x8706*x8707))+cj6+(((-1.0)*x8702*x8711))+(((-1.0)*x8703*x8705))+((x8699*x8708)));
evalcond[3]=((((-1.0)*x8702*x8717))+x8712+((x8707*x8714))+((r02*x8704))+(((-1.0)*x8710*x8716))+((x8698*x8713))+((x8699*x8715)));
evalcond[4]=(((x8698*x8708))+x8712+(((-1.0)*x8703*x8711))+((x8704*x8706))+(((-1.0)*x8709*x8718))+(((-1.0)*r12*x8710))+((x8699*x8705)));
evalcond[5]=(((x8704*x8714))+((x8698*x8715))+(((-1.0)*x8702*x8713))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x8703*x8717))+(((-1.0)*r02*x8710))+(((-1.0)*x8716*x8718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8719=((1.0)*sj9);
IkReal x8720=((1.0)*cj4);
CheckValue<IkReal> x8721 = IKatan2WithCheck(IkReal((cj6*r22)),((((-1.0)*cj6*r21*x8719))+((cj6*cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8721.valid){
continue;
}
CheckValue<IkReal> x8722=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*r00*sj9*x8720))+(((-1.0)*cj9*r01*x8720))+(((-1.0)*r10*sj4*x8719)))),-1);
if(!x8722.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8721.value)+(((1.5707963267949)*(x8722.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8723=IKcos(j8);
IkReal x8724=IKsin(j8);
IkReal x8725=(r21*sj9);
IkReal x8726=(cj9*r20);
IkReal x8727=((1.0)*x8724);
IkReal x8728=((1.0)*x8723);
IkReal x8729=(cj4*x8723);
IkReal x8730=(r02*sj4);
IkReal x8731=(r11*sj9);
IkReal x8732=(cj4*x8724);
IkReal x8733=(cj9*r00*sj4);
IkReal x8734=(cj9*r10);
IkReal x8735=((1.0)*cj4*x8724);
IkReal x8736=(r01*sj4*sj9);
IkReal x8737=((-1.0)*(((1.0)*sj6)));
IkReal x8738=(r12*sj4);
IkReal x8739=(r01*sj9);
IkReal x8740=(r11*sj4*sj9);
IkReal x8741=(cj9*r00);
IkReal x8742=(cj9*r10*sj4);
IkReal x8743=((1.0)*cj4*x8723);
evalcond[0]=(((x8724*x8725))+((r22*x8723))+(((-1.0)*x8726*x8727)));
evalcond[1]=((((-1.0)*r22*x8727))+((x8723*x8725))+(((-1.0)*x8726*x8728)));
evalcond[2]=((((-1.0)*x8734*x8735))+(((-1.0)*x8727*x8736))+cj6+((x8731*x8732))+(((-1.0)*x8728*x8730))+((r12*x8729))+((x8724*x8733)));
evalcond[3]=(((x8732*x8739))+((x8724*x8740))+((r02*x8729))+((x8723*x8738))+(((-1.0)*x8727*x8742))+(((-1.0)*x8735*x8741))+x8737);
evalcond[4]=((((-1.0)*x8734*x8743))+((x8723*x8733))+(((-1.0)*r12*x8735))+((x8729*x8731))+(((-1.0)*x8728*x8736))+((x8724*x8730))+x8737);
evalcond[5]=((((-1.0)*x8728*x8742))+((x8723*x8740))+(((-1.0)*x8741*x8743))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x8727*x8738))+((x8729*x8739))+(((-1.0)*r02*x8735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8744=((1.0)*cj4);
CheckValue<IkReal> x8745=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9*x8744))+(((-1.0)*cj9*r11*x8744))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x8745.valid){
continue;
}
CheckValue<IkReal> x8746 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x8746.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8745.value)))+(x8746.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8747=IKcos(j8);
IkReal x8748=IKsin(j8);
IkReal x8749=(r21*sj9);
IkReal x8750=(cj9*r20);
IkReal x8751=((1.0)*x8748);
IkReal x8752=((1.0)*x8747);
IkReal x8753=(cj4*x8747);
IkReal x8754=(r02*sj4);
IkReal x8755=(r11*sj9);
IkReal x8756=(cj4*x8748);
IkReal x8757=(cj9*r00*sj4);
IkReal x8758=(cj9*r10);
IkReal x8759=((1.0)*cj4*x8748);
IkReal x8760=(r01*sj4*sj9);
IkReal x8761=((-1.0)*(((1.0)*sj6)));
IkReal x8762=(r12*sj4);
IkReal x8763=(r01*sj9);
IkReal x8764=(r11*sj4*sj9);
IkReal x8765=(cj9*r00);
IkReal x8766=(cj9*r10*sj4);
IkReal x8767=((1.0)*cj4*x8747);
evalcond[0]=(((r22*x8747))+(((-1.0)*x8750*x8751))+((x8748*x8749)));
evalcond[1]=((((-1.0)*x8750*x8752))+(((-1.0)*r22*x8751))+((x8747*x8749)));
evalcond[2]=((((-1.0)*x8751*x8760))+((x8755*x8756))+((r12*x8753))+((x8748*x8757))+(((-1.0)*x8752*x8754))+cj6+(((-1.0)*x8758*x8759)));
evalcond[3]=((((-1.0)*x8759*x8765))+(((-1.0)*x8751*x8766))+x8761+((x8747*x8762))+((x8748*x8764))+((r02*x8753))+((x8756*x8763)));
evalcond[4]=(x8761+(((-1.0)*x8752*x8760))+((x8753*x8755))+((x8748*x8754))+(((-1.0)*r12*x8759))+(((-1.0)*x8758*x8767))+((x8747*x8757)));
evalcond[5]=(((x8747*x8764))+(((-1.0)*r02*x8759))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x8752*x8766))+((x8753*x8763))+(((-1.0)*x8765*x8767))+(((-1.0)*x8751*x8762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8768=(cj9*r21);
IkReal x8769=(r20*sj9);
IkReal x8770=((1.0)*cj4);
IkReal x8771=(cj9*r01);
IkReal x8772=(r00*sj9);
IkReal x8773=((1.0)*sj4);
IkReal x8774=(cj9*r11);
IkReal x8775=(r10*sj9);
IkReal x8776=(sj4*x8771);
IkReal x8777=(sj4*x8772);
IkReal x8778=((0.03431)*cj4);
IkReal x8779=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*x8769))+(((-1.0)*x8768)));
evalcond[2]=((((-1.0)*x8773*x8774))+(((-1.0)*x8773*x8775))+(((-1.0)*x8770*x8772))+(((-1.0)*x8770*x8771)));
evalcond[3]=((-0.4967)+(((0.03431)*x8768))+(((0.03431)*x8769))+(((-1.0)*(1.0)*pz)));
evalcond[4]=(x8776+x8777+(((-1.0)*x8770*x8775))+(((-1.0)*x8770*x8774)));
evalcond[5]=((0.00337)+((x8772*x8778))+(((0.00036)*cj6))+(((-1.0)*px*x8770))+((x8775*x8779))+((x8771*x8778))+((x8774*x8779))+(((-1.0)*py*x8773)));
evalcond[6]=(((px*sj4))+(((-1.0)*(0.00036)*sj6))+(((-1.0)*py*x8770))+((x8775*x8778))+((x8774*x8778))+(((-0.03431)*x8777))+(((-0.03431)*x8776)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x8780=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x8780;
j8eval[1]=IKsign(x8780);
j8eval[2]=((IKabs((((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x8781=((1.0)*cj4);
IkReal x8782=((((-1.0)*cj9*r11*x8781))+((cj9*r01*sj4))+(((-1.0)*r10*sj9*x8781))+((r00*sj4*sj9)));
j8eval[0]=x8782;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x8782);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x8783=(r01*((cj4*r21)));
IkReal x8784=(r11*((r21*sj4)));
IkReal x8785=cj9*cj9;
IkReal x8786=(r20*x8785);
IkReal x8787=((1.0)*cj9*sj9);
IkReal x8788=((1.0)*cj9*r20*sj9);
IkReal x8789=((1.0)*x8785);
IkReal x8790=((((-1.0)*cj4*r01*x8788))+((r10*sj4*x8786))+((r12*r22*sj4))+(((-1.0)*cj4*r00*r21*x8787))+((cj4*r00*x8786))+((cj4*r02*r22))+x8784+x8783+(((-1.0)*x8783*x8789))+(((-1.0)*r10*r21*sj4*x8787))+(((-1.0)*r11*sj4*x8788))+(((-1.0)*x8784*x8789)));
j8eval[0]=x8790;
j8eval[1]=IKsign(x8790);
j8eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj6*((cj9*r20))))+(((-1.0)*cj6*r21*sj9))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x8791=(cj9*r21);
IkReal x8792=(r20*sj9);
IkReal x8793=((1.0)*cj4);
IkReal x8794=(cj9*r01);
IkReal x8795=(r00*sj9);
IkReal x8796=((1.0)*sj4);
IkReal x8797=(cj9*r11);
IkReal x8798=(r10*sj9);
IkReal x8799=(sj4*x8794);
IkReal x8800=(sj4*x8795);
IkReal x8801=((0.03431)*cj4);
IkReal x8802=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x8791))+(((-1.0)*x8792)));
evalcond[2]=((((-1.0)*x8796*x8797))+(((-1.0)*x8796*x8798))+(((-1.0)*x8793*x8794))+(((-1.0)*x8793*x8795)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x8792))+(((0.03431)*x8791)));
evalcond[4]=(x8799+(((-1.0)*x8793*x8798))+(((-1.0)*x8793*x8797))+x8800);
evalcond[5]=((0.00337)+((x8795*x8801))+((x8794*x8801))+((x8797*x8802))+((x8798*x8802))+(((-1.0)*py*x8796))+(((-1.0)*px*x8793)));
evalcond[6]=((-0.00036)+((px*sj4))+(((-1.0)*py*x8793))+((x8797*x8801))+(((-0.03431)*x8800))+((x8798*x8801))+(((-0.03431)*x8799)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x8803=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x8803;
j8eval[1]=IKsign(x8803);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x8804=((1.0)*sj9);
IkReal x8805=((((-1.0)*cj4*r10*x8804))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x8805;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*r21*x8804)))))+(IKabs(r22)));
j8eval[2]=IKsign(x8805);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x8806=(r01*sj4);
IkReal x8807=((1.0)*r21);
IkReal x8808=(cj4*r11);
IkReal x8809=(cj9*r20*sj9);
IkReal x8810=cj9*cj9;
IkReal x8811=(r00*sj4);
IkReal x8812=(r20*x8810);
IkReal x8813=((((-1.0)*cj4*r10*x8812))+(((-1.0)*x8807*x8808))+(((-1.0)*cj9*r21*sj9*x8811))+((r21*x8806))+((r02*r22*sj4))+(((-1.0)*r01*sj4*x8809))+((r21*x8808*x8810))+(((-1.0)*r21*x8806*x8810))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+((x8808*x8809))+((x8811*x8812)));
j8eval[0]=x8813;
j8eval[1]=IKsign(x8813);
j8eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*sj9*x8807))+((cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8814=((1.0)*r21);
IkReal x8815=(r01*sj4);
IkReal x8816=(cj4*r11);
IkReal x8817=(cj9*r20*sj9);
IkReal x8818=cj9*cj9;
IkReal x8819=(r00*sj4);
IkReal x8820=(r20*x8818);
CheckValue<IkReal> x8821 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x8814))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8821.valid){
continue;
}
CheckValue<IkReal> x8822=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj4*x8817))+((r21*x8815))+(((-1.0)*cj4*r10*x8820))+(((-1.0)*cj9*r21*sj9*x8819))+(((-1.0)*x8814*x8816))+((r21*x8816*x8818))+((r02*r22*sj4))+(((-1.0)*r21*x8815*x8818))+((x8819*x8820))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+((x8816*x8817)))),-1);
if(!x8822.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8821.value)+(((1.5707963267949)*(x8822.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8823=IKcos(j8);
IkReal x8824=IKsin(j8);
IkReal x8825=(r21*sj9);
IkReal x8826=(cj9*r20);
IkReal x8827=((1.0)*x8824);
IkReal x8828=((1.0)*x8823);
IkReal x8829=(cj4*x8823);
IkReal x8830=(r12*sj4);
IkReal x8831=(r01*sj9);
IkReal x8832=(cj4*x8824);
IkReal x8833=(r11*sj4*sj9);
IkReal x8834=(cj9*r00);
IkReal x8835=((1.0)*cj4*x8824);
IkReal x8836=(cj9*r10*sj4);
IkReal x8837=(r02*sj4);
IkReal x8838=(r11*sj9);
IkReal x8839=(cj9*r00*sj4);
IkReal x8840=(cj9*r10);
IkReal x8841=(r01*sj4*sj9);
IkReal x8842=((1.0)*cj4*x8823);
evalcond[0]=((((-1.0)*x8826*x8827))+((x8824*x8825))+((r22*x8823)));
evalcond[1]=((((-1.0)*x8826*x8828))+((x8823*x8825))+(((-1.0)*r22*x8827)));
evalcond[2]=((-1.0)+((r02*x8829))+(((-1.0)*x8827*x8836))+((x8824*x8833))+(((-1.0)*x8834*x8835))+((x8823*x8830))+((x8831*x8832)));
evalcond[3]=((((-1.0)*x8828*x8837))+((x8832*x8838))+(((-1.0)*x8835*x8840))+((r12*x8829))+((x8824*x8839))+(((-1.0)*x8827*x8841)));
evalcond[4]=((((-1.0)*x8834*x8842))+((x8829*x8831))+(((-1.0)*x8828*x8836))+(((-1.0)*r02*x8835))+((x8823*x8833))+(((-1.0)*x8827*x8830)));
evalcond[5]=((-1.0)+((x8829*x8838))+(((-1.0)*x8828*x8841))+(((-1.0)*x8840*x8842))+(((-1.0)*r12*x8835))+((x8823*x8839))+((x8824*x8837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8843=((1.0)*sj9);
CheckValue<IkReal> x8844 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x8843))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8844.valid){
continue;
}
CheckValue<IkReal> x8845=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x8843))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x8845.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8844.value)+(((1.5707963267949)*(x8845.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8846=IKcos(j8);
IkReal x8847=IKsin(j8);
IkReal x8848=(r21*sj9);
IkReal x8849=(cj9*r20);
IkReal x8850=((1.0)*x8847);
IkReal x8851=((1.0)*x8846);
IkReal x8852=(cj4*x8846);
IkReal x8853=(r12*sj4);
IkReal x8854=(r01*sj9);
IkReal x8855=(cj4*x8847);
IkReal x8856=(r11*sj4*sj9);
IkReal x8857=(cj9*r00);
IkReal x8858=((1.0)*cj4*x8847);
IkReal x8859=(cj9*r10*sj4);
IkReal x8860=(r02*sj4);
IkReal x8861=(r11*sj9);
IkReal x8862=(cj9*r00*sj4);
IkReal x8863=(cj9*r10);
IkReal x8864=(r01*sj4*sj9);
IkReal x8865=((1.0)*cj4*x8846);
evalcond[0]=(((r22*x8846))+((x8847*x8848))+(((-1.0)*x8849*x8850)));
evalcond[1]=((((-1.0)*r22*x8850))+((x8846*x8848))+(((-1.0)*x8849*x8851)));
evalcond[2]=((-1.0)+(((-1.0)*x8857*x8858))+((x8846*x8853))+((r02*x8852))+((x8847*x8856))+((x8854*x8855))+(((-1.0)*x8850*x8859)));
evalcond[3]=((((-1.0)*x8851*x8860))+((x8855*x8861))+(((-1.0)*x8850*x8864))+((x8847*x8862))+((r12*x8852))+(((-1.0)*x8858*x8863)));
evalcond[4]=((((-1.0)*x8857*x8865))+(((-1.0)*x8850*x8853))+((x8852*x8854))+(((-1.0)*r02*x8858))+(((-1.0)*x8851*x8859))+((x8846*x8856)));
evalcond[5]=((-1.0)+(((-1.0)*x8851*x8864))+(((-1.0)*x8863*x8865))+((x8852*x8861))+(((-1.0)*r12*x8858))+((x8847*x8860))+((x8846*x8862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8866 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x8866.valid){
continue;
}
CheckValue<IkReal> x8867=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x8867.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8866.value)+(((1.5707963267949)*(x8867.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8868=IKcos(j8);
IkReal x8869=IKsin(j8);
IkReal x8870=(r21*sj9);
IkReal x8871=(cj9*r20);
IkReal x8872=((1.0)*x8869);
IkReal x8873=((1.0)*x8868);
IkReal x8874=(cj4*x8868);
IkReal x8875=(r12*sj4);
IkReal x8876=(r01*sj9);
IkReal x8877=(cj4*x8869);
IkReal x8878=(r11*sj4*sj9);
IkReal x8879=(cj9*r00);
IkReal x8880=((1.0)*cj4*x8869);
IkReal x8881=(cj9*r10*sj4);
IkReal x8882=(r02*sj4);
IkReal x8883=(r11*sj9);
IkReal x8884=(cj9*r00*sj4);
IkReal x8885=(cj9*r10);
IkReal x8886=(r01*sj4*sj9);
IkReal x8887=((1.0)*cj4*x8868);
evalcond[0]=(((x8869*x8870))+(((-1.0)*x8871*x8872))+((r22*x8868)));
evalcond[1]=(((x8868*x8870))+(((-1.0)*x8871*x8873))+(((-1.0)*r22*x8872)));
evalcond[2]=((-1.0)+((r02*x8874))+(((-1.0)*x8872*x8881))+((x8876*x8877))+(((-1.0)*x8879*x8880))+((x8868*x8875))+((x8869*x8878)));
evalcond[3]=(((x8877*x8883))+((x8869*x8884))+(((-1.0)*x8872*x8886))+((r12*x8874))+(((-1.0)*x8880*x8885))+(((-1.0)*x8873*x8882)));
evalcond[4]=(((x8874*x8876))+(((-1.0)*x8872*x8875))+((x8868*x8878))+(((-1.0)*r02*x8880))+(((-1.0)*x8873*x8881))+(((-1.0)*x8879*x8887)));
evalcond[5]=((-1.0)+((x8874*x8883))+((x8869*x8882))+((x8868*x8884))+(((-1.0)*x8873*x8886))+(((-1.0)*x8885*x8887))+(((-1.0)*r12*x8880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8888=(cj9*r21);
IkReal x8889=(r20*sj9);
IkReal x8890=((1.0)*cj4);
IkReal x8891=(cj9*r01);
IkReal x8892=(r00*sj9);
IkReal x8893=((1.0)*sj4);
IkReal x8894=(cj9*r11);
IkReal x8895=(r10*sj9);
IkReal x8896=(sj4*x8891);
IkReal x8897=(sj4*x8892);
IkReal x8898=((0.03431)*cj4);
IkReal x8899=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x8888))+(((-1.0)*x8889)));
evalcond[2]=((((-1.0)*x8893*x8894))+(((-1.0)*x8890*x8892))+(((-1.0)*x8893*x8895))+(((-1.0)*x8890*x8891)));
evalcond[3]=((-0.4967)+(((0.03431)*x8889))+(((-1.0)*(1.0)*pz))+(((0.03431)*x8888)));
evalcond[4]=(x8897+x8896+(((-1.0)*x8890*x8894))+(((-1.0)*x8890*x8895)));
evalcond[5]=((0.00337)+((x8894*x8899))+(((-1.0)*py*x8893))+((x8891*x8898))+(((-1.0)*px*x8890))+((x8895*x8899))+((x8892*x8898)));
evalcond[6]=((0.00036)+((px*sj4))+(((-0.03431)*x8896))+(((-0.03431)*x8897))+((x8895*x8898))+(((-1.0)*py*x8890))+((x8894*x8898)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x8900=((1.0)*sj9);
IkReal x8901=(((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*x8900)));
j8eval[0]=x8901;
j8eval[1]=((IKabs(((((-1.0)*r21*x8900))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x8901);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x8902=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x8902;
j8eval[1]=IKsign(x8902);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x8903=(cj4*r11);
IkReal x8904=((1.0)*r21);
IkReal x8905=(r01*sj4);
IkReal x8906=(cj9*r20*sj9);
IkReal x8907=(cj4*r10);
IkReal x8908=cj9*cj9;
IkReal x8909=(r20*x8908);
IkReal x8910=(((r21*x8903))+(((-1.0)*r00*sj4*x8909))+((cj9*r00*r21*sj4*sj9))+(((-1.0)*r21*x8903*x8908))+((cj4*r12*r22))+(((-1.0)*cj9*r21*sj9*x8907))+(((-1.0)*r02*r22*sj4))+(((-1.0)*x8904*x8905))+((x8907*x8909))+((r21*x8905*x8908))+((x8905*x8906))+(((-1.0)*cj4*r11*x8906)));
j8eval[0]=x8910;
j8eval[1]=IKsign(x8910);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*sj9*x8904)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8911=((1.0)*r21);
IkReal x8912=(cj4*r11);
IkReal x8913=(r01*sj4);
IkReal x8914=(cj9*r20*sj9);
IkReal x8915=(cj4*r10);
IkReal x8916=cj9*cj9;
IkReal x8917=(r20*x8916);
CheckValue<IkReal> x8918 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x8911))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x8918.valid){
continue;
}
CheckValue<IkReal> x8919=IKPowWithIntegerCheck(IKsign((((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*cj9*r21*sj9*x8915))+(((-1.0)*r02*r22*sj4))+((r21*x8913*x8916))+(((-1.0)*r00*sj4*x8917))+(((-1.0)*cj4*r11*x8914))+((x8913*x8914))+((r21*x8912))+(((-1.0)*x8911*x8913))+(((-1.0)*r21*x8912*x8916))+((x8915*x8917)))),-1);
if(!x8919.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8918.value)+(((1.5707963267949)*(x8919.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8920=IKcos(j8);
IkReal x8921=IKsin(j8);
IkReal x8922=(r21*sj9);
IkReal x8923=(cj9*r20);
IkReal x8924=((1.0)*x8921);
IkReal x8925=((1.0)*x8920);
IkReal x8926=(cj4*x8920);
IkReal x8927=(r12*sj4);
IkReal x8928=(r01*sj9);
IkReal x8929=(cj4*x8921);
IkReal x8930=(r11*sj4*sj9);
IkReal x8931=(cj9*r00);
IkReal x8932=((1.0)*cj4*x8921);
IkReal x8933=(cj9*r10*sj4);
IkReal x8934=(r02*sj4);
IkReal x8935=(r11*sj9);
IkReal x8936=(cj9*r00*sj4);
IkReal x8937=(cj9*r10);
IkReal x8938=(r01*sj4*sj9);
IkReal x8939=((1.0)*cj4*x8920);
evalcond[0]=(((x8921*x8922))+(((-1.0)*x8923*x8924))+((r22*x8920)));
evalcond[1]=((((-1.0)*r22*x8924))+((x8920*x8922))+(((-1.0)*x8923*x8925)));
evalcond[2]=((1.0)+((x8921*x8930))+(((-1.0)*x8931*x8932))+((x8928*x8929))+((r02*x8926))+(((-1.0)*x8924*x8933))+((x8920*x8927)));
evalcond[3]=((((-1.0)*x8932*x8937))+(((-1.0)*x8924*x8938))+(((-1.0)*x8925*x8934))+((x8929*x8935))+((r12*x8926))+((x8921*x8936)));
evalcond[4]=((((-1.0)*x8924*x8927))+(((-1.0)*x8925*x8933))+((x8926*x8928))+(((-1.0)*r02*x8932))+(((-1.0)*x8931*x8939))+((x8920*x8930)));
evalcond[5]=((1.0)+((x8926*x8935))+(((-1.0)*r12*x8932))+(((-1.0)*x8925*x8938))+((x8921*x8934))+((x8920*x8936))+(((-1.0)*x8937*x8939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8940 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x8940.valid){
continue;
}
CheckValue<IkReal> x8941=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x8941.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8940.value)+(((1.5707963267949)*(x8941.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8942=IKcos(j8);
IkReal x8943=IKsin(j8);
IkReal x8944=(r21*sj9);
IkReal x8945=(cj9*r20);
IkReal x8946=((1.0)*x8943);
IkReal x8947=((1.0)*x8942);
IkReal x8948=(cj4*x8942);
IkReal x8949=(r12*sj4);
IkReal x8950=(r01*sj9);
IkReal x8951=(cj4*x8943);
IkReal x8952=(r11*sj4*sj9);
IkReal x8953=(cj9*r00);
IkReal x8954=((1.0)*cj4*x8943);
IkReal x8955=(cj9*r10*sj4);
IkReal x8956=(r02*sj4);
IkReal x8957=(r11*sj9);
IkReal x8958=(cj9*r00*sj4);
IkReal x8959=(cj9*r10);
IkReal x8960=(r01*sj4*sj9);
IkReal x8961=((1.0)*cj4*x8942);
evalcond[0]=(((r22*x8942))+(((-1.0)*x8945*x8946))+((x8943*x8944)));
evalcond[1]=((((-1.0)*r22*x8946))+((x8942*x8944))+(((-1.0)*x8945*x8947)));
evalcond[2]=((1.0)+((x8943*x8952))+(((-1.0)*x8953*x8954))+((x8950*x8951))+(((-1.0)*x8946*x8955))+((r02*x8948))+((x8942*x8949)));
evalcond[3]=(((r12*x8948))+((x8951*x8957))+((x8943*x8958))+(((-1.0)*x8954*x8959))+(((-1.0)*x8946*x8960))+(((-1.0)*x8947*x8956)));
evalcond[4]=((((-1.0)*x8953*x8961))+(((-1.0)*r02*x8954))+((x8942*x8952))+((x8948*x8950))+(((-1.0)*x8947*x8955))+(((-1.0)*x8946*x8949)));
evalcond[5]=((1.0)+(((-1.0)*r12*x8954))+((x8942*x8958))+(((-1.0)*x8959*x8961))+((x8948*x8957))+(((-1.0)*x8947*x8960))+((x8943*x8956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8962=((1.0)*sj9);
CheckValue<IkReal> x8963=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+(((-1.0)*r00*sj4*x8962))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x8963.valid){
continue;
}
CheckValue<IkReal> x8964 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x8962))),IKFAST_ATAN2_MAGTHRESH);
if(!x8964.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8963.value)))+(x8964.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8965=IKcos(j8);
IkReal x8966=IKsin(j8);
IkReal x8967=(r21*sj9);
IkReal x8968=(cj9*r20);
IkReal x8969=((1.0)*x8966);
IkReal x8970=((1.0)*x8965);
IkReal x8971=(cj4*x8965);
IkReal x8972=(r12*sj4);
IkReal x8973=(r01*sj9);
IkReal x8974=(cj4*x8966);
IkReal x8975=(r11*sj4*sj9);
IkReal x8976=(cj9*r00);
IkReal x8977=((1.0)*cj4*x8966);
IkReal x8978=(cj9*r10*sj4);
IkReal x8979=(r02*sj4);
IkReal x8980=(r11*sj9);
IkReal x8981=(cj9*r00*sj4);
IkReal x8982=(cj9*r10);
IkReal x8983=(r01*sj4*sj9);
IkReal x8984=((1.0)*cj4*x8965);
evalcond[0]=((((-1.0)*x8968*x8969))+((x8966*x8967))+((r22*x8965)));
evalcond[1]=((((-1.0)*r22*x8969))+((x8965*x8967))+(((-1.0)*x8968*x8970)));
evalcond[2]=((1.0)+(((-1.0)*x8976*x8977))+((x8965*x8972))+(((-1.0)*x8969*x8978))+((x8973*x8974))+((r02*x8971))+((x8966*x8975)));
evalcond[3]=(((x8974*x8980))+(((-1.0)*x8970*x8979))+((x8966*x8981))+(((-1.0)*x8977*x8982))+(((-1.0)*x8969*x8983))+((r12*x8971)));
evalcond[4]=((((-1.0)*x8969*x8972))+(((-1.0)*x8976*x8984))+((x8965*x8975))+((x8971*x8973))+(((-1.0)*x8970*x8978))+(((-1.0)*r02*x8977)));
evalcond[5]=((1.0)+((x8971*x8980))+((x8965*x8981))+((x8966*x8979))+(((-1.0)*r12*x8977))+(((-1.0)*x8982*x8984))+(((-1.0)*x8970*x8983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8985=(cj9*r21);
IkReal x8986=(r20*sj9);
IkReal x8987=((1.0)*cj4);
IkReal x8988=(cj9*r01);
IkReal x8989=(r00*sj9);
IkReal x8990=((1.0)*sj4);
IkReal x8991=(cj9*r11);
IkReal x8992=(r10*sj9);
IkReal x8993=(sj4*x8988);
IkReal x8994=(sj4*x8989);
IkReal x8995=((0.03431)*cj4);
IkReal x8996=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x8986))+(((-1.0)*x8985)));
evalcond[2]=((((-1.0)*x8990*x8991))+(((-1.0)*x8990*x8992))+(((-1.0)*x8987*x8989))+(((-1.0)*x8987*x8988)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x8986))+(((0.03431)*x8985)));
evalcond[4]=(x8993+x8994+(((-1.0)*x8987*x8991))+(((-1.0)*x8987*x8992)));
evalcond[5]=((0.00373)+((x8988*x8995))+(((-1.0)*py*x8990))+((x8992*x8996))+((x8991*x8996))+((x8989*x8995))+(((-1.0)*px*x8987)));
evalcond[6]=((((-0.03431)*x8993))+((px*sj4))+(((-1.0)*py*x8987))+(((-0.03431)*x8994))+((x8992*x8995))+((x8991*x8995)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x8997=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x8997;
j8eval[1]=IKsign(x8997);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x8998=((1.0)*sj9);
IkReal x8999=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x8998))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x8999;
j8eval[1]=IKsign(x8999);
j8eval[2]=((IKabs(((((-1.0)*r21*x8998))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x9000=(cj4*r01);
IkReal x9001=(r21*x9000);
IkReal x9002=(r11*sj4);
IkReal x9003=(r21*x9002);
IkReal x9004=(cj4*r00);
IkReal x9005=cj9*cj9;
IkReal x9006=(r20*x9005);
IkReal x9007=(r10*sj4);
IkReal x9008=((1.0)*cj9*r21*sj9);
IkReal x9009=((1.0)*cj9*r20*sj9);
IkReal x9010=((1.0)*x9005);
IkReal x9011=(((x9004*x9006))+(((-1.0)*x9000*x9009))+(((-1.0)*x9001*x9010))+((r12*r22*sj4))+(((-1.0)*x9002*x9009))+(((-1.0)*x9004*x9008))+((cj4*r02*r22))+(((-1.0)*x9007*x9008))+(((-1.0)*x9003*x9010))+x9001+x9003+((x9006*x9007)));
j8eval[0]=x9011;
j8eval[1]=IKsign(x9011);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9012=(cj4*r01);
IkReal x9013=(r21*x9012);
IkReal x9014=(r11*sj4);
IkReal x9015=(r21*x9014);
IkReal x9016=(cj4*r00);
IkReal x9017=cj9*cj9;
IkReal x9018=(r20*x9017);
IkReal x9019=(r10*sj4);
IkReal x9020=((1.0)*cj9*r21*sj9);
IkReal x9021=((1.0)*cj9*r20*sj9);
IkReal x9022=((1.0)*x9017);
CheckValue<IkReal> x9023=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9013*x9022))+x9013+x9015+(((-1.0)*x9019*x9020))+(((-1.0)*x9012*x9021))+((x9016*x9018))+((r12*r22*sj4))+((x9018*x9019))+(((-1.0)*x9014*x9021))+((cj4*r02*r22))+(((-1.0)*x9016*x9020))+(((-1.0)*x9015*x9022)))),-1);
if(!x9023.valid){
continue;
}
CheckValue<IkReal> x9024 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x9024.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9023.value)))+(x9024.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9025=IKcos(j8);
IkReal x9026=IKsin(j8);
IkReal x9027=(r21*sj9);
IkReal x9028=(cj9*r20);
IkReal x9029=((1.0)*x9026);
IkReal x9030=((1.0)*x9025);
IkReal x9031=(cj4*x9025);
IkReal x9032=(r12*sj4);
IkReal x9033=(r01*sj9);
IkReal x9034=(cj4*x9026);
IkReal x9035=(r11*sj4*sj9);
IkReal x9036=(cj9*r00);
IkReal x9037=((1.0)*cj4*x9026);
IkReal x9038=(cj9*r10*sj4);
IkReal x9039=(r02*sj4);
IkReal x9040=(r11*sj9);
IkReal x9041=(cj9*r00*sj4);
IkReal x9042=(cj9*r10);
IkReal x9043=((1.0)*cj4*x9025);
IkReal x9044=(r01*sj4*sj9);
evalcond[0]=(((r22*x9025))+(((-1.0)*x9028*x9029))+((x9026*x9027)));
evalcond[1]=(((x9025*x9027))+(((-1.0)*x9028*x9030))+(((-1.0)*r22*x9029)));
evalcond[2]=(((r02*x9031))+(((-1.0)*x9029*x9038))+((x9025*x9032))+(((-1.0)*x9036*x9037))+((x9033*x9034))+((x9026*x9035)));
evalcond[3]=(((x9026*x9039))+(((-1.0)*r12*x9037))+(((-1.0)*x9030*x9044))+((x9031*x9040))+((x9025*x9041))+(((-1.0)*x9042*x9043)));
evalcond[4]=((-1.0)+(((-1.0)*x9030*x9039))+(((-1.0)*x9029*x9044))+(((-1.0)*x9037*x9042))+((x9034*x9040))+((r12*x9031))+((x9026*x9041)));
evalcond[5]=((1.0)+(((-1.0)*r02*x9037))+((x9031*x9033))+(((-1.0)*x9029*x9032))+((x9025*x9035))+(((-1.0)*x9036*x9043))+(((-1.0)*x9030*x9038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9045=((1.0)*sj9);
CheckValue<IkReal> x9046 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9045))+((cj9*r20)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x9046.valid){
continue;
}
CheckValue<IkReal> x9047=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x9045))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x9047.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9046.value)+(((1.5707963267949)*(x9047.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9048=IKcos(j8);
IkReal x9049=IKsin(j8);
IkReal x9050=(r21*sj9);
IkReal x9051=(cj9*r20);
IkReal x9052=((1.0)*x9049);
IkReal x9053=((1.0)*x9048);
IkReal x9054=(cj4*x9048);
IkReal x9055=(r12*sj4);
IkReal x9056=(r01*sj9);
IkReal x9057=(cj4*x9049);
IkReal x9058=(r11*sj4*sj9);
IkReal x9059=(cj9*r00);
IkReal x9060=((1.0)*cj4*x9049);
IkReal x9061=(cj9*r10*sj4);
IkReal x9062=(r02*sj4);
IkReal x9063=(r11*sj9);
IkReal x9064=(cj9*r00*sj4);
IkReal x9065=(cj9*r10);
IkReal x9066=((1.0)*cj4*x9048);
IkReal x9067=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x9051*x9052))+((x9049*x9050))+((r22*x9048)));
evalcond[1]=((((-1.0)*r22*x9052))+(((-1.0)*x9051*x9053))+((x9048*x9050)));
evalcond[2]=(((x9056*x9057))+((x9048*x9055))+(((-1.0)*x9059*x9060))+((r02*x9054))+((x9049*x9058))+(((-1.0)*x9052*x9061)));
evalcond[3]=(((x9049*x9062))+((x9048*x9064))+(((-1.0)*x9065*x9066))+(((-1.0)*x9053*x9067))+((x9054*x9063))+(((-1.0)*r12*x9060)));
evalcond[4]=((-1.0)+(((-1.0)*x9052*x9067))+((r12*x9054))+((x9049*x9064))+((x9057*x9063))+(((-1.0)*x9053*x9062))+(((-1.0)*x9060*x9065)));
evalcond[5]=((1.0)+(((-1.0)*r02*x9060))+(((-1.0)*x9059*x9066))+(((-1.0)*x9053*x9061))+(((-1.0)*x9052*x9055))+((x9048*x9058))+((x9054*x9056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9068=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x9068.valid){
continue;
}
CheckValue<IkReal> x9069 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x9069.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9068.value)))+(x9069.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9070=IKcos(j8);
IkReal x9071=IKsin(j8);
IkReal x9072=(r21*sj9);
IkReal x9073=(cj9*r20);
IkReal x9074=((1.0)*x9071);
IkReal x9075=((1.0)*x9070);
IkReal x9076=(cj4*x9070);
IkReal x9077=(r12*sj4);
IkReal x9078=(r01*sj9);
IkReal x9079=(cj4*x9071);
IkReal x9080=(r11*sj4*sj9);
IkReal x9081=(cj9*r00);
IkReal x9082=((1.0)*cj4*x9071);
IkReal x9083=(cj9*r10*sj4);
IkReal x9084=(r02*sj4);
IkReal x9085=(r11*sj9);
IkReal x9086=(cj9*r00*sj4);
IkReal x9087=(cj9*r10);
IkReal x9088=((1.0)*cj4*x9070);
IkReal x9089=(r01*sj4*sj9);
evalcond[0]=(((r22*x9070))+((x9071*x9072))+(((-1.0)*x9073*x9074)));
evalcond[1]=((((-1.0)*r22*x9074))+((x9070*x9072))+(((-1.0)*x9073*x9075)));
evalcond[2]=((((-1.0)*x9074*x9083))+(((-1.0)*x9081*x9082))+((x9071*x9080))+((x9070*x9077))+((r02*x9076))+((x9078*x9079)));
evalcond[3]=(((x9071*x9084))+((x9070*x9086))+(((-1.0)*x9075*x9089))+((x9076*x9085))+(((-1.0)*x9087*x9088))+(((-1.0)*r12*x9082)));
evalcond[4]=((-1.0)+(((-1.0)*x9082*x9087))+(((-1.0)*x9074*x9089))+((x9071*x9086))+((r12*x9076))+(((-1.0)*x9075*x9084))+((x9079*x9085)));
evalcond[5]=((1.0)+(((-1.0)*x9074*x9077))+(((-1.0)*x9081*x9088))+((x9076*x9078))+(((-1.0)*r02*x9082))+((x9070*x9080))+(((-1.0)*x9075*x9083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9090=(cj9*r21);
IkReal x9091=(r20*sj9);
IkReal x9092=((1.0)*cj4);
IkReal x9093=(cj9*r01);
IkReal x9094=(r00*sj9);
IkReal x9095=((1.0)*sj4);
IkReal x9096=(cj9*r11);
IkReal x9097=(r10*sj9);
IkReal x9098=(sj4*x9093);
IkReal x9099=(sj4*x9094);
IkReal x9100=((0.03431)*cj4);
IkReal x9101=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x9091))+(((-1.0)*x9090)));
evalcond[2]=((((-1.0)*x9095*x9097))+(((-1.0)*x9095*x9096))+(((-1.0)*x9092*x9093))+(((-1.0)*x9092*x9094)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x9091))+(((0.03431)*x9090)));
evalcond[4]=(x9099+x9098+(((-1.0)*x9092*x9096))+(((-1.0)*x9092*x9097)));
evalcond[5]=((0.00301)+((x9093*x9100))+((x9094*x9100))+((x9097*x9101))+(((-1.0)*py*x9095))+(((-1.0)*px*x9092))+((x9096*x9101)));
evalcond[6]=(((px*sj4))+((x9096*x9100))+(((-0.03431)*x9099))+(((-0.03431)*x9098))+(((-1.0)*py*x9092))+((x9097*x9100)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x9102=((1.0)*cj9);
IkReal x9103=((((-1.0)*cj4*r11*x9102))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x9103;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x9102)))))+(IKabs(r22)));
j8eval[2]=IKsign(x9103);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x9104=((1.0)*cj9);
IkReal x9105=((1.0)*sj9);
IkReal x9106=((((-1.0)*r11*sj4*x9104))+(((-1.0)*r10*sj4*x9105))+(((-1.0)*cj4*r01*x9104))+(((-1.0)*cj4*r00*x9105)));
j8eval[0]=x9106;
j8eval[1]=((IKabs(((((-1.0)*r21*x9105))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x9106);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x9107=((1.0)*r21);
IkReal x9108=(cj4*r01);
IkReal x9109=((1.0)*r22);
IkReal x9110=(r11*sj4);
IkReal x9111=(cj4*r00);
IkReal x9112=(cj9*r21*sj9);
IkReal x9113=(cj9*r20*sj9);
IkReal x9114=(r10*sj4);
IkReal x9115=cj9*cj9;
IkReal x9116=(r21*x9115);
IkReal x9117=((1.0)*r20*x9115);
IkReal x9118=((((-1.0)*x9111*x9117))+((x9108*x9116))+(((-1.0)*x9114*x9117))+(((-1.0)*cj4*r02*x9109))+(((-1.0)*x9107*x9108))+(((-1.0)*x9107*x9110))+((x9110*x9113))+((x9110*x9116))+((x9111*x9112))+(((-1.0)*r12*sj4*x9109))+((x9108*x9113))+((x9112*x9114)));
j8eval[0]=x9118;
j8eval[1]=((IKabs(((((-1.0)*sj9*x9107))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x9118);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9119=((1.0)*r21);
IkReal x9120=(cj4*r01);
IkReal x9121=((1.0)*r22);
IkReal x9122=(r11*sj4);
IkReal x9123=(cj4*r00);
IkReal x9124=(cj9*r21*sj9);
IkReal x9125=(cj9*r20*sj9);
IkReal x9126=(r10*sj4);
IkReal x9127=cj9*cj9;
IkReal x9128=(r21*x9127);
IkReal x9129=((1.0)*r20*x9127);
CheckValue<IkReal> x9130=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9119*x9122))+((x9120*x9128))+(((-1.0)*r12*sj4*x9121))+(((-1.0)*x9123*x9129))+(((-1.0)*x9126*x9129))+((x9120*x9125))+((x9124*x9126))+((x9123*x9124))+((x9122*x9128))+(((-1.0)*cj4*r02*x9121))+((x9122*x9125))+(((-1.0)*x9119*x9120)))),-1);
if(!x9130.valid){
continue;
}
CheckValue<IkReal> x9131 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x9119))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x9131.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9130.value)))+(x9131.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9132=IKcos(j8);
IkReal x9133=IKsin(j8);
IkReal x9134=(r21*sj9);
IkReal x9135=(cj9*r20);
IkReal x9136=((1.0)*x9133);
IkReal x9137=((1.0)*x9132);
IkReal x9138=(cj4*x9132);
IkReal x9139=(r12*sj4);
IkReal x9140=(r01*sj9);
IkReal x9141=(cj4*x9133);
IkReal x9142=(r11*sj4*sj9);
IkReal x9143=(cj9*r00);
IkReal x9144=((1.0)*cj4*x9133);
IkReal x9145=(cj9*r10*sj4);
IkReal x9146=(r02*sj4);
IkReal x9147=(r11*sj9);
IkReal x9148=(cj9*r00*sj4);
IkReal x9149=(cj9*r10);
IkReal x9150=((1.0)*cj4*x9132);
IkReal x9151=(r01*sj4*sj9);
evalcond[0]=(((r22*x9132))+(((-1.0)*x9135*x9136))+((x9133*x9134)));
evalcond[1]=(((x9132*x9134))+(((-1.0)*r22*x9136))+(((-1.0)*x9135*x9137)));
evalcond[2]=(((x9133*x9142))+((x9132*x9139))+(((-1.0)*x9143*x9144))+(((-1.0)*x9136*x9145))+((r02*x9138))+((x9140*x9141)));
evalcond[3]=((((-1.0)*r12*x9144))+((x9133*x9146))+((x9132*x9148))+(((-1.0)*x9137*x9151))+((x9138*x9147))+(((-1.0)*x9149*x9150)));
evalcond[4]=((1.0)+(((-1.0)*x9144*x9149))+((x9141*x9147))+((x9133*x9148))+(((-1.0)*x9136*x9151))+((r12*x9138))+(((-1.0)*x9137*x9146)));
evalcond[5]=((-1.0)+(((-1.0)*x9136*x9139))+(((-1.0)*x9143*x9150))+((x9138*x9140))+((x9132*x9142))+(((-1.0)*x9137*x9145))+(((-1.0)*r02*x9144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9152=((1.0)*sj9);
IkReal x9153=((1.0)*cj9);
CheckValue<IkReal> x9154 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x9152))),IKFAST_ATAN2_MAGTHRESH);
if(!x9154.valid){
continue;
}
CheckValue<IkReal> x9155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x9153))+(((-1.0)*cj4*r01*x9153))+(((-1.0)*cj4*r00*x9152))+(((-1.0)*r10*sj4*x9152)))),-1);
if(!x9155.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9154.value)+(((1.5707963267949)*(x9155.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9156=IKcos(j8);
IkReal x9157=IKsin(j8);
IkReal x9158=(r21*sj9);
IkReal x9159=(cj9*r20);
IkReal x9160=((1.0)*x9157);
IkReal x9161=((1.0)*x9156);
IkReal x9162=(cj4*x9156);
IkReal x9163=(r12*sj4);
IkReal x9164=(r01*sj9);
IkReal x9165=(cj4*x9157);
IkReal x9166=(r11*sj4*sj9);
IkReal x9167=(cj9*r00);
IkReal x9168=((1.0)*cj4*x9157);
IkReal x9169=(cj9*r10*sj4);
IkReal x9170=(r02*sj4);
IkReal x9171=(r11*sj9);
IkReal x9172=(cj9*r00*sj4);
IkReal x9173=(cj9*r10);
IkReal x9174=((1.0)*cj4*x9156);
IkReal x9175=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x9159*x9160))+((r22*x9156))+((x9157*x9158)));
evalcond[1]=((((-1.0)*x9159*x9161))+((x9156*x9158))+(((-1.0)*r22*x9160)));
evalcond[2]=((((-1.0)*x9167*x9168))+((x9157*x9166))+((r02*x9162))+((x9164*x9165))+(((-1.0)*x9160*x9169))+((x9156*x9163)));
evalcond[3]=(((x9162*x9171))+(((-1.0)*r12*x9168))+((x9156*x9172))+(((-1.0)*x9173*x9174))+((x9157*x9170))+(((-1.0)*x9161*x9175)));
evalcond[4]=((1.0)+((x9165*x9171))+(((-1.0)*x9160*x9175))+(((-1.0)*x9161*x9170))+(((-1.0)*x9168*x9173))+((x9157*x9172))+((r12*x9162)));
evalcond[5]=((-1.0)+((x9162*x9164))+((x9156*x9166))+(((-1.0)*x9161*x9169))+(((-1.0)*r02*x9168))+(((-1.0)*x9167*x9174))+(((-1.0)*x9160*x9163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9176=((1.0)*cj9);
CheckValue<IkReal> x9177 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x9176)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x9177.valid){
continue;
}
CheckValue<IkReal> x9178=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x9176))+((r00*sj4*sj9)))),-1);
if(!x9178.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9177.value)+(((1.5707963267949)*(x9178.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9179=IKcos(j8);
IkReal x9180=IKsin(j8);
IkReal x9181=(r21*sj9);
IkReal x9182=(cj9*r20);
IkReal x9183=((1.0)*x9180);
IkReal x9184=((1.0)*x9179);
IkReal x9185=(cj4*x9179);
IkReal x9186=(r12*sj4);
IkReal x9187=(r01*sj9);
IkReal x9188=(cj4*x9180);
IkReal x9189=(r11*sj4*sj9);
IkReal x9190=(cj9*r00);
IkReal x9191=((1.0)*cj4*x9180);
IkReal x9192=(cj9*r10*sj4);
IkReal x9193=(r02*sj4);
IkReal x9194=(r11*sj9);
IkReal x9195=(cj9*r00*sj4);
IkReal x9196=(cj9*r10);
IkReal x9197=((1.0)*cj4*x9179);
IkReal x9198=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x9182*x9183))+((x9180*x9181))+((r22*x9179)));
evalcond[1]=((((-1.0)*r22*x9183))+((x9179*x9181))+(((-1.0)*x9182*x9184)));
evalcond[2]=((((-1.0)*x9190*x9191))+(((-1.0)*x9183*x9192))+((x9187*x9188))+((r02*x9185))+((x9180*x9189))+((x9179*x9186)));
evalcond[3]=(((x9179*x9195))+(((-1.0)*x9184*x9198))+(((-1.0)*r12*x9191))+((x9180*x9193))+(((-1.0)*x9196*x9197))+((x9185*x9194)));
evalcond[4]=((1.0)+(((-1.0)*x9183*x9198))+(((-1.0)*x9184*x9193))+(((-1.0)*x9191*x9196))+((x9180*x9195))+((r12*x9185))+((x9188*x9194)));
evalcond[5]=((-1.0)+(((-1.0)*x9184*x9192))+(((-1.0)*x9190*x9197))+(((-1.0)*x9183*x9186))+(((-1.0)*r02*x9191))+((x9185*x9187))+((x9179*x9189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9199=(r01*((cj4*r21)));
IkReal x9200=(r11*((r21*sj4)));
IkReal x9201=cj9*cj9;
IkReal x9202=(r20*x9201);
IkReal x9203=((1.0)*cj9*sj9);
IkReal x9204=((1.0)*cj9*r20*sj9);
IkReal x9205=((1.0)*x9201);
CheckValue<IkReal> x9206=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r00*r21*x9203))+((cj4*r00*x9202))+(((-1.0)*cj4*r01*x9204))+((r10*sj4*x9202))+(((-1.0)*r10*r21*sj4*x9203))+x9200+x9199+(((-1.0)*r11*sj4*x9204))+((r12*r22*sj4))+((cj4*r02*r22))+(((-1.0)*x9199*x9205))+(((-1.0)*x9200*x9205)))),-1);
if(!x9206.valid){
continue;
}
CheckValue<IkReal> x9207 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*((cj9*r20))))+(((-1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x9207.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9206.value)))+(x9207.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9208=IKcos(j8);
IkReal x9209=IKsin(j8);
IkReal x9210=(r21*sj9);
IkReal x9211=(cj9*r20);
IkReal x9212=((1.0)*x9209);
IkReal x9213=((1.0)*x9208);
IkReal x9214=((-1.0)*(((1.0)*sj6)));
IkReal x9215=(cj4*x9208);
IkReal x9216=(r12*sj4);
IkReal x9217=(r01*sj9);
IkReal x9218=(cj4*x9209);
IkReal x9219=(r11*sj4*sj9);
IkReal x9220=(cj9*r00);
IkReal x9221=((1.0)*cj4*x9209);
IkReal x9222=(cj9*r10*sj4);
IkReal x9223=((1.0)*cj4*x9208);
IkReal x9224=(r02*sj4);
IkReal x9225=(r11*sj9);
IkReal x9226=(cj9*r00*sj4);
IkReal x9227=(cj9*r10);
IkReal x9228=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x9211*x9212))+((x9209*x9210))+((r22*x9208)));
evalcond[1]=(((x9208*x9210))+(((-1.0)*x9211*x9213))+(((-1.0)*r22*x9212)));
evalcond[2]=((((-1.0)*x9212*x9222))+((x9208*x9216))+(((-1.0)*x9220*x9221))+((x9217*x9218))+x9214+((x9209*x9219))+((r02*x9215)));
evalcond[3]=(((x9215*x9217))+(((-1.0)*x9212*x9216))+(((-1.0)*r02*x9221))+(((-1.0)*x9220*x9223))+cj6+((x9208*x9219))+(((-1.0)*x9213*x9222)));
evalcond[4]=((((-1.0)*x9212*x9228))+((x9218*x9225))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x9213*x9224))+(((-1.0)*x9221*x9227))+((x9209*x9226))+((r12*x9215)));
evalcond[5]=(((x9208*x9226))+((x9215*x9225))+(((-1.0)*r12*x9221))+(((-1.0)*x9223*x9227))+x9214+((x9209*x9224))+(((-1.0)*x9213*x9228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9229=((1.0)*cj4);
CheckValue<IkReal> x9230=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*r11*x9229))+((cj9*r01*sj4))+(((-1.0)*r10*sj9*x9229))+((r00*sj4*sj9)))),-1);
if(!x9230.valid){
continue;
}
CheckValue<IkReal> x9231 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9231.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9230.value)))+(x9231.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9232=IKcos(j8);
IkReal x9233=IKsin(j8);
IkReal x9234=(r21*sj9);
IkReal x9235=(cj9*r20);
IkReal x9236=((1.0)*x9233);
IkReal x9237=((1.0)*x9232);
IkReal x9238=((-1.0)*(((1.0)*sj6)));
IkReal x9239=(cj4*x9232);
IkReal x9240=(r12*sj4);
IkReal x9241=(r01*sj9);
IkReal x9242=(cj4*x9233);
IkReal x9243=(r11*sj4*sj9);
IkReal x9244=(cj9*r00);
IkReal x9245=((1.0)*cj4*x9233);
IkReal x9246=(cj9*r10*sj4);
IkReal x9247=((1.0)*cj4*x9232);
IkReal x9248=(r02*sj4);
IkReal x9249=(r11*sj9);
IkReal x9250=(cj9*r00*sj4);
IkReal x9251=(cj9*r10);
IkReal x9252=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x9235*x9236))+((x9233*x9234))+((r22*x9232)));
evalcond[1]=((((-1.0)*x9235*x9237))+(((-1.0)*r22*x9236))+((x9232*x9234)));
evalcond[2]=((((-1.0)*x9244*x9245))+(((-1.0)*x9236*x9246))+((x9241*x9242))+((x9233*x9243))+x9238+((x9232*x9240))+((r02*x9239)));
evalcond[3]=((((-1.0)*r02*x9245))+((x9232*x9243))+(((-1.0)*x9236*x9240))+cj6+(((-1.0)*x9237*x9246))+(((-1.0)*x9244*x9247))+((x9239*x9241)));
evalcond[4]=(((r12*x9239))+((x9242*x9249))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x9245*x9251))+((x9233*x9250))+(((-1.0)*x9236*x9252))+(((-1.0)*x9237*x9248)));
evalcond[5]=((((-1.0)*r12*x9245))+((x9239*x9249))+(((-1.0)*x9237*x9252))+(((-1.0)*x9247*x9251))+x9238+((x9233*x9248))+((x9232*x9250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9253 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x9253.valid){
continue;
}
CheckValue<IkReal> x9254=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x9254.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9253.value)+(((1.5707963267949)*(x9254.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9255=IKcos(j8);
IkReal x9256=IKsin(j8);
IkReal x9257=(r21*sj9);
IkReal x9258=(cj9*r20);
IkReal x9259=((1.0)*x9256);
IkReal x9260=((1.0)*x9255);
IkReal x9261=((-1.0)*(((1.0)*sj6)));
IkReal x9262=(cj4*x9255);
IkReal x9263=(r12*sj4);
IkReal x9264=(r01*sj9);
IkReal x9265=(cj4*x9256);
IkReal x9266=(r11*sj4*sj9);
IkReal x9267=(cj9*r00);
IkReal x9268=((1.0)*cj4*x9256);
IkReal x9269=(cj9*r10*sj4);
IkReal x9270=((1.0)*cj4*x9255);
IkReal x9271=(r02*sj4);
IkReal x9272=(r11*sj9);
IkReal x9273=(cj9*r00*sj4);
IkReal x9274=(cj9*r10);
IkReal x9275=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x9258*x9259))+((r22*x9255))+((x9256*x9257)));
evalcond[1]=((((-1.0)*r22*x9259))+(((-1.0)*x9258*x9260))+((x9255*x9257)));
evalcond[2]=(((x9255*x9263))+x9261+((x9256*x9266))+((x9264*x9265))+(((-1.0)*x9259*x9269))+((r02*x9262))+(((-1.0)*x9267*x9268)));
evalcond[3]=((((-1.0)*x9267*x9270))+(((-1.0)*x9259*x9263))+cj6+(((-1.0)*r02*x9268))+(((-1.0)*x9260*x9269))+((x9262*x9264))+((x9255*x9266)));
evalcond[4]=((((-1.0)*x9259*x9275))+(((-1.0)*x9260*x9271))+(((-1.0)*(1.0)*cj6))+((r12*x9262))+((x9265*x9272))+(((-1.0)*x9268*x9274))+((x9256*x9273)));
evalcond[5]=(((x9255*x9273))+((x9256*x9271))+x9261+(((-1.0)*x9270*x9274))+(((-1.0)*r12*x9268))+((x9262*x9272))+(((-1.0)*x9260*x9275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9276=(cj9*r21);
IkReal x9277=(r20*sj9);
IkReal x9278=((1.0)*cj4);
IkReal x9279=(cj9*r01);
IkReal x9280=(r00*sj9);
IkReal x9281=((1.0)*sj4);
IkReal x9282=(cj9*r11);
IkReal x9283=(r10*sj9);
IkReal x9284=(sj4*x9279);
IkReal x9285=(sj4*x9280);
IkReal x9286=((0.03431)*cj4);
IkReal x9287=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*x9276))+(((-1.0)*x9277)));
evalcond[2]=((((-1.0)*x9281*x9283))+(((-1.0)*x9281*x9282))+(((-1.0)*x9278*x9280))+(((-1.0)*x9278*x9279)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x9276))+(((0.03431)*x9277)));
evalcond[4]=(x9284+x9285+(((-1.0)*x9278*x9283))+(((-1.0)*x9278*x9282)));
evalcond[5]=((0.00337)+((x9279*x9286))+(((-1.0)*px*x9278))+(((0.00036)*cj6))+((x9283*x9287))+((x9282*x9287))+(((-1.0)*py*x9281))+((x9280*x9286)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x9285))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x9284))+(((-1.0)*py*x9278))+((x9282*x9286))+((x9283*x9286)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x9288=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x9288;
j8eval[1]=IKsign(x9288);
j8eval[2]=((IKabs((((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x9289=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x9289;
j8eval[1]=IKsign(x9289);
j8eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x9290=((1.0)*cj4);
IkReal x9291=((((-1.0)*cj9*r11*x9290))+(((-1.0)*r10*sj9*x9290))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x9291;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x9291);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x9292=(cj9*r21);
IkReal x9293=(r20*sj9);
IkReal x9294=((1.0)*cj4);
IkReal x9295=(cj9*r01);
IkReal x9296=(r00*sj9);
IkReal x9297=((1.0)*sj4);
IkReal x9298=(cj9*r11);
IkReal x9299=(r10*sj9);
IkReal x9300=(sj4*x9295);
IkReal x9301=(sj4*x9296);
IkReal x9302=((0.03431)*cj4);
IkReal x9303=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x9293))+(((-1.0)*x9292)));
evalcond[2]=((((-1.0)*x9297*x9299))+(((-1.0)*x9297*x9298))+(((-1.0)*x9294*x9296))+(((-1.0)*x9294*x9295)));
evalcond[3]=((-0.16132)+(((0.03431)*x9293))+(((0.03431)*x9292))+(((-1.0)*(1.0)*pz)));
evalcond[4]=((((-1.0)*x9294*x9298))+(((-1.0)*x9294*x9299))+x9301+x9300);
evalcond[5]=((0.00373)+(((-1.0)*px*x9294))+((x9299*x9303))+((x9298*x9303))+((x9295*x9302))+(((-1.0)*py*x9297))+((x9296*x9302)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x9301))+(((-0.03431)*x9300))+((x9298*x9302))+((x9299*x9302))+(((-1.0)*py*x9294)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x9304=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x9304;
j8eval[1]=IKsign(x9304);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x9305=((1.0)*cj9);
IkReal x9306=((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9))+(((-1.0)*cj4*r11*x9305)));
j8eval[0]=x9306;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x9305)))))+(IKabs(r22)));
j8eval[2]=IKsign(x9306);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x9307=((1.0)*r21);
IkReal x9308=(cj4*r01);
IkReal x9309=((1.0)*r22);
IkReal x9310=(r11*sj4);
IkReal x9311=(cj4*r00);
IkReal x9312=(cj9*r21*sj9);
IkReal x9313=(cj9*r20*sj9);
IkReal x9314=(r10*sj4);
IkReal x9315=cj9*cj9;
IkReal x9316=(r21*x9315);
IkReal x9317=((1.0)*r20*x9315);
IkReal x9318=((((-1.0)*x9314*x9317))+((x9310*x9316))+(((-1.0)*cj4*r02*x9309))+(((-1.0)*x9311*x9317))+(((-1.0)*x9307*x9310))+((x9310*x9313))+(((-1.0)*x9307*x9308))+(((-1.0)*r12*sj4*x9309))+((x9311*x9312))+((x9308*x9313))+((x9312*x9314))+((x9308*x9316)));
j8eval[0]=x9318;
j8eval[1]=((IKabs(((((-1.0)*sj9*x9307))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x9318);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9319=((1.0)*r21);
IkReal x9320=(cj4*r01);
IkReal x9321=((1.0)*r22);
IkReal x9322=(r11*sj4);
IkReal x9323=(cj4*r00);
IkReal x9324=(cj9*r21*sj9);
IkReal x9325=(cj9*r20*sj9);
IkReal x9326=(r10*sj4);
IkReal x9327=cj9*cj9;
IkReal x9328=(r21*x9327);
IkReal x9329=((1.0)*r20*x9327);
CheckValue<IkReal> x9330=IKPowWithIntegerCheck(IKsign((((x9322*x9325))+((x9324*x9326))+((x9322*x9328))+(((-1.0)*x9319*x9320))+((x9323*x9324))+(((-1.0)*x9323*x9329))+(((-1.0)*r12*sj4*x9321))+(((-1.0)*cj4*r02*x9321))+((x9320*x9325))+(((-1.0)*x9319*x9322))+(((-1.0)*x9326*x9329))+((x9320*x9328)))),-1);
if(!x9330.valid){
continue;
}
CheckValue<IkReal> x9331 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*sj9*x9319))),IKFAST_ATAN2_MAGTHRESH);
if(!x9331.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9330.value)))+(x9331.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9332=IKcos(j8);
IkReal x9333=IKsin(j8);
IkReal x9334=(r21*sj9);
IkReal x9335=(cj9*r20);
IkReal x9336=((1.0)*x9333);
IkReal x9337=((1.0)*x9332);
IkReal x9338=(cj4*x9332);
IkReal x9339=(r12*sj4);
IkReal x9340=(r01*sj9);
IkReal x9341=(cj4*x9333);
IkReal x9342=(r11*sj4*sj9);
IkReal x9343=(cj9*r00);
IkReal x9344=((1.0)*cj4*x9333);
IkReal x9345=(cj9*r10*sj4);
IkReal x9346=(r02*sj4);
IkReal x9347=(r11*sj9);
IkReal x9348=(cj9*r00*sj4);
IkReal x9349=(cj9*r10);
IkReal x9350=((1.0)*cj4*x9332);
IkReal x9351=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x9335*x9336))+((r22*x9332))+((x9333*x9334)));
evalcond[1]=((((-1.0)*x9335*x9337))+(((-1.0)*r22*x9336))+((x9332*x9334)));
evalcond[2]=(((x9340*x9341))+(((-1.0)*x9343*x9344))+(((-1.0)*x9336*x9345))+((r02*x9338))+((x9332*x9339))+((x9333*x9342)));
evalcond[3]=(((x9333*x9346))+(((-1.0)*x9349*x9350))+(((-1.0)*r12*x9344))+((x9332*x9348))+((x9338*x9347))+(((-1.0)*x9337*x9351)));
evalcond[4]=((-1.0)+((r12*x9338))+(((-1.0)*x9336*x9351))+((x9341*x9347))+(((-1.0)*x9344*x9349))+(((-1.0)*x9337*x9346))+((x9333*x9348)));
evalcond[5]=((-1.0)+(((-1.0)*x9343*x9350))+(((-1.0)*r02*x9344))+(((-1.0)*x9336*x9339))+((x9332*x9342))+((x9338*x9340))+(((-1.0)*x9337*x9345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9352=((1.0)*cj9);
CheckValue<IkReal> x9353 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x9352)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x9353.valid){
continue;
}
CheckValue<IkReal> x9354=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r11*x9352))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x9354.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9353.value)+(((1.5707963267949)*(x9354.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9355=IKcos(j8);
IkReal x9356=IKsin(j8);
IkReal x9357=(r21*sj9);
IkReal x9358=(cj9*r20);
IkReal x9359=((1.0)*x9356);
IkReal x9360=((1.0)*x9355);
IkReal x9361=(cj4*x9355);
IkReal x9362=(r12*sj4);
IkReal x9363=(r01*sj9);
IkReal x9364=(cj4*x9356);
IkReal x9365=(r11*sj4*sj9);
IkReal x9366=(cj9*r00);
IkReal x9367=((1.0)*cj4*x9356);
IkReal x9368=(cj9*r10*sj4);
IkReal x9369=(r02*sj4);
IkReal x9370=(r11*sj9);
IkReal x9371=(cj9*r00*sj4);
IkReal x9372=(cj9*r10);
IkReal x9373=((1.0)*cj4*x9355);
IkReal x9374=(r01*sj4*sj9);
evalcond[0]=(((x9356*x9357))+((r22*x9355))+(((-1.0)*x9358*x9359)));
evalcond[1]=(((x9355*x9357))+(((-1.0)*r22*x9359))+(((-1.0)*x9358*x9360)));
evalcond[2]=(((r02*x9361))+(((-1.0)*x9359*x9368))+((x9356*x9365))+((x9355*x9362))+(((-1.0)*x9366*x9367))+((x9363*x9364)));
evalcond[3]=(((x9355*x9371))+((x9356*x9369))+(((-1.0)*x9372*x9373))+(((-1.0)*r12*x9367))+((x9361*x9370))+(((-1.0)*x9360*x9374)));
evalcond[4]=((-1.0)+(((-1.0)*x9360*x9369))+((x9356*x9371))+(((-1.0)*x9359*x9374))+((r12*x9361))+(((-1.0)*x9367*x9372))+((x9364*x9370)));
evalcond[5]=((-1.0)+((x9361*x9363))+(((-1.0)*r02*x9367))+(((-1.0)*x9366*x9373))+((x9355*x9365))+(((-1.0)*x9359*x9362))+(((-1.0)*x9360*x9368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9375=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x9375.valid){
continue;
}
CheckValue<IkReal> x9376 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x9376.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9375.value)))+(x9376.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9377=IKcos(j8);
IkReal x9378=IKsin(j8);
IkReal x9379=(r21*sj9);
IkReal x9380=(cj9*r20);
IkReal x9381=((1.0)*x9378);
IkReal x9382=((1.0)*x9377);
IkReal x9383=(cj4*x9377);
IkReal x9384=(r12*sj4);
IkReal x9385=(r01*sj9);
IkReal x9386=(cj4*x9378);
IkReal x9387=(r11*sj4*sj9);
IkReal x9388=(cj9*r00);
IkReal x9389=((1.0)*cj4*x9378);
IkReal x9390=(cj9*r10*sj4);
IkReal x9391=(r02*sj4);
IkReal x9392=(r11*sj9);
IkReal x9393=(cj9*r00*sj4);
IkReal x9394=(cj9*r10);
IkReal x9395=((1.0)*cj4*x9377);
IkReal x9396=(r01*sj4*sj9);
evalcond[0]=(((x9378*x9379))+(((-1.0)*x9380*x9381))+((r22*x9377)));
evalcond[1]=(((x9377*x9379))+(((-1.0)*r22*x9381))+(((-1.0)*x9380*x9382)));
evalcond[2]=(((x9377*x9384))+(((-1.0)*x9388*x9389))+((x9385*x9386))+((r02*x9383))+((x9378*x9387))+(((-1.0)*x9381*x9390)));
evalcond[3]=(((x9383*x9392))+((x9377*x9393))+((x9378*x9391))+(((-1.0)*x9382*x9396))+(((-1.0)*x9394*x9395))+(((-1.0)*r12*x9389)));
evalcond[4]=((-1.0)+(((-1.0)*x9381*x9396))+((x9386*x9392))+((x9378*x9393))+(((-1.0)*x9389*x9394))+(((-1.0)*x9382*x9391))+((r12*x9383)));
evalcond[5]=((-1.0)+(((-1.0)*x9388*x9395))+(((-1.0)*x9382*x9390))+((x9383*x9385))+((x9377*x9387))+(((-1.0)*r02*x9389))+(((-1.0)*x9381*x9384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9397=(cj9*r21);
IkReal x9398=(r20*sj9);
IkReal x9399=((1.0)*cj4);
IkReal x9400=(cj9*r01);
IkReal x9401=(r00*sj9);
IkReal x9402=((1.0)*sj4);
IkReal x9403=(cj9*r11);
IkReal x9404=(r10*sj9);
IkReal x9405=(sj4*x9400);
IkReal x9406=(sj4*x9401);
IkReal x9407=((0.03431)*cj4);
IkReal x9408=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x9398))+(((-1.0)*x9397)));
evalcond[2]=((((-1.0)*x9402*x9404))+(((-1.0)*x9399*x9401))+(((-1.0)*x9399*x9400))+(((-1.0)*x9402*x9403)));
evalcond[3]=((-0.16132)+(((0.03431)*x9397))+(((-1.0)*(1.0)*pz))+(((0.03431)*x9398)));
evalcond[4]=((((-1.0)*x9399*x9404))+x9406+x9405+(((-1.0)*x9399*x9403)));
evalcond[5]=((0.00301)+(((-1.0)*py*x9402))+(((-1.0)*px*x9399))+((x9404*x9408))+((x9403*x9408))+((x9401*x9407))+((x9400*x9407)));
evalcond[6]=((((-0.03431)*x9405))+((px*sj4))+(((-0.03431)*x9406))+((x9403*x9407))+(((-1.0)*py*x9399))+((x9404*x9407)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x9409=((1.0)*cj9);
IkReal x9410=((1.0)*sj9);
IkReal x9411=((((-1.0)*cj4*r00*x9410))+(((-1.0)*cj4*r01*x9409))+(((-1.0)*r11*sj4*x9409))+(((-1.0)*r10*sj4*x9410)));
j8eval[0]=x9411;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*r21*x9410)))))+(IKabs(r22)));
j8eval[2]=IKsign(x9411);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x9412=((1.0)*sj9);
IkReal x9413=((((-1.0)*cj4*r10*x9412))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x9413;
j8eval[1]=IKsign(x9413);
j8eval[2]=((IKabs(((((-1.0)*r21*x9412))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x9414=(cj4*r01);
IkReal x9415=(r21*x9414);
IkReal x9416=(r11*sj4);
IkReal x9417=(r21*x9416);
IkReal x9418=(cj4*r00);
IkReal x9419=cj9*cj9;
IkReal x9420=(r20*x9419);
IkReal x9421=(r10*sj4);
IkReal x9422=((1.0)*cj9*r21*sj9);
IkReal x9423=((1.0)*cj9*r20*sj9);
IkReal x9424=((1.0)*x9419);
IkReal x9425=((((-1.0)*x9421*x9422))+(((-1.0)*x9414*x9423))+((x9420*x9421))+(((-1.0)*x9415*x9424))+((x9418*x9420))+((r12*r22*sj4))+(((-1.0)*x9418*x9422))+(((-1.0)*x9417*x9424))+((cj4*r02*r22))+x9417+x9415+(((-1.0)*x9416*x9423)));
j8eval[0]=x9425;
j8eval[1]=IKsign(x9425);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9426=(cj4*r01);
IkReal x9427=(r21*x9426);
IkReal x9428=(r11*sj4);
IkReal x9429=(r21*x9428);
IkReal x9430=(cj4*r00);
IkReal x9431=cj9*cj9;
IkReal x9432=(r20*x9431);
IkReal x9433=(r10*sj4);
IkReal x9434=((1.0)*cj9*r21*sj9);
IkReal x9435=((1.0)*cj9*r20*sj9);
IkReal x9436=((1.0)*x9431);
CheckValue<IkReal> x9437=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9430*x9434))+((x9432*x9433))+(((-1.0)*x9429*x9436))+((r12*r22*sj4))+((x9430*x9432))+((cj4*r02*r22))+x9427+x9429+(((-1.0)*x9433*x9434))+(((-1.0)*x9428*x9435))+(((-1.0)*x9426*x9435))+(((-1.0)*x9427*x9436)))),-1);
if(!x9437.valid){
continue;
}
CheckValue<IkReal> x9438 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x9438.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9437.value)))+(x9438.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9439=IKcos(j8);
IkReal x9440=IKsin(j8);
IkReal x9441=(r21*sj9);
IkReal x9442=(cj9*r20);
IkReal x9443=((1.0)*x9440);
IkReal x9444=((1.0)*x9439);
IkReal x9445=(cj4*x9439);
IkReal x9446=(r12*sj4);
IkReal x9447=(r01*sj9);
IkReal x9448=(cj4*x9440);
IkReal x9449=(r11*sj4*sj9);
IkReal x9450=(cj9*r00);
IkReal x9451=((1.0)*cj4*x9440);
IkReal x9452=(cj9*r10*sj4);
IkReal x9453=(r02*sj4);
IkReal x9454=(r11*sj9);
IkReal x9455=(cj9*r00*sj4);
IkReal x9456=(cj9*r10);
IkReal x9457=((1.0)*cj4*x9439);
IkReal x9458=(r01*sj4*sj9);
evalcond[0]=(((x9440*x9441))+(((-1.0)*x9442*x9443))+((r22*x9439)));
evalcond[1]=((((-1.0)*r22*x9443))+(((-1.0)*x9442*x9444))+((x9439*x9441)));
evalcond[2]=(((x9439*x9446))+((x9440*x9449))+(((-1.0)*x9450*x9451))+((r02*x9445))+((x9447*x9448))+(((-1.0)*x9443*x9452)));
evalcond[3]=(((x9439*x9455))+(((-1.0)*r12*x9451))+(((-1.0)*x9456*x9457))+((x9440*x9453))+((x9445*x9454))+(((-1.0)*x9444*x9458)));
evalcond[4]=((1.0)+(((-1.0)*x9443*x9458))+(((-1.0)*x9444*x9453))+(((-1.0)*x9451*x9456))+((x9448*x9454))+((x9440*x9455))+((r12*x9445)));
evalcond[5]=((1.0)+(((-1.0)*x9443*x9446))+((x9445*x9447))+(((-1.0)*r02*x9451))+(((-1.0)*x9450*x9457))+(((-1.0)*x9444*x9452))+((x9439*x9449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9459=((1.0)*sj9);
CheckValue<IkReal> x9460 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*r21*x9459)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x9460.valid){
continue;
}
CheckValue<IkReal> x9461=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x9459))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x9461.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9460.value)+(((1.5707963267949)*(x9461.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9462=IKcos(j8);
IkReal x9463=IKsin(j8);
IkReal x9464=(r21*sj9);
IkReal x9465=(cj9*r20);
IkReal x9466=((1.0)*x9463);
IkReal x9467=((1.0)*x9462);
IkReal x9468=(cj4*x9462);
IkReal x9469=(r12*sj4);
IkReal x9470=(r01*sj9);
IkReal x9471=(cj4*x9463);
IkReal x9472=(r11*sj4*sj9);
IkReal x9473=(cj9*r00);
IkReal x9474=((1.0)*cj4*x9463);
IkReal x9475=(cj9*r10*sj4);
IkReal x9476=(r02*sj4);
IkReal x9477=(r11*sj9);
IkReal x9478=(cj9*r00*sj4);
IkReal x9479=(cj9*r10);
IkReal x9480=((1.0)*cj4*x9462);
IkReal x9481=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x9465*x9466))+((x9463*x9464))+((r22*x9462)));
evalcond[1]=(((x9462*x9464))+(((-1.0)*x9465*x9467))+(((-1.0)*r22*x9466)));
evalcond[2]=(((r02*x9468))+(((-1.0)*x9466*x9475))+((x9470*x9471))+((x9462*x9469))+(((-1.0)*x9473*x9474))+((x9463*x9472)));
evalcond[3]=(((x9463*x9476))+(((-1.0)*r12*x9474))+((x9468*x9477))+(((-1.0)*x9467*x9481))+((x9462*x9478))+(((-1.0)*x9479*x9480)));
evalcond[4]=((1.0)+(((-1.0)*x9466*x9481))+((r12*x9468))+((x9463*x9478))+(((-1.0)*x9467*x9476))+(((-1.0)*x9474*x9479))+((x9471*x9477)));
evalcond[5]=((1.0)+((x9468*x9470))+((x9462*x9472))+(((-1.0)*x9466*x9469))+(((-1.0)*r02*x9474))+(((-1.0)*x9473*x9480))+(((-1.0)*x9467*x9475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9482=((1.0)*sj9);
IkReal x9483=((1.0)*cj9);
CheckValue<IkReal> x9484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x9483))+(((-1.0)*cj4*r01*x9483))+(((-1.0)*cj4*r00*x9482))+(((-1.0)*r10*sj4*x9482)))),-1);
if(!x9484.valid){
continue;
}
CheckValue<IkReal> x9485 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x9482))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x9485.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9484.value)))+(x9485.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9486=IKcos(j8);
IkReal x9487=IKsin(j8);
IkReal x9488=(r21*sj9);
IkReal x9489=(cj9*r20);
IkReal x9490=((1.0)*x9487);
IkReal x9491=((1.0)*x9486);
IkReal x9492=(cj4*x9486);
IkReal x9493=(r12*sj4);
IkReal x9494=(r01*sj9);
IkReal x9495=(cj4*x9487);
IkReal x9496=(r11*sj4*sj9);
IkReal x9497=(cj9*r00);
IkReal x9498=((1.0)*cj4*x9487);
IkReal x9499=(cj9*r10*sj4);
IkReal x9500=(r02*sj4);
IkReal x9501=(r11*sj9);
IkReal x9502=(cj9*r00*sj4);
IkReal x9503=(cj9*r10);
IkReal x9504=((1.0)*cj4*x9486);
IkReal x9505=(r01*sj4*sj9);
evalcond[0]=(((x9487*x9488))+(((-1.0)*x9489*x9490))+((r22*x9486)));
evalcond[1]=(((x9486*x9488))+(((-1.0)*r22*x9490))+(((-1.0)*x9489*x9491)));
evalcond[2]=(((x9494*x9495))+((x9486*x9493))+(((-1.0)*x9497*x9498))+((r02*x9492))+(((-1.0)*x9490*x9499))+((x9487*x9496)));
evalcond[3]=(((x9492*x9501))+((x9486*x9502))+((x9487*x9500))+(((-1.0)*r12*x9498))+(((-1.0)*x9503*x9504))+(((-1.0)*x9491*x9505)));
evalcond[4]=((1.0)+((x9487*x9502))+(((-1.0)*x9498*x9503))+((r12*x9492))+(((-1.0)*x9490*x9505))+((x9495*x9501))+(((-1.0)*x9491*x9500)));
evalcond[5]=((1.0)+((x9492*x9494))+(((-1.0)*r02*x9498))+(((-1.0)*x9491*x9499))+(((-1.0)*x9497*x9504))+(((-1.0)*x9490*x9493))+((x9486*x9496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9506=(cj9*r21);
IkReal x9507=(r20*sj9);
IkReal x9508=((1.0)*cj4);
IkReal x9509=(cj9*r01);
IkReal x9510=(r00*sj9);
IkReal x9511=((1.0)*sj4);
IkReal x9512=(cj9*r11);
IkReal x9513=(r10*sj9);
IkReal x9514=(sj4*x9509);
IkReal x9515=(sj4*x9510);
IkReal x9516=((0.03431)*cj4);
IkReal x9517=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x9506))+(((-1.0)*x9507)));
evalcond[2]=((((-1.0)*x9511*x9512))+(((-1.0)*x9511*x9513))+(((-1.0)*x9508*x9509))+(((-1.0)*x9508*x9510)));
evalcond[3]=((-0.16132)+(((0.03431)*x9506))+(((-1.0)*(1.0)*pz))+(((0.03431)*x9507)));
evalcond[4]=((((-1.0)*x9508*x9513))+(((-1.0)*x9508*x9512))+x9515+x9514);
evalcond[5]=((0.00337)+(((-1.0)*py*x9511))+(((-1.0)*px*x9508))+((x9510*x9516))+((x9513*x9517))+((x9509*x9516))+((x9512*x9517)));
evalcond[6]=((-0.00036)+(((-0.03431)*x9515))+((x9513*x9516))+((px*sj4))+(((-1.0)*py*x9508))+((x9512*x9516))+(((-0.03431)*x9514)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x9518=((1.0)*sj9);
IkReal x9519=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x9518))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x9519;
j8eval[1]=((IKabs(((((-1.0)*r21*x9518))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x9519);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x9520=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x9520;
j8eval[1]=IKsign(x9520);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x9521=(cj4*r11);
IkReal x9522=((1.0)*r21);
IkReal x9523=(r01*sj4);
IkReal x9524=(cj9*r20*sj9);
IkReal x9525=(cj4*r10);
IkReal x9526=cj9*cj9;
IkReal x9527=(r20*x9526);
IkReal x9528=(((cj9*r00*r21*sj4*sj9))+(((-1.0)*r00*sj4*x9527))+((cj4*r12*r22))+((r21*x9523*x9526))+(((-1.0)*r02*r22*sj4))+(((-1.0)*x9522*x9523))+((x9523*x9524))+((r21*x9521))+((x9525*x9527))+(((-1.0)*cj4*r11*x9524))+(((-1.0)*cj9*r21*sj9*x9525))+(((-1.0)*r21*x9521*x9526)));
j8eval[0]=x9528;
j8eval[1]=IKsign(x9528);
j8eval[2]=((IKabs(((((-1.0)*sj9*x9522))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9529=((1.0)*r21);
IkReal x9530=(cj4*r11);
IkReal x9531=(r01*sj4);
IkReal x9532=(cj9*r20*sj9);
IkReal x9533=(cj4*r10);
IkReal x9534=cj9*cj9;
IkReal x9535=(r20*x9534);
CheckValue<IkReal> x9536 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x9529))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x9536.valid){
continue;
}
CheckValue<IkReal> x9537=IKPowWithIntegerCheck(IKsign((((r21*x9530))+((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*r21*x9530*x9534))+(((-1.0)*cj9*r21*sj9*x9533))+((x9533*x9535))+(((-1.0)*r02*r22*sj4))+((r21*x9531*x9534))+(((-1.0)*cj4*r11*x9532))+(((-1.0)*r00*sj4*x9535))+(((-1.0)*x9529*x9531))+((x9531*x9532)))),-1);
if(!x9537.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9536.value)+(((1.5707963267949)*(x9537.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9538=IKcos(j8);
IkReal x9539=IKsin(j8);
IkReal x9540=(r21*sj9);
IkReal x9541=(cj9*r20);
IkReal x9542=((1.0)*x9539);
IkReal x9543=((1.0)*x9538);
IkReal x9544=(cj4*x9538);
IkReal x9545=(r12*sj4);
IkReal x9546=(r01*sj9);
IkReal x9547=(cj4*x9539);
IkReal x9548=(r11*sj4*sj9);
IkReal x9549=(cj9*r00);
IkReal x9550=((1.0)*cj4*x9539);
IkReal x9551=(cj9*r10*sj4);
IkReal x9552=(r02*sj4);
IkReal x9553=(r11*sj9);
IkReal x9554=(cj9*r00*sj4);
IkReal x9555=(cj9*r10);
IkReal x9556=(r01*sj4*sj9);
IkReal x9557=((1.0)*cj4*x9538);
evalcond[0]=(((x9539*x9540))+((r22*x9538))+(((-1.0)*x9541*x9542)));
evalcond[1]=((((-1.0)*r22*x9542))+(((-1.0)*x9541*x9543))+((x9538*x9540)));
evalcond[2]=((-1.0)+((r02*x9544))+(((-1.0)*x9549*x9550))+(((-1.0)*x9542*x9551))+((x9539*x9548))+((x9538*x9545))+((x9546*x9547)));
evalcond[3]=((((-1.0)*x9543*x9552))+((r12*x9544))+(((-1.0)*x9542*x9556))+((x9539*x9554))+(((-1.0)*x9550*x9555))+((x9547*x9553)));
evalcond[4]=((((-1.0)*r02*x9550))+(((-1.0)*x9543*x9551))+(((-1.0)*x9542*x9545))+((x9538*x9548))+(((-1.0)*x9549*x9557))+((x9544*x9546)));
evalcond[5]=((1.0)+(((-1.0)*r12*x9550))+((x9538*x9554))+(((-1.0)*x9543*x9556))+((x9544*x9553))+(((-1.0)*x9555*x9557))+((x9539*x9552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9558 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x9558.valid){
continue;
}
CheckValue<IkReal> x9559=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x9559.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9558.value)+(((1.5707963267949)*(x9559.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9560=IKcos(j8);
IkReal x9561=IKsin(j8);
IkReal x9562=(r21*sj9);
IkReal x9563=(cj9*r20);
IkReal x9564=((1.0)*x9561);
IkReal x9565=((1.0)*x9560);
IkReal x9566=(cj4*x9560);
IkReal x9567=(r12*sj4);
IkReal x9568=(r01*sj9);
IkReal x9569=(cj4*x9561);
IkReal x9570=(r11*sj4*sj9);
IkReal x9571=(cj9*r00);
IkReal x9572=((1.0)*cj4*x9561);
IkReal x9573=(cj9*r10*sj4);
IkReal x9574=(r02*sj4);
IkReal x9575=(r11*sj9);
IkReal x9576=(cj9*r00*sj4);
IkReal x9577=(cj9*r10);
IkReal x9578=(r01*sj4*sj9);
IkReal x9579=((1.0)*cj4*x9560);
evalcond[0]=((((-1.0)*x9563*x9564))+((x9561*x9562))+((r22*x9560)));
evalcond[1]=((((-1.0)*x9563*x9565))+(((-1.0)*r22*x9564))+((x9560*x9562)));
evalcond[2]=((-1.0)+((r02*x9566))+((x9560*x9567))+((x9568*x9569))+(((-1.0)*x9564*x9573))+(((-1.0)*x9571*x9572))+((x9561*x9570)));
evalcond[3]=(((x9569*x9575))+(((-1.0)*x9564*x9578))+((x9561*x9576))+(((-1.0)*x9572*x9577))+(((-1.0)*x9565*x9574))+((r12*x9566)));
evalcond[4]=((((-1.0)*x9565*x9573))+((x9560*x9570))+(((-1.0)*x9564*x9567))+((x9566*x9568))+(((-1.0)*x9571*x9579))+(((-1.0)*r02*x9572)));
evalcond[5]=((1.0)+((x9561*x9574))+(((-1.0)*r12*x9572))+(((-1.0)*x9565*x9578))+(((-1.0)*x9577*x9579))+((x9560*x9576))+((x9566*x9575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9580=((1.0)*sj9);
CheckValue<IkReal> x9581 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x9580))),IKFAST_ATAN2_MAGTHRESH);
if(!x9581.valid){
continue;
}
CheckValue<IkReal> x9582=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x9580))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x9582.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9581.value)+(((1.5707963267949)*(x9582.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9583=IKcos(j8);
IkReal x9584=IKsin(j8);
IkReal x9585=(r21*sj9);
IkReal x9586=(cj9*r20);
IkReal x9587=((1.0)*x9584);
IkReal x9588=((1.0)*x9583);
IkReal x9589=(cj4*x9583);
IkReal x9590=(r12*sj4);
IkReal x9591=(r01*sj9);
IkReal x9592=(cj4*x9584);
IkReal x9593=(r11*sj4*sj9);
IkReal x9594=(cj9*r00);
IkReal x9595=((1.0)*cj4*x9584);
IkReal x9596=(cj9*r10*sj4);
IkReal x9597=(r02*sj4);
IkReal x9598=(r11*sj9);
IkReal x9599=(cj9*r00*sj4);
IkReal x9600=(cj9*r10);
IkReal x9601=(r01*sj4*sj9);
IkReal x9602=((1.0)*cj4*x9583);
evalcond[0]=((((-1.0)*x9586*x9587))+((x9584*x9585))+((r22*x9583)));
evalcond[1]=(((x9583*x9585))+(((-1.0)*x9586*x9588))+(((-1.0)*r22*x9587)));
evalcond[2]=((-1.0)+((x9584*x9593))+(((-1.0)*x9594*x9595))+((x9591*x9592))+((r02*x9589))+((x9583*x9590))+(((-1.0)*x9587*x9596)));
evalcond[3]=(((r12*x9589))+(((-1.0)*x9588*x9597))+((x9584*x9599))+((x9592*x9598))+(((-1.0)*x9587*x9601))+(((-1.0)*x9595*x9600)));
evalcond[4]=((((-1.0)*x9594*x9602))+((x9583*x9593))+(((-1.0)*r02*x9595))+(((-1.0)*x9588*x9596))+((x9589*x9591))+(((-1.0)*x9587*x9590)));
evalcond[5]=((1.0)+(((-1.0)*x9600*x9602))+((x9589*x9598))+(((-1.0)*r12*x9595))+((x9583*x9599))+((x9584*x9597))+(((-1.0)*x9588*x9601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9603=(cj9*r21);
IkReal x9604=(r20*sj9);
IkReal x9605=((1.0)*cj4);
IkReal x9606=(cj9*r01);
IkReal x9607=(r00*sj9);
IkReal x9608=((1.0)*sj4);
IkReal x9609=(cj9*r11);
IkReal x9610=(r10*sj9);
IkReal x9611=(sj4*x9606);
IkReal x9612=(sj4*x9607);
IkReal x9613=((0.03431)*cj4);
IkReal x9614=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x9603))+(((-1.0)*x9604)));
evalcond[2]=((((-1.0)*x9608*x9609))+(((-1.0)*x9605*x9607))+(((-1.0)*x9608*x9610))+(((-1.0)*x9605*x9606)));
evalcond[3]=((-0.16132)+(((0.03431)*x9603))+(((-1.0)*(1.0)*pz))+(((0.03431)*x9604)));
evalcond[4]=((((-1.0)*x9605*x9610))+x9612+x9611+(((-1.0)*x9605*x9609)));
evalcond[5]=((0.00337)+((x9609*x9614))+(((-1.0)*py*x9608))+((x9610*x9614))+((x9607*x9613))+(((-1.0)*px*x9605))+((x9606*x9613)));
evalcond[6]=((0.00036)+((px*sj4))+((x9609*x9613))+(((-0.03431)*x9611))+(((-0.03431)*x9612))+((x9610*x9613))+(((-1.0)*py*x9605)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x9615=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x9615;
j8eval[1]=IKsign(x9615);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x9616=((1.0)*sj9);
IkReal x9617=((((-1.0)*r00*sj4*x9616))+((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)));
j8eval[0]=x9617;
j8eval[1]=((IKabs(((((-1.0)*r21*x9616))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x9617);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x9618=(r01*sj4);
IkReal x9619=((1.0)*r21);
IkReal x9620=(cj4*r11);
IkReal x9621=(cj9*r20*sj9);
IkReal x9622=cj9*cj9;
IkReal x9623=(r00*sj4);
IkReal x9624=(r20*x9622);
IkReal x9625=((((-1.0)*x9619*x9620))+(((-1.0)*r21*x9618*x9622))+((r21*x9620*x9622))+(((-1.0)*cj4*r10*x9624))+(((-1.0)*r01*sj4*x9621))+((x9623*x9624))+((x9620*x9621))+((r02*r22*sj4))+((r21*x9618))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*cj9*r21*sj9*x9623)));
j8eval[0]=x9625;
j8eval[1]=IKsign(x9625);
j8eval[2]=((IKabs(((((-1.0)*sj9*x9619))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9626=((1.0)*r21);
IkReal x9627=(r01*sj4);
IkReal x9628=(cj4*r11);
IkReal x9629=(cj9*r20*sj9);
IkReal x9630=cj9*cj9;
IkReal x9631=(r00*sj4);
IkReal x9632=(r20*x9630);
CheckValue<IkReal> x9633 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x9626))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x9633.valid){
continue;
}
CheckValue<IkReal> x9634=IKPowWithIntegerCheck(IKsign((((r21*x9627))+(((-1.0)*cj9*r21*sj9*x9631))+((r21*x9628*x9630))+((x9628*x9629))+(((-1.0)*r21*x9627*x9630))+(((-1.0)*r01*sj4*x9629))+(((-1.0)*cj4*r10*x9632))+((x9631*x9632))+(((-1.0)*x9626*x9628))+((r02*r22*sj4))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9)))),-1);
if(!x9634.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9633.value)+(((1.5707963267949)*(x9634.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9635=IKcos(j8);
IkReal x9636=IKsin(j8);
IkReal x9637=(r21*sj9);
IkReal x9638=(cj9*r20);
IkReal x9639=((1.0)*x9636);
IkReal x9640=((1.0)*x9635);
IkReal x9641=(cj4*x9635);
IkReal x9642=(r12*sj4);
IkReal x9643=(r01*sj9);
IkReal x9644=(cj4*x9636);
IkReal x9645=(r11*sj4*sj9);
IkReal x9646=(cj9*r00);
IkReal x9647=((1.0)*cj4*x9636);
IkReal x9648=(cj9*r10*sj4);
IkReal x9649=(r02*sj4);
IkReal x9650=(r11*sj9);
IkReal x9651=(cj9*r00*sj4);
IkReal x9652=(cj9*r10);
IkReal x9653=(r01*sj4*sj9);
IkReal x9654=((1.0)*cj4*x9635);
evalcond[0]=(((x9636*x9637))+((r22*x9635))+(((-1.0)*x9638*x9639)));
evalcond[1]=(((x9635*x9637))+(((-1.0)*r22*x9639))+(((-1.0)*x9638*x9640)));
evalcond[2]=((1.0)+(((-1.0)*x9646*x9647))+((x9635*x9642))+((x9636*x9645))+(((-1.0)*x9639*x9648))+((x9643*x9644))+((r02*x9641)));
evalcond[3]=((((-1.0)*x9640*x9649))+(((-1.0)*x9639*x9653))+((r12*x9641))+(((-1.0)*x9647*x9652))+((x9644*x9650))+((x9636*x9651)));
evalcond[4]=((((-1.0)*x9640*x9648))+(((-1.0)*x9646*x9654))+(((-1.0)*r02*x9647))+((x9635*x9645))+(((-1.0)*x9639*x9642))+((x9641*x9643)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x9647))+((x9636*x9649))+(((-1.0)*x9652*x9654))+(((-1.0)*x9640*x9653))+((x9635*x9651))+((x9641*x9650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9655=((1.0)*sj9);
CheckValue<IkReal> x9656 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x9655))),IKFAST_ATAN2_MAGTHRESH);
if(!x9656.valid){
continue;
}
CheckValue<IkReal> x9657=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+(((-1.0)*r00*sj4*x9655))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x9657.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9656.value)+(((1.5707963267949)*(x9657.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9658=IKcos(j8);
IkReal x9659=IKsin(j8);
IkReal x9660=(r21*sj9);
IkReal x9661=(cj9*r20);
IkReal x9662=((1.0)*x9659);
IkReal x9663=((1.0)*x9658);
IkReal x9664=(cj4*x9658);
IkReal x9665=(r12*sj4);
IkReal x9666=(r01*sj9);
IkReal x9667=(cj4*x9659);
IkReal x9668=(r11*sj4*sj9);
IkReal x9669=(cj9*r00);
IkReal x9670=((1.0)*cj4*x9659);
IkReal x9671=(cj9*r10*sj4);
IkReal x9672=(r02*sj4);
IkReal x9673=(r11*sj9);
IkReal x9674=(cj9*r00*sj4);
IkReal x9675=(cj9*r10);
IkReal x9676=(r01*sj4*sj9);
IkReal x9677=((1.0)*cj4*x9658);
evalcond[0]=((((-1.0)*x9661*x9662))+((r22*x9658))+((x9659*x9660)));
evalcond[1]=((((-1.0)*r22*x9662))+(((-1.0)*x9661*x9663))+((x9658*x9660)));
evalcond[2]=((1.0)+((x9666*x9667))+(((-1.0)*x9669*x9670))+(((-1.0)*x9662*x9671))+((x9659*x9668))+((x9658*x9665))+((r02*x9664)));
evalcond[3]=((((-1.0)*x9663*x9672))+((x9667*x9673))+(((-1.0)*x9670*x9675))+((x9659*x9674))+(((-1.0)*x9662*x9676))+((r12*x9664)));
evalcond[4]=((((-1.0)*x9663*x9671))+(((-1.0)*x9669*x9677))+(((-1.0)*x9662*x9665))+(((-1.0)*r02*x9670))+((x9658*x9668))+((x9664*x9666)));
evalcond[5]=((-1.0)+((x9658*x9674))+(((-1.0)*r12*x9670))+(((-1.0)*x9663*x9676))+((x9664*x9673))+(((-1.0)*x9675*x9677))+((x9659*x9672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9678 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x9678.valid){
continue;
}
CheckValue<IkReal> x9679=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x9679.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9678.value)+(((1.5707963267949)*(x9679.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9680=IKcos(j8);
IkReal x9681=IKsin(j8);
IkReal x9682=(r21*sj9);
IkReal x9683=(cj9*r20);
IkReal x9684=((1.0)*x9681);
IkReal x9685=((1.0)*x9680);
IkReal x9686=(cj4*x9680);
IkReal x9687=(r12*sj4);
IkReal x9688=(r01*sj9);
IkReal x9689=(cj4*x9681);
IkReal x9690=(r11*sj4*sj9);
IkReal x9691=(cj9*r00);
IkReal x9692=((1.0)*cj4*x9681);
IkReal x9693=(cj9*r10*sj4);
IkReal x9694=(r02*sj4);
IkReal x9695=(r11*sj9);
IkReal x9696=(cj9*r00*sj4);
IkReal x9697=(cj9*r10);
IkReal x9698=(r01*sj4*sj9);
IkReal x9699=((1.0)*cj4*x9680);
evalcond[0]=(((x9681*x9682))+(((-1.0)*x9683*x9684))+((r22*x9680)));
evalcond[1]=((((-1.0)*x9683*x9685))+((x9680*x9682))+(((-1.0)*r22*x9684)));
evalcond[2]=((1.0)+((x9688*x9689))+(((-1.0)*x9684*x9693))+((x9681*x9690))+((x9680*x9687))+(((-1.0)*x9691*x9692))+((r02*x9686)));
evalcond[3]=(((x9681*x9696))+((x9689*x9695))+(((-1.0)*x9692*x9697))+(((-1.0)*x9685*x9694))+((r12*x9686))+(((-1.0)*x9684*x9698)));
evalcond[4]=((((-1.0)*x9685*x9693))+(((-1.0)*x9684*x9687))+((x9686*x9688))+((x9680*x9690))+(((-1.0)*r02*x9692))+(((-1.0)*x9691*x9699)));
evalcond[5]=((-1.0)+(((-1.0)*x9685*x9698))+((x9686*x9695))+(((-1.0)*r12*x9692))+(((-1.0)*x9697*x9699))+((x9680*x9696))+((x9681*x9694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9700=((1.0)*cj4);
CheckValue<IkReal> x9701=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*r11*x9700))+(((-1.0)*r10*sj9*x9700))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x9701.valid){
continue;
}
CheckValue<IkReal> x9702 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9702.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9701.value)))+(x9702.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9703=IKcos(j8);
IkReal x9704=IKsin(j8);
IkReal x9705=(r21*sj9);
IkReal x9706=(cj9*r20);
IkReal x9707=((1.0)*x9704);
IkReal x9708=((1.0)*x9703);
IkReal x9709=(r02*sj4);
IkReal x9710=((1.0)*cj4*x9704);
IkReal x9711=(r11*sj9);
IkReal x9712=(cj4*x9703);
IkReal x9713=(cj9*r00*sj4);
IkReal x9714=(cj9*r10);
IkReal x9715=((1.0)*cj4*x9703);
IkReal x9716=(r01*sj4*sj9);
IkReal x9717=(r12*sj4);
IkReal x9718=(r01*sj9);
IkReal x9719=(cj4*x9704);
IkReal x9720=(r11*sj4*sj9);
IkReal x9721=(cj9*r00);
IkReal x9722=(cj9*r10*sj4);
IkReal x9723=((-1.0)*(((1.0)*cj6)));
evalcond[0]=(((r22*x9703))+((x9704*x9705))+(((-1.0)*x9706*x9707)));
evalcond[1]=((((-1.0)*x9706*x9708))+((x9703*x9705))+(((-1.0)*r22*x9707)));
evalcond[2]=((((-1.0)*r12*x9710))+((x9711*x9712))+sj6+(((-1.0)*x9708*x9716))+((x9703*x9713))+(((-1.0)*x9714*x9715))+((x9704*x9709)));
evalcond[3]=(((x9718*x9719))+(((-1.0)*x9707*x9722))+((r02*x9712))+(((-1.0)*x9710*x9721))+((x9703*x9717))+((x9704*x9720))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=((((-1.0)*x9710*x9714))+((r12*x9712))+(((-1.0)*x9707*x9716))+(((-1.0)*x9708*x9709))+((x9711*x9719))+((x9704*x9713))+x9723);
evalcond[5]=((((-1.0)*x9707*x9717))+(((-1.0)*r02*x9710))+((x9703*x9720))+(((-1.0)*x9715*x9721))+((x9712*x9718))+(((-1.0)*x9708*x9722))+x9723);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9724=((1.0)*sj6);
CheckValue<IkReal> x9725=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x9725.valid){
continue;
}
CheckValue<IkReal> x9726 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj9*x9724))+((cj9*r20*sj6)))),((-1.0)*r22*x9724),IKFAST_ATAN2_MAGTHRESH);
if(!x9726.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9725.value)))+(x9726.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9727=IKcos(j8);
IkReal x9728=IKsin(j8);
IkReal x9729=(r21*sj9);
IkReal x9730=(cj9*r20);
IkReal x9731=((1.0)*x9728);
IkReal x9732=((1.0)*x9727);
IkReal x9733=(r02*sj4);
IkReal x9734=((1.0)*cj4*x9728);
IkReal x9735=(r11*sj9);
IkReal x9736=(cj4*x9727);
IkReal x9737=(cj9*r00*sj4);
IkReal x9738=(cj9*r10);
IkReal x9739=((1.0)*cj4*x9727);
IkReal x9740=(r01*sj4*sj9);
IkReal x9741=(r12*sj4);
IkReal x9742=(r01*sj9);
IkReal x9743=(cj4*x9728);
IkReal x9744=(r11*sj4*sj9);
IkReal x9745=(cj9*r00);
IkReal x9746=(cj9*r10*sj4);
IkReal x9747=((-1.0)*(((1.0)*cj6)));
evalcond[0]=(((x9728*x9729))+(((-1.0)*x9730*x9731))+((r22*x9727)));
evalcond[1]=((((-1.0)*r22*x9731))+((x9727*x9729))+(((-1.0)*x9730*x9732)));
evalcond[2]=((((-1.0)*r12*x9734))+(((-1.0)*x9732*x9740))+(((-1.0)*x9738*x9739))+((x9727*x9737))+((x9728*x9733))+sj6+((x9735*x9736)));
evalcond[3]=((((-1.0)*x9731*x9746))+((x9727*x9741))+((r02*x9736))+((x9728*x9744))+(((-1.0)*x9734*x9745))+((x9742*x9743))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=(x9747+(((-1.0)*x9732*x9733))+((r12*x9736))+((x9735*x9743))+((x9728*x9737))+(((-1.0)*x9734*x9738))+(((-1.0)*x9731*x9740)));
evalcond[5]=((((-1.0)*x9739*x9745))+x9747+(((-1.0)*x9731*x9741))+((x9736*x9742))+((x9727*x9744))+(((-1.0)*x9732*x9746))+(((-1.0)*r02*x9734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9748 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x9748.valid){
continue;
}
CheckValue<IkReal> x9749=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x9749.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9748.value)+(((1.5707963267949)*(x9749.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9750=IKcos(j8);
IkReal x9751=IKsin(j8);
IkReal x9752=(r21*sj9);
IkReal x9753=(cj9*r20);
IkReal x9754=((1.0)*x9751);
IkReal x9755=((1.0)*x9750);
IkReal x9756=(r02*sj4);
IkReal x9757=((1.0)*cj4*x9751);
IkReal x9758=(r11*sj9);
IkReal x9759=(cj4*x9750);
IkReal x9760=(cj9*r00*sj4);
IkReal x9761=(cj9*r10);
IkReal x9762=((1.0)*cj4*x9750);
IkReal x9763=(r01*sj4*sj9);
IkReal x9764=(r12*sj4);
IkReal x9765=(r01*sj9);
IkReal x9766=(cj4*x9751);
IkReal x9767=(r11*sj4*sj9);
IkReal x9768=(cj9*r00);
IkReal x9769=(cj9*r10*sj4);
IkReal x9770=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x9753*x9754))+((x9751*x9752))+((r22*x9750)));
evalcond[1]=((((-1.0)*r22*x9754))+((x9750*x9752))+(((-1.0)*x9753*x9755)));
evalcond[2]=((((-1.0)*r12*x9757))+sj6+((x9758*x9759))+(((-1.0)*x9761*x9762))+((x9750*x9760))+(((-1.0)*x9755*x9763))+((x9751*x9756)));
evalcond[3]=(((r02*x9759))+(((-1.0)*x9754*x9769))+((x9751*x9767))+((x9750*x9764))+((x9765*x9766))+(((-1.0)*(1.0)*sj6))+(((-1.0)*x9757*x9768)));
evalcond[4]=((((-1.0)*x9754*x9763))+x9770+(((-1.0)*x9757*x9761))+(((-1.0)*x9755*x9756))+((x9751*x9760))+((x9758*x9766))+((r12*x9759)));
evalcond[5]=((((-1.0)*r02*x9757))+((x9759*x9765))+(((-1.0)*x9755*x9769))+x9770+(((-1.0)*x9762*x9768))+(((-1.0)*x9754*x9764))+((x9750*x9767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9771=r21*r21;
IkReal x9772=(cj9*r20);
IkReal x9773=cj9*cj9;
IkReal x9774=(sj5*sj7);
IkReal x9775=(cj5*cj6);
IkReal x9776=(r21*sj9);
IkReal x9777=((1.0)*cj9*r20);
IkReal x9778=(cj5*cj7*sj6);
CheckValue<IkReal> x9779 = IKatan2WithCheck(IkReal((((x9775*x9776))+(((-1.0)*r22*x9778))+((r22*x9774))+(((-1.0)*x9775*x9777)))),((((-1.0)*sj5*sj7*x9776))+((r22*x9775))+((x9772*x9774))+((x9776*x9778))+(((-1.0)*x9777*x9778))),IKFAST_ATAN2_MAGTHRESH);
if(!x9779.valid){
continue;
}
CheckValue<IkReal> x9780=IKPowWithIntegerCheck(IKsign(((((-2.0)*r21*sj9*x9772))+(((-1.0)*x9771*x9773))+x9771+(r22*r22)+((x9773*(r20*r20))))),-1);
if(!x9780.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9779.value)+(((1.5707963267949)*(x9780.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9781=IKcos(j8);
IkReal x9782=IKsin(j8);
IkReal x9783=(r21*sj9);
IkReal x9784=(cj9*r20);
IkReal x9785=((1.0)*x9782);
IkReal x9786=((1.0)*sj6);
IkReal x9787=((1.0)*x9781);
IkReal x9788=(cj4*x9781);
IkReal x9789=(r12*sj4);
IkReal x9790=(r01*sj9);
IkReal x9791=(cj4*x9782);
IkReal x9792=(r11*sj4*sj9);
IkReal x9793=(cj9*r00);
IkReal x9794=((1.0)*cj4*x9782);
IkReal x9795=(cj9*r10*sj4);
IkReal x9796=(r02*sj4);
IkReal x9797=(r11*sj9);
IkReal x9798=(cj9*r00*sj4);
IkReal x9799=(cj9*r10);
IkReal x9800=(r01*sj4*sj9);
IkReal x9801=((1.0)*cj4*x9781);
evalcond[0]=(((r22*x9781))+(((-1.0)*(1.0)*cj5*cj6))+(((-1.0)*x9784*x9785))+((x9782*x9783)));
evalcond[1]=(((x9781*x9783))+(((-1.0)*cj5*cj7*x9786))+(((-1.0)*x9784*x9787))+((sj5*sj7))+(((-1.0)*r22*x9785)));
evalcond[2]=(((x9781*x9789))+(((-1.0)*x9793*x9794))+((r02*x9788))+((x9782*x9792))+(((-1.0)*x9785*x9795))+((x9790*x9791))+(((-1.0)*x9786)));
evalcond[3]=(((r12*x9788))+(((-1.0)*x9794*x9799))+(((-1.0)*x9787*x9796))+((cj6*sj5))+((x9791*x9797))+(((-1.0)*x9785*x9800))+((x9782*x9798)));
evalcond[4]=(((x9781*x9792))+(((-1.0)*x9787*x9795))+(((-1.0)*x9793*x9801))+(((-1.0)*r02*x9794))+((cj6*cj7))+((x9788*x9790))+(((-1.0)*x9785*x9789)));
evalcond[5]=(((cj5*sj7))+(((-1.0)*x9799*x9801))+((x9782*x9796))+((x9781*x9798))+((cj7*sj5*sj6))+((x9788*x9797))+(((-1.0)*x9787*x9800))+(((-1.0)*r12*x9794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9802=(cj6*sj5);
IkReal x9803=(cj4*cj5*cj6);
IkReal x9804=(cj5*cj6);
CheckValue<IkReal> x9805 = IKatan2WithCheck(IkReal((((r12*x9803))+(((-1.0)*r02*sj4*x9804))+((r22*x9802)))),(((cj9*r20*x9802))+(((-1.0)*cj9*r00*sj4*x9804))+(((-1.0)*r21*sj9*x9802))+((cj9*r10*x9803))+((r01*sj4*sj9*x9804))+(((-1.0)*cj4*r11*sj9*x9804))),IKFAST_ATAN2_MAGTHRESH);
if(!x9805.valid){
continue;
}
CheckValue<IkReal> x9806=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r00*sj9))+(((-1.0)*r10*sj4*sj9))+(((-1.0)*cj9*r11*sj4))+(((-1.0)*cj4*cj9*r01)))),-1);
if(!x9806.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9805.value)+(((1.5707963267949)*(x9806.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9807=IKcos(j8);
IkReal x9808=IKsin(j8);
IkReal x9809=(r21*sj9);
IkReal x9810=(cj9*r20);
IkReal x9811=((1.0)*x9808);
IkReal x9812=((1.0)*sj6);
IkReal x9813=((1.0)*x9807);
IkReal x9814=(cj4*x9807);
IkReal x9815=(r12*sj4);
IkReal x9816=(r01*sj9);
IkReal x9817=(cj4*x9808);
IkReal x9818=(r11*sj4*sj9);
IkReal x9819=(cj9*r00);
IkReal x9820=((1.0)*cj4*x9808);
IkReal x9821=(cj9*r10*sj4);
IkReal x9822=(r02*sj4);
IkReal x9823=(r11*sj9);
IkReal x9824=(cj9*r00*sj4);
IkReal x9825=(cj9*r10);
IkReal x9826=(r01*sj4*sj9);
IkReal x9827=((1.0)*cj4*x9807);
evalcond[0]=(((x9808*x9809))+(((-1.0)*(1.0)*cj5*cj6))+(((-1.0)*x9810*x9811))+((r22*x9807)));
evalcond[1]=((((-1.0)*r22*x9811))+((sj5*sj7))+(((-1.0)*x9810*x9813))+(((-1.0)*cj5*cj7*x9812))+((x9807*x9809)));
evalcond[2]=(((x9816*x9817))+(((-1.0)*x9819*x9820))+((x9808*x9818))+(((-1.0)*x9812))+((x9807*x9815))+((r02*x9814))+(((-1.0)*x9811*x9821)));
evalcond[3]=((((-1.0)*x9811*x9826))+(((-1.0)*x9820*x9825))+((cj6*sj5))+((x9817*x9823))+((x9808*x9824))+((r12*x9814))+(((-1.0)*x9813*x9822)));
evalcond[4]=((((-1.0)*x9819*x9827))+(((-1.0)*r02*x9820))+((cj6*cj7))+((x9814*x9816))+(((-1.0)*x9813*x9821))+((x9807*x9818))+(((-1.0)*x9811*x9815)));
evalcond[5]=(((cj5*sj7))+(((-1.0)*r12*x9820))+((x9814*x9823))+(((-1.0)*x9813*x9826))+((x9808*x9822))+(((-1.0)*x9825*x9827))+((cj7*sj5*sj6))+((x9807*x9824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9828=((1.0)*sj6);
IkReal x9829=(cj5*cj6);
IkReal x9830=(cj5*cj6*sj4);
CheckValue<IkReal> x9831=IKPowWithIntegerCheck(IKsign((((r10*((cj4*sj9))))+(((-1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*sj9))+((r11*((cj4*cj9)))))),-1);
if(!x9831.valid){
continue;
}
CheckValue<IkReal> x9832 = IKatan2WithCheck(IkReal((((r12*x9830))+(((-1.0)*r22*x9828))+((cj4*r02*x9829)))),((((-1.0)*cj4*r01*sj9*x9829))+((cj4*cj9*r00*x9829))+((cj9*r10*x9830))+(((-1.0)*cj9*r20*x9828))+(((-1.0)*r11*sj4*sj9*x9829))+((r21*sj6*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x9832.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9831.value)))+(x9832.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9833=IKcos(j8);
IkReal x9834=IKsin(j8);
IkReal x9835=(r21*sj9);
IkReal x9836=(cj9*r20);
IkReal x9837=((1.0)*x9834);
IkReal x9838=((1.0)*sj6);
IkReal x9839=((1.0)*x9833);
IkReal x9840=(cj4*x9833);
IkReal x9841=(r12*sj4);
IkReal x9842=(r01*sj9);
IkReal x9843=(cj4*x9834);
IkReal x9844=(r11*sj4*sj9);
IkReal x9845=(cj9*r00);
IkReal x9846=((1.0)*cj4*x9834);
IkReal x9847=(cj9*r10*sj4);
IkReal x9848=(r02*sj4);
IkReal x9849=(r11*sj9);
IkReal x9850=(cj9*r00*sj4);
IkReal x9851=(cj9*r10);
IkReal x9852=(r01*sj4*sj9);
IkReal x9853=((1.0)*cj4*x9833);
evalcond[0]=((((-1.0)*x9836*x9837))+(((-1.0)*(1.0)*cj5*cj6))+((x9834*x9835))+((r22*x9833)));
evalcond[1]=((((-1.0)*cj5*cj7*x9838))+(((-1.0)*x9836*x9839))+((sj5*sj7))+(((-1.0)*r22*x9837))+((x9833*x9835)));
evalcond[2]=(((x9842*x9843))+((r02*x9840))+((x9833*x9841))+((x9834*x9844))+(((-1.0)*x9838))+(((-1.0)*x9845*x9846))+(((-1.0)*x9837*x9847)));
evalcond[3]=(((x9834*x9850))+((cj6*sj5))+((r12*x9840))+(((-1.0)*x9837*x9852))+((x9843*x9849))+(((-1.0)*x9846*x9851))+(((-1.0)*x9839*x9848)));
evalcond[4]=(((cj6*cj7))+((x9840*x9842))+(((-1.0)*x9839*x9847))+(((-1.0)*r02*x9846))+(((-1.0)*x9837*x9841))+((x9833*x9844))+(((-1.0)*x9845*x9853)));
evalcond[5]=(((cj5*sj7))+((x9834*x9848))+(((-1.0)*r12*x9846))+(((-1.0)*x9851*x9853))+((x9840*x9849))+((cj7*sj5*sj6))+(((-1.0)*x9839*x9852))+((x9833*x9850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9854=r21*r21;
IkReal x9855=(cj9*r20);
IkReal x9856=cj9*cj9;
IkReal x9857=(sj5*sj7);
IkReal x9858=(cj5*cj6);
IkReal x9859=(r21*sj9);
IkReal x9860=((1.0)*cj9*r20);
IkReal x9861=(cj5*cj7*sj6);
CheckValue<IkReal> x9862=IKPowWithIntegerCheck(IKsign((x9854+(((-1.0)*x9854*x9856))+(((-2.0)*r21*sj9*x9855))+((x9856*(r20*r20)))+(r22*r22))),-1);
if(!x9862.valid){
continue;
}
CheckValue<IkReal> x9863 = IKatan2WithCheck(IkReal(((((-1.0)*x9858*x9860))+(((-1.0)*r22*x9861))+((x9858*x9859))+((r22*x9857)))),(((x9859*x9861))+((x9855*x9857))+(((-1.0)*x9860*x9861))+((r22*x9858))+(((-1.0)*sj5*sj7*x9859))),IKFAST_ATAN2_MAGTHRESH);
if(!x9863.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9862.value)))+(x9863.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x9864=((1.0)*cj5);
IkReal x9865=IKcos(j8);
IkReal x9866=IKsin(j8);
IkReal x9867=(r21*sj9);
IkReal x9868=(cj9*r20);
IkReal x9869=((1.0)*x9866);
evalcond[0]=(((x9866*x9867))+((r22*x9865))+(((-1.0)*cj6*x9864))+(((-1.0)*x9868*x9869)));
evalcond[1]=((((-1.0)*x9865*x9868))+(((-1.0)*r22*x9869))+((sj5*sj7))+(((-1.0)*cj7*sj6*x9864))+((x9865*x9867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x9870=(((cj8*r21*sj9))+(((-1.0)*(1.0)*r22*sj8))+(((-1.0)*(1.0)*cj8*cj9*r20)));
j4eval[0]=x9870;
j4eval[1]=IKsign(x9870);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9871=((((-1.0)*cj8*r22))+((cj9*r20*sj8))+(((-1.0)*r21*sj8*sj9)));
IkReal x9872=(cj6*cj7*cj9);
IkReal x9873=(cj6*cj7);
IkReal x9874=(cj6*sj7*sj8);
IkReal x9875=(cj6*cj8*sj7);
IkReal x9876=((1.0)*cj6*cj8*sj7);
j4eval[0]=x9871;
j4eval[1]=IKsign(x9871);
j4eval[2]=((IKabs((((r11*sj9*x9875))+(((-1.0)*r12*x9874))+(((-1.0)*cj9*r10*x9876))+(((-1.0)*r11*x9872))+(((-1.0)*r10*sj9*x9873)))))+(IKabs((((cj9*r00*x9875))+(((-1.0)*r01*sj9*x9876))+((r01*x9872))+((r02*x9874))+((r00*sj9*x9873))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9877=r20*r20;
IkReal x9878=cj9*cj9;
IkReal x9879=((-1.0)+x9877+(((2.0)*cj9*r20*r21*sj9))+((x9878*(r21*r21)))+(((-1.0)*x9877*x9878)));
j4eval[0]=x9879;
j4eval[1]=IKsign(x9879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x9880=(cj5*sj7);
IkReal x9881=(cj7*sj5);
IkReal x9882=(cj9*r21);
IkReal x9883=(r20*sj9);
IkReal x9884=(r21*sj9);
IkReal x9885=((1.0)*sj8);
IkReal x9886=(cj9*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x9883))+(((-1.0)*x9882))+x9881+x9880);
evalcond[2]=(((sj8*x9884))+((cj8*r22))+(((-1.0)*x9885*x9886)));
evalcond[3]=((((-1.0)*(1.0)*cj5*cj7))+((cj8*x9884))+(((-1.0)*cj8*x9886))+((sj5*sj7))+(((-1.0)*r22*x9885)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((0.16769)*x9880))+(((0.32901)*sj5))+(((0.16769)*x9881))+(((0.03431)*x9882))+(((-1.0)*(0.00036)*cj5))+(((0.03431)*x9883)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x9887=(cj9*rxp1_2);
IkReal x9888=(rxp0_2*sj9);
IkReal x9889=((337.0)*cj9);
IkReal x9890=((337.0)*sj9);
j4eval[0]=(x9887+x9888);
j4eval[1]=((IKabs((((r01*x9889))+((r00*x9890)))))+(IKabs(((((-1.0)*r10*x9890))+(((-1.0)*r11*x9889))))));
j4eval[2]=IKsign(((((100000.0)*x9888))+(((100000.0)*x9887))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x9891=((1.0)*cj9);
IkReal x9892=((((-1.0)*cj8*r20*x9891))+((cj8*r21*sj9))+(((-1.0)*(1.0)*r22*sj8)));
j4eval[0]=x9892;
j4eval[1]=IKsign(x9892);
j4eval[2]=((IKabs((((cj9*r11))+((r10*sj9)))))+(IKabs(((((-1.0)*(1.0)*r00*sj9))+(((-1.0)*r01*x9891))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x9893=r20*r20;
IkReal x9894=cj9*cj9;
IkReal x9895=((-1.0)+((x9894*(r21*r21)))+(((2.0)*cj9*r20*r21*sj9))+x9893+(((-1.0)*x9893*x9894)));
IkReal x9896=(cj5*cj7*cj9);
IkReal x9897=(cj5*cj7*sj9);
IkReal x9898=(cj9*sj5*sj7);
IkReal x9899=(sj5*sj7*sj9);
j4eval[0]=x9895;
j4eval[1]=((IKabs(((((-1.0)*r10*x9897))+((r10*x9899))+(((-1.0)*r11*x9896))+((r11*x9898)))))+(IKabs(((((-1.0)*r00*x9899))+((r01*x9896))+(((-1.0)*r01*x9898))+((r00*x9897))))));
j4eval[2]=IKsign(x9895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x9901 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x9901)==0){
continue;
}
IkReal x9900=pow(x9901,-0.5);
CheckValue<IkReal> x9902 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x9902.valid){
continue;
}
IkReal gconst0=((-1.0)*(((1.0)*(x9902.value))));
IkReal gconst1=((-1.0)*rxp1_2*x9900);
IkReal gconst2=(rxp0_2*x9900);
IkReal x9903=(cj5*sj7);
IkReal x9904=(cj7*sj5);
IkReal x9905=(gconst1*r20);
IkReal x9906=(gconst2*r21);
IkReal x9907=(gconst1*r21);
IkReal x9908=((1.0)*sj8);
IkReal x9909=(gconst2*r20);
CheckValue<IkReal> x9910 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x9910.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j9+(x9910.value))))), 6.28318530717959)));
evalcond[1]=(x9903+x9904+(((-1.0)*x9905))+(((-1.0)*x9906)));
evalcond[2]=((((-1.0)*x9908*x9909))+((sj8*x9907))+((cj8*r22)));
evalcond[3]=((((-1.0)*(1.0)*cj5*cj7))+(((-1.0)*r22*x9908))+((sj5*sj7))+(((-1.0)*cj8*x9909))+((cj8*x9907)));
evalcond[4]=((((0.16769)*x9904))+(((-1.0)*(1.0)*pz))+(((0.03431)*x9906))+(((0.03431)*x9905))+(((0.32901)*sj5))+(((0.16769)*x9903))+(((-1.0)*(0.00036)*cj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x9913 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x9913.valid){
continue;
}
IkReal x9911=((-1.0)*(((1.0)*(x9913.value))));
IkReal x9912=x9900;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=gconst1;
cj9=gconst2;
j9=x9911;
IkReal gconst0=x9911;
IkReal gconst1=((-1.0)*rxp1_2*x9912);
IkReal gconst2=(rxp0_2*x9912);
IkReal x9914=x9900;
IkReal x9915=(rxp0_2*x9914);
IkReal x9916=(rxp1_2*x9914);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*r00*x9916))+((r01*x9915)))))+(IKabs(((((-1.0)*r11*x9915))+((r10*x9916))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9919 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x9919.valid){
continue;
}
IkReal x9917=((-1.0)*(((1.0)*(x9919.value))));
IkReal x9918=x9900;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=gconst1;
cj9=gconst2;
j9=x9917;
IkReal gconst0=x9917;
IkReal gconst1=((-1.0)*rxp1_2*x9918);
IkReal gconst2=(rxp0_2*x9918);
IkReal x9920=x9900;
IkReal x9921=(rxp1_2*x9920);
IkReal x9922=(rxp0_2*x9920);
j4eval[0]=((IKabs(((((-1.0)*r01*x9922))+((r00*x9921)))))+(IKabs(((((-1.0)*r10*x9921))+((r11*x9922))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9923=gconst1*gconst1;
IkReal x9924=gconst2*gconst2;
IkReal x9925=(cj5*cj7*gconst1);
IkReal x9926=(cj5*cj7*gconst2);
IkReal x9927=(gconst1*sj5*sj7);
IkReal x9928=(gconst2*sj5*sj7);
CheckValue<IkReal> x9929 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x9928))+(((-1.0)*r00*x9927))+((r01*x9926))+((r00*x9925)))),(((r11*x9928))+(((-1.0)*r11*x9926))+(((-1.0)*r10*x9925))+((r10*x9927))),IKFAST_ATAN2_MAGTHRESH);
if(!x9929.valid){
continue;
}
CheckValue<IkReal> x9930=IKPowWithIntegerCheck(IKsign((((x9924*(r21*r21)))+((x9923*(r20*r20)))+(((-1.0)*x9924))+(((-1.0)*x9923))+(((2.0)*gconst1*gconst2*r20*r21)))),-1);
if(!x9930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9929.value)+(((1.5707963267949)*(x9930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x9931=(gconst1*r00);
IkReal x9932=IKcos(j4);
IkReal x9933=((1.0)*x9932);
IkReal x9934=(gconst1*r10);
IkReal x9935=IKsin(j4);
IkReal x9936=((1.0)*x9935);
IkReal x9937=(gconst2*r01);
IkReal x9938=(gconst2*r11);
IkReal x9939=(cj5*cj7);
IkReal x9940=(sj5*sj7);
IkReal x9941=(gconst1*r00*x9935);
IkReal x9942=(gconst2*r01*x9935);
IkReal x9943=((0.03431)*x9932);
IkReal x9944=((0.03431)*x9935);
IkReal x9945=(cj8*x9932);
IkReal x9946=(cj8*x9935);
IkReal x9947=(gconst1*r01);
IkReal x9948=(sj8*x9932);
IkReal x9949=(gconst1*r11);
IkReal x9950=(sj8*x9935);
IkReal x9951=(gconst2*r00);
IkReal x9952=((1.0)*sj8*x9932);
IkReal x9953=(gconst2*r10);
IkReal x9954=((1.0)*sj8*x9935);
IkReal x9955=((1.0)*cj8*x9935);
IkReal x9956=(r02*sj8);
IkReal x9957=(r12*sj8);
IkReal x9958=(cj8*gconst1*x9932);
IkReal x9959=((1.0)*cj8*x9932);
evalcond[0]=((((-1.0)*x9936*x9938))+(((-1.0)*x9934*x9936))+(((-1.0)*x9931*x9933))+(((-1.0)*x9933*x9937)));
evalcond[1]=((((-1.0)*x9933*x9938))+(((-1.0)*x9933*x9934))+(((-1.0)*x9940))+x9941+x9942+x9939);
evalcond[2]=((0.00337)+((x9937*x9943))+((x9934*x9944))+((x9931*x9943))+((x9938*x9944))+(((-1.0)*py*x9936))+(((-1.0)*px*x9933)));
evalcond[3]=((-1.0)+((r02*x9945))+((x9947*x9948))+(((-1.0)*x9951*x9952))+((x9949*x9950))+((r12*x9946))+(((-1.0)*x9953*x9954)));
evalcond[4]=((((-1.0)*x9952*x9953))+(((-1.0)*x9947*x9954))+(((-1.0)*r02*x9955))+((r12*x9945))+((x9950*x9951))+((x9948*x9949)));
evalcond[5]=(((r01*x9958))+(((-1.0)*x9951*x9959))+(((-1.0)*x9933*x9956))+(((-1.0)*x9936*x9957))+((x9946*x9949))+(((-1.0)*x9953*x9955)));
evalcond[6]=(((cj5*sj7))+((x9935*x9956))+((cj7*sj5))+(((-1.0)*x9947*x9955))+((x9946*x9951))+(((-1.0)*x9953*x9959))+(((-1.0)*x9933*x9957))+((r11*x9958)));
evalcond[7]=(((x9938*x9943))+(((-0.16769)*x9940))+(((-0.03431)*x9941))+(((0.32901)*cj5))+((px*x9935))+(((-1.0)*py*x9933))+(((-0.03431)*x9942))+((x9934*x9943))+(((0.16769)*x9939))+(((0.00036)*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9960=((1.0)*gconst2);
IkReal x9961=((1.0)*sj8);
CheckValue<IkReal> x9962 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*gconst1*r00))+(((-1.0)*r01*x9960)))),(((gconst1*r10))+((gconst2*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x9962.valid){
continue;
}
CheckValue<IkReal> x9963=IKPowWithIntegerCheck(IKsign((((cj8*gconst1*r21))+((r22*(((((-1.0)*x9961*(gconst1*gconst1)))+(((-1.0)*x9961*(gconst2*gconst2)))))))+(((-1.0)*cj8*r20*x9960)))),-1);
if(!x9963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9962.value)+(((1.5707963267949)*(x9963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x9964=(gconst1*r00);
IkReal x9965=IKcos(j4);
IkReal x9966=((1.0)*x9965);
IkReal x9967=(gconst1*r10);
IkReal x9968=IKsin(j4);
IkReal x9969=((1.0)*x9968);
IkReal x9970=(gconst2*r01);
IkReal x9971=(gconst2*r11);
IkReal x9972=(cj5*cj7);
IkReal x9973=(sj5*sj7);
IkReal x9974=(gconst1*r00*x9968);
IkReal x9975=(gconst2*r01*x9968);
IkReal x9976=((0.03431)*x9965);
IkReal x9977=((0.03431)*x9968);
IkReal x9978=(cj8*x9965);
IkReal x9979=(cj8*x9968);
IkReal x9980=(gconst1*r01);
IkReal x9981=(sj8*x9965);
IkReal x9982=(gconst1*r11);
IkReal x9983=(sj8*x9968);
IkReal x9984=(gconst2*r00);
IkReal x9985=((1.0)*sj8*x9965);
IkReal x9986=(gconst2*r10);
IkReal x9987=((1.0)*sj8*x9968);
IkReal x9988=((1.0)*cj8*x9968);
IkReal x9989=(r02*sj8);
IkReal x9990=(r12*sj8);
IkReal x9991=(cj8*gconst1*x9965);
IkReal x9992=((1.0)*cj8*x9965);
evalcond[0]=((((-1.0)*x9966*x9970))+(((-1.0)*x9964*x9966))+(((-1.0)*x9969*x9971))+(((-1.0)*x9967*x9969)));
evalcond[1]=((((-1.0)*x9966*x9971))+(((-1.0)*x9966*x9967))+(((-1.0)*x9973))+x9972+x9975+x9974);
evalcond[2]=((0.00337)+(((-1.0)*py*x9969))+((x9967*x9977))+((x9971*x9977))+(((-1.0)*px*x9966))+((x9964*x9976))+((x9970*x9976)));
evalcond[3]=((-1.0)+((x9980*x9981))+((x9982*x9983))+((r02*x9978))+(((-1.0)*x9986*x9987))+((r12*x9979))+(((-1.0)*x9984*x9985)));
evalcond[4]=(((r12*x9978))+((x9981*x9982))+(((-1.0)*r02*x9988))+(((-1.0)*x9980*x9987))+((x9983*x9984))+(((-1.0)*x9985*x9986)));
evalcond[5]=((((-1.0)*x9984*x9992))+((x9979*x9982))+(((-1.0)*x9966*x9989))+(((-1.0)*x9969*x9990))+((r01*x9991))+(((-1.0)*x9986*x9988)));
evalcond[6]=(((cj5*sj7))+((x9979*x9984))+(((-1.0)*x9986*x9992))+((r11*x9991))+((cj7*sj5))+(((-1.0)*x9966*x9990))+((x9968*x9989))+(((-1.0)*x9980*x9988)));
evalcond[7]=(((x9967*x9976))+(((-1.0)*py*x9966))+((x9971*x9976))+(((-0.03431)*x9974))+(((-0.03431)*x9975))+(((0.32901)*cj5))+((px*x9968))+(((-0.16769)*x9973))+(((0.16769)*x9972))+(((0.00036)*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9993=((337.0)*gconst1);
IkReal x9994=((337.0)*gconst2);
CheckValue<IkReal> x9995 = IKatan2WithCheck(IkReal((((r00*x9993))+((r01*x9994)))),((((-1.0)*r11*x9994))+(((-1.0)*r10*x9993))),IKFAST_ATAN2_MAGTHRESH);
if(!x9995.valid){
continue;
}
CheckValue<IkReal> x9996=IKPowWithIntegerCheck(IKsign(((((100000.0)*gconst1*rxp0_2))+(((100000.0)*gconst2*rxp1_2)))),-1);
if(!x9996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9995.value)+(((1.5707963267949)*(x9996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x9997=(gconst1*r00);
IkReal x9998=IKcos(j4);
IkReal x9999=((1.0)*x9998);
IkReal x10000=(gconst1*r10);
IkReal x10001=IKsin(j4);
IkReal x10002=((1.0)*x10001);
IkReal x10003=(gconst2*r01);
IkReal x10004=(gconst2*r11);
IkReal x10005=(cj5*cj7);
IkReal x10006=(sj5*sj7);
IkReal x10007=(gconst1*r00*x10001);
IkReal x10008=(gconst2*r01*x10001);
IkReal x10009=((0.03431)*x9998);
IkReal x10010=((0.03431)*x10001);
IkReal x10011=(cj8*x9998);
IkReal x10012=(cj8*x10001);
IkReal x10013=(gconst1*r01);
IkReal x10014=(sj8*x9998);
IkReal x10015=(gconst1*r11);
IkReal x10016=(sj8*x10001);
IkReal x10017=(gconst2*r00);
IkReal x10018=((1.0)*sj8*x9998);
IkReal x10019=(gconst2*r10);
IkReal x10020=((1.0)*sj8*x10001);
IkReal x10021=((1.0)*cj8*x10001);
IkReal x10022=(r02*sj8);
IkReal x10023=(r12*sj8);
IkReal x10024=(cj8*gconst1*x9998);
IkReal x10025=((1.0)*cj8*x9998);
evalcond[0]=((((-1.0)*x10000*x10002))+(((-1.0)*x9997*x9999))+(((-1.0)*x10002*x10004))+(((-1.0)*x10003*x9999)));
evalcond[1]=((((-1.0)*x10006))+(((-1.0)*x10004*x9999))+(((-1.0)*x10000*x9999))+x10008+x10007+x10005);
evalcond[2]=((0.00337)+((x10009*x9997))+((x10000*x10010))+(((-1.0)*px*x9999))+((x10004*x10010))+((x10003*x10009))+(((-1.0)*py*x10002)));
evalcond[3]=((-1.0)+(((-1.0)*x10019*x10020))+(((-1.0)*x10017*x10018))+((r12*x10012))+((r02*x10011))+((x10015*x10016))+((x10013*x10014)));
evalcond[4]=(((r12*x10011))+((x10016*x10017))+(((-1.0)*r02*x10021))+((x10014*x10015))+(((-1.0)*x10018*x10019))+(((-1.0)*x10013*x10020)));
evalcond[5]=((((-1.0)*x10019*x10021))+((x10012*x10015))+(((-1.0)*x10022*x9999))+(((-1.0)*x10017*x10025))+((r01*x10024))+(((-1.0)*x10002*x10023)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x10019*x10025))+(((-1.0)*x10013*x10021))+(((-1.0)*x10023*x9999))+((x10012*x10017))+((cj7*sj5))+((r11*x10024))+((x10001*x10022)));
evalcond[7]=((((0.16769)*x10005))+(((-1.0)*py*x9999))+(((-0.03431)*x10008))+(((-0.03431)*x10007))+((px*x10001))+(((0.32901)*cj5))+((x10000*x10009))+((x10004*x10009))+(((-0.16769)*x10006))+(((0.00036)*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10027 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x10027)==0){
continue;
}
IkReal x10026=((1.0)*(pow(x10027,-0.5)));
CheckValue<IkReal> x10028 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10028.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(1.0)*(x10028.value))));
IkReal gconst4=(rxp1_2*x10026);
IkReal gconst5=((-1.0)*rxp0_2*x10026);
IkReal x10029=(cj5*sj7);
IkReal x10030=(cj7*sj5);
IkReal x10031=(gconst4*r20);
IkReal x10032=(gconst5*r21);
IkReal x10033=(gconst4*r21);
IkReal x10034=((1.0)*sj8);
IkReal x10035=(gconst5*r20);
CheckValue<IkReal> x10036 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10036.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9+(x10036.value))))), 6.28318530717959)));
evalcond[1]=(x10029+(((-1.0)*x10032))+(((-1.0)*x10031))+x10030);
evalcond[2]=(((sj8*x10033))+((cj8*r22))+(((-1.0)*x10034*x10035)));
evalcond[3]=((((-1.0)*(1.0)*cj5*cj7))+((cj8*x10033))+((sj5*sj7))+(((-1.0)*r22*x10034))+(((-1.0)*cj8*x10035)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((0.32901)*sj5))+(((0.16769)*x10030))+(((0.16769)*x10029))+(((0.03431)*x10031))+(((0.03431)*x10032))+(((-1.0)*(0.00036)*cj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x10039 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10039.valid){
continue;
}
IkReal x10037=((-1.0)*(((1.0)*(x10039.value))));
IkReal x10038=x10026;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+x10037);
IkReal gconst3=((3.14159265358979)+x10037);
IkReal gconst4=(rxp1_2*x10038);
IkReal gconst5=((-1.0)*rxp0_2*x10038);
IkReal x10040=x10026;
IkReal x10041=((337.0)*rxp1_2*x10040);
IkReal x10042=((337.0)*rxp0_2*x10040);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*r10*x10041))+((r11*x10042)))))+(IKabs(((((-1.0)*r01*x10042))+((r00*x10041))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10045 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10045.valid){
continue;
}
IkReal x10043=((-1.0)*(((1.0)*(x10045.value))));
IkReal x10044=x10026;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+x10043);
IkReal gconst3=((3.14159265358979)+x10043);
IkReal gconst4=(rxp1_2*x10044);
IkReal gconst5=((-1.0)*rxp0_2*x10044);
IkReal x10046=x10026;
IkReal x10047=(rxp0_2*x10046);
IkReal x10048=(rxp1_2*x10046);
j4eval[0]=((((1.0)*(IKabs(((((-1.0)*r00*x10048))+((r01*x10047)))))))+(((1.0)*(IKabs((((r10*x10048))+(((-1.0)*r11*x10047))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10049=gconst4*gconst4;
IkReal x10050=gconst5*gconst5;
IkReal x10051=(cj5*cj7*gconst4);
IkReal x10052=(cj5*cj7*gconst5);
IkReal x10053=(gconst4*sj5*sj7);
IkReal x10054=(gconst5*sj5*sj7);
CheckValue<IkReal> x10055 = IKatan2WithCheck(IkReal((((r00*x10051))+(((-1.0)*r01*x10054))+((r01*x10052))+(((-1.0)*r00*x10053)))),(((r11*x10054))+(((-1.0)*r11*x10052))+((r10*x10053))+(((-1.0)*r10*x10051))),IKFAST_ATAN2_MAGTHRESH);
if(!x10055.valid){
continue;
}
CheckValue<IkReal> x10056=IKPowWithIntegerCheck(IKsign((((x10050*(r21*r21)))+(((-1.0)*x10049))+((x10049*(r20*r20)))+(((2.0)*gconst4*gconst5*r20*r21))+(((-1.0)*x10050)))),-1);
if(!x10056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10055.value)+(((1.5707963267949)*(x10056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10057=(gconst4*r00);
IkReal x10058=IKcos(j4);
IkReal x10059=((1.0)*x10058);
IkReal x10060=(gconst4*r10);
IkReal x10061=IKsin(j4);
IkReal x10062=((1.0)*x10061);
IkReal x10063=(gconst5*r01);
IkReal x10064=(gconst5*r11);
IkReal x10065=(cj5*cj7);
IkReal x10066=(sj5*sj7);
IkReal x10067=(gconst4*r00*x10061);
IkReal x10068=(gconst5*r01*x10061);
IkReal x10069=((0.03431)*x10058);
IkReal x10070=((0.03431)*x10061);
IkReal x10071=(cj8*x10058);
IkReal x10072=(cj8*x10061);
IkReal x10073=(gconst4*r01);
IkReal x10074=(sj8*x10058);
IkReal x10075=(gconst4*r11);
IkReal x10076=(sj8*x10061);
IkReal x10077=(gconst5*r00);
IkReal x10078=((1.0)*sj8*x10058);
IkReal x10079=(gconst5*r10);
IkReal x10080=((1.0)*sj8*x10061);
IkReal x10081=((1.0)*cj8*x10061);
IkReal x10082=(r02*sj8);
IkReal x10083=(r12*sj8);
IkReal x10084=(cj8*gconst4*x10058);
IkReal x10085=((1.0)*cj8*x10058);
evalcond[0]=((((-1.0)*x10057*x10059))+(((-1.0)*x10062*x10064))+(((-1.0)*x10059*x10063))+(((-1.0)*x10060*x10062)));
evalcond[1]=((((-1.0)*x10059*x10064))+x10067+x10065+x10068+(((-1.0)*x10059*x10060))+(((-1.0)*x10066)));
evalcond[2]=((0.00337)+(((-1.0)*px*x10059))+((x10063*x10069))+((x10064*x10070))+((x10057*x10069))+(((-1.0)*py*x10062))+((x10060*x10070)));
evalcond[3]=((-1.0)+((r02*x10071))+((x10073*x10074))+(((-1.0)*x10079*x10080))+((x10075*x10076))+((r12*x10072))+(((-1.0)*x10077*x10078)));
evalcond[4]=((((-1.0)*x10073*x10080))+(((-1.0)*x10078*x10079))+((x10076*x10077))+(((-1.0)*r02*x10081))+((r12*x10071))+((x10074*x10075)));
evalcond[5]=(((x10072*x10075))+(((-1.0)*x10059*x10082))+(((-1.0)*x10079*x10081))+((r01*x10084))+(((-1.0)*x10077*x10085))+(((-1.0)*x10062*x10083)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x10059*x10083))+(((-1.0)*x10073*x10081))+((x10061*x10082))+(((-1.0)*x10079*x10085))+((cj7*sj5))+((x10072*x10077))+((r11*x10084)));
evalcond[7]=((((-0.03431)*x10068))+((px*x10061))+(((-0.16769)*x10066))+(((0.32901)*cj5))+(((0.16769)*x10065))+((x10060*x10069))+(((-1.0)*py*x10059))+((x10064*x10069))+(((0.00036)*sj5))+(((-0.03431)*x10067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10086=((1.0)*gconst5);
IkReal x10087=((1.0)*sj8);
CheckValue<IkReal> x10088 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*gconst4*r00))+(((-1.0)*r01*x10086)))),(((gconst4*r10))+((gconst5*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x10088.valid){
continue;
}
CheckValue<IkReal> x10089=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x10087*(gconst5*gconst5)))+(((-1.0)*x10087*(gconst4*gconst4)))))))+(((-1.0)*cj8*r20*x10086))+((cj8*gconst4*r21)))),-1);
if(!x10089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10088.value)+(((1.5707963267949)*(x10089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10090=(gconst4*r00);
IkReal x10091=IKcos(j4);
IkReal x10092=((1.0)*x10091);
IkReal x10093=(gconst4*r10);
IkReal x10094=IKsin(j4);
IkReal x10095=((1.0)*x10094);
IkReal x10096=(gconst5*r01);
IkReal x10097=(gconst5*r11);
IkReal x10098=(cj5*cj7);
IkReal x10099=(sj5*sj7);
IkReal x10100=(gconst4*r00*x10094);
IkReal x10101=(gconst5*r01*x10094);
IkReal x10102=((0.03431)*x10091);
IkReal x10103=((0.03431)*x10094);
IkReal x10104=(cj8*x10091);
IkReal x10105=(cj8*x10094);
IkReal x10106=(gconst4*r01);
IkReal x10107=(sj8*x10091);
IkReal x10108=(gconst4*r11);
IkReal x10109=(sj8*x10094);
IkReal x10110=(gconst5*r00);
IkReal x10111=((1.0)*sj8*x10091);
IkReal x10112=(gconst5*r10);
IkReal x10113=((1.0)*sj8*x10094);
IkReal x10114=((1.0)*cj8*x10094);
IkReal x10115=(r02*sj8);
IkReal x10116=(r12*sj8);
IkReal x10117=(cj8*gconst4*x10091);
IkReal x10118=((1.0)*cj8*x10091);
evalcond[0]=((((-1.0)*x10090*x10092))+(((-1.0)*x10092*x10096))+(((-1.0)*x10093*x10095))+(((-1.0)*x10095*x10097)));
evalcond[1]=(x10098+(((-1.0)*x10092*x10093))+(((-1.0)*x10099))+(((-1.0)*x10092*x10097))+x10100+x10101);
evalcond[2]=((0.00337)+((x10097*x10103))+((x10090*x10102))+(((-1.0)*py*x10095))+((x10093*x10103))+((x10096*x10102))+(((-1.0)*px*x10092)));
evalcond[3]=((-1.0)+((r02*x10104))+((x10106*x10107))+(((-1.0)*x10110*x10111))+(((-1.0)*x10112*x10113))+((x10108*x10109))+((r12*x10105)));
evalcond[4]=(((x10109*x10110))+((r12*x10104))+((x10107*x10108))+(((-1.0)*x10111*x10112))+(((-1.0)*x10106*x10113))+(((-1.0)*r02*x10114)));
evalcond[5]=(((r01*x10117))+(((-1.0)*x10110*x10118))+(((-1.0)*x10112*x10114))+(((-1.0)*x10092*x10115))+(((-1.0)*x10095*x10116))+((x10105*x10108)));
evalcond[6]=(((cj5*sj7))+((x10105*x10110))+(((-1.0)*x10112*x10118))+((cj7*sj5))+(((-1.0)*x10092*x10116))+(((-1.0)*x10106*x10114))+((r11*x10117))+((x10094*x10115)));
evalcond[7]=(((x10097*x10102))+(((-0.03431)*x10100))+(((-1.0)*py*x10092))+((x10093*x10102))+((px*x10094))+(((0.32901)*cj5))+(((0.16769)*x10098))+(((-0.16769)*x10099))+(((0.00036)*sj5))+(((-0.03431)*x10101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10119=((337.0)*gconst4);
IkReal x10120=((337.0)*gconst5);
CheckValue<IkReal> x10121 = IKatan2WithCheck(IkReal((((r00*x10119))+((r01*x10120)))),((((-1.0)*r11*x10120))+(((-1.0)*r10*x10119))),IKFAST_ATAN2_MAGTHRESH);
if(!x10121.valid){
continue;
}
CheckValue<IkReal> x10122=IKPowWithIntegerCheck(IKsign(((((100000.0)*gconst4*rxp0_2))+(((100000.0)*gconst5*rxp1_2)))),-1);
if(!x10122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10121.value)+(((1.5707963267949)*(x10122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10123=(gconst4*r00);
IkReal x10124=IKcos(j4);
IkReal x10125=((1.0)*x10124);
IkReal x10126=(gconst4*r10);
IkReal x10127=IKsin(j4);
IkReal x10128=((1.0)*x10127);
IkReal x10129=(gconst5*r01);
IkReal x10130=(gconst5*r11);
IkReal x10131=(cj5*cj7);
IkReal x10132=(sj5*sj7);
IkReal x10133=(gconst4*r00*x10127);
IkReal x10134=(gconst5*r01*x10127);
IkReal x10135=((0.03431)*x10124);
IkReal x10136=((0.03431)*x10127);
IkReal x10137=(cj8*x10124);
IkReal x10138=(cj8*x10127);
IkReal x10139=(gconst4*r01);
IkReal x10140=(sj8*x10124);
IkReal x10141=(gconst4*r11);
IkReal x10142=(sj8*x10127);
IkReal x10143=(gconst5*r00);
IkReal x10144=((1.0)*sj8*x10124);
IkReal x10145=(gconst5*r10);
IkReal x10146=((1.0)*sj8*x10127);
IkReal x10147=((1.0)*cj8*x10127);
IkReal x10148=(r02*sj8);
IkReal x10149=(r12*sj8);
IkReal x10150=(cj8*gconst4*x10124);
IkReal x10151=((1.0)*cj8*x10124);
evalcond[0]=((((-1.0)*x10125*x10129))+(((-1.0)*x10126*x10128))+(((-1.0)*x10123*x10125))+(((-1.0)*x10128*x10130)));
evalcond[1]=((((-1.0)*x10132))+(((-1.0)*x10125*x10126))+(((-1.0)*x10125*x10130))+x10133+x10131+x10134);
evalcond[2]=((0.00337)+((x10130*x10136))+((x10126*x10136))+(((-1.0)*px*x10125))+((x10123*x10135))+((x10129*x10135))+(((-1.0)*py*x10128)));
evalcond[3]=((-1.0)+((r02*x10137))+((x10139*x10140))+(((-1.0)*x10143*x10144))+((r12*x10138))+((x10141*x10142))+(((-1.0)*x10145*x10146)));
evalcond[4]=((((-1.0)*x10139*x10146))+(((-1.0)*x10144*x10145))+((x10142*x10143))+(((-1.0)*r02*x10147))+((r12*x10137))+((x10140*x10141)));
evalcond[5]=((((-1.0)*x10128*x10149))+((x10138*x10141))+(((-1.0)*x10143*x10151))+(((-1.0)*x10145*x10147))+((r01*x10150))+(((-1.0)*x10125*x10148)));
evalcond[6]=(((cj5*sj7))+((x10138*x10143))+(((-1.0)*x10139*x10147))+((cj7*sj5))+((r11*x10150))+(((-1.0)*x10125*x10149))+(((-1.0)*x10145*x10151))+((x10127*x10148)));
evalcond[7]=(((x10130*x10135))+(((-0.16769)*x10132))+(((-1.0)*py*x10125))+((x10126*x10135))+(((-0.03431)*x10133))+(((0.32901)*cj5))+(((-0.03431)*x10134))+(((0.16769)*x10131))+(((0.00036)*sj5))+((px*x10127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10152=cj9*cj9;
IkReal x10153=(cj5*cj7*cj9);
IkReal x10154=(cj5*cj7*sj9);
IkReal x10155=(cj9*sj5*sj7);
IkReal x10156=(sj5*sj7*sj9);
CheckValue<IkReal> x10157=IKPowWithIntegerCheck(IKsign(((-1.0)+((x10152*(r21*r21)))+(((r20*r20)*(((1.0)+(((-1.0)*x10152))))))+(((2.0)*cj9*r20*r21*sj9)))),-1);
if(!x10157.valid){
continue;
}
CheckValue<IkReal> x10158 = IKatan2WithCheck(IkReal((((r01*x10153))+(((-1.0)*r01*x10155))+(((-1.0)*r00*x10156))+((r00*x10154)))),(((r10*x10156))+((r11*x10155))+(((-1.0)*r10*x10154))+(((-1.0)*r11*x10153))),IKFAST_ATAN2_MAGTHRESH);
if(!x10158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10157.value)))+(x10158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10159=(cj9*r01);
IkReal x10160=IKcos(j4);
IkReal x10161=((1.0)*x10160);
IkReal x10162=(cj9*r11);
IkReal x10163=IKsin(j4);
IkReal x10164=((1.0)*x10163);
IkReal x10165=(r00*sj9);
IkReal x10166=(r10*sj9);
IkReal x10167=(cj5*cj7);
IkReal x10168=(sj5*sj7);
IkReal x10169=(cj9*r01*x10163);
IkReal x10170=(r00*sj9*x10163);
IkReal x10171=((0.03431)*x10160);
IkReal x10172=((0.03431)*x10163);
IkReal x10173=(cj8*x10160);
IkReal x10174=(cj8*x10163);
IkReal x10175=(r01*sj9);
IkReal x10176=(sj8*x10160);
IkReal x10177=(r11*sj9);
IkReal x10178=(sj8*x10163);
IkReal x10179=(cj9*r00);
IkReal x10180=((1.0)*sj8*x10160);
IkReal x10181=(cj9*r10);
IkReal x10182=((1.0)*sj8*x10163);
IkReal x10183=((1.0)*cj8*x10163);
IkReal x10184=(r02*sj8);
IkReal x10185=(r12*sj8);
IkReal x10186=(cj8*sj9*x10160);
IkReal x10187=((1.0)*cj8*x10160);
evalcond[0]=((((-1.0)*x10164*x10166))+(((-1.0)*x10159*x10161))+(((-1.0)*x10161*x10165))+(((-1.0)*x10162*x10164)));
evalcond[1]=((((-1.0)*x10161*x10166))+x10169+x10167+(((-1.0)*x10168))+x10170+(((-1.0)*x10161*x10162)));
evalcond[2]=((0.00337)+(((-1.0)*py*x10164))+(((-1.0)*px*x10161))+((x10166*x10172))+((x10159*x10171))+((x10165*x10171))+((x10162*x10172)));
evalcond[3]=((-1.0)+(((-1.0)*x10179*x10180))+((r02*x10173))+((x10177*x10178))+(((-1.0)*x10181*x10182))+((r12*x10174))+((x10175*x10176)));
evalcond[4]=(((x10176*x10177))+(((-1.0)*x10175*x10182))+(((-1.0)*x10180*x10181))+((r12*x10173))+(((-1.0)*r02*x10183))+((x10178*x10179)));
evalcond[5]=(((r01*x10186))+(((-1.0)*x10179*x10187))+(((-1.0)*x10161*x10184))+(((-1.0)*x10164*x10185))+((x10174*x10177))+(((-1.0)*x10181*x10183)));
evalcond[6]=(((x10174*x10179))+((cj5*sj7))+((r11*x10186))+(((-1.0)*x10175*x10183))+((cj7*sj5))+(((-1.0)*x10161*x10185))+(((-1.0)*x10181*x10187))+((x10163*x10184)));
evalcond[7]=((((-1.0)*py*x10161))+(((-0.03431)*x10169))+(((0.32901)*cj5))+((x10166*x10171))+(((-0.03431)*x10170))+(((0.16769)*x10167))+((px*x10163))+(((0.00036)*sj5))+((x10162*x10171))+(((-0.16769)*x10168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10188=((1.0)*cj9);
CheckValue<IkReal> x10189 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*r00*sj9))+(((-1.0)*r01*x10188)))),(((cj9*r11))+((r10*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x10189.valid){
continue;
}
CheckValue<IkReal> x10190=IKPowWithIntegerCheck(IKsign((((cj8*r21*sj9))+(((-1.0)*(1.0)*r22*sj8))+(((-1.0)*cj8*r20*x10188)))),-1);
if(!x10190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10189.value)+(((1.5707963267949)*(x10190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10191=(cj9*r01);
IkReal x10192=IKcos(j4);
IkReal x10193=((1.0)*x10192);
IkReal x10194=(cj9*r11);
IkReal x10195=IKsin(j4);
IkReal x10196=((1.0)*x10195);
IkReal x10197=(r00*sj9);
IkReal x10198=(r10*sj9);
IkReal x10199=(cj5*cj7);
IkReal x10200=(sj5*sj7);
IkReal x10201=(cj9*r01*x10195);
IkReal x10202=(r00*sj9*x10195);
IkReal x10203=((0.03431)*x10192);
IkReal x10204=((0.03431)*x10195);
IkReal x10205=(cj8*x10192);
IkReal x10206=(cj8*x10195);
IkReal x10207=(r01*sj9);
IkReal x10208=(sj8*x10192);
IkReal x10209=(r11*sj9);
IkReal x10210=(sj8*x10195);
IkReal x10211=(cj9*r00);
IkReal x10212=((1.0)*sj8*x10192);
IkReal x10213=(cj9*r10);
IkReal x10214=((1.0)*sj8*x10195);
IkReal x10215=((1.0)*cj8*x10195);
IkReal x10216=(r02*sj8);
IkReal x10217=(r12*sj8);
IkReal x10218=(cj8*sj9*x10192);
IkReal x10219=((1.0)*cj8*x10192);
evalcond[0]=((((-1.0)*x10193*x10197))+(((-1.0)*x10191*x10193))+(((-1.0)*x10194*x10196))+(((-1.0)*x10196*x10198)));
evalcond[1]=(x10199+(((-1.0)*x10193*x10198))+x10202+x10201+(((-1.0)*x10200))+(((-1.0)*x10193*x10194)));
evalcond[2]=((0.00337)+(((-1.0)*py*x10196))+((x10191*x10203))+((x10198*x10204))+((x10197*x10203))+(((-1.0)*px*x10193))+((x10194*x10204)));
evalcond[3]=((-1.0)+((x10209*x10210))+((x10207*x10208))+((r02*x10205))+((r12*x10206))+(((-1.0)*x10211*x10212))+(((-1.0)*x10213*x10214)));
evalcond[4]=(((x10208*x10209))+(((-1.0)*x10207*x10214))+(((-1.0)*x10212*x10213))+((r12*x10205))+((x10210*x10211))+(((-1.0)*r02*x10215)));
evalcond[5]=((((-1.0)*x10211*x10219))+(((-1.0)*x10196*x10217))+((x10206*x10209))+(((-1.0)*x10213*x10215))+(((-1.0)*x10193*x10216))+((r01*x10218)));
evalcond[6]=(((cj5*sj7))+((r11*x10218))+((x10206*x10211))+((cj7*sj5))+(((-1.0)*x10213*x10219))+((x10195*x10216))+(((-1.0)*x10207*x10215))+(((-1.0)*x10193*x10217)));
evalcond[7]=(((px*x10195))+(((0.32901)*cj5))+((x10198*x10203))+(((-0.03431)*x10201))+(((-0.16769)*x10200))+((x10194*x10203))+(((0.16769)*x10199))+(((-0.03431)*x10202))+(((-1.0)*py*x10193))+(((0.00036)*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10220=((337.0)*cj9);
IkReal x10221=((337.0)*sj9);
CheckValue<IkReal> x10222=IKPowWithIntegerCheck(IKsign(((((100000.0)*cj9*rxp1_2))+(((100000.0)*rxp0_2*sj9)))),-1);
if(!x10222.valid){
continue;
}
CheckValue<IkReal> x10223 = IKatan2WithCheck(IkReal((((r00*x10221))+((r01*x10220)))),((((-1.0)*r11*x10220))+(((-1.0)*r10*x10221))),IKFAST_ATAN2_MAGTHRESH);
if(!x10223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10222.value)))+(x10223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10224=(cj9*r01);
IkReal x10225=IKcos(j4);
IkReal x10226=((1.0)*x10225);
IkReal x10227=(cj9*r11);
IkReal x10228=IKsin(j4);
IkReal x10229=((1.0)*x10228);
IkReal x10230=(r00*sj9);
IkReal x10231=(r10*sj9);
IkReal x10232=(cj5*cj7);
IkReal x10233=(sj5*sj7);
IkReal x10234=(cj9*r01*x10228);
IkReal x10235=(r00*sj9*x10228);
IkReal x10236=((0.03431)*x10225);
IkReal x10237=((0.03431)*x10228);
IkReal x10238=(cj8*x10225);
IkReal x10239=(cj8*x10228);
IkReal x10240=(r01*sj9);
IkReal x10241=(sj8*x10225);
IkReal x10242=(r11*sj9);
IkReal x10243=(sj8*x10228);
IkReal x10244=(cj9*r00);
IkReal x10245=((1.0)*sj8*x10225);
IkReal x10246=(cj9*r10);
IkReal x10247=((1.0)*sj8*x10228);
IkReal x10248=((1.0)*cj8*x10228);
IkReal x10249=(r02*sj8);
IkReal x10250=(r12*sj8);
IkReal x10251=(cj8*sj9*x10225);
IkReal x10252=((1.0)*cj8*x10225);
evalcond[0]=((((-1.0)*x10229*x10231))+(((-1.0)*x10224*x10226))+(((-1.0)*x10226*x10230))+(((-1.0)*x10227*x10229)));
evalcond[1]=((((-1.0)*x10226*x10227))+(((-1.0)*x10226*x10231))+x10234+x10232+x10235+(((-1.0)*x10233)));
evalcond[2]=((0.00337)+((x10227*x10237))+((x10231*x10237))+((x10224*x10236))+((x10230*x10236))+(((-1.0)*py*x10229))+(((-1.0)*px*x10226)));
evalcond[3]=((-1.0)+((x10242*x10243))+(((-1.0)*x10246*x10247))+((r12*x10239))+(((-1.0)*x10244*x10245))+((x10240*x10241))+((r02*x10238)));
evalcond[4]=(((x10241*x10242))+(((-1.0)*x10245*x10246))+((r12*x10238))+((x10243*x10244))+(((-1.0)*r02*x10248))+(((-1.0)*x10240*x10247)));
evalcond[5]=((((-1.0)*x10226*x10249))+(((-1.0)*x10229*x10250))+((x10239*x10242))+(((-1.0)*x10244*x10252))+(((-1.0)*x10246*x10248))+((r01*x10251)));
evalcond[6]=(((cj5*sj7))+((x10228*x10249))+(((-1.0)*x10226*x10250))+((x10239*x10244))+(((-1.0)*x10246*x10252))+((cj7*sj5))+(((-1.0)*x10240*x10248))+((r11*x10251)));
evalcond[7]=((((0.16769)*x10232))+(((-0.03431)*x10234))+(((0.32901)*cj5))+(((-0.03431)*x10235))+((x10227*x10236))+(((-0.16769)*x10233))+((x10231*x10236))+(((-1.0)*py*x10226))+(((0.00036)*sj5))+((px*x10228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10253=(cj7*sj5);
IkReal x10254=(cj5*sj7);
IkReal x10255=(cj9*r21);
IkReal x10256=(r20*sj9);
IkReal x10257=(r21*sj9);
IkReal x10258=((1.0)*sj8);
IkReal x10259=(cj9*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x10255))+(((-1.0)*x10256))+x10253+(((-1.0)*x10254)));
evalcond[2]=((((-1.0)*x10258*x10259))+((sj8*x10257))+((cj8*r22)));
evalcond[3]=(((cj8*x10257))+((cj5*cj7))+((sj5*sj7))+(((-1.0)*r22*x10258))+(((-1.0)*cj8*x10259)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((0.03431)*x10255))+(((0.16769)*x10253))+(((0.00036)*cj5))+(((0.32901)*sj5))+(((-0.16769)*x10254))+(((0.03431)*x10256)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x10260=(cj9*rxp1_2);
IkReal x10261=(rxp0_2*sj9);
IkReal x10262=((337.0)*cj9);
IkReal x10263=((337.0)*sj9);
j4eval[0]=(x10260+x10261);
j4eval[1]=((IKabs(((((-1.0)*r11*x10262))+(((-1.0)*r10*x10263)))))+(IKabs((((r01*x10262))+((r00*x10263))))));
j4eval[2]=IKsign(((((100000.0)*x10261))+(((100000.0)*x10260))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x10264=((1.0)*cj9);
IkReal x10265=(((cj8*r21*sj9))+(((-1.0)*(1.0)*r22*sj8))+(((-1.0)*cj8*r20*x10264)));
j4eval[0]=x10265;
j4eval[1]=((IKabs((((cj9*r01))+((r00*sj9)))))+(IKabs(((((-1.0)*(1.0)*r10*sj9))+(((-1.0)*r11*x10264))))));
j4eval[2]=IKsign(x10265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x10266=r20*r20;
IkReal x10267=cj9*cj9;
IkReal x10268=((-1.0)+((x10267*(r21*r21)))+x10266+(((-1.0)*x10266*x10267))+(((2.0)*cj9*r20*r21*sj9)));
IkReal x10269=(cj5*cj7);
IkReal x10270=(cj9*r01);
IkReal x10271=(r00*sj9);
IkReal x10272=(sj5*sj7);
IkReal x10273=(cj9*r11);
IkReal x10274=((1.0)*cj5*cj7);
IkReal x10275=(r10*sj9);
IkReal x10276=((1.0)*sj5*sj7);
j4eval[0]=x10268;
j4eval[1]=((IKabs((((x10270*x10272))+((x10271*x10272))+((x10269*x10270))+((x10269*x10271)))))+(IKabs(((((-1.0)*x10274*x10275))+(((-1.0)*x10273*x10276))+(((-1.0)*x10275*x10276))+(((-1.0)*x10273*x10274))))));
j4eval[2]=IKsign(x10268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x10278 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x10278)==0){
continue;
}
IkReal x10277=pow(x10278,-0.5);
CheckValue<IkReal> x10279 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10279.valid){
continue;
}
IkReal gconst6=((-1.0)*(((1.0)*(x10279.value))));
IkReal gconst7=((-1.0)*rxp1_2*x10277);
IkReal gconst8=(rxp0_2*x10277);
IkReal x10280=(cj7*sj5);
IkReal x10281=(cj5*sj7);
IkReal x10282=(gconst7*r20);
IkReal x10283=(gconst8*r21);
IkReal x10284=(gconst7*r21);
IkReal x10285=((1.0)*sj8);
IkReal x10286=(gconst8*r20);
CheckValue<IkReal> x10287 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10287.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j9+(x10287.value))))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x10281))+(((-1.0)*x10282))+(((-1.0)*x10283))+x10280);
evalcond[2]=(((sj8*x10284))+((cj8*r22))+(((-1.0)*x10285*x10286)));
evalcond[3]=((((-1.0)*r22*x10285))+((cj8*x10284))+(((-1.0)*cj8*x10286))+((cj5*cj7))+((sj5*sj7)));
evalcond[4]=((((0.16769)*x10280))+(((0.03431)*x10282))+(((-1.0)*(1.0)*pz))+(((0.00036)*cj5))+(((0.32901)*sj5))+(((0.03431)*x10283))+(((-0.16769)*x10281)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x10290 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10290.valid){
continue;
}
IkReal x10288=((-1.0)*(((1.0)*(x10290.value))));
IkReal x10289=x10277;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=gconst7;
cj9=gconst8;
j9=x10288;
IkReal gconst6=x10288;
IkReal gconst7=((-1.0)*rxp1_2*x10289);
IkReal gconst8=(rxp0_2*x10289);
IkReal x10291=x10277;
IkReal x10292=(rxp0_2*x10291);
IkReal x10293=(rxp1_2*x10291);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((r01*x10292))+(((-1.0)*r00*x10293)))))+(IKabs((((r10*x10293))+(((-1.0)*r11*x10292))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10296 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10296.valid){
continue;
}
IkReal x10294=((-1.0)*(((1.0)*(x10296.value))));
IkReal x10295=x10277;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=gconst7;
cj9=gconst8;
j9=x10294;
IkReal gconst6=x10294;
IkReal gconst7=((-1.0)*rxp1_2*x10295);
IkReal gconst8=(rxp0_2*x10295);
IkReal x10297=x10277;
IkReal x10298=(rxp0_2*x10297);
IkReal x10299=(rxp1_2*x10297);
j4eval[0]=((IKabs(((((-1.0)*r11*x10298))+((r10*x10299)))))+(IKabs(((((-1.0)*r00*x10299))+((r01*x10298))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10300=gconst7*gconst7;
IkReal x10301=gconst8*gconst8;
IkReal x10302=(cj5*cj7);
IkReal x10303=(gconst7*r00);
IkReal x10304=(gconst8*r01);
IkReal x10305=(sj5*sj7);
IkReal x10306=(gconst7*r10);
IkReal x10307=((1.0)*cj5*cj7);
IkReal x10308=(gconst8*r11);
IkReal x10309=((1.0)*sj5*sj7);
CheckValue<IkReal> x10310 = IKatan2WithCheck(IkReal((((x10302*x10304))+((x10303*x10305))+((x10302*x10303))+((x10304*x10305)))),((((-1.0)*x10306*x10307))+(((-1.0)*x10308*x10309))+(((-1.0)*x10306*x10309))+(((-1.0)*x10307*x10308))),IKFAST_ATAN2_MAGTHRESH);
if(!x10310.valid){
continue;
}
CheckValue<IkReal> x10311=IKPowWithIntegerCheck(IKsign((((x10301*(r21*r21)))+(((-1.0)*x10301))+(((-1.0)*x10300))+((x10300*(r20*r20)))+(((2.0)*gconst7*gconst8*r20*r21)))),-1);
if(!x10311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10310.value)+(((1.5707963267949)*(x10311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10312=(gconst7*r00);
IkReal x10313=IKcos(j4);
IkReal x10314=((1.0)*x10313);
IkReal x10315=(gconst7*r10);
IkReal x10316=IKsin(j4);
IkReal x10317=((1.0)*x10316);
IkReal x10318=(gconst8*r01);
IkReal x10319=(gconst8*r11);
IkReal x10320=(cj5*cj7);
IkReal x10321=(sj5*sj7);
IkReal x10322=(gconst7*r00*x10316);
IkReal x10323=(gconst8*r01*x10316);
IkReal x10324=((0.03431)*x10313);
IkReal x10325=((0.03431)*x10316);
IkReal x10326=(cj8*x10313);
IkReal x10327=(cj8*x10316);
IkReal x10328=(gconst7*r01);
IkReal x10329=(sj8*x10313);
IkReal x10330=(gconst7*r11);
IkReal x10331=(sj8*x10316);
IkReal x10332=(gconst8*r00);
IkReal x10333=((1.0)*sj8*x10313);
IkReal x10334=(gconst8*r10);
IkReal x10335=((1.0)*sj8*x10316);
IkReal x10336=((1.0)*cj8*x10316);
IkReal x10337=(r02*sj8);
IkReal x10338=(r12*sj8);
IkReal x10339=(cj8*gconst7*x10313);
IkReal x10340=((1.0)*cj8*x10313);
evalcond[0]=((((-1.0)*x10317*x10319))+(((-1.0)*x10312*x10314))+(((-1.0)*x10315*x10317))+(((-1.0)*x10314*x10318)));
evalcond[1]=(x10321+x10320+x10323+x10322+(((-1.0)*x10314*x10319))+(((-1.0)*x10314*x10315)));
evalcond[2]=((0.00337)+((x10315*x10325))+(((-1.0)*px*x10314))+((x10319*x10325))+((x10318*x10324))+((x10312*x10324))+(((-1.0)*py*x10317)));
evalcond[3]=((1.0)+((x10330*x10331))+(((-1.0)*x10332*x10333))+((x10328*x10329))+((r12*x10327))+((r02*x10326))+(((-1.0)*x10334*x10335)));
evalcond[4]=(((x10329*x10330))+(((-1.0)*x10333*x10334))+(((-1.0)*x10328*x10335))+((r12*x10326))+(((-1.0)*r02*x10336))+((x10331*x10332)));
evalcond[5]=(((r01*x10339))+(((-1.0)*x10334*x10336))+(((-1.0)*x10332*x10340))+((x10327*x10330))+(((-1.0)*x10317*x10338))+(((-1.0)*x10314*x10337)));
evalcond[6]=(((cj5*sj7))+((x10316*x10337))+(((-1.0)*(1.0)*cj7*sj5))+((r11*x10339))+(((-1.0)*x10314*x10338))+(((-1.0)*x10334*x10340))+((x10327*x10332))+(((-1.0)*x10328*x10336)));
evalcond[7]=((((-1.0)*(0.00036)*sj5))+((px*x10316))+((x10319*x10324))+(((0.32901)*cj5))+(((0.16769)*x10320))+(((-0.03431)*x10323))+(((0.16769)*x10321))+(((-0.03431)*x10322))+(((-1.0)*py*x10314))+((x10315*x10324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10341=((1.0)*gconst8);
IkReal x10342=((1.0)*sj8);
CheckValue<IkReal> x10343=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x10342*(gconst8*gconst8)))+(((-1.0)*x10342*(gconst7*gconst7)))))))+(((-1.0)*cj8*r20*x10341))+((cj8*gconst7*r21)))),-1);
if(!x10343.valid){
continue;
}
CheckValue<IkReal> x10344 = IKatan2WithCheck(IkReal((((gconst7*r00))+((gconst8*r01)))),((((-1.0)*r11*x10341))+(((-1.0)*(1.0)*gconst7*r10))),IKFAST_ATAN2_MAGTHRESH);
if(!x10344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10343.value)))+(x10344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10345=(gconst7*r00);
IkReal x10346=IKcos(j4);
IkReal x10347=((1.0)*x10346);
IkReal x10348=(gconst7*r10);
IkReal x10349=IKsin(j4);
IkReal x10350=((1.0)*x10349);
IkReal x10351=(gconst8*r01);
IkReal x10352=(gconst8*r11);
IkReal x10353=(cj5*cj7);
IkReal x10354=(sj5*sj7);
IkReal x10355=(gconst7*r00*x10349);
IkReal x10356=(gconst8*r01*x10349);
IkReal x10357=((0.03431)*x10346);
IkReal x10358=((0.03431)*x10349);
IkReal x10359=(cj8*x10346);
IkReal x10360=(cj8*x10349);
IkReal x10361=(gconst7*r01);
IkReal x10362=(sj8*x10346);
IkReal x10363=(gconst7*r11);
IkReal x10364=(sj8*x10349);
IkReal x10365=(gconst8*r00);
IkReal x10366=((1.0)*sj8*x10346);
IkReal x10367=(gconst8*r10);
IkReal x10368=((1.0)*sj8*x10349);
IkReal x10369=((1.0)*cj8*x10349);
IkReal x10370=(r02*sj8);
IkReal x10371=(r12*sj8);
IkReal x10372=(cj8*gconst7*x10346);
IkReal x10373=((1.0)*cj8*x10346);
evalcond[0]=((((-1.0)*x10348*x10350))+(((-1.0)*x10345*x10347))+(((-1.0)*x10350*x10352))+(((-1.0)*x10347*x10351)));
evalcond[1]=(x10353+x10355+x10354+x10356+(((-1.0)*x10347*x10352))+(((-1.0)*x10347*x10348)));
evalcond[2]=((0.00337)+((x10351*x10357))+((x10348*x10358))+((x10345*x10357))+((x10352*x10358))+(((-1.0)*px*x10347))+(((-1.0)*py*x10350)));
evalcond[3]=((1.0)+((x10363*x10364))+(((-1.0)*x10367*x10368))+((r02*x10359))+((x10361*x10362))+(((-1.0)*x10365*x10366))+((r12*x10360)));
evalcond[4]=((((-1.0)*x10366*x10367))+(((-1.0)*x10361*x10368))+((r12*x10359))+(((-1.0)*r02*x10369))+((x10364*x10365))+((x10362*x10363)));
evalcond[5]=((((-1.0)*x10347*x10370))+(((-1.0)*x10367*x10369))+(((-1.0)*x10365*x10373))+((r01*x10372))+((x10360*x10363))+(((-1.0)*x10350*x10371)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x10361*x10369))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x10367*x10373))+((x10349*x10370))+((x10360*x10365))+(((-1.0)*x10347*x10371))+((r11*x10372)));
evalcond[7]=((((-0.03431)*x10356))+(((-1.0)*(0.00036)*sj5))+((x10348*x10357))+(((0.16769)*x10354))+(((-0.03431)*x10355))+(((0.32901)*cj5))+((x10352*x10357))+(((0.16769)*x10353))+((px*x10349))+(((-1.0)*py*x10347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10374=((337.0)*gconst7);
IkReal x10375=((337.0)*gconst8);
CheckValue<IkReal> x10376 = IKatan2WithCheck(IkReal((((r01*x10375))+((r00*x10374)))),((((-1.0)*r10*x10374))+(((-1.0)*r11*x10375))),IKFAST_ATAN2_MAGTHRESH);
if(!x10376.valid){
continue;
}
CheckValue<IkReal> x10377=IKPowWithIntegerCheck(IKsign(((((100000.0)*gconst8*rxp1_2))+(((100000.0)*gconst7*rxp0_2)))),-1);
if(!x10377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10376.value)+(((1.5707963267949)*(x10377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10378=(gconst7*r00);
IkReal x10379=IKcos(j4);
IkReal x10380=((1.0)*x10379);
IkReal x10381=(gconst7*r10);
IkReal x10382=IKsin(j4);
IkReal x10383=((1.0)*x10382);
IkReal x10384=(gconst8*r01);
IkReal x10385=(gconst8*r11);
IkReal x10386=(cj5*cj7);
IkReal x10387=(sj5*sj7);
IkReal x10388=(gconst7*r00*x10382);
IkReal x10389=(gconst8*r01*x10382);
IkReal x10390=((0.03431)*x10379);
IkReal x10391=((0.03431)*x10382);
IkReal x10392=(cj8*x10379);
IkReal x10393=(cj8*x10382);
IkReal x10394=(gconst7*r01);
IkReal x10395=(sj8*x10379);
IkReal x10396=(gconst7*r11);
IkReal x10397=(sj8*x10382);
IkReal x10398=(gconst8*r00);
IkReal x10399=((1.0)*sj8*x10379);
IkReal x10400=(gconst8*r10);
IkReal x10401=((1.0)*sj8*x10382);
IkReal x10402=((1.0)*cj8*x10382);
IkReal x10403=(r02*sj8);
IkReal x10404=(r12*sj8);
IkReal x10405=(cj8*gconst7*x10379);
IkReal x10406=((1.0)*cj8*x10379);
evalcond[0]=((((-1.0)*x10383*x10385))+(((-1.0)*x10380*x10384))+(((-1.0)*x10381*x10383))+(((-1.0)*x10378*x10380)));
evalcond[1]=((((-1.0)*x10380*x10385))+x10389+x10388+x10387+x10386+(((-1.0)*x10380*x10381)));
evalcond[2]=((0.00337)+(((-1.0)*px*x10380))+((x10385*x10391))+(((-1.0)*py*x10383))+((x10381*x10391))+((x10384*x10390))+((x10378*x10390)));
evalcond[3]=((1.0)+(((-1.0)*x10400*x10401))+((r02*x10392))+((r12*x10393))+((x10396*x10397))+(((-1.0)*x10398*x10399))+((x10394*x10395)));
evalcond[4]=(((x10397*x10398))+((r12*x10392))+(((-1.0)*r02*x10402))+(((-1.0)*x10399*x10400))+(((-1.0)*x10394*x10401))+((x10395*x10396)));
evalcond[5]=((((-1.0)*x10398*x10406))+((r01*x10405))+(((-1.0)*x10400*x10402))+(((-1.0)*x10380*x10403))+((x10393*x10396))+(((-1.0)*x10383*x10404)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x10380*x10404))+((x10382*x10403))+((r11*x10405))+((x10393*x10398))+(((-1.0)*x10400*x10406))+(((-1.0)*x10394*x10402)));
evalcond[7]=((((-1.0)*(0.00036)*sj5))+((px*x10382))+(((0.16769)*x10386))+((x10385*x10390))+(((0.16769)*x10387))+(((-0.03431)*x10388))+(((-0.03431)*x10389))+(((0.32901)*cj5))+((x10381*x10390))+(((-1.0)*py*x10380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10408 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x10408)==0){
continue;
}
IkReal x10407=((1.0)*(pow(x10408,-0.5)));
CheckValue<IkReal> x10409 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10409.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(1.0)*(x10409.value))));
IkReal gconst10=(rxp1_2*x10407);
IkReal gconst11=((-1.0)*rxp0_2*x10407);
IkReal x10410=(cj7*sj5);
IkReal x10411=(cj5*sj7);
IkReal x10412=(gconst10*r20);
IkReal x10413=(gconst11*r21);
IkReal x10414=(gconst10*r21);
IkReal x10415=((1.0)*sj8);
IkReal x10416=(gconst11*r20);
CheckValue<IkReal> x10417 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10417.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9+(x10417.value))))), 6.28318530717959)));
evalcond[1]=(x10410+(((-1.0)*x10413))+(((-1.0)*x10412))+(((-1.0)*x10411)));
evalcond[2]=(((sj8*x10414))+(((-1.0)*x10415*x10416))+((cj8*r22)));
evalcond[3]=((((-1.0)*r22*x10415))+((cj5*cj7))+(((-1.0)*cj8*x10416))+((sj5*sj7))+((cj8*x10414)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((0.00036)*cj5))+(((0.32901)*sj5))+(((0.03431)*x10412))+(((0.03431)*x10413))+(((0.16769)*x10410))+(((-0.16769)*x10411)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x10420 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10420.valid){
continue;
}
IkReal x10418=((-1.0)*(((1.0)*(x10420.value))));
IkReal x10419=x10407;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+x10418);
IkReal gconst9=((3.14159265358979)+x10418);
IkReal gconst10=(rxp1_2*x10419);
IkReal gconst11=((-1.0)*rxp0_2*x10419);
IkReal x10421=x10407;
IkReal x10422=((337.0)*rxp1_2*x10421);
IkReal x10423=((337.0)*rxp0_2*x10421);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*r01*x10423))+((r00*x10422)))))+(IKabs(((((-1.0)*r10*x10422))+((r11*x10423))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10426 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x10426.valid){
continue;
}
IkReal x10424=((-1.0)*(((1.0)*(x10426.value))));
IkReal x10425=x10407;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+x10424);
IkReal gconst9=((3.14159265358979)+x10424);
IkReal gconst10=(rxp1_2*x10425);
IkReal gconst11=((-1.0)*rxp0_2*x10425);
IkReal x10427=x10407;
IkReal x10428=(rxp1_2*x10427);
IkReal x10429=(rxp0_2*x10427);
j4eval[0]=((((1.0)*(IKabs((((r11*x10429))+(((-1.0)*r10*x10428)))))))+(((1.0)*(IKabs(((((-1.0)*r01*x10429))+((r00*x10428))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10430=gconst10*gconst10;
IkReal x10431=gconst11*gconst11;
IkReal x10432=(cj5*cj7);
IkReal x10433=(gconst10*r00);
IkReal x10434=(gconst11*r01);
IkReal x10435=(sj5*sj7);
IkReal x10436=(gconst10*r10);
IkReal x10437=((1.0)*cj5*cj7);
IkReal x10438=(gconst11*r11);
IkReal x10439=((1.0)*sj5*sj7);
CheckValue<IkReal> x10440=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10431))+(((2.0)*gconst10*gconst11*r20*r21))+(((-1.0)*x10430))+((x10430*(r20*r20)))+((x10431*(r21*r21))))),-1);
if(!x10440.valid){
continue;
}
CheckValue<IkReal> x10441 = IKatan2WithCheck(IkReal((((x10434*x10435))+((x10432*x10434))+((x10433*x10435))+((x10432*x10433)))),((((-1.0)*x10438*x10439))+(((-1.0)*x10436*x10437))+(((-1.0)*x10436*x10439))+(((-1.0)*x10437*x10438))),IKFAST_ATAN2_MAGTHRESH);
if(!x10441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10440.value)))+(x10441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10442=(gconst10*r00);
IkReal x10443=IKcos(j4);
IkReal x10444=((1.0)*x10443);
IkReal x10445=(gconst10*r10);
IkReal x10446=IKsin(j4);
IkReal x10447=((1.0)*x10446);
IkReal x10448=(gconst11*r01);
IkReal x10449=(gconst11*r11);
IkReal x10450=(cj5*cj7);
IkReal x10451=(sj5*sj7);
IkReal x10452=(gconst10*r00*x10446);
IkReal x10453=(gconst11*r01*x10446);
IkReal x10454=((0.03431)*x10443);
IkReal x10455=((0.03431)*x10446);
IkReal x10456=(cj8*x10443);
IkReal x10457=(cj8*x10446);
IkReal x10458=(gconst10*r01);
IkReal x10459=(sj8*x10443);
IkReal x10460=(gconst10*r11);
IkReal x10461=(sj8*x10446);
IkReal x10462=(gconst11*r00);
IkReal x10463=((1.0)*sj8*x10443);
IkReal x10464=(gconst11*r10);
IkReal x10465=((1.0)*sj8*x10446);
IkReal x10466=((1.0)*cj8*x10446);
IkReal x10467=(r02*sj8);
IkReal x10468=(r12*sj8);
IkReal x10469=(cj8*gconst10*x10443);
IkReal x10470=((1.0)*cj8*x10443);
evalcond[0]=((((-1.0)*x10444*x10448))+(((-1.0)*x10442*x10444))+(((-1.0)*x10445*x10447))+(((-1.0)*x10447*x10449)));
evalcond[1]=((((-1.0)*x10444*x10445))+(((-1.0)*x10444*x10449))+x10452+x10450+x10453+x10451);
evalcond[2]=((0.00337)+((x10442*x10454))+((x10449*x10455))+(((-1.0)*px*x10444))+((x10448*x10454))+(((-1.0)*py*x10447))+((x10445*x10455)));
evalcond[3]=((1.0)+(((-1.0)*x10462*x10463))+((r12*x10457))+((r02*x10456))+((x10458*x10459))+(((-1.0)*x10464*x10465))+((x10460*x10461)));
evalcond[4]=((((-1.0)*x10463*x10464))+(((-1.0)*x10458*x10465))+((x10461*x10462))+((x10459*x10460))+(((-1.0)*r02*x10466))+((r12*x10456)));
evalcond[5]=((((-1.0)*x10444*x10467))+((x10457*x10460))+((r01*x10469))+(((-1.0)*x10447*x10468))+(((-1.0)*x10462*x10470))+(((-1.0)*x10464*x10466)));
evalcond[6]=(((cj5*sj7))+((x10446*x10467))+((x10457*x10462))+(((-1.0)*x10464*x10470))+(((-1.0)*x10458*x10466))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x10444*x10468))+((r11*x10469)));
evalcond[7]=((((-0.03431)*x10452))+(((-0.03431)*x10453))+((px*x10446))+(((0.16769)*x10450))+(((-1.0)*(0.00036)*sj5))+(((-1.0)*py*x10444))+(((0.32901)*cj5))+((x10449*x10454))+((x10445*x10454))+(((0.16769)*x10451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10471=((1.0)*gconst11);
IkReal x10472=((1.0)*sj8);
CheckValue<IkReal> x10473 = IKatan2WithCheck(IkReal((((gconst11*r01))+((gconst10*r00)))),((((-1.0)*(1.0)*gconst10*r10))+(((-1.0)*r11*x10471))),IKFAST_ATAN2_MAGTHRESH);
if(!x10473.valid){
continue;
}
CheckValue<IkReal> x10474=IKPowWithIntegerCheck(IKsign((((cj8*gconst10*r21))+((r22*(((((-1.0)*x10472*(gconst10*gconst10)))+(((-1.0)*x10472*(gconst11*gconst11)))))))+(((-1.0)*cj8*r20*x10471)))),-1);
if(!x10474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10473.value)+(((1.5707963267949)*(x10474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10475=(gconst10*r00);
IkReal x10476=IKcos(j4);
IkReal x10477=((1.0)*x10476);
IkReal x10478=(gconst10*r10);
IkReal x10479=IKsin(j4);
IkReal x10480=((1.0)*x10479);
IkReal x10481=(gconst11*r01);
IkReal x10482=(gconst11*r11);
IkReal x10483=(cj5*cj7);
IkReal x10484=(sj5*sj7);
IkReal x10485=(gconst10*r00*x10479);
IkReal x10486=(gconst11*r01*x10479);
IkReal x10487=((0.03431)*x10476);
IkReal x10488=((0.03431)*x10479);
IkReal x10489=(cj8*x10476);
IkReal x10490=(cj8*x10479);
IkReal x10491=(gconst10*r01);
IkReal x10492=(sj8*x10476);
IkReal x10493=(gconst10*r11);
IkReal x10494=(sj8*x10479);
IkReal x10495=(gconst11*r00);
IkReal x10496=((1.0)*sj8*x10476);
IkReal x10497=(gconst11*r10);
IkReal x10498=((1.0)*sj8*x10479);
IkReal x10499=((1.0)*cj8*x10479);
IkReal x10500=(r02*sj8);
IkReal x10501=(r12*sj8);
IkReal x10502=(cj8*gconst10*x10476);
IkReal x10503=((1.0)*cj8*x10476);
evalcond[0]=((((-1.0)*x10477*x10481))+(((-1.0)*x10480*x10482))+(((-1.0)*x10475*x10477))+(((-1.0)*x10478*x10480)));
evalcond[1]=((((-1.0)*x10477*x10482))+x10485+x10483+x10484+x10486+(((-1.0)*x10477*x10478)));
evalcond[2]=((0.00337)+((x10482*x10488))+(((-1.0)*py*x10480))+((x10481*x10487))+((x10478*x10488))+((x10475*x10487))+(((-1.0)*px*x10477)));
evalcond[3]=((1.0)+((r02*x10489))+((r12*x10490))+((x10491*x10492))+((x10493*x10494))+(((-1.0)*x10495*x10496))+(((-1.0)*x10497*x10498)));
evalcond[4]=(((r12*x10489))+((x10494*x10495))+(((-1.0)*x10496*x10497))+(((-1.0)*r02*x10499))+(((-1.0)*x10491*x10498))+((x10492*x10493)));
evalcond[5]=(((r01*x10502))+(((-1.0)*x10477*x10500))+(((-1.0)*x10495*x10503))+(((-1.0)*x10480*x10501))+((x10490*x10493))+(((-1.0)*x10497*x10499)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x10497*x10503))+((x10479*x10500))+((r11*x10502))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x10491*x10499))+((x10490*x10495))+(((-1.0)*x10477*x10501)));
evalcond[7]=((((0.16769)*x10483))+(((-1.0)*(0.00036)*sj5))+(((-1.0)*py*x10477))+((x10478*x10487))+(((0.32901)*cj5))+((px*x10479))+((x10482*x10487))+(((-0.03431)*x10485))+(((0.16769)*x10484))+(((-0.03431)*x10486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10504=((337.0)*gconst10);
IkReal x10505=((337.0)*gconst11);
CheckValue<IkReal> x10506=IKPowWithIntegerCheck(IKsign(((((100000.0)*gconst10*rxp0_2))+(((100000.0)*gconst11*rxp1_2)))),-1);
if(!x10506.valid){
continue;
}
CheckValue<IkReal> x10507 = IKatan2WithCheck(IkReal((((r00*x10504))+((r01*x10505)))),((((-1.0)*r10*x10504))+(((-1.0)*r11*x10505))),IKFAST_ATAN2_MAGTHRESH);
if(!x10507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10506.value)))+(x10507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10508=(gconst10*r00);
IkReal x10509=IKcos(j4);
IkReal x10510=((1.0)*x10509);
IkReal x10511=(gconst10*r10);
IkReal x10512=IKsin(j4);
IkReal x10513=((1.0)*x10512);
IkReal x10514=(gconst11*r01);
IkReal x10515=(gconst11*r11);
IkReal x10516=(cj5*cj7);
IkReal x10517=(sj5*sj7);
IkReal x10518=(gconst10*r00*x10512);
IkReal x10519=(gconst11*r01*x10512);
IkReal x10520=((0.03431)*x10509);
IkReal x10521=((0.03431)*x10512);
IkReal x10522=(cj8*x10509);
IkReal x10523=(cj8*x10512);
IkReal x10524=(gconst10*r01);
IkReal x10525=(sj8*x10509);
IkReal x10526=(gconst10*r11);
IkReal x10527=(sj8*x10512);
IkReal x10528=(gconst11*r00);
IkReal x10529=((1.0)*sj8*x10509);
IkReal x10530=(gconst11*r10);
IkReal x10531=((1.0)*sj8*x10512);
IkReal x10532=((1.0)*cj8*x10512);
IkReal x10533=(r02*sj8);
IkReal x10534=(r12*sj8);
IkReal x10535=(cj8*gconst10*x10509);
IkReal x10536=((1.0)*cj8*x10509);
evalcond[0]=((((-1.0)*x10510*x10514))+(((-1.0)*x10513*x10515))+(((-1.0)*x10511*x10513))+(((-1.0)*x10508*x10510)));
evalcond[1]=((((-1.0)*x10510*x10515))+x10516+x10517+x10518+x10519+(((-1.0)*x10510*x10511)));
evalcond[2]=((0.00337)+((x10508*x10520))+((x10514*x10520))+((x10511*x10521))+((x10515*x10521))+(((-1.0)*px*x10510))+(((-1.0)*py*x10513)));
evalcond[3]=((1.0)+((x10526*x10527))+((r02*x10522))+(((-1.0)*x10528*x10529))+((r12*x10523))+(((-1.0)*x10530*x10531))+((x10524*x10525)));
evalcond[4]=((((-1.0)*x10529*x10530))+(((-1.0)*r02*x10532))+((r12*x10522))+((x10525*x10526))+((x10527*x10528))+(((-1.0)*x10524*x10531)));
evalcond[5]=(((r01*x10535))+(((-1.0)*x10510*x10533))+(((-1.0)*x10530*x10532))+(((-1.0)*x10528*x10536))+(((-1.0)*x10513*x10534))+((x10523*x10526)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x10510*x10534))+(((-1.0)*(1.0)*cj7*sj5))+((r11*x10535))+(((-1.0)*x10530*x10536))+((x10512*x10533))+(((-1.0)*x10524*x10532))+((x10523*x10528)));
evalcond[7]=((((-1.0)*(0.00036)*sj5))+((x10511*x10520))+((px*x10512))+(((0.32901)*cj5))+((x10515*x10520))+(((-0.03431)*x10519))+(((0.16769)*x10517))+(((-0.03431)*x10518))+(((-1.0)*py*x10510))+(((0.16769)*x10516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10537=cj9*cj9;
IkReal x10538=(cj5*cj7);
IkReal x10539=(cj9*r01);
IkReal x10540=(r00*sj9);
IkReal x10541=(sj5*sj7);
IkReal x10542=(cj9*r11);
IkReal x10543=((1.0)*cj5*cj7);
IkReal x10544=(r10*sj9);
IkReal x10545=((1.0)*sj5*sj7);
CheckValue<IkReal> x10546=IKPowWithIntegerCheck(IKsign(((-1.0)+(((r20*r20)*(((1.0)+(((-1.0)*x10537))))))+(((2.0)*cj9*r20*r21*sj9))+((x10537*(r21*r21))))),-1);
if(!x10546.valid){
continue;
}
CheckValue<IkReal> x10547 = IKatan2WithCheck(IkReal((((x10539*x10541))+((x10540*x10541))+((x10538*x10540))+((x10538*x10539)))),((((-1.0)*x10542*x10545))+(((-1.0)*x10544*x10545))+(((-1.0)*x10543*x10544))+(((-1.0)*x10542*x10543))),IKFAST_ATAN2_MAGTHRESH);
if(!x10547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10546.value)))+(x10547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10548=(cj9*r01);
IkReal x10549=IKcos(j4);
IkReal x10550=((1.0)*x10549);
IkReal x10551=(cj9*r11);
IkReal x10552=IKsin(j4);
IkReal x10553=((1.0)*x10552);
IkReal x10554=(r00*sj9);
IkReal x10555=(r10*sj9);
IkReal x10556=(cj5*cj7);
IkReal x10557=(sj5*sj7);
IkReal x10558=(cj9*r01*x10552);
IkReal x10559=(r00*sj9*x10552);
IkReal x10560=((0.03431)*x10549);
IkReal x10561=((0.03431)*x10552);
IkReal x10562=(cj8*x10549);
IkReal x10563=(cj8*x10552);
IkReal x10564=(r01*sj9);
IkReal x10565=(sj8*x10549);
IkReal x10566=(r11*sj9);
IkReal x10567=(sj8*x10552);
IkReal x10568=(cj9*r00);
IkReal x10569=((1.0)*sj8*x10549);
IkReal x10570=(cj9*r10);
IkReal x10571=((1.0)*sj8*x10552);
IkReal x10572=((1.0)*cj8*x10552);
IkReal x10573=(r02*sj8);
IkReal x10574=(r12*sj8);
IkReal x10575=(cj8*sj9*x10549);
IkReal x10576=((1.0)*cj8*x10549);
evalcond[0]=((((-1.0)*x10548*x10550))+(((-1.0)*x10550*x10554))+(((-1.0)*x10553*x10555))+(((-1.0)*x10551*x10553)));
evalcond[1]=((((-1.0)*x10550*x10551))+x10559+x10558+x10556+x10557+(((-1.0)*x10550*x10555)));
evalcond[2]=((0.00337)+(((-1.0)*px*x10550))+(((-1.0)*py*x10553))+((x10555*x10561))+((x10548*x10560))+((x10554*x10560))+((x10551*x10561)));
evalcond[3]=((1.0)+((x10566*x10567))+(((-1.0)*x10568*x10569))+((x10564*x10565))+(((-1.0)*x10570*x10571))+((r12*x10563))+((r02*x10562)));
evalcond[4]=(((x10567*x10568))+(((-1.0)*r02*x10572))+((x10565*x10566))+((r12*x10562))+(((-1.0)*x10564*x10571))+(((-1.0)*x10569*x10570)));
evalcond[5]=((((-1.0)*x10570*x10572))+((r01*x10575))+(((-1.0)*x10568*x10576))+(((-1.0)*x10553*x10574))+(((-1.0)*x10550*x10573))+((x10563*x10566)));
evalcond[6]=(((cj5*sj7))+((x10552*x10573))+(((-1.0)*x10564*x10572))+((r11*x10575))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x10550*x10574))+(((-1.0)*x10570*x10576))+((x10563*x10568)));
evalcond[7]=((((-1.0)*py*x10550))+((px*x10552))+(((0.16769)*x10556))+(((-1.0)*(0.00036)*sj5))+(((0.32901)*cj5))+(((-0.03431)*x10559))+((x10555*x10560))+((x10551*x10560))+(((0.16769)*x10557))+(((-0.03431)*x10558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10577=((1.0)*cj9);
CheckValue<IkReal> x10578=IKPowWithIntegerCheck(IKsign((((cj8*r21*sj9))+(((-1.0)*(1.0)*r22*sj8))+(((-1.0)*cj8*r20*x10577)))),-1);
if(!x10578.valid){
continue;
}
CheckValue<IkReal> x10579 = IKatan2WithCheck(IkReal((((cj9*r01))+((r00*sj9)))),((((-1.0)*r11*x10577))+(((-1.0)*(1.0)*r10*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x10579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10578.value)))+(x10579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10580=(cj9*r01);
IkReal x10581=IKcos(j4);
IkReal x10582=((1.0)*x10581);
IkReal x10583=(cj9*r11);
IkReal x10584=IKsin(j4);
IkReal x10585=((1.0)*x10584);
IkReal x10586=(r00*sj9);
IkReal x10587=(r10*sj9);
IkReal x10588=(cj5*cj7);
IkReal x10589=(sj5*sj7);
IkReal x10590=(cj9*r01*x10584);
IkReal x10591=(r00*sj9*x10584);
IkReal x10592=((0.03431)*x10581);
IkReal x10593=((0.03431)*x10584);
IkReal x10594=(cj8*x10581);
IkReal x10595=(cj8*x10584);
IkReal x10596=(r01*sj9);
IkReal x10597=(sj8*x10581);
IkReal x10598=(r11*sj9);
IkReal x10599=(sj8*x10584);
IkReal x10600=(cj9*r00);
IkReal x10601=((1.0)*sj8*x10581);
IkReal x10602=(cj9*r10);
IkReal x10603=((1.0)*sj8*x10584);
IkReal x10604=((1.0)*cj8*x10584);
IkReal x10605=(r02*sj8);
IkReal x10606=(r12*sj8);
IkReal x10607=(cj8*sj9*x10581);
IkReal x10608=((1.0)*cj8*x10581);
evalcond[0]=((((-1.0)*x10585*x10587))+(((-1.0)*x10582*x10586))+(((-1.0)*x10580*x10582))+(((-1.0)*x10583*x10585)));
evalcond[1]=(x10590+x10591+(((-1.0)*x10582*x10583))+(((-1.0)*x10582*x10587))+x10589+x10588);
evalcond[2]=((0.00337)+(((-1.0)*py*x10585))+(((-1.0)*px*x10582))+((x10583*x10593))+((x10580*x10592))+((x10587*x10593))+((x10586*x10592)));
evalcond[3]=((1.0)+((r02*x10594))+((r12*x10595))+(((-1.0)*x10602*x10603))+(((-1.0)*x10600*x10601))+((x10598*x10599))+((x10596*x10597)));
evalcond[4]=((((-1.0)*x10596*x10603))+((r12*x10594))+(((-1.0)*x10601*x10602))+((x10597*x10598))+(((-1.0)*r02*x10604))+((x10599*x10600)));
evalcond[5]=((((-1.0)*x10600*x10608))+((x10595*x10598))+(((-1.0)*x10602*x10604))+(((-1.0)*x10585*x10606))+((r01*x10607))+(((-1.0)*x10582*x10605)));
evalcond[6]=(((cj5*sj7))+((x10595*x10600))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x10602*x10608))+((r11*x10607))+(((-1.0)*x10582*x10606))+((x10584*x10605))+(((-1.0)*x10596*x10604)));
evalcond[7]=((((0.16769)*x10588))+(((-1.0)*(0.00036)*sj5))+(((0.32901)*cj5))+((px*x10584))+(((-0.03431)*x10590))+((x10583*x10592))+(((0.16769)*x10589))+((x10587*x10592))+(((-0.03431)*x10591))+(((-1.0)*py*x10582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10609=((337.0)*cj9);
IkReal x10610=((337.0)*sj9);
CheckValue<IkReal> x10611 = IKatan2WithCheck(IkReal((((r01*x10609))+((r00*x10610)))),((((-1.0)*r11*x10609))+(((-1.0)*r10*x10610))),IKFAST_ATAN2_MAGTHRESH);
if(!x10611.valid){
continue;
}
CheckValue<IkReal> x10612=IKPowWithIntegerCheck(IKsign(((((100000.0)*cj9*rxp1_2))+(((100000.0)*rxp0_2*sj9)))),-1);
if(!x10612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10611.value)+(((1.5707963267949)*(x10612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10613=(cj9*r01);
IkReal x10614=IKcos(j4);
IkReal x10615=((1.0)*x10614);
IkReal x10616=(cj9*r11);
IkReal x10617=IKsin(j4);
IkReal x10618=((1.0)*x10617);
IkReal x10619=(r00*sj9);
IkReal x10620=(r10*sj9);
IkReal x10621=(cj5*cj7);
IkReal x10622=(sj5*sj7);
IkReal x10623=(cj9*r01*x10617);
IkReal x10624=(r00*sj9*x10617);
IkReal x10625=((0.03431)*x10614);
IkReal x10626=((0.03431)*x10617);
IkReal x10627=(cj8*x10614);
IkReal x10628=(cj8*x10617);
IkReal x10629=(r01*sj9);
IkReal x10630=(sj8*x10614);
IkReal x10631=(r11*sj9);
IkReal x10632=(sj8*x10617);
IkReal x10633=(cj9*r00);
IkReal x10634=((1.0)*sj8*x10614);
IkReal x10635=(cj9*r10);
IkReal x10636=((1.0)*sj8*x10617);
IkReal x10637=((1.0)*cj8*x10617);
IkReal x10638=(r02*sj8);
IkReal x10639=(r12*sj8);
IkReal x10640=(cj8*sj9*x10614);
IkReal x10641=((1.0)*cj8*x10614);
evalcond[0]=((((-1.0)*x10613*x10615))+(((-1.0)*x10615*x10619))+(((-1.0)*x10618*x10620))+(((-1.0)*x10616*x10618)));
evalcond[1]=((((-1.0)*x10615*x10620))+x10621+x10624+x10622+x10623+(((-1.0)*x10615*x10616)));
evalcond[2]=((0.00337)+((x10613*x10625))+(((-1.0)*px*x10615))+(((-1.0)*py*x10618))+((x10619*x10625))+((x10620*x10626))+((x10616*x10626)));
evalcond[3]=((1.0)+((x10629*x10630))+(((-1.0)*x10633*x10634))+((x10631*x10632))+(((-1.0)*x10635*x10636))+((r02*x10627))+((r12*x10628)));
evalcond[4]=((((-1.0)*x10634*x10635))+((x10630*x10631))+((r12*x10627))+((x10632*x10633))+(((-1.0)*x10629*x10636))+(((-1.0)*r02*x10637)));
evalcond[5]=(((r01*x10640))+((x10628*x10631))+(((-1.0)*x10615*x10638))+(((-1.0)*x10635*x10637))+(((-1.0)*x10618*x10639))+(((-1.0)*x10633*x10641)));
evalcond[6]=(((cj5*sj7))+((x10628*x10633))+(((-1.0)*x10615*x10639))+((x10617*x10638))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x10635*x10641))+((r11*x10640))+(((-1.0)*x10629*x10637)));
evalcond[7]=((((-0.03431)*x10624))+(((-1.0)*(0.00036)*sj5))+((x10620*x10625))+(((-1.0)*py*x10615))+(((0.16769)*x10622))+((px*x10617))+(((0.32901)*cj5))+((x10616*x10625))+(((-0.03431)*x10623))+(((0.16769)*x10621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10642=cj9*cj9;
IkReal x10643=(cj5*cj7);
IkReal x10644=(cj9*r01);
IkReal x10645=(r00*sj9);
IkReal x10646=(cj6*sj7);
IkReal x10647=(cj9*r11);
IkReal x10648=(r10*sj9);
IkReal x10649=((1.0)*sj5*sj6*sj7);
IkReal x10650=((1.0)*cj5*cj7);
IkReal x10651=(sj5*sj6*sj7);
CheckValue<IkReal> x10652 = IKatan2WithCheck(IkReal((((x10646*x10648))+((x10643*x10645))+((x10643*x10644))+(((-1.0)*x10644*x10649))+(((-1.0)*x10645*x10649))+((x10646*x10647)))),((((-1.0)*x10648*x10650))+((x10648*x10651))+((x10647*x10651))+((x10644*x10646))+((x10645*x10646))+(((-1.0)*x10647*x10650))),IKFAST_ATAN2_MAGTHRESH);
if(!x10652.valid){
continue;
}
CheckValue<IkReal> x10653=IKPowWithIntegerCheck(IKsign(((-1.0)+(((r20*r20)*(((1.0)+(((-1.0)*x10642))))))+((x10642*(r21*r21)))+(((2.0)*cj9*r20*r21*sj9)))),-1);
if(!x10653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10652.value)+(((1.5707963267949)*(x10653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10654=(cj6*sj7);
IkReal x10655=(cj9*r01);
IkReal x10656=IKcos(j4);
IkReal x10657=((1.0)*x10656);
IkReal x10658=(cj9*r11);
IkReal x10659=IKsin(j4);
IkReal x10660=((1.0)*x10659);
IkReal x10661=(r00*sj9);
IkReal x10662=(r10*sj9);
IkReal x10663=(cj5*cj7);
IkReal x10664=(cj9*r01*x10659);
IkReal x10665=(r00*sj9*x10659);
IkReal x10666=((1.0)*sj6);
IkReal x10667=(cj8*x10656);
IkReal x10668=(cj8*x10659);
IkReal x10669=(r01*sj9);
IkReal x10670=(sj8*x10656);
IkReal x10671=(r11*sj9);
IkReal x10672=(sj8*x10659);
IkReal x10673=(cj9*r00);
IkReal x10674=((1.0)*sj8*x10656);
IkReal x10675=(cj9*r10);
IkReal x10676=((1.0)*sj8*x10659);
IkReal x10677=((1.0)*cj8*x10659);
IkReal x10678=(r02*sj8);
IkReal x10679=(r12*sj8);
IkReal x10680=(cj8*sj9*x10656);
IkReal x10681=((1.0)*cj8*x10656);
IkReal x10682=((0.03431)*x10656);
IkReal x10683=((0.03431)*x10659);
IkReal x10684=(sj5*sj6);
evalcond[0]=((((-1.0)*x10660*x10662))+(((-1.0)*x10654))+(((-1.0)*x10658*x10660))+(((-1.0)*x10655*x10657))+(((-1.0)*x10657*x10661)));
evalcond[1]=((((-1.0)*x10657*x10662))+(((-1.0)*x10657*x10658))+x10665+x10664+x10663+(((-1.0)*sj5*sj7*x10666)));
evalcond[2]=((((-1.0)*x10666))+((r12*x10668))+((x10669*x10670))+((x10671*x10672))+(((-1.0)*x10673*x10674))+((r02*x10667))+(((-1.0)*x10675*x10676)));
evalcond[3]=((((-1.0)*x10669*x10676))+((cj6*sj5))+((x10672*x10673))+(((-1.0)*r02*x10677))+((r12*x10667))+((x10670*x10671))+(((-1.0)*x10674*x10675)));
evalcond[4]=((((-1.0)*x10657*x10678))+(((-1.0)*x10660*x10679))+((r01*x10680))+((cj6*cj7))+(((-1.0)*x10675*x10677))+(((-1.0)*x10673*x10681))+((x10668*x10671)));
evalcond[5]=((0.00337)+(((-1.0)*px*x10657))+(((-1.0)*py*x10660))+(((0.00036)*cj6))+((x10662*x10683))+((x10658*x10683))+(((-0.16769)*x10654))+((x10661*x10682))+((x10655*x10682)));
evalcond[6]=(((cj5*sj7))+((r11*x10680))+((x10659*x10678))+(((-1.0)*x10669*x10677))+(((-1.0)*x10675*x10681))+(((-1.0)*x10657*x10679))+((x10668*x10673))+((cj7*x10684)));
evalcond[7]=(((x10662*x10682))+(((-1.0)*py*x10657))+(((-0.03431)*x10665))+(((0.16769)*x10663))+((px*x10659))+(((0.32901)*cj5))+(((-0.16769)*sj7*x10684))+(((-0.03431)*x10664))+(((0.00036)*x10684))+((x10658*x10682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10685=(cj6*cj7*cj9);
IkReal x10686=(cj6*cj7);
IkReal x10687=(cj6*sj7*sj8);
IkReal x10688=(cj6*cj8*sj7);
IkReal x10689=((1.0)*cj6*cj8*sj7);
CheckValue<IkReal> x10690 = IKatan2WithCheck(IkReal((((r02*x10687))+((r01*x10685))+((r00*sj9*x10686))+(((-1.0)*r01*sj9*x10689))+((cj9*r00*x10688)))),(((r11*sj9*x10688))+(((-1.0)*r10*sj9*x10686))+(((-1.0)*r11*x10685))+(((-1.0)*r12*x10687))+(((-1.0)*cj9*r10*x10689))),IKFAST_ATAN2_MAGTHRESH);
if(!x10690.valid){
continue;
}
CheckValue<IkReal> x10691=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj8*r22))+((cj9*r20*sj8))+(((-1.0)*r21*sj8*sj9)))),-1);
if(!x10691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10690.value)+(((1.5707963267949)*(x10691.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10692=(cj6*sj7);
IkReal x10693=(cj9*r01);
IkReal x10694=IKcos(j4);
IkReal x10695=((1.0)*x10694);
IkReal x10696=(cj9*r11);
IkReal x10697=IKsin(j4);
IkReal x10698=((1.0)*x10697);
IkReal x10699=(r00*sj9);
IkReal x10700=(r10*sj9);
IkReal x10701=(cj5*cj7);
IkReal x10702=(cj9*r01*x10697);
IkReal x10703=(r00*sj9*x10697);
IkReal x10704=((1.0)*sj6);
IkReal x10705=(cj8*x10694);
IkReal x10706=(cj8*x10697);
IkReal x10707=(r01*sj9);
IkReal x10708=(sj8*x10694);
IkReal x10709=(r11*sj9);
IkReal x10710=(sj8*x10697);
IkReal x10711=(cj9*r00);
IkReal x10712=((1.0)*sj8*x10694);
IkReal x10713=(cj9*r10);
IkReal x10714=((1.0)*sj8*x10697);
IkReal x10715=((1.0)*cj8*x10697);
IkReal x10716=(r02*sj8);
IkReal x10717=(r12*sj8);
IkReal x10718=(cj8*sj9*x10694);
IkReal x10719=((1.0)*cj8*x10694);
IkReal x10720=((0.03431)*x10694);
IkReal x10721=((0.03431)*x10697);
IkReal x10722=(sj5*sj6);
evalcond[0]=((((-1.0)*x10696*x10698))+(((-1.0)*x10693*x10695))+(((-1.0)*x10698*x10700))+(((-1.0)*x10695*x10699))+(((-1.0)*x10692)));
evalcond[1]=((((-1.0)*sj5*sj7*x10704))+(((-1.0)*x10695*x10700))+x10702+x10703+x10701+(((-1.0)*x10695*x10696)));
evalcond[2]=(((r02*x10705))+(((-1.0)*x10704))+((x10707*x10708))+((x10709*x10710))+(((-1.0)*x10713*x10714))+((r12*x10706))+(((-1.0)*x10711*x10712)));
evalcond[3]=(((x10710*x10711))+((cj6*sj5))+(((-1.0)*x10707*x10714))+((x10708*x10709))+(((-1.0)*x10712*x10713))+((r12*x10705))+(((-1.0)*r02*x10715)));
evalcond[4]=(((x10706*x10709))+(((-1.0)*x10713*x10715))+(((-1.0)*x10695*x10716))+((cj6*cj7))+(((-1.0)*x10711*x10719))+((r01*x10718))+(((-1.0)*x10698*x10717)));
evalcond[5]=((0.00337)+((x10700*x10721))+(((-1.0)*py*x10698))+(((0.00036)*cj6))+(((-1.0)*px*x10695))+((x10693*x10720))+((x10699*x10720))+((x10696*x10721))+(((-0.16769)*x10692)));
evalcond[6]=(((cj5*sj7))+((x10706*x10711))+((x10697*x10716))+((cj7*x10722))+((r11*x10718))+(((-1.0)*x10695*x10717))+(((-1.0)*x10713*x10719))+(((-1.0)*x10707*x10715)));
evalcond[7]=((((-1.0)*py*x10695))+(((0.00036)*x10722))+((px*x10697))+((x10700*x10720))+(((0.32901)*cj5))+(((0.16769)*x10701))+(((-0.16769)*sj7*x10722))+(((-0.03431)*x10702))+((x10696*x10720))+(((-0.03431)*x10703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10723=(cj9*sj6);
IkReal x10724=(sj6*sj9);
IkReal x10725=(cj6*sj7);
IkReal x10726=(cj6*sj7*sj8);
IkReal x10727=((1.0)*cj6*sj7*sj8);
CheckValue<IkReal> x10728 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x10724))+((cj9*r00*x10726))+(((-1.0)*cj8*r02*x10725))+(((-1.0)*r01*x10723))+(((-1.0)*r01*sj9*x10727)))),(((r11*x10723))+((r10*x10724))+((r11*sj9*x10726))+(((-1.0)*cj9*r10*x10727))+((cj8*r12*x10725))),IKFAST_ATAN2_MAGTHRESH);
if(!x10728.valid){
continue;
}
CheckValue<IkReal> x10729=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj8))+((cj8*r21*sj9))+(((-1.0)*cj8*cj9*r20)))),-1);
if(!x10729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10728.value)+(((1.5707963267949)*(x10729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x10730=(cj6*sj7);
IkReal x10731=(cj9*r01);
IkReal x10732=IKcos(j4);
IkReal x10733=((1.0)*x10732);
IkReal x10734=(cj9*r11);
IkReal x10735=IKsin(j4);
IkReal x10736=((1.0)*x10735);
IkReal x10737=(r00*sj9);
IkReal x10738=(r10*sj9);
IkReal x10739=(cj5*cj7);
IkReal x10740=(cj9*r01*x10735);
IkReal x10741=(r00*sj9*x10735);
IkReal x10742=((1.0)*sj6);
IkReal x10743=(cj8*x10732);
IkReal x10744=(cj8*x10735);
IkReal x10745=(r01*sj9);
IkReal x10746=(sj8*x10732);
IkReal x10747=(r11*sj9);
IkReal x10748=(sj8*x10735);
IkReal x10749=(cj9*r00);
IkReal x10750=((1.0)*sj8*x10732);
IkReal x10751=(cj9*r10);
IkReal x10752=((1.0)*sj8*x10735);
IkReal x10753=((1.0)*cj8*x10735);
IkReal x10754=(r02*sj8);
IkReal x10755=(r12*sj8);
IkReal x10756=(cj8*sj9*x10732);
IkReal x10757=((1.0)*cj8*x10732);
IkReal x10758=((0.03431)*x10732);
IkReal x10759=((0.03431)*x10735);
IkReal x10760=(sj5*sj6);
evalcond[0]=((((-1.0)*x10731*x10733))+(((-1.0)*x10736*x10738))+(((-1.0)*x10734*x10736))+(((-1.0)*x10730))+(((-1.0)*x10733*x10737)));
evalcond[1]=((((-1.0)*sj5*sj7*x10742))+(((-1.0)*x10733*x10734))+(((-1.0)*x10733*x10738))+x10739+x10741+x10740);
evalcond[2]=((((-1.0)*x10742))+((r02*x10743))+((r12*x10744))+((x10747*x10748))+((x10745*x10746))+(((-1.0)*x10749*x10750))+(((-1.0)*x10751*x10752)));
evalcond[3]=(((cj6*sj5))+(((-1.0)*r02*x10753))+((x10746*x10747))+(((-1.0)*x10750*x10751))+(((-1.0)*x10745*x10752))+((x10748*x10749))+((r12*x10743)));
evalcond[4]=((((-1.0)*x10736*x10755))+(((-1.0)*x10733*x10754))+((cj6*cj7))+(((-1.0)*x10749*x10757))+((r01*x10756))+((x10744*x10747))+(((-1.0)*x10751*x10753)));
evalcond[5]=((0.00337)+(((-0.16769)*x10730))+((x10731*x10758))+(((0.00036)*cj6))+(((-1.0)*py*x10736))+((x10734*x10759))+((x10738*x10759))+((x10737*x10758))+(((-1.0)*px*x10733)));
evalcond[6]=((((-1.0)*x10733*x10755))+((cj5*sj7))+((r11*x10756))+((x10744*x10749))+(((-1.0)*x10751*x10757))+((x10735*x10754))+(((-1.0)*x10745*x10753))+((cj7*x10760)));
evalcond[7]=((((-0.03431)*x10741))+(((0.16769)*x10739))+((px*x10735))+(((0.00036)*x10760))+(((-0.16769)*sj7*x10760))+((x10738*x10758))+(((0.32901)*cj5))+(((-1.0)*py*x10733))+((x10734*x10758))+(((-0.03431)*x10740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10761=((0.00337)*cj9);
IkReal x10762=((0.00337)*sj9);
IkReal x10763=(cj6*sj7);
IkReal x10764=((0.00036)*cj6*cj9);
IkReal x10765=((0.00036)*cj6*sj9);
IkReal x10766=((0.202)*cj6*cj9*sj7);
IkReal x10767=((0.202)*cj6*sj7*sj9);
CheckValue<IkReal> x10768=IKPowWithIntegerCheck(IKsign((((cj9*rxp1_2))+((rxp0_2*sj9)))),-1);
if(!x10768.valid){
continue;
}
CheckValue<IkReal> x10769 = IKatan2WithCheck(IkReal((((px*x10763))+((r00*x10762))+((r01*x10764))+(((-1.0)*r00*x10767))+(((-1.0)*r01*x10766))+((r00*x10765))+((r01*x10761)))),((((-1.0)*py*x10763))+(((-1.0)*r11*x10764))+(((-1.0)*r10*x10762))+((r11*x10766))+((r10*x10767))+(((-1.0)*r11*x10761))+(((-1.0)*r10*x10765))),IKFAST_ATAN2_MAGTHRESH);
if(!x10769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10768.value)))+(x10769.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x10770=(cj6*sj7);
IkReal x10771=(cj9*r01);
IkReal x10772=IKcos(j4);
IkReal x10773=((1.0)*x10772);
IkReal x10774=(cj9*r11);
IkReal x10775=IKsin(j4);
IkReal x10776=((1.0)*x10775);
IkReal x10777=(r00*sj9);
IkReal x10778=(r10*sj9);
IkReal x10779=(cj5*cj7);
IkReal x10780=(cj9*r01*x10775);
IkReal x10781=(r00*sj9*x10775);
IkReal x10782=(sj5*sj6*sj7);
IkReal x10783=((0.03431)*x10772);
IkReal x10784=((0.03431)*x10775);
evalcond[0]=((((-1.0)*x10771*x10773))+(((-1.0)*x10774*x10776))+(((-1.0)*x10773*x10777))+(((-1.0)*x10776*x10778))+(((-1.0)*x10770)));
evalcond[1]=((((-1.0)*x10773*x10774))+x10779+x10780+x10781+(((-1.0)*x10773*x10778))+(((-1.0)*x10782)));
evalcond[2]=((0.00337)+(((-0.16769)*x10770))+(((0.00036)*cj6))+(((-1.0)*py*x10776))+(((-1.0)*px*x10773))+((x10777*x10783))+((x10774*x10784))+((x10778*x10784))+((x10771*x10783)));
evalcond[3]=(((x10778*x10783))+(((-0.03431)*x10781))+(((0.00036)*sj5*sj6))+(((0.32901)*cj5))+((x10774*x10783))+(((-0.16769)*x10782))+((px*x10775))+(((-1.0)*py*x10773))+(((0.16769)*x10779))+(((-0.03431)*x10780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[2];
IkReal x10785=((1.0)*sj4);
IkReal x10786=((((-1.0)*cj9*r01*x10785))+((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*r00*sj9*x10785)));
j8eval[0]=x10786;
j8eval[1]=IKsign(x10786);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x10787=((1.0)*cj4);
IkReal x10788=((1.0)*sj4);
IkReal x10789=((((-1.0)*r00*sj9*x10787))+(((-1.0)*cj9*r11*x10788))+(((-1.0)*cj9*r01*x10787))+(((-1.0)*r10*sj9*x10788)));
j8eval[0]=x10789;
j8eval[1]=IKsign(x10789);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x10790=r21*r21;
IkReal x10791=(cj9*r20);
IkReal x10792=cj9*cj9;
IkReal x10793=(((x10792*(r20*r20)))+(((-1.0)*x10790*x10792))+(((-2.0)*r21*sj9*x10791))+x10790+(r22*r22));
IkReal x10794=(sj5*sj7);
IkReal x10795=(cj5*cj6);
IkReal x10796=(r21*sj9);
IkReal x10797=((1.0)*cj9*r20);
IkReal x10798=(cj5*cj7*sj6);
j8eval[0]=x10793;
j8eval[1]=((IKabs((((x10791*x10794))+(((-1.0)*x10797*x10798))+((r22*x10795))+((x10796*x10798))+(((-1.0)*sj5*sj7*x10796)))))+(IKabs((((r22*x10794))+(((-1.0)*r22*x10798))+(((-1.0)*x10795*x10797))+((x10795*x10796))))));
j8eval[2]=IKsign(x10793);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10799=(cj9*r21);
IkReal x10800=(r20*sj9);
IkReal x10801=((1.0)*cj4);
IkReal x10802=(cj9*r01);
IkReal x10803=(r00*sj9);
IkReal x10804=((1.0)*sj4);
IkReal x10805=(cj9*r11);
IkReal x10806=(r10*sj9);
IkReal x10807=(sj4*x10802);
IkReal x10808=(sj4*x10803);
IkReal x10809=((0.03431)*cj4);
IkReal x10810=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*x10799))+(((-1.0)*x10800)));
evalcond[2]=((((-1.0)*x10801*x10803))+(((-1.0)*x10804*x10806))+(((-1.0)*x10801*x10802))+(((-1.0)*x10804*x10805)));
evalcond[3]=((0.4967)+(((0.03431)*x10800))+(((-1.0)*(1.0)*pz))+(((0.03431)*x10799)));
evalcond[4]=((((-1.0)*x10801*x10805))+x10807+x10808+(((-1.0)*x10801*x10806)));
evalcond[5]=((0.00337)+((x10803*x10809))+(((0.00036)*cj6))+(((-1.0)*py*x10804))+(((-1.0)*px*x10801))+((x10802*x10809))+((x10805*x10810))+((x10806*x10810)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x10808))+(((-0.03431)*x10807))+((x10806*x10809))+((x10805*x10809))+(((-1.0)*py*x10801))+(((0.00036)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x10811=((1.0)*cj4);
IkReal x10812=((((-1.0)*r10*sj9*x10811))+((cj9*r01*sj4))+(((-1.0)*cj9*r11*x10811))+((r00*sj4*sj9)));
j8eval[0]=x10812;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x10812);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x10813=((1.0)*cj4);
IkReal x10814=((1.0)*sj9);
IkReal x10815=((((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*cj9*r01*x10813))+(((-1.0)*r00*sj9*x10813))+(((-1.0)*r10*sj4*x10814)));
j8eval[0]=x10815;
j8eval[1]=IKsign(x10815);
j8eval[2]=((IKabs((((cj6*cj9*r20))+(((-1.0)*cj6*r21*x10814)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x10816=(cj4*r21);
IkReal x10817=(r11*x10816);
IkReal x10818=((1.0)*sj4);
IkReal x10819=(r01*r21);
IkReal x10820=(r21*sj9);
IkReal x10821=(cj9*r20*sj9);
IkReal x10822=cj9*cj9;
IkReal x10823=(r20*x10822);
IkReal x10824=((((-1.0)*x10818*x10819))+((cj4*r12*r22))+(((-1.0)*r00*sj4*x10823))+x10817+((cj4*r10*x10823))+((sj4*x10819*x10822))+(((-1.0)*x10817*x10822))+((r01*sj4*x10821))+(((-1.0)*cj4*r11*x10821))+(((-1.0)*r02*r22*x10818))+((cj9*r00*sj4*x10820))+(((-1.0)*cj9*r10*sj9*x10816)));
j8eval[0]=x10824;
j8eval[1]=IKsign(x10824);
j8eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*sj6*x10820))+((sj6*((cj9*r20))))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10825=(cj9*r21);
IkReal x10826=(r20*sj9);
IkReal x10827=((1.0)*cj4);
IkReal x10828=(cj9*r01);
IkReal x10829=(r00*sj9);
IkReal x10830=((1.0)*sj4);
IkReal x10831=(cj9*r11);
IkReal x10832=(r10*sj9);
IkReal x10833=(sj4*x10828);
IkReal x10834=(sj4*x10829);
IkReal x10835=((0.03431)*cj4);
IkReal x10836=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x10826))+(((-1.0)*x10825)));
evalcond[2]=((((-1.0)*x10830*x10831))+(((-1.0)*x10830*x10832))+(((-1.0)*x10827*x10829))+(((-1.0)*x10827*x10828)));
evalcond[3]=((0.4967)+(((0.03431)*x10826))+(((-1.0)*(1.0)*pz))+(((0.03431)*x10825)));
evalcond[4]=((((-1.0)*x10827*x10831))+(((-1.0)*x10827*x10832))+x10833+x10834);
evalcond[5]=((0.00373)+((x10832*x10836))+(((-1.0)*px*x10827))+((x10829*x10835))+((x10828*x10835))+((x10831*x10836))+(((-1.0)*py*x10830)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x10827))+(((-0.03431)*x10833))+((x10832*x10835))+((x10831*x10835))+(((-0.03431)*x10834)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x10837=((1.0)*cj9);
IkReal x10838=((1.0)*sj9);
IkReal x10839=((((-1.0)*r11*sj4*x10837))+(((-1.0)*cj4*r01*x10837))+(((-1.0)*cj4*r00*x10838))+(((-1.0)*r10*sj4*x10838)));
j8eval[0]=x10839;
j8eval[1]=((IKabs(((((-1.0)*r21*x10838))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x10839);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x10840=((1.0)*sj9);
IkReal x10841=((((-1.0)*cj4*r10*x10840))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x10841;
j8eval[1]=IKsign(x10841);
j8eval[2]=((IKabs(((((-1.0)*r21*x10840))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x10842=(cj4*r01);
IkReal x10843=(r21*x10842);
IkReal x10844=(r11*sj4);
IkReal x10845=(r21*x10844);
IkReal x10846=(cj4*r00);
IkReal x10847=cj9*cj9;
IkReal x10848=(r20*x10847);
IkReal x10849=(r10*sj4);
IkReal x10850=((1.0)*cj9*r21*sj9);
IkReal x10851=((1.0)*cj9*r20*sj9);
IkReal x10852=((1.0)*x10847);
IkReal x10853=(((x10846*x10848))+((x10848*x10849))+(((-1.0)*x10843*x10852))+(((-1.0)*x10845*x10852))+x10845+x10843+((r12*r22*sj4))+(((-1.0)*x10849*x10850))+(((-1.0)*x10844*x10851))+((cj4*r02*r22))+(((-1.0)*x10846*x10850))+(((-1.0)*x10842*x10851)));
j8eval[0]=x10853;
j8eval[1]=IKsign(x10853);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10854=(cj4*r01);
IkReal x10855=(r21*x10854);
IkReal x10856=(r11*sj4);
IkReal x10857=(r21*x10856);
IkReal x10858=(cj4*r00);
IkReal x10859=cj9*cj9;
IkReal x10860=(r20*x10859);
IkReal x10861=(r10*sj4);
IkReal x10862=((1.0)*cj9*r21*sj9);
IkReal x10863=((1.0)*cj9*r20*sj9);
IkReal x10864=((1.0)*x10859);
CheckValue<IkReal> x10865=IKPowWithIntegerCheck(IKsign((((x10858*x10860))+(((-1.0)*x10861*x10862))+(((-1.0)*x10856*x10863))+((x10860*x10861))+((r12*r22*sj4))+(((-1.0)*x10854*x10863))+(((-1.0)*x10857*x10864))+(((-1.0)*x10855*x10864))+((cj4*r02*r22))+x10857+x10855+(((-1.0)*x10858*x10862)))),-1);
if(!x10865.valid){
continue;
}
CheckValue<IkReal> x10866 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x10866.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10865.value)))+(x10866.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10867=IKcos(j8);
IkReal x10868=IKsin(j8);
IkReal x10869=(r21*sj9);
IkReal x10870=(cj9*r20);
IkReal x10871=((1.0)*x10868);
IkReal x10872=((1.0)*x10867);
IkReal x10873=(cj4*x10867);
IkReal x10874=(r12*sj4);
IkReal x10875=(r01*sj9);
IkReal x10876=(cj4*x10868);
IkReal x10877=(r11*sj4*sj9);
IkReal x10878=(cj9*r00);
IkReal x10879=((1.0)*cj4*x10868);
IkReal x10880=(cj9*r10*sj4);
IkReal x10881=(r02*sj4);
IkReal x10882=(r11*sj9);
IkReal x10883=(cj9*r00*sj4);
IkReal x10884=(cj9*r10);
IkReal x10885=((1.0)*cj4*x10867);
IkReal x10886=(r01*sj4*sj9);
evalcond[0]=(((r22*x10867))+((x10868*x10869))+(((-1.0)*x10870*x10871)));
evalcond[1]=((((-1.0)*x10870*x10872))+(((-1.0)*r22*x10871))+((x10867*x10869)));
evalcond[2]=(((x10875*x10876))+((r02*x10873))+(((-1.0)*x10878*x10879))+((x10868*x10877))+((x10867*x10874))+(((-1.0)*x10871*x10880)));
evalcond[3]=((((-1.0)*x10872*x10886))+((x10868*x10881))+(((-1.0)*x10884*x10885))+(((-1.0)*r12*x10879))+((x10867*x10883))+((x10873*x10882)));
evalcond[4]=((1.0)+(((-1.0)*x10872*x10881))+((x10868*x10883))+(((-1.0)*x10879*x10884))+((r12*x10873))+(((-1.0)*x10871*x10886))+((x10876*x10882)));
evalcond[5]=((1.0)+((x10867*x10877))+(((-1.0)*x10871*x10874))+(((-1.0)*r02*x10879))+((x10873*x10875))+(((-1.0)*x10872*x10880))+(((-1.0)*x10878*x10885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10887=((1.0)*sj9);
CheckValue<IkReal> x10888 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10887))+((cj9*r20)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x10888.valid){
continue;
}
CheckValue<IkReal> x10889=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x10887))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x10889.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10888.value)+(((1.5707963267949)*(x10889.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10890=IKcos(j8);
IkReal x10891=IKsin(j8);
IkReal x10892=(r21*sj9);
IkReal x10893=(cj9*r20);
IkReal x10894=((1.0)*x10891);
IkReal x10895=((1.0)*x10890);
IkReal x10896=(cj4*x10890);
IkReal x10897=(r12*sj4);
IkReal x10898=(r01*sj9);
IkReal x10899=(cj4*x10891);
IkReal x10900=(r11*sj4*sj9);
IkReal x10901=(cj9*r00);
IkReal x10902=((1.0)*cj4*x10891);
IkReal x10903=(cj9*r10*sj4);
IkReal x10904=(r02*sj4);
IkReal x10905=(r11*sj9);
IkReal x10906=(cj9*r00*sj4);
IkReal x10907=(cj9*r10);
IkReal x10908=((1.0)*cj4*x10890);
IkReal x10909=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x10893*x10894))+((x10891*x10892))+((r22*x10890)));
evalcond[1]=((((-1.0)*r22*x10894))+((x10890*x10892))+(((-1.0)*x10893*x10895)));
evalcond[2]=((((-1.0)*x10894*x10903))+((x10890*x10897))+(((-1.0)*x10901*x10902))+((x10891*x10900))+((x10898*x10899))+((r02*x10896)));
evalcond[3]=(((x10890*x10906))+(((-1.0)*r12*x10902))+(((-1.0)*x10907*x10908))+((x10896*x10905))+((x10891*x10904))+(((-1.0)*x10895*x10909)));
evalcond[4]=((1.0)+((x10899*x10905))+(((-1.0)*x10894*x10909))+((r12*x10896))+((x10891*x10906))+(((-1.0)*x10895*x10904))+(((-1.0)*x10902*x10907)));
evalcond[5]=((1.0)+(((-1.0)*x10894*x10897))+((x10890*x10900))+(((-1.0)*r02*x10902))+(((-1.0)*x10901*x10908))+((x10896*x10898))+(((-1.0)*x10895*x10903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10910=((1.0)*sj9);
IkReal x10911=((1.0)*cj9);
CheckValue<IkReal> x10912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x10910))+(((-1.0)*cj4*r00*x10910))+(((-1.0)*cj4*r01*x10911))+(((-1.0)*r11*sj4*x10911)))),-1);
if(!x10912.valid){
continue;
}
CheckValue<IkReal> x10913 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x10910))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x10913.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10912.value)))+(x10913.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10914=IKcos(j8);
IkReal x10915=IKsin(j8);
IkReal x10916=(r21*sj9);
IkReal x10917=(cj9*r20);
IkReal x10918=((1.0)*x10915);
IkReal x10919=((1.0)*x10914);
IkReal x10920=(cj4*x10914);
IkReal x10921=(r12*sj4);
IkReal x10922=(r01*sj9);
IkReal x10923=(cj4*x10915);
IkReal x10924=(r11*sj4*sj9);
IkReal x10925=(cj9*r00);
IkReal x10926=((1.0)*cj4*x10915);
IkReal x10927=(cj9*r10*sj4);
IkReal x10928=(r02*sj4);
IkReal x10929=(r11*sj9);
IkReal x10930=(cj9*r00*sj4);
IkReal x10931=(cj9*r10);
IkReal x10932=((1.0)*cj4*x10914);
IkReal x10933=(r01*sj4*sj9);
evalcond[0]=(((x10915*x10916))+((r22*x10914))+(((-1.0)*x10917*x10918)));
evalcond[1]=((((-1.0)*r22*x10918))+(((-1.0)*x10917*x10919))+((x10914*x10916)));
evalcond[2]=(((x10915*x10924))+((x10914*x10921))+((x10922*x10923))+(((-1.0)*x10918*x10927))+(((-1.0)*x10925*x10926))+((r02*x10920)));
evalcond[3]=((((-1.0)*x10919*x10933))+(((-1.0)*x10931*x10932))+((x10915*x10928))+((x10914*x10930))+((x10920*x10929))+(((-1.0)*r12*x10926)));
evalcond[4]=((1.0)+(((-1.0)*x10918*x10933))+((x10915*x10930))+((r12*x10920))+((x10923*x10929))+(((-1.0)*x10926*x10931))+(((-1.0)*x10919*x10928)));
evalcond[5]=((1.0)+((x10920*x10922))+(((-1.0)*x10918*x10921))+(((-1.0)*x10919*x10927))+(((-1.0)*r02*x10926))+(((-1.0)*x10925*x10932))+((x10914*x10924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10934=(cj9*r21);
IkReal x10935=(r20*sj9);
IkReal x10936=((1.0)*cj4);
IkReal x10937=(cj9*r01);
IkReal x10938=(r00*sj9);
IkReal x10939=((1.0)*sj4);
IkReal x10940=(cj9*r11);
IkReal x10941=(r10*sj9);
IkReal x10942=(sj4*x10937);
IkReal x10943=(sj4*x10938);
IkReal x10944=((0.03431)*cj4);
IkReal x10945=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x10935))+(((-1.0)*x10934)));
evalcond[2]=((((-1.0)*x10939*x10940))+(((-1.0)*x10936*x10938))+(((-1.0)*x10936*x10937))+(((-1.0)*x10939*x10941)));
evalcond[3]=((0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x10934))+(((0.03431)*x10935)));
evalcond[4]=((((-1.0)*x10936*x10940))+x10943+x10942+(((-1.0)*x10936*x10941)));
evalcond[5]=((0.00301)+((x10937*x10944))+(((-1.0)*py*x10939))+(((-1.0)*px*x10936))+((x10938*x10944))+((x10940*x10945))+((x10941*x10945)));
evalcond[6]=(((px*sj4))+((x10940*x10944))+(((-1.0)*py*x10936))+(((-0.03431)*x10942))+((x10941*x10944))+(((-0.03431)*x10943)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x10946=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x10946;
j8eval[1]=IKsign(x10946);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x10947=((1.0)*cj9);
IkReal x10948=((((-1.0)*cj4*r11*x10947))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x10948;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x10947)))))+(IKabs(r22)));
j8eval[2]=IKsign(x10948);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x10949=((1.0)*r21);
IkReal x10950=(cj4*r01);
IkReal x10951=((1.0)*r22);
IkReal x10952=(r11*sj4);
IkReal x10953=(cj4*r00);
IkReal x10954=(cj9*r21*sj9);
IkReal x10955=(cj9*r20*sj9);
IkReal x10956=(r10*sj4);
IkReal x10957=cj9*cj9;
IkReal x10958=(r21*x10957);
IkReal x10959=((1.0)*r20*x10957);
IkReal x10960=(((x10952*x10955))+(((-1.0)*x10949*x10950))+(((-1.0)*x10956*x10959))+(((-1.0)*r12*sj4*x10951))+((x10953*x10954))+(((-1.0)*cj4*r02*x10951))+((x10954*x10956))+((x10950*x10958))+((x10950*x10955))+((x10952*x10958))+(((-1.0)*x10949*x10952))+(((-1.0)*x10953*x10959)));
j8eval[0]=x10960;
j8eval[1]=((IKabs(((((-1.0)*sj9*x10949))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x10960);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10961=((1.0)*r21);
IkReal x10962=(cj4*r01);
IkReal x10963=((1.0)*r22);
IkReal x10964=(r11*sj4);
IkReal x10965=(cj4*r00);
IkReal x10966=(cj9*r21*sj9);
IkReal x10967=(cj9*r20*sj9);
IkReal x10968=(r10*sj4);
IkReal x10969=cj9*cj9;
IkReal x10970=(r21*x10969);
IkReal x10971=((1.0)*r20*x10969);
CheckValue<IkReal> x10972 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x10961))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x10972.valid){
continue;
}
CheckValue<IkReal> x10973=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10965*x10971))+((x10962*x10970))+(((-1.0)*x10961*x10962))+((x10964*x10967))+(((-1.0)*x10968*x10971))+((x10965*x10966))+((x10964*x10970))+((x10966*x10968))+(((-1.0)*r12*sj4*x10963))+(((-1.0)*cj4*r02*x10963))+((x10962*x10967))+(((-1.0)*x10961*x10964)))),-1);
if(!x10973.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10972.value)+(((1.5707963267949)*(x10973.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10974=IKcos(j8);
IkReal x10975=IKsin(j8);
IkReal x10976=(r21*sj9);
IkReal x10977=(cj9*r20);
IkReal x10978=((1.0)*x10975);
IkReal x10979=((1.0)*x10974);
IkReal x10980=(cj4*x10974);
IkReal x10981=(r12*sj4);
IkReal x10982=(r01*sj9);
IkReal x10983=(cj4*x10975);
IkReal x10984=(r11*sj4*sj9);
IkReal x10985=(cj9*r00);
IkReal x10986=((1.0)*cj4*x10975);
IkReal x10987=(cj9*r10*sj4);
IkReal x10988=(r02*sj4);
IkReal x10989=(r11*sj9);
IkReal x10990=(cj9*r00*sj4);
IkReal x10991=(cj9*r10);
IkReal x10992=((1.0)*cj4*x10974);
IkReal x10993=(r01*sj4*sj9);
evalcond[0]=(((r22*x10974))+((x10975*x10976))+(((-1.0)*x10977*x10978)));
evalcond[1]=(((x10974*x10976))+(((-1.0)*x10977*x10979))+(((-1.0)*r22*x10978)));
evalcond[2]=(((x10982*x10983))+(((-1.0)*x10978*x10987))+((r02*x10980))+(((-1.0)*x10985*x10986))+((x10975*x10984))+((x10974*x10981)));
evalcond[3]=((((-1.0)*x10979*x10993))+(((-1.0)*r12*x10986))+((x10980*x10989))+((x10975*x10988))+((x10974*x10990))+(((-1.0)*x10991*x10992)));
evalcond[4]=((-1.0)+(((-1.0)*x10978*x10993))+(((-1.0)*x10979*x10988))+((x10975*x10990))+(((-1.0)*x10986*x10991))+((r12*x10980))+((x10983*x10989)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x10986))+(((-1.0)*x10979*x10987))+(((-1.0)*x10978*x10981))+(((-1.0)*x10985*x10992))+((x10980*x10982))+((x10974*x10984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10994=((1.0)*cj9);
CheckValue<IkReal> x10995=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r11*x10994))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x10995.valid){
continue;
}
CheckValue<IkReal> x10996 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x10994)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x10996.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10995.value)))+(x10996.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10997=IKcos(j8);
IkReal x10998=IKsin(j8);
IkReal x10999=(r21*sj9);
IkReal x11000=(cj9*r20);
IkReal x11001=((1.0)*x10998);
IkReal x11002=((1.0)*x10997);
IkReal x11003=(cj4*x10997);
IkReal x11004=(r12*sj4);
IkReal x11005=(r01*sj9);
IkReal x11006=(cj4*x10998);
IkReal x11007=(r11*sj4*sj9);
IkReal x11008=(cj9*r00);
IkReal x11009=((1.0)*cj4*x10998);
IkReal x11010=(cj9*r10*sj4);
IkReal x11011=(r02*sj4);
IkReal x11012=(r11*sj9);
IkReal x11013=(cj9*r00*sj4);
IkReal x11014=(cj9*r10);
IkReal x11015=((1.0)*cj4*x10997);
IkReal x11016=(r01*sj4*sj9);
evalcond[0]=(((r22*x10997))+((x10998*x10999))+(((-1.0)*x11000*x11001)));
evalcond[1]=(((x10997*x10999))+(((-1.0)*r22*x11001))+(((-1.0)*x11000*x11002)));
evalcond[2]=((((-1.0)*x11001*x11010))+((r02*x11003))+((x10997*x11004))+((x11005*x11006))+((x10998*x11007))+(((-1.0)*x11008*x11009)));
evalcond[3]=(((x10998*x11011))+(((-1.0)*x11002*x11016))+((x11003*x11012))+((x10997*x11013))+(((-1.0)*x11014*x11015))+(((-1.0)*r12*x11009)));
evalcond[4]=((-1.0)+((x11006*x11012))+(((-1.0)*x11009*x11014))+(((-1.0)*x11002*x11011))+((x10998*x11013))+(((-1.0)*x11001*x11016))+((r12*x11003)));
evalcond[5]=((-1.0)+(((-1.0)*x11008*x11015))+((x11003*x11005))+((x10997*x11007))+(((-1.0)*r02*x11009))+(((-1.0)*x11002*x11010))+(((-1.0)*x11001*x11004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11017=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x11017.valid){
continue;
}
CheckValue<IkReal> x11018 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x11018.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11017.value)))+(x11018.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11019=IKcos(j8);
IkReal x11020=IKsin(j8);
IkReal x11021=(r21*sj9);
IkReal x11022=(cj9*r20);
IkReal x11023=((1.0)*x11020);
IkReal x11024=((1.0)*x11019);
IkReal x11025=(cj4*x11019);
IkReal x11026=(r12*sj4);
IkReal x11027=(r01*sj9);
IkReal x11028=(cj4*x11020);
IkReal x11029=(r11*sj4*sj9);
IkReal x11030=(cj9*r00);
IkReal x11031=((1.0)*cj4*x11020);
IkReal x11032=(cj9*r10*sj4);
IkReal x11033=(r02*sj4);
IkReal x11034=(r11*sj9);
IkReal x11035=(cj9*r00*sj4);
IkReal x11036=(cj9*r10);
IkReal x11037=((1.0)*cj4*x11019);
IkReal x11038=(r01*sj4*sj9);
evalcond[0]=(((x11020*x11021))+((r22*x11019))+(((-1.0)*x11022*x11023)));
evalcond[1]=((((-1.0)*x11022*x11024))+(((-1.0)*r22*x11023))+((x11019*x11021)));
evalcond[2]=(((x11019*x11026))+(((-1.0)*x11030*x11031))+((x11020*x11029))+((x11027*x11028))+(((-1.0)*x11023*x11032))+((r02*x11025)));
evalcond[3]=((((-1.0)*x11024*x11038))+(((-1.0)*x11036*x11037))+((x11020*x11033))+((x11025*x11034))+((x11019*x11035))+(((-1.0)*r12*x11031)));
evalcond[4]=((-1.0)+((x11028*x11034))+(((-1.0)*x11024*x11033))+(((-1.0)*x11031*x11036))+(((-1.0)*x11023*x11038))+((r12*x11025))+((x11020*x11035)));
evalcond[5]=((-1.0)+((x11019*x11029))+(((-1.0)*x11023*x11026))+(((-1.0)*x11024*x11032))+(((-1.0)*x11030*x11037))+((x11025*x11027))+(((-1.0)*r02*x11031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11039=(cj9*r21);
IkReal x11040=(r20*sj9);
IkReal x11041=((1.0)*cj4);
IkReal x11042=(cj9*r01);
IkReal x11043=(r00*sj9);
IkReal x11044=((1.0)*sj4);
IkReal x11045=(cj9*r11);
IkReal x11046=(r10*sj9);
IkReal x11047=(sj4*x11042);
IkReal x11048=(sj4*x11043);
IkReal x11049=((0.03431)*cj4);
IkReal x11050=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x11040))+(((-1.0)*x11039)));
evalcond[2]=((((-1.0)*x11044*x11045))+(((-1.0)*x11041*x11042))+(((-1.0)*x11044*x11046))+(((-1.0)*x11041*x11043)));
evalcond[3]=((0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x11039))+(((0.03431)*x11040)));
evalcond[4]=(x11048+x11047+(((-1.0)*x11041*x11046))+(((-1.0)*x11041*x11045)));
evalcond[5]=((0.00337)+(((-1.0)*py*x11044))+((x11045*x11050))+((x11042*x11049))+((x11046*x11050))+(((-1.0)*px*x11041))+((x11043*x11049)));
evalcond[6]=((0.00036)+(((-0.03431)*x11047))+((px*sj4))+((x11045*x11049))+(((-1.0)*py*x11041))+(((-0.03431)*x11048))+((x11046*x11049)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x11051=((1.0)*sj9);
IkReal x11052=((((-1.0)*cj4*r10*x11051))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x11052;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*r21*x11051)))))+(IKabs(r22)));
j8eval[2]=IKsign(x11052);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x11053=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x11053;
j8eval[1]=IKsign(x11053);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x11054=(cj4*r11);
IkReal x11055=((1.0)*r21);
IkReal x11056=(r01*sj4);
IkReal x11057=(cj9*r20*sj9);
IkReal x11058=(cj4*r10);
IkReal x11059=cj9*cj9;
IkReal x11060=(r20*x11059);
IkReal x11061=(((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+((r21*x11054))+(((-1.0)*r02*r22*sj4))+(((-1.0)*x11055*x11056))+(((-1.0)*r21*x11054*x11059))+(((-1.0)*cj9*r21*sj9*x11058))+((x11056*x11057))+(((-1.0)*cj4*r11*x11057))+((x11058*x11060))+((r21*x11056*x11059))+(((-1.0)*r00*sj4*x11060)));
j8eval[0]=x11061;
j8eval[1]=IKsign(x11061);
j8eval[2]=((IKabs(((((-1.0)*sj9*x11055))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11062=((1.0)*r21);
IkReal x11063=(cj4*r11);
IkReal x11064=(r01*sj4);
IkReal x11065=(cj9*r20*sj9);
IkReal x11066=(cj4*r10);
IkReal x11067=cj9*cj9;
IkReal x11068=(r20*x11067);
CheckValue<IkReal> x11069=IKPowWithIntegerCheck(IKsign((((cj9*r00*r21*sj4*sj9))+((x11064*x11065))+((cj4*r12*r22))+(((-1.0)*r21*x11063*x11067))+(((-1.0)*r02*r22*sj4))+(((-1.0)*cj4*r11*x11065))+((x11066*x11068))+((r21*x11063))+(((-1.0)*r00*sj4*x11068))+(((-1.0)*cj9*r21*sj9*x11066))+((r21*x11064*x11067))+(((-1.0)*x11062*x11064)))),-1);
if(!x11069.valid){
continue;
}
CheckValue<IkReal> x11070 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x11062))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11070.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11069.value)))+(x11070.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11071=IKcos(j8);
IkReal x11072=IKsin(j8);
IkReal x11073=(r21*sj9);
IkReal x11074=(cj9*r20);
IkReal x11075=((1.0)*x11072);
IkReal x11076=((1.0)*x11071);
IkReal x11077=(cj4*x11071);
IkReal x11078=(r12*sj4);
IkReal x11079=(r01*sj9);
IkReal x11080=(cj4*x11072);
IkReal x11081=(r11*sj4*sj9);
IkReal x11082=(cj9*r00);
IkReal x11083=((1.0)*cj4*x11072);
IkReal x11084=(cj9*r10*sj4);
IkReal x11085=(r02*sj4);
IkReal x11086=(r11*sj9);
IkReal x11087=(cj9*r00*sj4);
IkReal x11088=(cj9*r10);
IkReal x11089=(r01*sj4*sj9);
IkReal x11090=((1.0)*cj4*x11071);
evalcond[0]=((((-1.0)*x11074*x11075))+((r22*x11071))+((x11072*x11073)));
evalcond[1]=(((x11071*x11073))+(((-1.0)*r22*x11075))+(((-1.0)*x11074*x11076)));
evalcond[2]=((-1.0)+((x11071*x11078))+((x11072*x11081))+(((-1.0)*x11082*x11083))+(((-1.0)*x11075*x11084))+((x11079*x11080))+((r02*x11077)));
evalcond[3]=((((-1.0)*x11076*x11085))+(((-1.0)*x11083*x11088))+((r12*x11077))+(((-1.0)*x11075*x11089))+((x11072*x11087))+((x11080*x11086)));
evalcond[4]=(((x11071*x11081))+(((-1.0)*x11076*x11084))+(((-1.0)*x11082*x11090))+(((-1.0)*x11075*x11078))+((x11077*x11079))+(((-1.0)*r02*x11083)));
evalcond[5]=((1.0)+(((-1.0)*x11076*x11089))+((x11072*x11085))+(((-1.0)*x11088*x11090))+((x11077*x11086))+((x11071*x11087))+(((-1.0)*r12*x11083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11091 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x11091.valid){
continue;
}
CheckValue<IkReal> x11092=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x11092.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11091.value)+(((1.5707963267949)*(x11092.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11093=IKcos(j8);
IkReal x11094=IKsin(j8);
IkReal x11095=(r21*sj9);
IkReal x11096=(cj9*r20);
IkReal x11097=((1.0)*x11094);
IkReal x11098=((1.0)*x11093);
IkReal x11099=(cj4*x11093);
IkReal x11100=(r12*sj4);
IkReal x11101=(r01*sj9);
IkReal x11102=(cj4*x11094);
IkReal x11103=(r11*sj4*sj9);
IkReal x11104=(cj9*r00);
IkReal x11105=((1.0)*cj4*x11094);
IkReal x11106=(cj9*r10*sj4);
IkReal x11107=(r02*sj4);
IkReal x11108=(r11*sj9);
IkReal x11109=(cj9*r00*sj4);
IkReal x11110=(cj9*r10);
IkReal x11111=(r01*sj4*sj9);
IkReal x11112=((1.0)*cj4*x11093);
evalcond[0]=((((-1.0)*x11096*x11097))+((x11094*x11095))+((r22*x11093)));
evalcond[1]=((((-1.0)*x11096*x11098))+(((-1.0)*r22*x11097))+((x11093*x11095)));
evalcond[2]=((-1.0)+((x11093*x11100))+((x11101*x11102))+((x11094*x11103))+(((-1.0)*x11097*x11106))+(((-1.0)*x11104*x11105))+((r02*x11099)));
evalcond[3]=((((-1.0)*x11105*x11110))+(((-1.0)*x11097*x11111))+(((-1.0)*x11098*x11107))+((x11094*x11109))+((x11102*x11108))+((r12*x11099)));
evalcond[4]=((((-1.0)*x11104*x11112))+(((-1.0)*x11098*x11106))+(((-1.0)*x11097*x11100))+((x11093*x11103))+(((-1.0)*r02*x11105))+((x11099*x11101)));
evalcond[5]=((1.0)+((x11094*x11107))+((x11093*x11109))+(((-1.0)*x11098*x11111))+(((-1.0)*x11110*x11112))+(((-1.0)*r12*x11105))+((x11099*x11108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11113=((1.0)*sj9);
CheckValue<IkReal> x11114 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x11113))),IKFAST_ATAN2_MAGTHRESH);
if(!x11114.valid){
continue;
}
CheckValue<IkReal> x11115=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x11113))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x11115.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11114.value)+(((1.5707963267949)*(x11115.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11116=IKcos(j8);
IkReal x11117=IKsin(j8);
IkReal x11118=(r21*sj9);
IkReal x11119=(cj9*r20);
IkReal x11120=((1.0)*x11117);
IkReal x11121=((1.0)*x11116);
IkReal x11122=(cj4*x11116);
IkReal x11123=(r12*sj4);
IkReal x11124=(r01*sj9);
IkReal x11125=(cj4*x11117);
IkReal x11126=(r11*sj4*sj9);
IkReal x11127=(cj9*r00);
IkReal x11128=((1.0)*cj4*x11117);
IkReal x11129=(cj9*r10*sj4);
IkReal x11130=(r02*sj4);
IkReal x11131=(r11*sj9);
IkReal x11132=(cj9*r00*sj4);
IkReal x11133=(cj9*r10);
IkReal x11134=(r01*sj4*sj9);
IkReal x11135=((1.0)*cj4*x11116);
evalcond[0]=((((-1.0)*x11119*x11120))+((x11117*x11118))+((r22*x11116)));
evalcond[1]=((((-1.0)*x11119*x11121))+(((-1.0)*r22*x11120))+((x11116*x11118)));
evalcond[2]=((-1.0)+((x11124*x11125))+((x11116*x11123))+(((-1.0)*x11127*x11128))+(((-1.0)*x11120*x11129))+((x11117*x11126))+((r02*x11122)));
evalcond[3]=(((r12*x11122))+(((-1.0)*x11128*x11133))+(((-1.0)*x11120*x11134))+((x11117*x11132))+((x11125*x11131))+(((-1.0)*x11121*x11130)));
evalcond[4]=(((x11122*x11124))+(((-1.0)*x11120*x11123))+(((-1.0)*x11127*x11135))+((x11116*x11126))+(((-1.0)*r02*x11128))+(((-1.0)*x11121*x11129)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11128))+(((-1.0)*x11133*x11135))+(((-1.0)*x11121*x11134))+((x11117*x11130))+((x11122*x11131))+((x11116*x11132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11136=(cj9*r21);
IkReal x11137=(r20*sj9);
IkReal x11138=((1.0)*cj4);
IkReal x11139=(cj9*r01);
IkReal x11140=(r00*sj9);
IkReal x11141=((1.0)*sj4);
IkReal x11142=(cj9*r11);
IkReal x11143=(r10*sj9);
IkReal x11144=(sj4*x11139);
IkReal x11145=(sj4*x11140);
IkReal x11146=((0.03431)*cj4);
IkReal x11147=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x11137))+(((-1.0)*x11136)));
evalcond[2]=((((-1.0)*x11141*x11142))+(((-1.0)*x11138*x11140))+(((-1.0)*x11138*x11139))+(((-1.0)*x11141*x11143)));
evalcond[3]=((0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x11137))+(((0.03431)*x11136)));
evalcond[4]=(x11144+x11145+(((-1.0)*x11138*x11143))+(((-1.0)*x11138*x11142)));
evalcond[5]=((0.00337)+((x11143*x11147))+((x11140*x11146))+((x11142*x11147))+(((-1.0)*px*x11138))+((x11139*x11146))+(((-1.0)*py*x11141)));
evalcond[6]=((-0.00036)+((px*sj4))+((x11142*x11146))+(((-0.03431)*x11144))+(((-0.03431)*x11145))+((x11143*x11146))+(((-1.0)*py*x11138)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x11148=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x11148;
j8eval[1]=IKsign(x11148);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x11149=((1.0)*sj9);
IkReal x11150=(((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*x11149)));
j8eval[0]=x11150;
j8eval[1]=((IKabs(((((-1.0)*r21*x11149))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x11150);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x11151=(r01*sj4);
IkReal x11152=((1.0)*r21);
IkReal x11153=(cj4*r11);
IkReal x11154=(cj9*r20*sj9);
IkReal x11155=cj9*cj9;
IkReal x11156=(r00*sj4);
IkReal x11157=(r20*x11155);
IkReal x11158=(((r21*x11151))+(((-1.0)*cj4*r10*x11157))+((r21*x11153*x11155))+(((-1.0)*x11152*x11153))+(((-1.0)*cj9*r21*sj9*x11156))+(((-1.0)*r01*sj4*x11154))+((r02*r22*sj4))+(((-1.0)*cj4*r12*r22))+(((-1.0)*r21*x11151*x11155))+((cj4*cj9*r10*r21*sj9))+((x11156*x11157))+((x11153*x11154)));
j8eval[0]=x11158;
j8eval[1]=IKsign(x11158);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*sj9*x11152)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11159=((1.0)*r21);
IkReal x11160=(r01*sj4);
IkReal x11161=(cj4*r11);
IkReal x11162=(cj9*r20*sj9);
IkReal x11163=cj9*cj9;
IkReal x11164=(r00*sj4);
IkReal x11165=(r20*x11163);
CheckValue<IkReal> x11166=IKPowWithIntegerCheck(IKsign((((x11161*x11162))+(((-1.0)*cj9*r21*sj9*x11164))+((x11164*x11165))+((r21*x11161*x11163))+(((-1.0)*r01*sj4*x11162))+((r02*r22*sj4))+((r21*x11160))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*r21*x11160*x11163))+(((-1.0)*cj4*r10*x11165))+(((-1.0)*x11159*x11161)))),-1);
if(!x11166.valid){
continue;
}
CheckValue<IkReal> x11167 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x11159))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11167.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11166.value)))+(x11167.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11168=IKcos(j8);
IkReal x11169=IKsin(j8);
IkReal x11170=(r21*sj9);
IkReal x11171=(cj9*r20);
IkReal x11172=((1.0)*x11169);
IkReal x11173=((1.0)*x11168);
IkReal x11174=(cj4*x11168);
IkReal x11175=(r12*sj4);
IkReal x11176=(r01*sj9);
IkReal x11177=(cj4*x11169);
IkReal x11178=(r11*sj4*sj9);
IkReal x11179=(cj9*r00);
IkReal x11180=((1.0)*cj4*x11169);
IkReal x11181=(cj9*r10*sj4);
IkReal x11182=(r02*sj4);
IkReal x11183=(r11*sj9);
IkReal x11184=(cj9*r00*sj4);
IkReal x11185=(cj9*r10);
IkReal x11186=(r01*sj4*sj9);
IkReal x11187=((1.0)*cj4*x11168);
evalcond[0]=((((-1.0)*x11171*x11172))+((r22*x11168))+((x11169*x11170)));
evalcond[1]=((((-1.0)*x11171*x11173))+(((-1.0)*r22*x11172))+((x11168*x11170)));
evalcond[2]=((1.0)+((r02*x11174))+(((-1.0)*x11172*x11181))+(((-1.0)*x11179*x11180))+((x11176*x11177))+((x11169*x11178))+((x11168*x11175)));
evalcond[3]=((((-1.0)*x11173*x11182))+((r12*x11174))+(((-1.0)*x11180*x11185))+((x11169*x11184))+(((-1.0)*x11172*x11186))+((x11177*x11183)));
evalcond[4]=(((x11174*x11176))+(((-1.0)*x11173*x11181))+(((-1.0)*r02*x11180))+(((-1.0)*x11179*x11187))+(((-1.0)*x11172*x11175))+((x11168*x11178)));
evalcond[5]=((-1.0)+((x11174*x11183))+((x11169*x11182))+(((-1.0)*x11173*x11186))+(((-1.0)*x11185*x11187))+(((-1.0)*r12*x11180))+((x11168*x11184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11188=((1.0)*sj9);
CheckValue<IkReal> x11189=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+(((-1.0)*r00*sj4*x11188))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x11189.valid){
continue;
}
CheckValue<IkReal> x11190 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x11188))),IKFAST_ATAN2_MAGTHRESH);
if(!x11190.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11189.value)))+(x11190.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11191=IKcos(j8);
IkReal x11192=IKsin(j8);
IkReal x11193=(r21*sj9);
IkReal x11194=(cj9*r20);
IkReal x11195=((1.0)*x11192);
IkReal x11196=((1.0)*x11191);
IkReal x11197=(cj4*x11191);
IkReal x11198=(r12*sj4);
IkReal x11199=(r01*sj9);
IkReal x11200=(cj4*x11192);
IkReal x11201=(r11*sj4*sj9);
IkReal x11202=(cj9*r00);
IkReal x11203=((1.0)*cj4*x11192);
IkReal x11204=(cj9*r10*sj4);
IkReal x11205=(r02*sj4);
IkReal x11206=(r11*sj9);
IkReal x11207=(cj9*r00*sj4);
IkReal x11208=(cj9*r10);
IkReal x11209=(r01*sj4*sj9);
IkReal x11210=((1.0)*cj4*x11191);
evalcond[0]=((((-1.0)*x11194*x11195))+((r22*x11191))+((x11192*x11193)));
evalcond[1]=((((-1.0)*r22*x11195))+((x11191*x11193))+(((-1.0)*x11194*x11196)));
evalcond[2]=((1.0)+((x11191*x11198))+((r02*x11197))+(((-1.0)*x11195*x11204))+((x11192*x11201))+(((-1.0)*x11202*x11203))+((x11199*x11200)));
evalcond[3]=((((-1.0)*x11203*x11208))+(((-1.0)*x11195*x11209))+(((-1.0)*x11196*x11205))+((x11200*x11206))+((x11192*x11207))+((r12*x11197)));
evalcond[4]=((((-1.0)*x11202*x11210))+((x11191*x11201))+(((-1.0)*x11196*x11204))+((x11197*x11199))+(((-1.0)*r02*x11203))+(((-1.0)*x11195*x11198)));
evalcond[5]=((-1.0)+((x11197*x11206))+(((-1.0)*r12*x11203))+(((-1.0)*x11208*x11210))+(((-1.0)*x11196*x11209))+((x11192*x11205))+((x11191*x11207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11211 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x11211.valid){
continue;
}
CheckValue<IkReal> x11212=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x11212.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11211.value)+(((1.5707963267949)*(x11212.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11213=IKcos(j8);
IkReal x11214=IKsin(j8);
IkReal x11215=(r21*sj9);
IkReal x11216=(cj9*r20);
IkReal x11217=((1.0)*x11214);
IkReal x11218=((1.0)*x11213);
IkReal x11219=(cj4*x11213);
IkReal x11220=(r12*sj4);
IkReal x11221=(r01*sj9);
IkReal x11222=(cj4*x11214);
IkReal x11223=(r11*sj4*sj9);
IkReal x11224=(cj9*r00);
IkReal x11225=((1.0)*cj4*x11214);
IkReal x11226=(cj9*r10*sj4);
IkReal x11227=(r02*sj4);
IkReal x11228=(r11*sj9);
IkReal x11229=(cj9*r00*sj4);
IkReal x11230=(cj9*r10);
IkReal x11231=(r01*sj4*sj9);
IkReal x11232=((1.0)*cj4*x11213);
evalcond[0]=((((-1.0)*x11216*x11217))+((x11214*x11215))+((r22*x11213)));
evalcond[1]=((((-1.0)*x11216*x11218))+((x11213*x11215))+(((-1.0)*r22*x11217)));
evalcond[2]=((1.0)+(((-1.0)*x11224*x11225))+((r02*x11219))+((x11214*x11223))+((x11213*x11220))+((x11221*x11222))+(((-1.0)*x11217*x11226)));
evalcond[3]=((((-1.0)*x11225*x11230))+(((-1.0)*x11218*x11227))+((r12*x11219))+((x11214*x11229))+((x11222*x11228))+(((-1.0)*x11217*x11231)));
evalcond[4]=(((x11219*x11221))+(((-1.0)*x11224*x11232))+(((-1.0)*r02*x11225))+(((-1.0)*x11218*x11226))+((x11213*x11223))+(((-1.0)*x11217*x11220)));
evalcond[5]=((-1.0)+((x11214*x11227))+((x11213*x11229))+(((-1.0)*r12*x11225))+(((-1.0)*x11230*x11232))+(((-1.0)*x11218*x11231))+((x11219*x11228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11233=(r21*sj9);
IkReal x11234=(cj4*r21);
IkReal x11235=(r11*x11234);
IkReal x11236=((1.0)*sj4);
IkReal x11237=(r01*r21);
IkReal x11238=(cj9*r20*sj9);
IkReal x11239=cj9*cj9;
IkReal x11240=(r20*x11239);
CheckValue<IkReal> x11241 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*sj6*x11233))+((sj6*((cj9*r20))))),IKFAST_ATAN2_MAGTHRESH);
if(!x11241.valid){
continue;
}
CheckValue<IkReal> x11242=IKPowWithIntegerCheck(IKsign((((cj4*r12*r22))+(((-1.0)*r02*r22*x11236))+(((-1.0)*r00*sj4*x11240))+(((-1.0)*cj9*r10*sj9*x11234))+(((-1.0)*cj4*r11*x11238))+((cj4*r10*x11240))+((sj4*x11237*x11239))+(((-1.0)*x11235*x11239))+((r01*sj4*x11238))+x11235+(((-1.0)*x11236*x11237))+((cj9*r00*sj4*x11233)))),-1);
if(!x11242.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11241.value)+(((1.5707963267949)*(x11242.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11243=IKcos(j8);
IkReal x11244=IKsin(j8);
IkReal x11245=(r21*sj9);
IkReal x11246=(cj9*r20);
IkReal x11247=((1.0)*x11244);
IkReal x11248=((1.0)*x11243);
IkReal x11249=(cj4*x11243);
IkReal x11250=(r02*sj4);
IkReal x11251=(r11*sj9);
IkReal x11252=(cj4*x11244);
IkReal x11253=(cj9*r00*sj4);
IkReal x11254=(cj9*r10);
IkReal x11255=((1.0)*cj4*x11244);
IkReal x11256=(r01*sj4*sj9);
IkReal x11257=((1.0)*cj4*x11243);
IkReal x11258=(r12*sj4);
IkReal x11259=(r01*sj9);
IkReal x11260=(r11*sj4*sj9);
IkReal x11261=(cj9*r00);
IkReal x11262=(cj9*r10*sj4);
evalcond[0]=(((x11244*x11245))+(((-1.0)*x11246*x11247))+((r22*x11243)));
evalcond[1]=(((x11243*x11245))+(((-1.0)*r22*x11247))+(((-1.0)*x11246*x11248)));
evalcond[2]=((((-1.0)*x11247*x11256))+(((-1.0)*x11248*x11250))+((r12*x11249))+(((-1.0)*x11254*x11255))+cj6+((x11244*x11253))+((x11251*x11252)));
evalcond[3]=(((x11243*x11253))+((x11244*x11250))+((x11249*x11251))+(((-1.0)*x11248*x11256))+sj6+(((-1.0)*x11254*x11257))+(((-1.0)*r12*x11255)));
evalcond[4]=(((x11243*x11258))+((r02*x11249))+((x11252*x11259))+(((-1.0)*x11247*x11262))+((x11244*x11260))+(((-1.0)*x11255*x11261))+(((-1.0)*(1.0)*sj6)));
evalcond[5]=((((-1.0)*r02*x11255))+(((-1.0)*x11257*x11261))+(((-1.0)*x11247*x11258))+(((-1.0)*x11248*x11262))+cj6+((x11249*x11259))+((x11243*x11260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11263=((1.0)*sj9);
IkReal x11264=((1.0)*cj4);
CheckValue<IkReal> x11265=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*r10*sj4*x11263))+(((-1.0)*r00*sj9*x11264))+(((-1.0)*cj9*r01*x11264)))),-1);
if(!x11265.valid){
continue;
}
CheckValue<IkReal> x11266 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*cj6*r21*x11263))),IKFAST_ATAN2_MAGTHRESH);
if(!x11266.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11265.value)))+(x11266.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11267=IKcos(j8);
IkReal x11268=IKsin(j8);
IkReal x11269=(r21*sj9);
IkReal x11270=(cj9*r20);
IkReal x11271=((1.0)*x11268);
IkReal x11272=((1.0)*x11267);
IkReal x11273=(cj4*x11267);
IkReal x11274=(r02*sj4);
IkReal x11275=(r11*sj9);
IkReal x11276=(cj4*x11268);
IkReal x11277=(cj9*r00*sj4);
IkReal x11278=(cj9*r10);
IkReal x11279=((1.0)*cj4*x11268);
IkReal x11280=(r01*sj4*sj9);
IkReal x11281=((1.0)*cj4*x11267);
IkReal x11282=(r12*sj4);
IkReal x11283=(r01*sj9);
IkReal x11284=(r11*sj4*sj9);
IkReal x11285=(cj9*r00);
IkReal x11286=(cj9*r10*sj4);
evalcond[0]=((((-1.0)*x11270*x11271))+((x11268*x11269))+((r22*x11267)));
evalcond[1]=((((-1.0)*x11270*x11272))+(((-1.0)*r22*x11271))+((x11267*x11269)));
evalcond[2]=((((-1.0)*x11272*x11274))+(((-1.0)*x11271*x11280))+cj6+((x11268*x11277))+((x11275*x11276))+((r12*x11273))+(((-1.0)*x11278*x11279)));
evalcond[3]=((((-1.0)*r12*x11279))+(((-1.0)*x11278*x11281))+(((-1.0)*x11272*x11280))+((x11273*x11275))+sj6+((x11268*x11274))+((x11267*x11277)));
evalcond[4]=(((x11267*x11282))+(((-1.0)*x11279*x11285))+((x11268*x11284))+((x11276*x11283))+((r02*x11273))+(((-1.0)*x11271*x11286))+(((-1.0)*(1.0)*sj6)));
evalcond[5]=((((-1.0)*x11272*x11286))+((x11267*x11284))+(((-1.0)*x11281*x11285))+cj6+(((-1.0)*x11271*x11282))+((x11273*x11283))+(((-1.0)*r02*x11279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11287=((1.0)*cj4);
CheckValue<IkReal> x11288 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11288.valid){
continue;
}
CheckValue<IkReal> x11289=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*r10*sj9*x11287))+((r00*sj4*sj9))+(((-1.0)*cj9*r11*x11287)))),-1);
if(!x11289.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11288.value)+(((1.5707963267949)*(x11289.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11290=IKcos(j8);
IkReal x11291=IKsin(j8);
IkReal x11292=(r21*sj9);
IkReal x11293=(cj9*r20);
IkReal x11294=((1.0)*x11291);
IkReal x11295=((1.0)*x11290);
IkReal x11296=(cj4*x11290);
IkReal x11297=(r02*sj4);
IkReal x11298=(r11*sj9);
IkReal x11299=(cj4*x11291);
IkReal x11300=(cj9*r00*sj4);
IkReal x11301=(cj9*r10);
IkReal x11302=((1.0)*cj4*x11291);
IkReal x11303=(r01*sj4*sj9);
IkReal x11304=((1.0)*cj4*x11290);
IkReal x11305=(r12*sj4);
IkReal x11306=(r01*sj9);
IkReal x11307=(r11*sj4*sj9);
IkReal x11308=(cj9*r00);
IkReal x11309=(cj9*r10*sj4);
evalcond[0]=(((r22*x11290))+((x11291*x11292))+(((-1.0)*x11293*x11294)));
evalcond[1]=((((-1.0)*x11293*x11295))+((x11290*x11292))+(((-1.0)*r22*x11294)));
evalcond[2]=((((-1.0)*x11294*x11303))+(((-1.0)*x11295*x11297))+((x11291*x11300))+(((-1.0)*x11301*x11302))+cj6+((x11298*x11299))+((r12*x11296)));
evalcond[3]=((((-1.0)*x11295*x11303))+sj6+(((-1.0)*x11301*x11304))+((x11290*x11300))+((x11291*x11297))+(((-1.0)*r12*x11302))+((x11296*x11298)));
evalcond[4]=(((x11290*x11305))+((x11291*x11307))+((x11299*x11306))+((r02*x11296))+(((-1.0)*x11302*x11308))+(((-1.0)*x11294*x11309))+(((-1.0)*(1.0)*sj6)));
evalcond[5]=((((-1.0)*x11304*x11308))+((x11296*x11306))+cj6+(((-1.0)*x11295*x11309))+((x11290*x11307))+(((-1.0)*r02*x11302))+(((-1.0)*x11294*x11305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11310=(cj9*r21);
IkReal x11311=(r20*sj9);
IkReal x11312=((1.0)*cj4);
IkReal x11313=(cj9*r01);
IkReal x11314=(r00*sj9);
IkReal x11315=((1.0)*sj4);
IkReal x11316=(cj9*r11);
IkReal x11317=(r10*sj9);
IkReal x11318=(sj4*x11313);
IkReal x11319=(sj4*x11314);
IkReal x11320=((0.03431)*cj4);
IkReal x11321=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*x11310))+(((-1.0)*x11311)));
evalcond[2]=((((-1.0)*x11315*x11317))+(((-1.0)*x11312*x11314))+(((-1.0)*x11315*x11316))+(((-1.0)*x11312*x11313)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x11311))+(((0.03431)*x11310)));
evalcond[4]=((((-1.0)*x11312*x11317))+x11319+x11318+(((-1.0)*x11312*x11316)));
evalcond[5]=((0.00337)+((x11314*x11320))+(((-1.0)*py*x11315))+(((0.00036)*cj6))+((x11313*x11320))+((x11317*x11321))+(((-1.0)*px*x11312))+((x11316*x11321)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x11312))+(((-0.03431)*x11318))+(((-0.03431)*x11319))+((x11317*x11320))+((x11316*x11320))+(((0.00036)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x11322=((1.0)*cj4);
IkReal x11323=((((-1.0)*cj9*r11*x11322))+((cj9*r01*sj4))+(((-1.0)*r10*sj9*x11322))+((r00*sj4*sj9)));
j8eval[0]=x11323;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x11323);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x11324=((1.0)*cj4);
IkReal x11325=((1.0)*sj9);
IkReal x11326=((((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*r00*sj9*x11324))+(((-1.0)*cj9*r01*x11324))+(((-1.0)*r10*sj4*x11325)));
j8eval[0]=x11326;
j8eval[1]=IKsign(x11326);
j8eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj6*cj9*r20))+(((-1.0)*cj6*r21*x11325))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x11327=(r21*sj4);
IkReal x11328=(r01*x11327);
IkReal x11329=((1.0)*cj4);
IkReal x11330=(r11*r21);
IkReal x11331=(r21*sj9);
IkReal x11332=(cj9*r20*sj9);
IkReal x11333=cj9*cj9;
IkReal x11334=(r20*x11333);
IkReal x11335=(((r00*sj4*x11334))+((cj4*x11330*x11333))+(((-1.0)*cj9*r00*sj9*x11327))+(((-1.0)*x11329*x11330))+(((-1.0)*r12*r22*x11329))+((cj4*r11*x11332))+x11328+((cj4*cj9*r10*x11331))+((r02*r22*sj4))+(((-1.0)*x11328*x11333))+(((-1.0)*cj4*r10*x11334))+(((-1.0)*r01*sj4*x11332)));
j8eval[0]=x11335;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*sj6*x11331))+((sj6*((cj9*r20))))))));
j8eval[2]=IKsign(x11335);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11336=(cj9*r21);
IkReal x11337=(r20*sj9);
IkReal x11338=((1.0)*cj4);
IkReal x11339=(cj9*r01);
IkReal x11340=(r00*sj9);
IkReal x11341=((1.0)*sj4);
IkReal x11342=(cj9*r11);
IkReal x11343=(r10*sj9);
IkReal x11344=(sj4*x11339);
IkReal x11345=(sj4*x11340);
IkReal x11346=((0.03431)*cj4);
IkReal x11347=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x11336))+(((-1.0)*x11337)));
evalcond[2]=((((-1.0)*x11338*x11339))+(((-1.0)*x11341*x11342))+(((-1.0)*x11341*x11343))+(((-1.0)*x11338*x11340)));
evalcond[3]=((0.16132)+(((0.03431)*x11337))+(((0.03431)*x11336))+(((-1.0)*(1.0)*pz)));
evalcond[4]=(x11345+x11344+(((-1.0)*x11338*x11342))+(((-1.0)*x11338*x11343)));
evalcond[5]=((0.00373)+(((-1.0)*py*x11341))+(((-1.0)*px*x11338))+((x11342*x11347))+((x11340*x11346))+((x11339*x11346))+((x11343*x11347)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x11344))+((x11343*x11346))+(((-1.0)*py*x11338))+(((-0.03431)*x11345))+((x11342*x11346)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x11348=((1.0)*cj9);
IkReal x11349=((((-1.0)*cj4*r11*x11348))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x11349;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x11348)))))+(IKabs(r22)));
j8eval[2]=IKsign(x11349);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x11350=((1.0)*cj9);
IkReal x11351=((1.0)*sj9);
IkReal x11352=((((-1.0)*cj4*r01*x11350))+(((-1.0)*cj4*r00*x11351))+(((-1.0)*r11*sj4*x11350))+(((-1.0)*r10*sj4*x11351)));
j8eval[0]=x11352;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*r21*x11351)))))+(IKabs(r22)));
j8eval[2]=IKsign(x11352);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x11353=((1.0)*r21);
IkReal x11354=(cj4*r01);
IkReal x11355=((1.0)*r22);
IkReal x11356=(r11*sj4);
IkReal x11357=(cj4*r00);
IkReal x11358=(cj9*r21*sj9);
IkReal x11359=(cj9*r20*sj9);
IkReal x11360=(r10*sj4);
IkReal x11361=cj9*cj9;
IkReal x11362=(r21*x11361);
IkReal x11363=((1.0)*r20*x11361);
IkReal x11364=((((-1.0)*x11353*x11354))+(((-1.0)*x11353*x11356))+(((-1.0)*x11360*x11363))+((x11356*x11359))+(((-1.0)*cj4*r02*x11355))+(((-1.0)*x11357*x11363))+((x11354*x11359))+((x11358*x11360))+(((-1.0)*r12*sj4*x11355))+((x11356*x11362))+((x11354*x11362))+((x11357*x11358)));
j8eval[0]=x11364;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*sj9*x11353))+((cj9*r20))))));
j8eval[2]=IKsign(x11364);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11365=((1.0)*r21);
IkReal x11366=(cj4*r01);
IkReal x11367=((1.0)*r22);
IkReal x11368=(r11*sj4);
IkReal x11369=(cj4*r00);
IkReal x11370=(cj9*r21*sj9);
IkReal x11371=(cj9*r20*sj9);
IkReal x11372=(r10*sj4);
IkReal x11373=cj9*cj9;
IkReal x11374=(r21*x11373);
IkReal x11375=((1.0)*r20*x11373);
CheckValue<IkReal> x11376 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x11365))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11376.valid){
continue;
}
CheckValue<IkReal> x11377=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11365*x11366))+(((-1.0)*r12*sj4*x11367))+((x11368*x11371))+((x11368*x11374))+((x11366*x11374))+(((-1.0)*x11372*x11375))+((x11370*x11372))+(((-1.0)*x11365*x11368))+((x11369*x11370))+((x11366*x11371))+(((-1.0)*x11369*x11375))+(((-1.0)*cj4*r02*x11367)))),-1);
if(!x11377.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11376.value)+(((1.5707963267949)*(x11377.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11378=IKcos(j8);
IkReal x11379=IKsin(j8);
IkReal x11380=(r21*sj9);
IkReal x11381=(cj9*r20);
IkReal x11382=((1.0)*x11379);
IkReal x11383=((1.0)*x11378);
IkReal x11384=(cj4*x11378);
IkReal x11385=(r12*sj4);
IkReal x11386=(r01*sj9);
IkReal x11387=(cj4*x11379);
IkReal x11388=(r11*sj4*sj9);
IkReal x11389=(cj9*r00);
IkReal x11390=((1.0)*cj4*x11379);
IkReal x11391=(cj9*r10*sj4);
IkReal x11392=(r02*sj4);
IkReal x11393=(r11*sj9);
IkReal x11394=(cj9*r00*sj4);
IkReal x11395=(cj9*r10);
IkReal x11396=((1.0)*cj4*x11378);
IkReal x11397=(r01*sj4*sj9);
evalcond[0]=(((r22*x11378))+((x11379*x11380))+(((-1.0)*x11381*x11382)));
evalcond[1]=((((-1.0)*x11381*x11383))+(((-1.0)*r22*x11382))+((x11378*x11380)));
evalcond[2]=((((-1.0)*x11389*x11390))+((r02*x11384))+((x11379*x11388))+((x11378*x11385))+((x11386*x11387))+(((-1.0)*x11382*x11391)));
evalcond[3]=((((-1.0)*x11383*x11397))+(((-1.0)*r12*x11390))+((x11384*x11393))+((x11378*x11394))+(((-1.0)*x11395*x11396))+((x11379*x11392)));
evalcond[4]=((1.0)+(((-1.0)*x11390*x11395))+((x11379*x11394))+(((-1.0)*x11383*x11392))+((x11387*x11393))+(((-1.0)*x11382*x11397))+((r12*x11384)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x11390))+((x11378*x11388))+((x11384*x11386))+(((-1.0)*x11382*x11385))+(((-1.0)*x11389*x11396))+(((-1.0)*x11383*x11391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11398=((1.0)*sj9);
IkReal x11399=((1.0)*cj9);
CheckValue<IkReal> x11400 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x11398))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11400.valid){
continue;
}
CheckValue<IkReal> x11401=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r01*x11399))+(((-1.0)*cj4*r00*x11398))+(((-1.0)*r10*sj4*x11398))+(((-1.0)*r11*sj4*x11399)))),-1);
if(!x11401.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11400.value)+(((1.5707963267949)*(x11401.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11402=IKcos(j8);
IkReal x11403=IKsin(j8);
IkReal x11404=(r21*sj9);
IkReal x11405=(cj9*r20);
IkReal x11406=((1.0)*x11403);
IkReal x11407=((1.0)*x11402);
IkReal x11408=(cj4*x11402);
IkReal x11409=(r12*sj4);
IkReal x11410=(r01*sj9);
IkReal x11411=(cj4*x11403);
IkReal x11412=(r11*sj4*sj9);
IkReal x11413=(cj9*r00);
IkReal x11414=((1.0)*cj4*x11403);
IkReal x11415=(cj9*r10*sj4);
IkReal x11416=(r02*sj4);
IkReal x11417=(r11*sj9);
IkReal x11418=(cj9*r00*sj4);
IkReal x11419=(cj9*r10);
IkReal x11420=((1.0)*cj4*x11402);
IkReal x11421=(r01*sj4*sj9);
evalcond[0]=(((x11403*x11404))+((r22*x11402))+(((-1.0)*x11405*x11406)));
evalcond[1]=((((-1.0)*x11405*x11407))+(((-1.0)*r22*x11406))+((x11402*x11404)));
evalcond[2]=((((-1.0)*x11406*x11415))+((x11410*x11411))+((x11402*x11409))+((x11403*x11412))+((r02*x11408))+(((-1.0)*x11413*x11414)));
evalcond[3]=(((x11408*x11417))+(((-1.0)*x11407*x11421))+(((-1.0)*r12*x11414))+(((-1.0)*x11419*x11420))+((x11403*x11416))+((x11402*x11418)));
evalcond[4]=((1.0)+((r12*x11408))+((x11411*x11417))+(((-1.0)*x11414*x11419))+((x11403*x11418))+(((-1.0)*x11406*x11421))+(((-1.0)*x11407*x11416)));
evalcond[5]=((-1.0)+((x11408*x11410))+(((-1.0)*x11413*x11420))+(((-1.0)*x11406*x11409))+(((-1.0)*r02*x11414))+(((-1.0)*x11407*x11415))+((x11402*x11412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11422=((1.0)*cj9);
CheckValue<IkReal> x11423=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r11*x11422))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x11423.valid){
continue;
}
CheckValue<IkReal> x11424 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x11422)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x11424.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11423.value)))+(x11424.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11425=IKcos(j8);
IkReal x11426=IKsin(j8);
IkReal x11427=(r21*sj9);
IkReal x11428=(cj9*r20);
IkReal x11429=((1.0)*x11426);
IkReal x11430=((1.0)*x11425);
IkReal x11431=(cj4*x11425);
IkReal x11432=(r12*sj4);
IkReal x11433=(r01*sj9);
IkReal x11434=(cj4*x11426);
IkReal x11435=(r11*sj4*sj9);
IkReal x11436=(cj9*r00);
IkReal x11437=((1.0)*cj4*x11426);
IkReal x11438=(cj9*r10*sj4);
IkReal x11439=(r02*sj4);
IkReal x11440=(r11*sj9);
IkReal x11441=(cj9*r00*sj4);
IkReal x11442=(cj9*r10);
IkReal x11443=((1.0)*cj4*x11425);
IkReal x11444=(r01*sj4*sj9);
evalcond[0]=(((r22*x11425))+(((-1.0)*x11428*x11429))+((x11426*x11427)));
evalcond[1]=((((-1.0)*x11428*x11430))+((x11425*x11427))+(((-1.0)*r22*x11429)));
evalcond[2]=((((-1.0)*x11429*x11438))+((x11433*x11434))+((x11425*x11432))+(((-1.0)*x11436*x11437))+((r02*x11431))+((x11426*x11435)));
evalcond[3]=((((-1.0)*x11442*x11443))+((x11426*x11439))+(((-1.0)*r12*x11437))+(((-1.0)*x11430*x11444))+((x11431*x11440))+((x11425*x11441)));
evalcond[4]=((1.0)+(((-1.0)*x11429*x11444))+(((-1.0)*x11430*x11439))+(((-1.0)*x11437*x11442))+((x11426*x11441))+((r12*x11431))+((x11434*x11440)));
evalcond[5]=((-1.0)+(((-1.0)*x11429*x11432))+(((-1.0)*x11430*x11438))+(((-1.0)*x11436*x11443))+((x11431*x11433))+((x11425*x11435))+(((-1.0)*r02*x11437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11445=(cj9*r21);
IkReal x11446=(r20*sj9);
IkReal x11447=((1.0)*cj4);
IkReal x11448=(cj9*r01);
IkReal x11449=(r00*sj9);
IkReal x11450=((1.0)*sj4);
IkReal x11451=(cj9*r11);
IkReal x11452=(r10*sj9);
IkReal x11453=(sj4*x11448);
IkReal x11454=(sj4*x11449);
IkReal x11455=((0.03431)*cj4);
IkReal x11456=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x11445))+(((-1.0)*x11446)));
evalcond[2]=((((-1.0)*x11450*x11452))+(((-1.0)*x11447*x11448))+(((-1.0)*x11447*x11449))+(((-1.0)*x11450*x11451)));
evalcond[3]=((0.16132)+(((0.03431)*x11446))+(((-1.0)*(1.0)*pz))+(((0.03431)*x11445)));
evalcond[4]=((((-1.0)*x11447*x11452))+(((-1.0)*x11447*x11451))+x11453+x11454);
evalcond[5]=((0.00301)+(((-1.0)*py*x11450))+((x11448*x11455))+(((-1.0)*px*x11447))+((x11449*x11455))+((x11452*x11456))+((x11451*x11456)));
evalcond[6]=((((-1.0)*py*x11447))+((px*sj4))+((x11451*x11455))+(((-0.03431)*x11454))+((x11452*x11455))+(((-0.03431)*x11453)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x11457=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x11457;
j8eval[1]=IKsign(x11457);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x11458=((1.0)*sj9);
IkReal x11459=((((-1.0)*cj4*r10*x11458))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x11459;
j8eval[1]=IKsign(x11459);
j8eval[2]=((IKabs(((((-1.0)*r21*x11458))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x11460=(cj4*r01);
IkReal x11461=(r21*x11460);
IkReal x11462=(r11*sj4);
IkReal x11463=(r21*x11462);
IkReal x11464=(cj4*r00);
IkReal x11465=cj9*cj9;
IkReal x11466=(r20*x11465);
IkReal x11467=(r10*sj4);
IkReal x11468=((1.0)*cj9*r21*sj9);
IkReal x11469=((1.0)*cj9*r20*sj9);
IkReal x11470=((1.0)*x11465);
IkReal x11471=(((x11466*x11467))+x11463+x11461+(((-1.0)*x11464*x11468))+(((-1.0)*x11460*x11469))+((x11464*x11466))+((r12*r22*sj4))+(((-1.0)*x11461*x11470))+(((-1.0)*x11463*x11470))+((cj4*r02*r22))+(((-1.0)*x11462*x11469))+(((-1.0)*x11467*x11468)));
j8eval[0]=x11471;
j8eval[1]=IKsign(x11471);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11472=(cj4*r01);
IkReal x11473=(r21*x11472);
IkReal x11474=(r11*sj4);
IkReal x11475=(r21*x11474);
IkReal x11476=(cj4*r00);
IkReal x11477=cj9*cj9;
IkReal x11478=(r20*x11477);
IkReal x11479=(r10*sj4);
IkReal x11480=((1.0)*cj9*r21*sj9);
IkReal x11481=((1.0)*cj9*r20*sj9);
IkReal x11482=((1.0)*x11477);
CheckValue<IkReal> x11483=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11472*x11481))+(((-1.0)*x11474*x11481))+(((-1.0)*x11473*x11482))+(((-1.0)*x11475*x11482))+(((-1.0)*x11479*x11480))+((x11478*x11479))+x11473+x11475+((r12*r22*sj4))+(((-1.0)*x11476*x11480))+((cj4*r02*r22))+((x11476*x11478)))),-1);
if(!x11483.valid){
continue;
}
CheckValue<IkReal> x11484 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x11484.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11483.value)))+(x11484.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11485=IKcos(j8);
IkReal x11486=IKsin(j8);
IkReal x11487=(r21*sj9);
IkReal x11488=(cj9*r20);
IkReal x11489=((1.0)*x11486);
IkReal x11490=((1.0)*x11485);
IkReal x11491=(cj4*x11485);
IkReal x11492=(r12*sj4);
IkReal x11493=(r01*sj9);
IkReal x11494=(cj4*x11486);
IkReal x11495=(r11*sj4*sj9);
IkReal x11496=(cj9*r00);
IkReal x11497=((1.0)*cj4*x11486);
IkReal x11498=(cj9*r10*sj4);
IkReal x11499=(r02*sj4);
IkReal x11500=(r11*sj9);
IkReal x11501=(cj9*r00*sj4);
IkReal x11502=(cj9*r10);
IkReal x11503=((1.0)*cj4*x11485);
IkReal x11504=(r01*sj4*sj9);
evalcond[0]=(((x11486*x11487))+((r22*x11485))+(((-1.0)*x11488*x11489)));
evalcond[1]=(((x11485*x11487))+(((-1.0)*r22*x11489))+(((-1.0)*x11488*x11490)));
evalcond[2]=(((r02*x11491))+((x11485*x11492))+((x11493*x11494))+((x11486*x11495))+(((-1.0)*x11489*x11498))+(((-1.0)*x11496*x11497)));
evalcond[3]=((((-1.0)*x11490*x11504))+((x11485*x11501))+((x11486*x11499))+(((-1.0)*r12*x11497))+(((-1.0)*x11502*x11503))+((x11491*x11500)));
evalcond[4]=((-1.0)+((x11494*x11500))+((x11486*x11501))+(((-1.0)*x11490*x11499))+(((-1.0)*x11497*x11502))+((r12*x11491))+(((-1.0)*x11489*x11504)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11497))+((x11491*x11493))+(((-1.0)*x11489*x11492))+(((-1.0)*x11490*x11498))+(((-1.0)*x11496*x11503))+((x11485*x11495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11505=((1.0)*sj9);
CheckValue<IkReal> x11506 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x11505))+((cj9*r20)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x11506.valid){
continue;
}
CheckValue<IkReal> x11507=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x11505))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x11507.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11506.value)+(((1.5707963267949)*(x11507.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11508=IKcos(j8);
IkReal x11509=IKsin(j8);
IkReal x11510=(r21*sj9);
IkReal x11511=(cj9*r20);
IkReal x11512=((1.0)*x11509);
IkReal x11513=((1.0)*x11508);
IkReal x11514=(cj4*x11508);
IkReal x11515=(r12*sj4);
IkReal x11516=(r01*sj9);
IkReal x11517=(cj4*x11509);
IkReal x11518=(r11*sj4*sj9);
IkReal x11519=(cj9*r00);
IkReal x11520=((1.0)*cj4*x11509);
IkReal x11521=(cj9*r10*sj4);
IkReal x11522=(r02*sj4);
IkReal x11523=(r11*sj9);
IkReal x11524=(cj9*r00*sj4);
IkReal x11525=(cj9*r10);
IkReal x11526=((1.0)*cj4*x11508);
IkReal x11527=(r01*sj4*sj9);
evalcond[0]=(((x11509*x11510))+((r22*x11508))+(((-1.0)*x11511*x11512)));
evalcond[1]=((((-1.0)*x11511*x11513))+(((-1.0)*r22*x11512))+((x11508*x11510)));
evalcond[2]=(((x11516*x11517))+(((-1.0)*x11519*x11520))+((x11508*x11515))+((r02*x11514))+(((-1.0)*x11512*x11521))+((x11509*x11518)));
evalcond[3]=((((-1.0)*x11525*x11526))+((x11508*x11524))+(((-1.0)*x11513*x11527))+(((-1.0)*r12*x11520))+((x11514*x11523))+((x11509*x11522)));
evalcond[4]=((-1.0)+((x11509*x11524))+((x11517*x11523))+(((-1.0)*x11520*x11525))+(((-1.0)*x11512*x11527))+((r12*x11514))+(((-1.0)*x11513*x11522)));
evalcond[5]=((1.0)+((x11508*x11518))+(((-1.0)*x11519*x11526))+(((-1.0)*x11513*x11521))+(((-1.0)*x11512*x11515))+(((-1.0)*r02*x11520))+((x11514*x11516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11528=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x11528.valid){
continue;
}
CheckValue<IkReal> x11529 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x11529.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11528.value)))+(x11529.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11530=IKcos(j8);
IkReal x11531=IKsin(j8);
IkReal x11532=(r21*sj9);
IkReal x11533=(cj9*r20);
IkReal x11534=((1.0)*x11531);
IkReal x11535=((1.0)*x11530);
IkReal x11536=(cj4*x11530);
IkReal x11537=(r12*sj4);
IkReal x11538=(r01*sj9);
IkReal x11539=(cj4*x11531);
IkReal x11540=(r11*sj4*sj9);
IkReal x11541=(cj9*r00);
IkReal x11542=((1.0)*cj4*x11531);
IkReal x11543=(cj9*r10*sj4);
IkReal x11544=(r02*sj4);
IkReal x11545=(r11*sj9);
IkReal x11546=(cj9*r00*sj4);
IkReal x11547=(cj9*r10);
IkReal x11548=((1.0)*cj4*x11530);
IkReal x11549=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x11533*x11534))+((x11531*x11532))+((r22*x11530)));
evalcond[1]=((((-1.0)*r22*x11534))+((x11530*x11532))+(((-1.0)*x11533*x11535)));
evalcond[2]=(((x11530*x11537))+(((-1.0)*x11534*x11543))+(((-1.0)*x11541*x11542))+((x11538*x11539))+((x11531*x11540))+((r02*x11536)));
evalcond[3]=(((x11536*x11545))+(((-1.0)*x11535*x11549))+((x11531*x11544))+(((-1.0)*r12*x11542))+(((-1.0)*x11547*x11548))+((x11530*x11546)));
evalcond[4]=((-1.0)+(((-1.0)*x11542*x11547))+((r12*x11536))+(((-1.0)*x11534*x11549))+((x11531*x11546))+(((-1.0)*x11535*x11544))+((x11539*x11545)));
evalcond[5]=((1.0)+((x11530*x11540))+((x11536*x11538))+(((-1.0)*x11534*x11537))+(((-1.0)*x11541*x11548))+(((-1.0)*r02*x11542))+(((-1.0)*x11535*x11543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11550=(cj9*r21);
IkReal x11551=(r20*sj9);
IkReal x11552=((1.0)*cj4);
IkReal x11553=(cj9*r01);
IkReal x11554=(r00*sj9);
IkReal x11555=((1.0)*sj4);
IkReal x11556=(cj9*r11);
IkReal x11557=(r10*sj9);
IkReal x11558=(sj4*x11553);
IkReal x11559=(sj4*x11554);
IkReal x11560=((0.03431)*cj4);
IkReal x11561=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x11550))+(((-1.0)*x11551)));
evalcond[2]=((((-1.0)*x11555*x11557))+(((-1.0)*x11552*x11553))+(((-1.0)*x11555*x11556))+(((-1.0)*x11552*x11554)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x11551))+(((0.03431)*x11550)));
evalcond[4]=(x11559+x11558+(((-1.0)*x11552*x11557))+(((-1.0)*x11552*x11556)));
evalcond[5]=((0.00337)+(((-1.0)*py*x11555))+((x11556*x11561))+((x11553*x11560))+(((-1.0)*px*x11552))+((x11554*x11560))+((x11557*x11561)));
evalcond[6]=((0.00036)+((px*sj4))+(((-1.0)*py*x11552))+(((-0.03431)*x11559))+((x11557*x11560))+(((-0.03431)*x11558))+((x11556*x11560)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x11562=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x11562;
j8eval[1]=IKsign(x11562);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x11563=((1.0)*sj9);
IkReal x11564=((((-1.0)*cj4*r10*x11563))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x11564;
j8eval[1]=((IKabs(((((-1.0)*r21*x11563))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x11564);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x11565=(r01*sj4);
IkReal x11566=((1.0)*r21);
IkReal x11567=(cj4*r11);
IkReal x11568=(cj9*r20*sj9);
IkReal x11569=cj9*cj9;
IkReal x11570=(r00*sj4);
IkReal x11571=(r20*x11569);
IkReal x11572=((((-1.0)*cj9*r21*sj9*x11570))+(((-1.0)*x11566*x11567))+((x11570*x11571))+((r02*r22*sj4))+(((-1.0)*r01*sj4*x11568))+(((-1.0)*cj4*r12*r22))+(((-1.0)*r21*x11565*x11569))+((r21*x11565))+((cj4*cj9*r10*r21*sj9))+((x11567*x11568))+((r21*x11567*x11569))+(((-1.0)*cj4*r10*x11571)));
j8eval[0]=x11572;
j8eval[1]=IKsign(x11572);
j8eval[2]=((IKabs(((((-1.0)*sj9*x11566))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11573=((1.0)*r21);
IkReal x11574=(r01*sj4);
IkReal x11575=(cj4*r11);
IkReal x11576=(cj9*r20*sj9);
IkReal x11577=cj9*cj9;
IkReal x11578=(r00*sj4);
IkReal x11579=(r20*x11577);
CheckValue<IkReal> x11580 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*sj9*x11573))),IKFAST_ATAN2_MAGTHRESH);
if(!x11580.valid){
continue;
}
CheckValue<IkReal> x11581=IKPowWithIntegerCheck(IKsign((((x11575*x11576))+(((-1.0)*r01*sj4*x11576))+((x11578*x11579))+(((-1.0)*cj9*r21*sj9*x11578))+(((-1.0)*x11573*x11575))+(((-1.0)*r21*x11574*x11577))+((r21*x11574))+((r02*r22*sj4))+(((-1.0)*cj4*r10*x11579))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+((r21*x11575*x11577)))),-1);
if(!x11581.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11580.value)+(((1.5707963267949)*(x11581.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11582=IKcos(j8);
IkReal x11583=IKsin(j8);
IkReal x11584=(r21*sj9);
IkReal x11585=(cj9*r20);
IkReal x11586=((1.0)*x11583);
IkReal x11587=((1.0)*x11582);
IkReal x11588=(cj4*x11582);
IkReal x11589=(r12*sj4);
IkReal x11590=(r01*sj9);
IkReal x11591=(cj4*x11583);
IkReal x11592=(r11*sj4*sj9);
IkReal x11593=(cj9*r00);
IkReal x11594=((1.0)*cj4*x11583);
IkReal x11595=(cj9*r10*sj4);
IkReal x11596=(r02*sj4);
IkReal x11597=(r11*sj9);
IkReal x11598=(cj9*r00*sj4);
IkReal x11599=(cj9*r10);
IkReal x11600=(r01*sj4*sj9);
IkReal x11601=((1.0)*cj4*x11582);
evalcond[0]=((((-1.0)*x11585*x11586))+((x11583*x11584))+((r22*x11582)));
evalcond[1]=((((-1.0)*r22*x11586))+(((-1.0)*x11585*x11587))+((x11582*x11584)));
evalcond[2]=((-1.0)+((x11590*x11591))+(((-1.0)*x11586*x11595))+(((-1.0)*x11593*x11594))+((x11583*x11592))+((r02*x11588))+((x11582*x11589)));
evalcond[3]=(((x11583*x11598))+((r12*x11588))+(((-1.0)*x11594*x11599))+((x11591*x11597))+(((-1.0)*x11586*x11600))+(((-1.0)*x11587*x11596)));
evalcond[4]=(((x11588*x11590))+(((-1.0)*r02*x11594))+(((-1.0)*x11593*x11601))+(((-1.0)*x11586*x11589))+(((-1.0)*x11587*x11595))+((x11582*x11592)));
evalcond[5]=((-1.0)+(((-1.0)*x11599*x11601))+((x11583*x11596))+(((-1.0)*r12*x11594))+((x11588*x11597))+((x11582*x11598))+(((-1.0)*x11587*x11600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11602=((1.0)*sj9);
CheckValue<IkReal> x11603 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x11602))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11603.valid){
continue;
}
CheckValue<IkReal> x11604=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x11602))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x11604.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11603.value)+(((1.5707963267949)*(x11604.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11605=IKcos(j8);
IkReal x11606=IKsin(j8);
IkReal x11607=(r21*sj9);
IkReal x11608=(cj9*r20);
IkReal x11609=((1.0)*x11606);
IkReal x11610=((1.0)*x11605);
IkReal x11611=(cj4*x11605);
IkReal x11612=(r12*sj4);
IkReal x11613=(r01*sj9);
IkReal x11614=(cj4*x11606);
IkReal x11615=(r11*sj4*sj9);
IkReal x11616=(cj9*r00);
IkReal x11617=((1.0)*cj4*x11606);
IkReal x11618=(cj9*r10*sj4);
IkReal x11619=(r02*sj4);
IkReal x11620=(r11*sj9);
IkReal x11621=(cj9*r00*sj4);
IkReal x11622=(cj9*r10);
IkReal x11623=(r01*sj4*sj9);
IkReal x11624=((1.0)*cj4*x11605);
evalcond[0]=((((-1.0)*x11608*x11609))+((x11606*x11607))+((r22*x11605)));
evalcond[1]=((((-1.0)*x11608*x11610))+(((-1.0)*r22*x11609))+((x11605*x11607)));
evalcond[2]=((-1.0)+((x11605*x11612))+((x11613*x11614))+((x11606*x11615))+(((-1.0)*x11616*x11617))+(((-1.0)*x11609*x11618))+((r02*x11611)));
evalcond[3]=((((-1.0)*x11609*x11623))+(((-1.0)*x11617*x11622))+(((-1.0)*x11610*x11619))+((r12*x11611))+((x11606*x11621))+((x11614*x11620)));
evalcond[4]=((((-1.0)*x11616*x11624))+(((-1.0)*r02*x11617))+((x11611*x11613))+(((-1.0)*x11609*x11612))+(((-1.0)*x11610*x11618))+((x11605*x11615)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11617))+((x11611*x11620))+((x11606*x11619))+(((-1.0)*x11610*x11623))+(((-1.0)*x11622*x11624))+((x11605*x11621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11625 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x11625.valid){
continue;
}
CheckValue<IkReal> x11626=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x11626.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11625.value)+(((1.5707963267949)*(x11626.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11627=IKcos(j8);
IkReal x11628=IKsin(j8);
IkReal x11629=(r21*sj9);
IkReal x11630=(cj9*r20);
IkReal x11631=((1.0)*x11628);
IkReal x11632=((1.0)*x11627);
IkReal x11633=(cj4*x11627);
IkReal x11634=(r12*sj4);
IkReal x11635=(r01*sj9);
IkReal x11636=(cj4*x11628);
IkReal x11637=(r11*sj4*sj9);
IkReal x11638=(cj9*r00);
IkReal x11639=((1.0)*cj4*x11628);
IkReal x11640=(cj9*r10*sj4);
IkReal x11641=(r02*sj4);
IkReal x11642=(r11*sj9);
IkReal x11643=(cj9*r00*sj4);
IkReal x11644=(cj9*r10);
IkReal x11645=(r01*sj4*sj9);
IkReal x11646=((1.0)*cj4*x11627);
evalcond[0]=(((x11628*x11629))+((r22*x11627))+(((-1.0)*x11630*x11631)));
evalcond[1]=(((x11627*x11629))+(((-1.0)*r22*x11631))+(((-1.0)*x11630*x11632)));
evalcond[2]=((-1.0)+((x11628*x11637))+((x11627*x11634))+(((-1.0)*x11638*x11639))+(((-1.0)*x11631*x11640))+((x11635*x11636))+((r02*x11633)));
evalcond[3]=((((-1.0)*x11631*x11645))+((r12*x11633))+((x11628*x11643))+((x11636*x11642))+(((-1.0)*x11639*x11644))+(((-1.0)*x11632*x11641)));
evalcond[4]=((((-1.0)*r02*x11639))+(((-1.0)*x11632*x11640))+(((-1.0)*x11638*x11646))+(((-1.0)*x11631*x11634))+((x11627*x11637))+((x11633*x11635)));
evalcond[5]=((-1.0)+((x11633*x11642))+((x11627*x11643))+((x11628*x11641))+(((-1.0)*x11644*x11646))+(((-1.0)*r12*x11639))+(((-1.0)*x11632*x11645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11647=(cj9*r21);
IkReal x11648=(r20*sj9);
IkReal x11649=((1.0)*cj4);
IkReal x11650=(cj9*r01);
IkReal x11651=(r00*sj9);
IkReal x11652=((1.0)*sj4);
IkReal x11653=(cj9*r11);
IkReal x11654=(r10*sj9);
IkReal x11655=(sj4*x11650);
IkReal x11656=(sj4*x11651);
IkReal x11657=((0.03431)*cj4);
IkReal x11658=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x11648))+(((-1.0)*x11647)));
evalcond[2]=((((-1.0)*x11649*x11650))+(((-1.0)*x11652*x11653))+(((-1.0)*x11652*x11654))+(((-1.0)*x11649*x11651)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x11648))+(((0.03431)*x11647)));
evalcond[4]=(x11655+x11656+(((-1.0)*x11649*x11653))+(((-1.0)*x11649*x11654)));
evalcond[5]=((0.00337)+((x11651*x11657))+((x11653*x11658))+((x11650*x11657))+(((-1.0)*px*x11649))+((x11654*x11658))+(((-1.0)*py*x11652)));
evalcond[6]=((-0.00036)+((px*sj4))+((x11654*x11657))+(((-1.0)*py*x11649))+(((-0.03431)*x11656))+(((-0.03431)*x11655))+((x11653*x11657)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x11659=((1.0)*sj9);
IkReal x11660=(((cj4*cj9*r11))+(((-1.0)*r00*sj4*x11659))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)));
j8eval[0]=x11660;
j8eval[1]=((IKabs(((((-1.0)*r21*x11659))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x11660);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x11661=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x11661;
j8eval[1]=IKsign(x11661);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x11662=(cj4*r11);
IkReal x11663=((1.0)*r21);
IkReal x11664=(r01*sj4);
IkReal x11665=(cj9*r20*sj9);
IkReal x11666=(cj4*r10);
IkReal x11667=cj9*cj9;
IkReal x11668=(r20*x11667);
IkReal x11669=(((cj9*r00*r21*sj4*sj9))+(((-1.0)*cj9*r21*sj9*x11666))+((x11666*x11668))+((cj4*r12*r22))+(((-1.0)*r02*r22*sj4))+(((-1.0)*r00*sj4*x11668))+(((-1.0)*x11663*x11664))+((r21*x11664*x11667))+(((-1.0)*cj4*r11*x11665))+((r21*x11662))+(((-1.0)*r21*x11662*x11667))+((x11664*x11665)));
j8eval[0]=x11669;
j8eval[1]=IKsign(x11669);
j8eval[2]=((IKabs(((((-1.0)*sj9*x11663))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11670=((1.0)*r21);
IkReal x11671=(cj4*r11);
IkReal x11672=(r01*sj4);
IkReal x11673=(cj9*r20*sj9);
IkReal x11674=(cj4*r10);
IkReal x11675=cj9*cj9;
IkReal x11676=(r20*x11675);
CheckValue<IkReal> x11677=IKPowWithIntegerCheck(IKsign((((cj9*r00*r21*sj4*sj9))+((x11674*x11676))+((cj4*r12*r22))+(((-1.0)*cj4*r11*x11673))+(((-1.0)*x11670*x11672))+(((-1.0)*r02*r22*sj4))+((r21*x11672*x11675))+((x11672*x11673))+(((-1.0)*r21*x11671*x11675))+(((-1.0)*cj9*r21*sj9*x11674))+(((-1.0)*r00*sj4*x11676))+((r21*x11671)))),-1);
if(!x11677.valid){
continue;
}
CheckValue<IkReal> x11678 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x11670))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11678.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11677.value)))+(x11678.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11679=IKcos(j8);
IkReal x11680=IKsin(j8);
IkReal x11681=(r21*sj9);
IkReal x11682=(cj9*r20);
IkReal x11683=((1.0)*x11680);
IkReal x11684=((1.0)*x11679);
IkReal x11685=(cj4*x11679);
IkReal x11686=(r12*sj4);
IkReal x11687=(r01*sj9);
IkReal x11688=(cj4*x11680);
IkReal x11689=(r11*sj4*sj9);
IkReal x11690=(cj9*r00);
IkReal x11691=((1.0)*cj4*x11680);
IkReal x11692=(cj9*r10*sj4);
IkReal x11693=(r02*sj4);
IkReal x11694=(r11*sj9);
IkReal x11695=(cj9*r00*sj4);
IkReal x11696=(cj9*r10);
IkReal x11697=(r01*sj4*sj9);
IkReal x11698=((1.0)*cj4*x11679);
evalcond[0]=(((x11680*x11681))+(((-1.0)*x11682*x11683))+((r22*x11679)));
evalcond[1]=(((x11679*x11681))+(((-1.0)*r22*x11683))+(((-1.0)*x11682*x11684)));
evalcond[2]=((1.0)+((x11687*x11688))+((r02*x11685))+(((-1.0)*x11683*x11692))+((x11680*x11689))+((x11679*x11686))+(((-1.0)*x11690*x11691)));
evalcond[3]=(((r12*x11685))+((x11688*x11694))+(((-1.0)*x11691*x11696))+((x11680*x11695))+(((-1.0)*x11684*x11693))+(((-1.0)*x11683*x11697)));
evalcond[4]=((((-1.0)*r02*x11691))+(((-1.0)*x11690*x11698))+((x11679*x11689))+((x11685*x11687))+(((-1.0)*x11684*x11692))+(((-1.0)*x11683*x11686)));
evalcond[5]=((1.0)+((x11685*x11694))+((x11680*x11693))+(((-1.0)*x11684*x11697))+(((-1.0)*r12*x11691))+((x11679*x11695))+(((-1.0)*x11696*x11698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11699 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x11699.valid){
continue;
}
CheckValue<IkReal> x11700=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x11700.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11699.value)+(((1.5707963267949)*(x11700.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11701=IKcos(j8);
IkReal x11702=IKsin(j8);
IkReal x11703=(r21*sj9);
IkReal x11704=(cj9*r20);
IkReal x11705=((1.0)*x11702);
IkReal x11706=((1.0)*x11701);
IkReal x11707=(cj4*x11701);
IkReal x11708=(r12*sj4);
IkReal x11709=(r01*sj9);
IkReal x11710=(cj4*x11702);
IkReal x11711=(r11*sj4*sj9);
IkReal x11712=(cj9*r00);
IkReal x11713=((1.0)*cj4*x11702);
IkReal x11714=(cj9*r10*sj4);
IkReal x11715=(r02*sj4);
IkReal x11716=(r11*sj9);
IkReal x11717=(cj9*r00*sj4);
IkReal x11718=(cj9*r10);
IkReal x11719=(r01*sj4*sj9);
IkReal x11720=((1.0)*cj4*x11701);
evalcond[0]=(((x11702*x11703))+((r22*x11701))+(((-1.0)*x11704*x11705)));
evalcond[1]=((((-1.0)*r22*x11705))+(((-1.0)*x11704*x11706))+((x11701*x11703)));
evalcond[2]=((1.0)+(((-1.0)*x11712*x11713))+((x11701*x11708))+((x11709*x11710))+(((-1.0)*x11705*x11714))+((r02*x11707))+((x11702*x11711)));
evalcond[3]=(((r12*x11707))+((x11710*x11716))+(((-1.0)*x11705*x11719))+(((-1.0)*x11706*x11715))+((x11702*x11717))+(((-1.0)*x11713*x11718)));
evalcond[4]=((((-1.0)*x11705*x11708))+((x11707*x11709))+((x11701*x11711))+(((-1.0)*x11712*x11720))+(((-1.0)*x11706*x11714))+(((-1.0)*r02*x11713)));
evalcond[5]=((1.0)+((x11707*x11716))+(((-1.0)*r12*x11713))+(((-1.0)*x11706*x11719))+((x11702*x11715))+(((-1.0)*x11718*x11720))+((x11701*x11717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11721=((1.0)*sj9);
CheckValue<IkReal> x11722=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj4*x11721))+((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x11722.valid){
continue;
}
CheckValue<IkReal> x11723 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x11721))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11723.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11722.value)))+(x11723.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11724=IKcos(j8);
IkReal x11725=IKsin(j8);
IkReal x11726=(r21*sj9);
IkReal x11727=(cj9*r20);
IkReal x11728=((1.0)*x11725);
IkReal x11729=((1.0)*x11724);
IkReal x11730=(cj4*x11724);
IkReal x11731=(r12*sj4);
IkReal x11732=(r01*sj9);
IkReal x11733=(cj4*x11725);
IkReal x11734=(r11*sj4*sj9);
IkReal x11735=(cj9*r00);
IkReal x11736=((1.0)*cj4*x11725);
IkReal x11737=(cj9*r10*sj4);
IkReal x11738=(r02*sj4);
IkReal x11739=(r11*sj9);
IkReal x11740=(cj9*r00*sj4);
IkReal x11741=(cj9*r10);
IkReal x11742=(r01*sj4*sj9);
IkReal x11743=((1.0)*cj4*x11724);
evalcond[0]=(((x11725*x11726))+((r22*x11724))+(((-1.0)*x11727*x11728)));
evalcond[1]=(((x11724*x11726))+(((-1.0)*x11727*x11729))+(((-1.0)*r22*x11728)));
evalcond[2]=((1.0)+((x11732*x11733))+((x11724*x11731))+(((-1.0)*x11735*x11736))+((r02*x11730))+((x11725*x11734))+(((-1.0)*x11728*x11737)));
evalcond[3]=(((x11725*x11740))+((r12*x11730))+((x11733*x11739))+(((-1.0)*x11728*x11742))+(((-1.0)*x11736*x11741))+(((-1.0)*x11729*x11738)));
evalcond[4]=(((x11724*x11734))+(((-1.0)*r02*x11736))+((x11730*x11732))+(((-1.0)*x11735*x11743))+(((-1.0)*x11729*x11737))+(((-1.0)*x11728*x11731)));
evalcond[5]=((1.0)+((x11724*x11740))+((x11725*x11738))+(((-1.0)*r12*x11736))+(((-1.0)*x11741*x11743))+(((-1.0)*x11729*x11742))+((x11730*x11739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11744=(r21*sj9);
IkReal x11745=(r21*sj4);
IkReal x11746=(r01*x11745);
IkReal x11747=((1.0)*cj4);
IkReal x11748=(r11*r21);
IkReal x11749=(cj9*r20*sj9);
IkReal x11750=cj9*cj9;
IkReal x11751=(r20*x11750);
CheckValue<IkReal> x11752=IKPowWithIntegerCheck(IKsign((((r00*sj4*x11751))+((cj4*r11*x11749))+(((-1.0)*cj9*r00*sj9*x11745))+x11746+((cj4*cj9*r10*x11744))+(((-1.0)*x11747*x11748))+(((-1.0)*r12*r22*x11747))+((r02*r22*sj4))+(((-1.0)*x11746*x11750))+((cj4*x11748*x11750))+(((-1.0)*cj4*r10*x11751))+(((-1.0)*r01*sj4*x11749)))),-1);
if(!x11752.valid){
continue;
}
CheckValue<IkReal> x11753 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*sj6*x11744))+((sj6*((cj9*r20))))),IKFAST_ATAN2_MAGTHRESH);
if(!x11753.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11752.value)))+(x11753.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11754=IKcos(j8);
IkReal x11755=IKsin(j8);
IkReal x11756=(r21*sj9);
IkReal x11757=(cj9*r20);
IkReal x11758=((1.0)*x11755);
IkReal x11759=((1.0)*x11754);
IkReal x11760=(cj4*x11754);
IkReal x11761=(r02*sj4);
IkReal x11762=(r11*sj9);
IkReal x11763=(cj4*x11755);
IkReal x11764=(cj9*r00*sj4);
IkReal x11765=(cj9*r10);
IkReal x11766=((1.0)*cj4*x11755);
IkReal x11767=(r01*sj4*sj9);
IkReal x11768=((-1.0)*(((1.0)*sj6)));
IkReal x11769=(r12*sj4);
IkReal x11770=(r01*sj9);
IkReal x11771=(r11*sj4*sj9);
IkReal x11772=(cj9*r00);
IkReal x11773=(cj9*r10*sj4);
IkReal x11774=((1.0)*cj4*x11754);
evalcond[0]=(((x11755*x11756))+((r22*x11754))+(((-1.0)*x11757*x11758)));
evalcond[1]=((((-1.0)*r22*x11758))+((x11754*x11756))+(((-1.0)*x11757*x11759)));
evalcond[2]=((((-1.0)*x11758*x11767))+((x11762*x11763))+(((-1.0)*x11759*x11761))+(((-1.0)*x11765*x11766))+((r12*x11760))+cj6+((x11755*x11764)));
evalcond[3]=(x11768+(((-1.0)*x11766*x11772))+((x11755*x11771))+((x11763*x11770))+(((-1.0)*x11758*x11773))+((x11754*x11769))+((r02*x11760)));
evalcond[4]=(x11768+((x11755*x11761))+(((-1.0)*x11759*x11767))+(((-1.0)*x11765*x11774))+((x11754*x11764))+((x11760*x11762))+(((-1.0)*r12*x11766)));
evalcond[5]=(((x11760*x11770))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x11758*x11769))+(((-1.0)*x11772*x11774))+((x11754*x11771))+(((-1.0)*r02*x11766))+(((-1.0)*x11759*x11773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11775=((1.0)*sj9);
IkReal x11776=((1.0)*cj4);
CheckValue<IkReal> x11777 = IKatan2WithCheck(IkReal((cj6*r22)),((((-1.0)*cj6*r21*x11775))+((cj6*cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11777.valid){
continue;
}
CheckValue<IkReal> x11778=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*cj9*r01*x11776))+(((-1.0)*r10*sj4*x11775))+(((-1.0)*r00*sj9*x11776)))),-1);
if(!x11778.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11777.value)+(((1.5707963267949)*(x11778.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11779=IKcos(j8);
IkReal x11780=IKsin(j8);
IkReal x11781=(r21*sj9);
IkReal x11782=(cj9*r20);
IkReal x11783=((1.0)*x11780);
IkReal x11784=((1.0)*x11779);
IkReal x11785=(cj4*x11779);
IkReal x11786=(r02*sj4);
IkReal x11787=(r11*sj9);
IkReal x11788=(cj4*x11780);
IkReal x11789=(cj9*r00*sj4);
IkReal x11790=(cj9*r10);
IkReal x11791=((1.0)*cj4*x11780);
IkReal x11792=(r01*sj4*sj9);
IkReal x11793=((-1.0)*(((1.0)*sj6)));
IkReal x11794=(r12*sj4);
IkReal x11795=(r01*sj9);
IkReal x11796=(r11*sj4*sj9);
IkReal x11797=(cj9*r00);
IkReal x11798=(cj9*r10*sj4);
IkReal x11799=((1.0)*cj4*x11779);
evalcond[0]=(((x11780*x11781))+((r22*x11779))+(((-1.0)*x11782*x11783)));
evalcond[1]=((((-1.0)*r22*x11783))+(((-1.0)*x11782*x11784))+((x11779*x11781)));
evalcond[2]=(((x11787*x11788))+cj6+(((-1.0)*x11783*x11792))+(((-1.0)*x11790*x11791))+((r12*x11785))+((x11780*x11789))+(((-1.0)*x11784*x11786)));
evalcond[3]=((((-1.0)*x11791*x11797))+x11793+(((-1.0)*x11783*x11798))+((x11788*x11795))+((r02*x11785))+((x11779*x11794))+((x11780*x11796)));
evalcond[4]=(x11793+(((-1.0)*x11790*x11799))+((x11779*x11789))+(((-1.0)*x11784*x11792))+(((-1.0)*r12*x11791))+((x11780*x11786))+((x11785*x11787)));
evalcond[5]=((((-1.0)*r02*x11791))+(((-1.0)*x11784*x11798))+((x11785*x11795))+((x11779*x11796))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x11797*x11799))+(((-1.0)*x11783*x11794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11800=((1.0)*cj4);
CheckValue<IkReal> x11801 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11801.valid){
continue;
}
CheckValue<IkReal> x11802=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*r11*x11800))+((cj9*r01*sj4))+((r00*sj4*sj9))+(((-1.0)*r10*sj9*x11800)))),-1);
if(!x11802.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11801.value)+(((1.5707963267949)*(x11802.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11803=IKcos(j8);
IkReal x11804=IKsin(j8);
IkReal x11805=(r21*sj9);
IkReal x11806=(cj9*r20);
IkReal x11807=((1.0)*x11804);
IkReal x11808=((1.0)*x11803);
IkReal x11809=(cj4*x11803);
IkReal x11810=(r02*sj4);
IkReal x11811=(r11*sj9);
IkReal x11812=(cj4*x11804);
IkReal x11813=(cj9*r00*sj4);
IkReal x11814=(cj9*r10);
IkReal x11815=((1.0)*cj4*x11804);
IkReal x11816=(r01*sj4*sj9);
IkReal x11817=((-1.0)*(((1.0)*sj6)));
IkReal x11818=(r12*sj4);
IkReal x11819=(r01*sj9);
IkReal x11820=(r11*sj4*sj9);
IkReal x11821=(cj9*r00);
IkReal x11822=(cj9*r10*sj4);
IkReal x11823=((1.0)*cj4*x11803);
evalcond[0]=(((r22*x11803))+((x11804*x11805))+(((-1.0)*x11806*x11807)));
evalcond[1]=((((-1.0)*x11806*x11808))+(((-1.0)*r22*x11807))+((x11803*x11805)));
evalcond[2]=(((x11811*x11812))+(((-1.0)*x11814*x11815))+cj6+((x11804*x11813))+((r12*x11809))+(((-1.0)*x11808*x11810))+(((-1.0)*x11807*x11816)));
evalcond[3]=(((x11812*x11819))+((r02*x11809))+(((-1.0)*x11815*x11821))+((x11804*x11820))+(((-1.0)*x11807*x11822))+((x11803*x11818))+x11817);
evalcond[4]=(((x11809*x11811))+(((-1.0)*r12*x11815))+((x11803*x11813))+(((-1.0)*x11814*x11823))+((x11804*x11810))+(((-1.0)*x11808*x11816))+x11817);
evalcond[5]=((((-1.0)*x11807*x11818))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x11808*x11822))+(((-1.0)*r02*x11815))+((x11809*x11819))+(((-1.0)*x11821*x11823))+((x11803*x11820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11824=(cj9*r21);
IkReal x11825=(r20*sj9);
IkReal x11826=((1.0)*cj4);
IkReal x11827=(cj9*r01);
IkReal x11828=(r00*sj9);
IkReal x11829=((1.0)*sj4);
IkReal x11830=(cj9*r11);
IkReal x11831=(r10*sj9);
IkReal x11832=(sj4*x11827);
IkReal x11833=(sj4*x11828);
IkReal x11834=((0.03431)*cj4);
IkReal x11835=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*x11824))+(((-1.0)*x11825)));
evalcond[2]=((((-1.0)*x11829*x11831))+(((-1.0)*x11826*x11827))+(((-1.0)*x11829*x11830))+(((-1.0)*x11826*x11828)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x11824))+(((0.03431)*x11825)));
evalcond[4]=((((-1.0)*x11826*x11831))+x11833+x11832+(((-1.0)*x11826*x11830)));
evalcond[5]=((0.00337)+((x11831*x11835))+(((-1.0)*py*x11829))+((x11830*x11835))+(((0.00036)*cj6))+((x11828*x11834))+((x11827*x11834))+(((-1.0)*px*x11826)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x11832))+(((-1.0)*(0.00036)*sj6))+((x11831*x11834))+((x11830*x11834))+(((-0.03431)*x11833))+(((-1.0)*py*x11826)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x11836=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x11836;
j8eval[1]=IKsign(x11836);
j8eval[2]=((IKabs((((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x11837=((1.0)*cj4);
IkReal x11838=((((-1.0)*r10*sj9*x11837))+(((-1.0)*cj9*r11*x11837))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x11838;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x11838);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x11839=(r01*((cj4*r21)));
IkReal x11840=(r11*((r21*sj4)));
IkReal x11841=cj9*cj9;
IkReal x11842=(r20*x11841);
IkReal x11843=((1.0)*cj9*sj9);
IkReal x11844=((1.0)*cj9*r20*sj9);
IkReal x11845=((1.0)*x11841);
IkReal x11846=(((cj4*r00*x11842))+(((-1.0)*x11839*x11845))+(((-1.0)*r10*r21*sj4*x11843))+x11839+(((-1.0)*r11*sj4*x11844))+(((-1.0)*cj4*r01*x11844))+(((-1.0)*cj4*r00*r21*x11843))+x11840+((r12*r22*sj4))+((cj4*r02*r22))+(((-1.0)*x11840*x11845))+((r10*sj4*x11842)));
j8eval[0]=x11846;
j8eval[1]=IKsign(x11846);
j8eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj6*((cj9*r20))))+(((-1.0)*cj6*r21*sj9))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11847=(cj9*r21);
IkReal x11848=(r20*sj9);
IkReal x11849=((1.0)*cj4);
IkReal x11850=(cj9*r01);
IkReal x11851=(r00*sj9);
IkReal x11852=((1.0)*sj4);
IkReal x11853=(cj9*r11);
IkReal x11854=(r10*sj9);
IkReal x11855=(sj4*x11850);
IkReal x11856=(sj4*x11851);
IkReal x11857=((0.03431)*cj4);
IkReal x11858=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x11848))+(((-1.0)*x11847)));
evalcond[2]=((((-1.0)*x11849*x11850))+(((-1.0)*x11849*x11851))+(((-1.0)*x11852*x11853))+(((-1.0)*x11852*x11854)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x11847))+(((0.03431)*x11848)));
evalcond[4]=((((-1.0)*x11849*x11853))+x11855+x11856+(((-1.0)*x11849*x11854)));
evalcond[5]=((0.00337)+((x11853*x11858))+(((-1.0)*py*x11852))+((x11854*x11858))+((x11851*x11857))+(((-1.0)*px*x11849))+((x11850*x11857)));
evalcond[6]=((-0.00036)+((px*sj4))+(((-1.0)*py*x11849))+(((-0.03431)*x11855))+((x11854*x11857))+((x11853*x11857))+(((-0.03431)*x11856)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x11859=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x11859;
j8eval[1]=IKsign(x11859);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x11860=((1.0)*sj9);
IkReal x11861=((((-1.0)*cj4*r10*x11860))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x11861;
j8eval[1]=((IKabs(((((-1.0)*r21*x11860))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x11861);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x11862=(r01*sj4);
IkReal x11863=((1.0)*r21);
IkReal x11864=(cj4*r11);
IkReal x11865=(cj9*r20*sj9);
IkReal x11866=cj9*cj9;
IkReal x11867=(r00*sj4);
IkReal x11868=(r20*x11866);
IkReal x11869=(((r21*x11864*x11866))+(((-1.0)*r01*sj4*x11865))+((x11864*x11865))+(((-1.0)*r21*x11862*x11866))+(((-1.0)*cj4*r10*x11868))+((r02*r22*sj4))+(((-1.0)*x11863*x11864))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+((x11867*x11868))+((r21*x11862))+(((-1.0)*cj9*r21*sj9*x11867)));
j8eval[0]=x11869;
j8eval[1]=IKsign(x11869);
j8eval[2]=((IKabs(((((-1.0)*sj9*x11863))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11870=((1.0)*r21);
IkReal x11871=(r01*sj4);
IkReal x11872=(cj4*r11);
IkReal x11873=(cj9*r20*sj9);
IkReal x11874=cj9*cj9;
IkReal x11875=(r00*sj4);
IkReal x11876=(r20*x11874);
CheckValue<IkReal> x11877 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x11870))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11877.valid){
continue;
}
CheckValue<IkReal> x11878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11871*x11874))+((x11872*x11873))+(((-1.0)*x11870*x11872))+(((-1.0)*cj9*r21*sj9*x11875))+((r21*x11872*x11874))+(((-1.0)*cj4*r10*x11876))+((r21*x11871))+((r02*r22*sj4))+(((-1.0)*r01*sj4*x11873))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+((x11875*x11876)))),-1);
if(!x11878.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11877.value)+(((1.5707963267949)*(x11878.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11879=IKcos(j8);
IkReal x11880=IKsin(j8);
IkReal x11881=(r21*sj9);
IkReal x11882=(cj9*r20);
IkReal x11883=((1.0)*x11880);
IkReal x11884=((1.0)*x11879);
IkReal x11885=(cj4*x11879);
IkReal x11886=(r12*sj4);
IkReal x11887=(r01*sj9);
IkReal x11888=(cj4*x11880);
IkReal x11889=(r11*sj4*sj9);
IkReal x11890=(cj9*r00);
IkReal x11891=((1.0)*cj4*x11880);
IkReal x11892=(cj9*r10*sj4);
IkReal x11893=(r02*sj4);
IkReal x11894=(r11*sj9);
IkReal x11895=(cj9*r00*sj4);
IkReal x11896=(cj9*r10);
IkReal x11897=(r01*sj4*sj9);
IkReal x11898=((1.0)*cj4*x11879);
evalcond[0]=((((-1.0)*x11882*x11883))+((r22*x11879))+((x11880*x11881)));
evalcond[1]=((((-1.0)*r22*x11883))+((x11879*x11881))+(((-1.0)*x11882*x11884)));
evalcond[2]=((-1.0)+(((-1.0)*x11890*x11891))+((x11887*x11888))+((x11880*x11889))+(((-1.0)*x11883*x11892))+((x11879*x11886))+((r02*x11885)));
evalcond[3]=((((-1.0)*x11883*x11897))+((x11888*x11894))+(((-1.0)*x11884*x11893))+((r12*x11885))+(((-1.0)*x11891*x11896))+((x11880*x11895)));
evalcond[4]=((((-1.0)*x11883*x11886))+(((-1.0)*x11890*x11898))+((x11879*x11889))+(((-1.0)*r02*x11891))+((x11885*x11887))+(((-1.0)*x11884*x11892)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11891))+((x11879*x11895))+(((-1.0)*x11896*x11898))+((x11880*x11893))+((x11885*x11894))+(((-1.0)*x11884*x11897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11899=((1.0)*sj9);
CheckValue<IkReal> x11900=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x11899))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x11900.valid){
continue;
}
CheckValue<IkReal> x11901 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x11899))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11901.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11900.value)))+(x11901.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11902=IKcos(j8);
IkReal x11903=IKsin(j8);
IkReal x11904=(r21*sj9);
IkReal x11905=(cj9*r20);
IkReal x11906=((1.0)*x11903);
IkReal x11907=((1.0)*x11902);
IkReal x11908=(cj4*x11902);
IkReal x11909=(r12*sj4);
IkReal x11910=(r01*sj9);
IkReal x11911=(cj4*x11903);
IkReal x11912=(r11*sj4*sj9);
IkReal x11913=(cj9*r00);
IkReal x11914=((1.0)*cj4*x11903);
IkReal x11915=(cj9*r10*sj4);
IkReal x11916=(r02*sj4);
IkReal x11917=(r11*sj9);
IkReal x11918=(cj9*r00*sj4);
IkReal x11919=(cj9*r10);
IkReal x11920=(r01*sj4*sj9);
IkReal x11921=((1.0)*cj4*x11902);
evalcond[0]=(((r22*x11902))+((x11903*x11904))+(((-1.0)*x11905*x11906)));
evalcond[1]=(((x11902*x11904))+(((-1.0)*r22*x11906))+(((-1.0)*x11905*x11907)));
evalcond[2]=((-1.0)+((x11902*x11909))+((x11903*x11912))+(((-1.0)*x11906*x11915))+((r02*x11908))+(((-1.0)*x11913*x11914))+((x11910*x11911)));
evalcond[3]=(((x11903*x11918))+(((-1.0)*x11906*x11920))+(((-1.0)*x11914*x11919))+(((-1.0)*x11907*x11916))+((r12*x11908))+((x11911*x11917)));
evalcond[4]=((((-1.0)*r02*x11914))+(((-1.0)*x11906*x11909))+(((-1.0)*x11907*x11915))+(((-1.0)*x11913*x11921))+((x11908*x11910))+((x11902*x11912)));
evalcond[5]=((-1.0)+((x11902*x11918))+(((-1.0)*x11907*x11920))+(((-1.0)*x11919*x11921))+((x11908*x11917))+((x11903*x11916))+(((-1.0)*r12*x11914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11922 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x11922.valid){
continue;
}
CheckValue<IkReal> x11923=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x11923.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11922.value)+(((1.5707963267949)*(x11923.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11924=IKcos(j8);
IkReal x11925=IKsin(j8);
IkReal x11926=(r21*sj9);
IkReal x11927=(cj9*r20);
IkReal x11928=((1.0)*x11925);
IkReal x11929=((1.0)*x11924);
IkReal x11930=(cj4*x11924);
IkReal x11931=(r12*sj4);
IkReal x11932=(r01*sj9);
IkReal x11933=(cj4*x11925);
IkReal x11934=(r11*sj4*sj9);
IkReal x11935=(cj9*r00);
IkReal x11936=((1.0)*cj4*x11925);
IkReal x11937=(cj9*r10*sj4);
IkReal x11938=(r02*sj4);
IkReal x11939=(r11*sj9);
IkReal x11940=(cj9*r00*sj4);
IkReal x11941=(cj9*r10);
IkReal x11942=(r01*sj4*sj9);
IkReal x11943=((1.0)*cj4*x11924);
evalcond[0]=(((r22*x11924))+((x11925*x11926))+(((-1.0)*x11927*x11928)));
evalcond[1]=((((-1.0)*x11927*x11929))+(((-1.0)*r22*x11928))+((x11924*x11926)));
evalcond[2]=((-1.0)+((x11925*x11934))+((x11924*x11931))+(((-1.0)*x11928*x11937))+((r02*x11930))+((x11932*x11933))+(((-1.0)*x11935*x11936)));
evalcond[3]=((((-1.0)*x11929*x11938))+((x11925*x11940))+((x11933*x11939))+(((-1.0)*x11928*x11942))+(((-1.0)*x11936*x11941))+((r12*x11930)));
evalcond[4]=(((x11924*x11934))+(((-1.0)*x11929*x11937))+(((-1.0)*r02*x11936))+((x11930*x11932))+(((-1.0)*x11935*x11943))+(((-1.0)*x11928*x11931)));
evalcond[5]=((-1.0)+(((-1.0)*x11941*x11943))+((x11930*x11939))+(((-1.0)*x11929*x11942))+(((-1.0)*r12*x11936))+((x11924*x11940))+((x11925*x11938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11944=(cj9*r21);
IkReal x11945=(r20*sj9);
IkReal x11946=((1.0)*cj4);
IkReal x11947=(cj9*r01);
IkReal x11948=(r00*sj9);
IkReal x11949=((1.0)*sj4);
IkReal x11950=(cj9*r11);
IkReal x11951=(r10*sj9);
IkReal x11952=(sj4*x11947);
IkReal x11953=(sj4*x11948);
IkReal x11954=((0.03431)*cj4);
IkReal x11955=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x11944))+(((-1.0)*x11945)));
evalcond[2]=((((-1.0)*x11949*x11950))+(((-1.0)*x11949*x11951))+(((-1.0)*x11946*x11948))+(((-1.0)*x11946*x11947)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x11944))+(((0.03431)*x11945)));
evalcond[4]=((((-1.0)*x11946*x11951))+(((-1.0)*x11946*x11950))+x11952+x11953);
evalcond[5]=((0.00337)+((x11948*x11954))+((x11950*x11955))+((x11951*x11955))+(((-1.0)*px*x11946))+((x11947*x11954))+(((-1.0)*py*x11949)));
evalcond[6]=((0.00036)+((x11950*x11954))+((x11951*x11954))+((px*sj4))+(((-0.03431)*x11952))+(((-1.0)*py*x11946))+(((-0.03431)*x11953)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x11956=((1.0)*sj9);
IkReal x11957=(((cj4*cj9*r11))+(((-1.0)*r00*sj4*x11956))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)));
j8eval[0]=x11957;
j8eval[1]=((IKabs(((((-1.0)*r21*x11956))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x11957);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x11958=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x11958;
j8eval[1]=IKsign(x11958);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x11959=(cj4*r11);
IkReal x11960=((1.0)*r21);
IkReal x11961=(r01*sj4);
IkReal x11962=(cj9*r20*sj9);
IkReal x11963=(cj4*r10);
IkReal x11964=cj9*cj9;
IkReal x11965=(r20*x11964);
IkReal x11966=(((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*r00*sj4*x11965))+(((-1.0)*r02*r22*sj4))+(((-1.0)*cj9*r21*sj9*x11963))+(((-1.0)*r21*x11959*x11964))+(((-1.0)*cj4*r11*x11962))+((r21*x11959))+((r21*x11961*x11964))+((x11961*x11962))+(((-1.0)*x11960*x11961))+((x11963*x11965)));
j8eval[0]=x11966;
j8eval[1]=IKsign(x11966);
j8eval[2]=((IKabs(((((-1.0)*sj9*x11960))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11967=((1.0)*r21);
IkReal x11968=(cj4*r11);
IkReal x11969=(r01*sj4);
IkReal x11970=(cj9*r20*sj9);
IkReal x11971=(cj4*r10);
IkReal x11972=cj9*cj9;
IkReal x11973=(r20*x11972);
CheckValue<IkReal> x11974 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x11967))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x11974.valid){
continue;
}
CheckValue<IkReal> x11975=IKPowWithIntegerCheck(IKsign((((x11971*x11973))+((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*r21*x11968*x11972))+(((-1.0)*cj9*r21*sj9*x11971))+(((-1.0)*r02*r22*sj4))+((x11969*x11970))+(((-1.0)*r00*sj4*x11973))+((r21*x11969*x11972))+(((-1.0)*cj4*r11*x11970))+(((-1.0)*x11967*x11969))+((r21*x11968)))),-1);
if(!x11975.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11974.value)+(((1.5707963267949)*(x11975.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11976=IKcos(j8);
IkReal x11977=IKsin(j8);
IkReal x11978=(r21*sj9);
IkReal x11979=(cj9*r20);
IkReal x11980=((1.0)*x11977);
IkReal x11981=((1.0)*x11976);
IkReal x11982=(cj4*x11976);
IkReal x11983=(r12*sj4);
IkReal x11984=(r01*sj9);
IkReal x11985=(cj4*x11977);
IkReal x11986=(r11*sj4*sj9);
IkReal x11987=(cj9*r00);
IkReal x11988=((1.0)*cj4*x11977);
IkReal x11989=(cj9*r10*sj4);
IkReal x11990=(r02*sj4);
IkReal x11991=(r11*sj9);
IkReal x11992=(cj9*r00*sj4);
IkReal x11993=(cj9*r10);
IkReal x11994=(r01*sj4*sj9);
IkReal x11995=((1.0)*cj4*x11976);
evalcond[0]=(((r22*x11976))+(((-1.0)*x11979*x11980))+((x11977*x11978)));
evalcond[1]=(((x11976*x11978))+(((-1.0)*r22*x11980))+(((-1.0)*x11979*x11981)));
evalcond[2]=((1.0)+(((-1.0)*x11980*x11989))+((x11977*x11986))+((x11984*x11985))+((x11976*x11983))+(((-1.0)*x11987*x11988))+((r02*x11982)));
evalcond[3]=((((-1.0)*x11981*x11990))+((r12*x11982))+(((-1.0)*x11988*x11993))+((x11977*x11992))+((x11985*x11991))+(((-1.0)*x11980*x11994)));
evalcond[4]=(((x11976*x11986))+(((-1.0)*x11987*x11995))+((x11982*x11984))+(((-1.0)*x11981*x11989))+(((-1.0)*r02*x11988))+(((-1.0)*x11980*x11983)));
evalcond[5]=((1.0)+((x11982*x11991))+((x11976*x11992))+(((-1.0)*r12*x11988))+(((-1.0)*x11993*x11995))+((x11977*x11990))+(((-1.0)*x11981*x11994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11996 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x11996.valid){
continue;
}
CheckValue<IkReal> x11997=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x11997.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11996.value)+(((1.5707963267949)*(x11997.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11998=IKcos(j8);
IkReal x11999=IKsin(j8);
IkReal x12000=(r21*sj9);
IkReal x12001=(cj9*r20);
IkReal x12002=((1.0)*x11999);
IkReal x12003=((1.0)*x11998);
IkReal x12004=(cj4*x11998);
IkReal x12005=(r12*sj4);
IkReal x12006=(r01*sj9);
IkReal x12007=(cj4*x11999);
IkReal x12008=(r11*sj4*sj9);
IkReal x12009=(cj9*r00);
IkReal x12010=((1.0)*cj4*x11999);
IkReal x12011=(cj9*r10*sj4);
IkReal x12012=(r02*sj4);
IkReal x12013=(r11*sj9);
IkReal x12014=(cj9*r00*sj4);
IkReal x12015=(cj9*r10);
IkReal x12016=(r01*sj4*sj9);
IkReal x12017=((1.0)*cj4*x11998);
evalcond[0]=(((r22*x11998))+(((-1.0)*x12001*x12002))+((x11999*x12000)));
evalcond[1]=((((-1.0)*r22*x12002))+(((-1.0)*x12001*x12003))+((x11998*x12000)));
evalcond[2]=((1.0)+((r02*x12004))+(((-1.0)*x12002*x12011))+((x12006*x12007))+(((-1.0)*x12009*x12010))+((x11999*x12008))+((x11998*x12005)));
evalcond[3]=(((x11999*x12014))+((x12007*x12013))+(((-1.0)*x12002*x12016))+(((-1.0)*x12003*x12012))+((r12*x12004))+(((-1.0)*x12010*x12015)));
evalcond[4]=((((-1.0)*r02*x12010))+((x11998*x12008))+(((-1.0)*x12003*x12011))+(((-1.0)*x12009*x12017))+(((-1.0)*x12002*x12005))+((x12004*x12006)));
evalcond[5]=((1.0)+(((-1.0)*x12003*x12016))+(((-1.0)*x12015*x12017))+((x11998*x12014))+(((-1.0)*r12*x12010))+((x11999*x12012))+((x12004*x12013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12018=((1.0)*sj9);
CheckValue<IkReal> x12019 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x12018))),IKFAST_ATAN2_MAGTHRESH);
if(!x12019.valid){
continue;
}
CheckValue<IkReal> x12020=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+(((-1.0)*r00*sj4*x12018))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x12020.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12019.value)+(((1.5707963267949)*(x12020.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12021=IKcos(j8);
IkReal x12022=IKsin(j8);
IkReal x12023=(r21*sj9);
IkReal x12024=(cj9*r20);
IkReal x12025=((1.0)*x12022);
IkReal x12026=((1.0)*x12021);
IkReal x12027=(cj4*x12021);
IkReal x12028=(r12*sj4);
IkReal x12029=(r01*sj9);
IkReal x12030=(cj4*x12022);
IkReal x12031=(r11*sj4*sj9);
IkReal x12032=(cj9*r00);
IkReal x12033=((1.0)*cj4*x12022);
IkReal x12034=(cj9*r10*sj4);
IkReal x12035=(r02*sj4);
IkReal x12036=(r11*sj9);
IkReal x12037=(cj9*r00*sj4);
IkReal x12038=(cj9*r10);
IkReal x12039=(r01*sj4*sj9);
IkReal x12040=((1.0)*cj4*x12021);
evalcond[0]=(((x12022*x12023))+(((-1.0)*x12024*x12025))+((r22*x12021)));
evalcond[1]=((((-1.0)*x12024*x12026))+(((-1.0)*r22*x12025))+((x12021*x12023)));
evalcond[2]=((1.0)+(((-1.0)*x12025*x12034))+(((-1.0)*x12032*x12033))+((x12022*x12031))+((x12021*x12028))+((x12029*x12030))+((r02*x12027)));
evalcond[3]=(((r12*x12027))+(((-1.0)*x12026*x12035))+((x12022*x12037))+(((-1.0)*x12033*x12038))+((x12030*x12036))+(((-1.0)*x12025*x12039)));
evalcond[4]=((((-1.0)*x12025*x12028))+((x12027*x12029))+(((-1.0)*r02*x12033))+(((-1.0)*x12026*x12034))+((x12021*x12031))+(((-1.0)*x12032*x12040)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12033))+(((-1.0)*x12026*x12039))+((x12022*x12035))+(((-1.0)*x12038*x12040))+((x12021*x12037))+((x12027*x12036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12041=(cj9*r21);
IkReal x12042=(r20*sj9);
IkReal x12043=((1.0)*cj4);
IkReal x12044=(cj9*r01);
IkReal x12045=(r00*sj9);
IkReal x12046=((1.0)*sj4);
IkReal x12047=(cj9*r11);
IkReal x12048=(r10*sj9);
IkReal x12049=(sj4*x12044);
IkReal x12050=(sj4*x12045);
IkReal x12051=((0.03431)*cj4);
IkReal x12052=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x12041))+(((-1.0)*x12042)));
evalcond[2]=((((-1.0)*x12046*x12048))+(((-1.0)*x12043*x12044))+(((-1.0)*x12046*x12047))+(((-1.0)*x12043*x12045)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x12041))+(((0.03431)*x12042)));
evalcond[4]=(x12049+(((-1.0)*x12043*x12048))+x12050+(((-1.0)*x12043*x12047)));
evalcond[5]=((0.00373)+(((-1.0)*py*x12046))+(((-1.0)*px*x12043))+((x12044*x12051))+((x12045*x12051))+((x12048*x12052))+((x12047*x12052)));
evalcond[6]=(((px*sj4))+((x12047*x12051))+(((-0.03431)*x12050))+(((-1.0)*py*x12043))+(((-0.03431)*x12049))+((x12048*x12051)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x12053=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x12053;
j8eval[1]=IKsign(x12053);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x12054=((1.0)*sj9);
IkReal x12055=((((-1.0)*cj4*r10*x12054))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x12055;
j8eval[1]=IKsign(x12055);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*r21*x12054)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x12056=(cj4*r01);
IkReal x12057=(r21*x12056);
IkReal x12058=(r11*sj4);
IkReal x12059=(r21*x12058);
IkReal x12060=(cj4*r00);
IkReal x12061=cj9*cj9;
IkReal x12062=(r20*x12061);
IkReal x12063=(r10*sj4);
IkReal x12064=((1.0)*cj9*r21*sj9);
IkReal x12065=((1.0)*cj9*r20*sj9);
IkReal x12066=((1.0)*x12061);
IkReal x12067=((((-1.0)*x12060*x12064))+(((-1.0)*x12058*x12065))+((x12062*x12063))+(((-1.0)*x12057*x12066))+(((-1.0)*x12059*x12066))+((x12060*x12062))+((r12*r22*sj4))+(((-1.0)*x12056*x12065))+((cj4*r02*r22))+x12059+x12057+(((-1.0)*x12063*x12064)));
j8eval[0]=x12067;
j8eval[1]=IKsign(x12067);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12068=(cj4*r01);
IkReal x12069=(r21*x12068);
IkReal x12070=(r11*sj4);
IkReal x12071=(r21*x12070);
IkReal x12072=(cj4*r00);
IkReal x12073=cj9*cj9;
IkReal x12074=(r20*x12073);
IkReal x12075=(r10*sj4);
IkReal x12076=((1.0)*cj9*r21*sj9);
IkReal x12077=((1.0)*cj9*r20*sj9);
IkReal x12078=((1.0)*x12073);
CheckValue<IkReal> x12079=IKPowWithIntegerCheck(IKsign((((x12074*x12075))+(((-1.0)*x12068*x12077))+(((-1.0)*x12071*x12078))+x12071+(((-1.0)*x12075*x12076))+(((-1.0)*x12069*x12078))+((r12*r22*sj4))+(((-1.0)*x12070*x12077))+((cj4*r02*r22))+(((-1.0)*x12072*x12076))+((x12072*x12074))+x12069)),-1);
if(!x12079.valid){
continue;
}
CheckValue<IkReal> x12080 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x12080.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12079.value)))+(x12080.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12081=IKcos(j8);
IkReal x12082=IKsin(j8);
IkReal x12083=(r21*sj9);
IkReal x12084=(cj9*r20);
IkReal x12085=((1.0)*x12082);
IkReal x12086=((1.0)*x12081);
IkReal x12087=(cj4*x12081);
IkReal x12088=(r12*sj4);
IkReal x12089=(r01*sj9);
IkReal x12090=(cj4*x12082);
IkReal x12091=(r11*sj4*sj9);
IkReal x12092=(cj9*r00);
IkReal x12093=((1.0)*cj4*x12082);
IkReal x12094=(cj9*r10*sj4);
IkReal x12095=(r02*sj4);
IkReal x12096=(r11*sj9);
IkReal x12097=(cj9*r00*sj4);
IkReal x12098=(cj9*r10);
IkReal x12099=((1.0)*cj4*x12081);
IkReal x12100=(r01*sj4*sj9);
evalcond[0]=(((x12082*x12083))+(((-1.0)*x12084*x12085))+((r22*x12081)));
evalcond[1]=(((x12081*x12083))+(((-1.0)*r22*x12085))+(((-1.0)*x12084*x12086)));
evalcond[2]=((((-1.0)*x12085*x12094))+(((-1.0)*x12092*x12093))+((x12089*x12090))+((x12081*x12088))+((r02*x12087))+((x12082*x12091)));
evalcond[3]=((((-1.0)*x12086*x12100))+((x12087*x12096))+(((-1.0)*r12*x12093))+(((-1.0)*x12098*x12099))+((x12082*x12095))+((x12081*x12097)));
evalcond[4]=((-1.0)+(((-1.0)*x12086*x12095))+(((-1.0)*x12093*x12098))+((x12082*x12097))+(((-1.0)*x12085*x12100))+((r12*x12087))+((x12090*x12096)));
evalcond[5]=((1.0)+(((-1.0)*r02*x12093))+(((-1.0)*x12086*x12094))+((x12087*x12089))+(((-1.0)*x12085*x12088))+(((-1.0)*x12092*x12099))+((x12081*x12091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12101=((1.0)*sj9);
CheckValue<IkReal> x12102=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x12101))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x12102.valid){
continue;
}
CheckValue<IkReal> x12103 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x12101))+((cj9*r20)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x12103.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12102.value)))+(x12103.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12104=IKcos(j8);
IkReal x12105=IKsin(j8);
IkReal x12106=(r21*sj9);
IkReal x12107=(cj9*r20);
IkReal x12108=((1.0)*x12105);
IkReal x12109=((1.0)*x12104);
IkReal x12110=(cj4*x12104);
IkReal x12111=(r12*sj4);
IkReal x12112=(r01*sj9);
IkReal x12113=(cj4*x12105);
IkReal x12114=(r11*sj4*sj9);
IkReal x12115=(cj9*r00);
IkReal x12116=((1.0)*cj4*x12105);
IkReal x12117=(cj9*r10*sj4);
IkReal x12118=(r02*sj4);
IkReal x12119=(r11*sj9);
IkReal x12120=(cj9*r00*sj4);
IkReal x12121=(cj9*r10);
IkReal x12122=((1.0)*cj4*x12104);
IkReal x12123=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x12107*x12108))+((x12105*x12106))+((r22*x12104)));
evalcond[1]=((((-1.0)*r22*x12108))+((x12104*x12106))+(((-1.0)*x12107*x12109)));
evalcond[2]=(((x12112*x12113))+(((-1.0)*x12115*x12116))+((r02*x12110))+((x12105*x12114))+((x12104*x12111))+(((-1.0)*x12108*x12117)));
evalcond[3]=(((x12104*x12120))+(((-1.0)*x12121*x12122))+((x12105*x12118))+(((-1.0)*r12*x12116))+(((-1.0)*x12109*x12123))+((x12110*x12119)));
evalcond[4]=((-1.0)+((x12113*x12119))+(((-1.0)*x12109*x12118))+(((-1.0)*x12108*x12123))+(((-1.0)*x12116*x12121))+((x12105*x12120))+((r12*x12110)));
evalcond[5]=((1.0)+((x12110*x12112))+(((-1.0)*x12108*x12111))+(((-1.0)*x12115*x12122))+((x12104*x12114))+(((-1.0)*r02*x12116))+(((-1.0)*x12109*x12117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12124=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x12124.valid){
continue;
}
CheckValue<IkReal> x12125 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x12125.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12124.value)))+(x12125.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12126=IKcos(j8);
IkReal x12127=IKsin(j8);
IkReal x12128=(r21*sj9);
IkReal x12129=(cj9*r20);
IkReal x12130=((1.0)*x12127);
IkReal x12131=((1.0)*x12126);
IkReal x12132=(cj4*x12126);
IkReal x12133=(r12*sj4);
IkReal x12134=(r01*sj9);
IkReal x12135=(cj4*x12127);
IkReal x12136=(r11*sj4*sj9);
IkReal x12137=(cj9*r00);
IkReal x12138=((1.0)*cj4*x12127);
IkReal x12139=(cj9*r10*sj4);
IkReal x12140=(r02*sj4);
IkReal x12141=(r11*sj9);
IkReal x12142=(cj9*r00*sj4);
IkReal x12143=(cj9*r10);
IkReal x12144=((1.0)*cj4*x12126);
IkReal x12145=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x12129*x12130))+((r22*x12126))+((x12127*x12128)));
evalcond[1]=(((x12126*x12128))+(((-1.0)*r22*x12130))+(((-1.0)*x12129*x12131)));
evalcond[2]=(((x12134*x12135))+(((-1.0)*x12130*x12139))+(((-1.0)*x12137*x12138))+((x12127*x12136))+((r02*x12132))+((x12126*x12133)));
evalcond[3]=(((x12126*x12142))+((x12132*x12141))+(((-1.0)*r12*x12138))+(((-1.0)*x12143*x12144))+(((-1.0)*x12131*x12145))+((x12127*x12140)));
evalcond[4]=((-1.0)+((x12135*x12141))+((r12*x12132))+(((-1.0)*x12131*x12140))+(((-1.0)*x12130*x12145))+((x12127*x12142))+(((-1.0)*x12138*x12143)));
evalcond[5]=((1.0)+((x12126*x12136))+(((-1.0)*x12130*x12133))+(((-1.0)*x12137*x12144))+(((-1.0)*x12131*x12139))+(((-1.0)*r02*x12138))+((x12132*x12134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12146=(cj9*r21);
IkReal x12147=(r20*sj9);
IkReal x12148=((1.0)*cj4);
IkReal x12149=(cj9*r01);
IkReal x12150=(r00*sj9);
IkReal x12151=((1.0)*sj4);
IkReal x12152=(cj9*r11);
IkReal x12153=(r10*sj9);
IkReal x12154=(sj4*x12149);
IkReal x12155=(sj4*x12150);
IkReal x12156=((0.03431)*cj4);
IkReal x12157=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x12147))+(((-1.0)*x12146)));
evalcond[2]=((((-1.0)*x12151*x12153))+(((-1.0)*x12148*x12149))+(((-1.0)*x12151*x12152))+(((-1.0)*x12148*x12150)));
evalcond[3]=((-0.4967)+(((0.03431)*x12146))+(((0.03431)*x12147))+(((-1.0)*(1.0)*pz)));
evalcond[4]=((((-1.0)*x12148*x12153))+x12155+x12154+(((-1.0)*x12148*x12152)));
evalcond[5]=((0.00301)+((x12149*x12156))+(((-1.0)*py*x12151))+((x12150*x12156))+((x12153*x12157))+((x12152*x12157))+(((-1.0)*px*x12148)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x12154))+((x12153*x12156))+(((-0.03431)*x12155))+(((-1.0)*py*x12148))+((x12152*x12156)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x12158=((1.0)*cj9);
IkReal x12159=((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x12158))+((r00*sj4*sj9)));
j8eval[0]=x12159;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x12158)))))+(IKabs(r22)));
j8eval[2]=IKsign(x12159);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x12160=((1.0)*cj9);
IkReal x12161=((1.0)*sj9);
IkReal x12162=((((-1.0)*cj4*r00*x12161))+(((-1.0)*r11*sj4*x12160))+(((-1.0)*r10*sj4*x12161))+(((-1.0)*cj4*r01*x12160)));
j8eval[0]=x12162;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x12161))+((cj9*r20))))));
j8eval[2]=IKsign(x12162);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x12163=((1.0)*r21);
IkReal x12164=(cj4*r01);
IkReal x12165=((1.0)*r22);
IkReal x12166=(r11*sj4);
IkReal x12167=(cj4*r00);
IkReal x12168=(cj9*r21*sj9);
IkReal x12169=(cj9*r20*sj9);
IkReal x12170=(r10*sj4);
IkReal x12171=cj9*cj9;
IkReal x12172=(r21*x12171);
IkReal x12173=((1.0)*r20*x12171);
IkReal x12174=((((-1.0)*cj4*r02*x12165))+(((-1.0)*x12163*x12166))+(((-1.0)*x12167*x12173))+((x12164*x12172))+((x12168*x12170))+((x12164*x12169))+(((-1.0)*x12170*x12173))+((x12167*x12168))+(((-1.0)*x12163*x12164))+((x12166*x12172))+((x12166*x12169))+(((-1.0)*r12*sj4*x12165)));
j8eval[0]=x12174;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*sj9*x12163)))))+(IKabs(r22)));
j8eval[2]=IKsign(x12174);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12175=((1.0)*r21);
IkReal x12176=(cj4*r01);
IkReal x12177=((1.0)*r22);
IkReal x12178=(r11*sj4);
IkReal x12179=(cj4*r00);
IkReal x12180=(cj9*r21*sj9);
IkReal x12181=(cj9*r20*sj9);
IkReal x12182=(r10*sj4);
IkReal x12183=cj9*cj9;
IkReal x12184=(r21*x12183);
IkReal x12185=((1.0)*r20*x12183);
CheckValue<IkReal> x12186 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x12175))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x12186.valid){
continue;
}
CheckValue<IkReal> x12187=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02*x12177))+(((-1.0)*x12179*x12185))+(((-1.0)*x12182*x12185))+((x12176*x12184))+(((-1.0)*x12175*x12178))+((x12176*x12181))+(((-1.0)*x12175*x12176))+((x12178*x12184))+(((-1.0)*r12*sj4*x12177))+((x12180*x12182))+((x12179*x12180))+((x12178*x12181)))),-1);
if(!x12187.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12186.value)+(((1.5707963267949)*(x12187.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12188=IKcos(j8);
IkReal x12189=IKsin(j8);
IkReal x12190=(r21*sj9);
IkReal x12191=(cj9*r20);
IkReal x12192=((1.0)*x12189);
IkReal x12193=((1.0)*x12188);
IkReal x12194=(cj4*x12188);
IkReal x12195=(r12*sj4);
IkReal x12196=(r01*sj9);
IkReal x12197=(cj4*x12189);
IkReal x12198=(r11*sj4*sj9);
IkReal x12199=(cj9*r00);
IkReal x12200=((1.0)*cj4*x12189);
IkReal x12201=(cj9*r10*sj4);
IkReal x12202=(r02*sj4);
IkReal x12203=(r11*sj9);
IkReal x12204=(cj9*r00*sj4);
IkReal x12205=(cj9*r10);
IkReal x12206=((1.0)*cj4*x12188);
IkReal x12207=(r01*sj4*sj9);
evalcond[0]=(((r22*x12188))+((x12189*x12190))+(((-1.0)*x12191*x12192)));
evalcond[1]=((((-1.0)*r22*x12192))+(((-1.0)*x12191*x12193))+((x12188*x12190)));
evalcond[2]=((((-1.0)*x12199*x12200))+((x12188*x12195))+((x12189*x12198))+(((-1.0)*x12192*x12201))+((x12196*x12197))+((r02*x12194)));
evalcond[3]=(((x12188*x12204))+(((-1.0)*r12*x12200))+(((-1.0)*x12193*x12207))+(((-1.0)*x12205*x12206))+((x12194*x12203))+((x12189*x12202)));
evalcond[4]=((1.0)+(((-1.0)*x12192*x12207))+((x12197*x12203))+(((-1.0)*x12193*x12202))+((x12189*x12204))+((r12*x12194))+(((-1.0)*x12200*x12205)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x12200))+(((-1.0)*x12199*x12206))+((x12194*x12196))+((x12188*x12198))+(((-1.0)*x12192*x12195))+(((-1.0)*x12193*x12201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12208=((1.0)*sj9);
IkReal x12209=((1.0)*cj9);
CheckValue<IkReal> x12210=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x12208))+(((-1.0)*r11*sj4*x12209))+(((-1.0)*cj4*r01*x12209))+(((-1.0)*cj4*r00*x12208)))),-1);
if(!x12210.valid){
continue;
}
CheckValue<IkReal> x12211 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x12208))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x12211.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12210.value)))+(x12211.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12212=IKcos(j8);
IkReal x12213=IKsin(j8);
IkReal x12214=(r21*sj9);
IkReal x12215=(cj9*r20);
IkReal x12216=((1.0)*x12213);
IkReal x12217=((1.0)*x12212);
IkReal x12218=(cj4*x12212);
IkReal x12219=(r12*sj4);
IkReal x12220=(r01*sj9);
IkReal x12221=(cj4*x12213);
IkReal x12222=(r11*sj4*sj9);
IkReal x12223=(cj9*r00);
IkReal x12224=((1.0)*cj4*x12213);
IkReal x12225=(cj9*r10*sj4);
IkReal x12226=(r02*sj4);
IkReal x12227=(r11*sj9);
IkReal x12228=(cj9*r00*sj4);
IkReal x12229=(cj9*r10);
IkReal x12230=((1.0)*cj4*x12212);
IkReal x12231=(r01*sj4*sj9);
evalcond[0]=(((r22*x12212))+(((-1.0)*x12215*x12216))+((x12213*x12214)));
evalcond[1]=((((-1.0)*r22*x12216))+(((-1.0)*x12215*x12217))+((x12212*x12214)));
evalcond[2]=((((-1.0)*x12223*x12224))+(((-1.0)*x12216*x12225))+((x12212*x12219))+((x12213*x12222))+((r02*x12218))+((x12220*x12221)));
evalcond[3]=((((-1.0)*r12*x12224))+((x12213*x12226))+(((-1.0)*x12229*x12230))+((x12218*x12227))+(((-1.0)*x12217*x12231))+((x12212*x12228)));
evalcond[4]=((1.0)+((r12*x12218))+((x12221*x12227))+(((-1.0)*x12216*x12231))+(((-1.0)*x12224*x12229))+(((-1.0)*x12217*x12226))+((x12213*x12228)));
evalcond[5]=((-1.0)+(((-1.0)*x12223*x12230))+((x12218*x12220))+(((-1.0)*x12216*x12219))+((x12212*x12222))+(((-1.0)*r02*x12224))+(((-1.0)*x12217*x12225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12232=((1.0)*cj9);
CheckValue<IkReal> x12233 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x12232)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x12233.valid){
continue;
}
CheckValue<IkReal> x12234=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x12232))+((r00*sj4*sj9)))),-1);
if(!x12234.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12233.value)+(((1.5707963267949)*(x12234.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12235=IKcos(j8);
IkReal x12236=IKsin(j8);
IkReal x12237=(r21*sj9);
IkReal x12238=(cj9*r20);
IkReal x12239=((1.0)*x12236);
IkReal x12240=((1.0)*x12235);
IkReal x12241=(cj4*x12235);
IkReal x12242=(r12*sj4);
IkReal x12243=(r01*sj9);
IkReal x12244=(cj4*x12236);
IkReal x12245=(r11*sj4*sj9);
IkReal x12246=(cj9*r00);
IkReal x12247=((1.0)*cj4*x12236);
IkReal x12248=(cj9*r10*sj4);
IkReal x12249=(r02*sj4);
IkReal x12250=(r11*sj9);
IkReal x12251=(cj9*r00*sj4);
IkReal x12252=(cj9*r10);
IkReal x12253=((1.0)*cj4*x12235);
IkReal x12254=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x12238*x12239))+((x12236*x12237))+((r22*x12235)));
evalcond[1]=((((-1.0)*r22*x12239))+((x12235*x12237))+(((-1.0)*x12238*x12240)));
evalcond[2]=(((r02*x12241))+(((-1.0)*x12239*x12248))+(((-1.0)*x12246*x12247))+((x12235*x12242))+((x12243*x12244))+((x12236*x12245)));
evalcond[3]=((((-1.0)*x12240*x12254))+(((-1.0)*r12*x12247))+((x12235*x12251))+((x12241*x12250))+((x12236*x12249))+(((-1.0)*x12252*x12253)));
evalcond[4]=((1.0)+(((-1.0)*x12239*x12254))+((x12244*x12250))+(((-1.0)*x12240*x12249))+((x12236*x12251))+(((-1.0)*x12247*x12252))+((r12*x12241)));
evalcond[5]=((-1.0)+(((-1.0)*x12246*x12253))+(((-1.0)*r02*x12247))+(((-1.0)*x12240*x12248))+(((-1.0)*x12239*x12242))+((x12241*x12243))+((x12235*x12245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12255=(r01*((cj4*r21)));
IkReal x12256=(r11*((r21*sj4)));
IkReal x12257=cj9*cj9;
IkReal x12258=(r20*x12257);
IkReal x12259=((1.0)*cj9*sj9);
IkReal x12260=((1.0)*cj9*r20*sj9);
IkReal x12261=((1.0)*x12257);
CheckValue<IkReal> x12262 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*((cj9*r20))))+(((-1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x12262.valid){
continue;
}
CheckValue<IkReal> x12263=IKPowWithIntegerCheck(IKsign((((r10*sj4*x12258))+(((-1.0)*r11*sj4*x12260))+(((-1.0)*cj4*r01*x12260))+(((-1.0)*x12256*x12261))+(((-1.0)*r10*r21*sj4*x12259))+x12256+x12255+(((-1.0)*cj4*r00*r21*x12259))+((r12*r22*sj4))+((cj4*r02*r22))+(((-1.0)*x12255*x12261))+((cj4*r00*x12258)))),-1);
if(!x12263.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12262.value)+(((1.5707963267949)*(x12263.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12264=IKcos(j8);
IkReal x12265=IKsin(j8);
IkReal x12266=(r21*sj9);
IkReal x12267=(cj9*r20);
IkReal x12268=((1.0)*x12265);
IkReal x12269=((1.0)*x12264);
IkReal x12270=((-1.0)*(((1.0)*sj6)));
IkReal x12271=(cj4*x12264);
IkReal x12272=(r12*sj4);
IkReal x12273=(r01*sj9);
IkReal x12274=(cj4*x12265);
IkReal x12275=(r11*sj4*sj9);
IkReal x12276=(cj9*r00);
IkReal x12277=((1.0)*cj4*x12265);
IkReal x12278=(cj9*r10*sj4);
IkReal x12279=((1.0)*cj4*x12264);
IkReal x12280=(r02*sj4);
IkReal x12281=(r11*sj9);
IkReal x12282=(cj9*r00*sj4);
IkReal x12283=(cj9*r10);
IkReal x12284=(r01*sj4*sj9);
evalcond[0]=(((r22*x12264))+(((-1.0)*x12267*x12268))+((x12265*x12266)));
evalcond[1]=((((-1.0)*x12267*x12269))+((x12264*x12266))+(((-1.0)*r22*x12268)));
evalcond[2]=((((-1.0)*x12276*x12277))+((x12264*x12272))+x12270+((r02*x12271))+((x12273*x12274))+(((-1.0)*x12268*x12278))+((x12265*x12275)));
evalcond[3]=((((-1.0)*x12269*x12278))+(((-1.0)*x12276*x12279))+(((-1.0)*r02*x12277))+((x12271*x12273))+((x12264*x12275))+cj6+(((-1.0)*x12268*x12272)));
evalcond[4]=((((-1.0)*x12268*x12284))+(((-1.0)*x12269*x12280))+((x12274*x12281))+(((-1.0)*x12277*x12283))+(((-1.0)*(1.0)*cj6))+((x12265*x12282))+((r12*x12271)));
evalcond[5]=(((x12265*x12280))+x12270+(((-1.0)*x12279*x12283))+((x12264*x12282))+(((-1.0)*x12269*x12284))+((x12271*x12281))+(((-1.0)*r12*x12277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12285=((1.0)*cj4);
CheckValue<IkReal> x12286=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj9*r11*x12285))+((r00*sj4*sj9))+(((-1.0)*r10*sj9*x12285)))),-1);
if(!x12286.valid){
continue;
}
CheckValue<IkReal> x12287 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x12287.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12286.value)))+(x12287.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12288=IKcos(j8);
IkReal x12289=IKsin(j8);
IkReal x12290=(r21*sj9);
IkReal x12291=(cj9*r20);
IkReal x12292=((1.0)*x12289);
IkReal x12293=((1.0)*x12288);
IkReal x12294=((-1.0)*(((1.0)*sj6)));
IkReal x12295=(cj4*x12288);
IkReal x12296=(r12*sj4);
IkReal x12297=(r01*sj9);
IkReal x12298=(cj4*x12289);
IkReal x12299=(r11*sj4*sj9);
IkReal x12300=(cj9*r00);
IkReal x12301=((1.0)*cj4*x12289);
IkReal x12302=(cj9*r10*sj4);
IkReal x12303=((1.0)*cj4*x12288);
IkReal x12304=(r02*sj4);
IkReal x12305=(r11*sj9);
IkReal x12306=(cj9*r00*sj4);
IkReal x12307=(cj9*r10);
IkReal x12308=(r01*sj4*sj9);
evalcond[0]=(((r22*x12288))+((x12289*x12290))+(((-1.0)*x12291*x12292)));
evalcond[1]=(((x12288*x12290))+(((-1.0)*r22*x12292))+(((-1.0)*x12291*x12293)));
evalcond[2]=((((-1.0)*x12300*x12301))+(((-1.0)*x12292*x12302))+((r02*x12295))+((x12289*x12299))+((x12297*x12298))+((x12288*x12296))+x12294);
evalcond[3]=((((-1.0)*x12293*x12302))+((x12288*x12299))+cj6+(((-1.0)*x12300*x12303))+(((-1.0)*x12292*x12296))+((x12295*x12297))+(((-1.0)*r02*x12301)));
evalcond[4]=((((-1.0)*x12292*x12308))+((r12*x12295))+(((-1.0)*x12301*x12307))+((x12289*x12306))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x12293*x12304))+((x12298*x12305)));
evalcond[5]=(((x12289*x12304))+(((-1.0)*r12*x12301))+(((-1.0)*x12303*x12307))+((x12295*x12305))+((x12288*x12306))+x12294+(((-1.0)*x12293*x12308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12309 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x12309.valid){
continue;
}
CheckValue<IkReal> x12310=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x12310.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12309.value)+(((1.5707963267949)*(x12310.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12311=IKcos(j8);
IkReal x12312=IKsin(j8);
IkReal x12313=(r21*sj9);
IkReal x12314=(cj9*r20);
IkReal x12315=((1.0)*x12312);
IkReal x12316=((1.0)*x12311);
IkReal x12317=((-1.0)*(((1.0)*sj6)));
IkReal x12318=(cj4*x12311);
IkReal x12319=(r12*sj4);
IkReal x12320=(r01*sj9);
IkReal x12321=(cj4*x12312);
IkReal x12322=(r11*sj4*sj9);
IkReal x12323=(cj9*r00);
IkReal x12324=((1.0)*cj4*x12312);
IkReal x12325=(cj9*r10*sj4);
IkReal x12326=((1.0)*cj4*x12311);
IkReal x12327=(r02*sj4);
IkReal x12328=(r11*sj9);
IkReal x12329=(cj9*r00*sj4);
IkReal x12330=(cj9*r10);
IkReal x12331=(r01*sj4*sj9);
evalcond[0]=(((r22*x12311))+((x12312*x12313))+(((-1.0)*x12314*x12315)));
evalcond[1]=((((-1.0)*r22*x12315))+((x12311*x12313))+(((-1.0)*x12314*x12316)));
evalcond[2]=(x12317+(((-1.0)*x12323*x12324))+((x12320*x12321))+(((-1.0)*x12315*x12325))+((r02*x12318))+((x12312*x12322))+((x12311*x12319)));
evalcond[3]=((((-1.0)*x12316*x12325))+((x12318*x12320))+(((-1.0)*x12323*x12326))+cj6+(((-1.0)*r02*x12324))+(((-1.0)*x12315*x12319))+((x12311*x12322)));
evalcond[4]=(((x12312*x12329))+(((-1.0)*x12315*x12331))+(((-1.0)*(1.0)*cj6))+((r12*x12318))+(((-1.0)*x12316*x12327))+(((-1.0)*x12324*x12330))+((x12321*x12328)));
evalcond[5]=(x12317+((x12311*x12329))+((x12318*x12328))+(((-1.0)*r12*x12324))+((x12312*x12327))+(((-1.0)*x12326*x12330))+(((-1.0)*x12316*x12331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12332=(cj9*r21);
IkReal x12333=(r20*sj9);
IkReal x12334=((1.0)*cj4);
IkReal x12335=(cj9*r01);
IkReal x12336=(r00*sj9);
IkReal x12337=((1.0)*sj4);
IkReal x12338=(cj9*r11);
IkReal x12339=(r10*sj9);
IkReal x12340=(sj4*x12335);
IkReal x12341=(sj4*x12336);
IkReal x12342=((0.03431)*cj4);
IkReal x12343=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*x12332))+(((-1.0)*x12333)));
evalcond[2]=((((-1.0)*x12334*x12335))+(((-1.0)*x12334*x12336))+(((-1.0)*x12337*x12338))+(((-1.0)*x12337*x12339)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x12332))+(((0.03431)*x12333)));
evalcond[4]=((((-1.0)*x12334*x12338))+(((-1.0)*x12334*x12339))+x12341+x12340);
evalcond[5]=((0.00337)+((x12338*x12343))+(((-1.0)*px*x12334))+(((0.00036)*cj6))+((x12339*x12343))+((x12336*x12342))+(((-1.0)*py*x12337))+((x12335*x12342)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x12340))+(((-0.03431)*x12341))+((x12338*x12342))+(((-1.0)*(0.00036)*sj6))+(((-1.0)*py*x12334))+((x12339*x12342)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x12344=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x12344;
j8eval[1]=IKsign(x12344);
j8eval[2]=((IKabs((((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x12345=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x12345;
j8eval[1]=IKsign(x12345);
j8eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x12346=((1.0)*cj4);
IkReal x12347=((((-1.0)*r10*sj9*x12346))+(((-1.0)*cj9*r11*x12346))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x12347;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x12347);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x12348=(cj9*r21);
IkReal x12349=(r20*sj9);
IkReal x12350=((1.0)*cj4);
IkReal x12351=(cj9*r01);
IkReal x12352=(r00*sj9);
IkReal x12353=((1.0)*sj4);
IkReal x12354=(cj9*r11);
IkReal x12355=(r10*sj9);
IkReal x12356=(sj4*x12351);
IkReal x12357=(sj4*x12352);
IkReal x12358=((0.03431)*cj4);
IkReal x12359=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x12349))+(((-1.0)*x12348)));
evalcond[2]=((((-1.0)*x12350*x12352))+(((-1.0)*x12353*x12355))+(((-1.0)*x12350*x12351))+(((-1.0)*x12353*x12354)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x12349))+(((0.03431)*x12348)));
evalcond[4]=((((-1.0)*x12350*x12354))+(((-1.0)*x12350*x12355))+x12356+x12357);
evalcond[5]=((0.00373)+(((-1.0)*py*x12353))+((x12354*x12359))+((x12352*x12358))+(((-1.0)*px*x12350))+((x12355*x12359))+((x12351*x12358)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x12350))+((x12355*x12358))+(((-0.03431)*x12356))+((x12354*x12358))+(((-0.03431)*x12357)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x12360=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x12360;
j8eval[1]=IKsign(x12360);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x12361=((1.0)*cj9);
IkReal x12362=((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x12361))+((r00*sj4*sj9)));
j8eval[0]=x12362;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*r20*x12361))))));
j8eval[2]=IKsign(x12362);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x12363=((1.0)*r21);
IkReal x12364=(cj4*r01);
IkReal x12365=((1.0)*r22);
IkReal x12366=(r11*sj4);
IkReal x12367=(cj4*r00);
IkReal x12368=(cj9*r21*sj9);
IkReal x12369=(cj9*r20*sj9);
IkReal x12370=(r10*sj4);
IkReal x12371=cj9*cj9;
IkReal x12372=(r21*x12371);
IkReal x12373=((1.0)*r20*x12371);
IkReal x12374=((((-1.0)*cj4*r02*x12365))+(((-1.0)*x12363*x12364))+(((-1.0)*x12370*x12373))+(((-1.0)*x12363*x12366))+((x12366*x12372))+((x12367*x12368))+((x12364*x12372))+((x12364*x12369))+((x12366*x12369))+(((-1.0)*x12367*x12373))+((x12368*x12370))+(((-1.0)*r12*sj4*x12365)));
j8eval[0]=x12374;
j8eval[1]=((IKabs(((((-1.0)*sj9*x12363))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x12374);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12375=((1.0)*r21);
IkReal x12376=(cj4*r01);
IkReal x12377=((1.0)*r22);
IkReal x12378=(r11*sj4);
IkReal x12379=(cj4*r00);
IkReal x12380=(cj9*r21*sj9);
IkReal x12381=(cj9*r20*sj9);
IkReal x12382=(r10*sj4);
IkReal x12383=cj9*cj9;
IkReal x12384=(r21*x12383);
IkReal x12385=((1.0)*r20*x12383);
CheckValue<IkReal> x12386 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*sj9*x12375))),IKFAST_ATAN2_MAGTHRESH);
if(!x12386.valid){
continue;
}
CheckValue<IkReal> x12387=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12382*x12385))+((x12378*x12381))+((x12380*x12382))+(((-1.0)*x12375*x12378))+((x12376*x12384))+(((-1.0)*x12375*x12376))+(((-1.0)*cj4*r02*x12377))+((x12379*x12380))+((x12378*x12384))+(((-1.0)*x12379*x12385))+(((-1.0)*r12*sj4*x12377))+((x12376*x12381)))),-1);
if(!x12387.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12386.value)+(((1.5707963267949)*(x12387.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12388=IKcos(j8);
IkReal x12389=IKsin(j8);
IkReal x12390=(r21*sj9);
IkReal x12391=(cj9*r20);
IkReal x12392=((1.0)*x12389);
IkReal x12393=((1.0)*x12388);
IkReal x12394=(cj4*x12388);
IkReal x12395=(r12*sj4);
IkReal x12396=(r01*sj9);
IkReal x12397=(cj4*x12389);
IkReal x12398=(r11*sj4*sj9);
IkReal x12399=(cj9*r00);
IkReal x12400=((1.0)*cj4*x12389);
IkReal x12401=(cj9*r10*sj4);
IkReal x12402=(r02*sj4);
IkReal x12403=(r11*sj9);
IkReal x12404=(cj9*r00*sj4);
IkReal x12405=(cj9*r10);
IkReal x12406=((1.0)*cj4*x12388);
IkReal x12407=(r01*sj4*sj9);
evalcond[0]=(((x12389*x12390))+((r22*x12388))+(((-1.0)*x12391*x12392)));
evalcond[1]=(((x12388*x12390))+(((-1.0)*x12391*x12393))+(((-1.0)*r22*x12392)));
evalcond[2]=(((x12389*x12398))+((x12388*x12395))+(((-1.0)*x12392*x12401))+(((-1.0)*x12399*x12400))+((x12396*x12397))+((r02*x12394)));
evalcond[3]=((((-1.0)*r12*x12400))+((x12388*x12404))+(((-1.0)*x12393*x12407))+((x12389*x12402))+((x12394*x12403))+(((-1.0)*x12405*x12406)));
evalcond[4]=((-1.0)+(((-1.0)*x12393*x12402))+((r12*x12394))+((x12397*x12403))+(((-1.0)*x12392*x12407))+(((-1.0)*x12400*x12405))+((x12389*x12404)));
evalcond[5]=((-1.0)+(((-1.0)*x12392*x12395))+((x12388*x12398))+(((-1.0)*x12393*x12401))+((x12394*x12396))+(((-1.0)*x12399*x12406))+(((-1.0)*r02*x12400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12408=((1.0)*cj9);
CheckValue<IkReal> x12409 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x12408)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x12409.valid){
continue;
}
CheckValue<IkReal> x12410=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r11*x12408))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x12410.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12409.value)+(((1.5707963267949)*(x12410.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12411=IKcos(j8);
IkReal x12412=IKsin(j8);
IkReal x12413=(r21*sj9);
IkReal x12414=(cj9*r20);
IkReal x12415=((1.0)*x12412);
IkReal x12416=((1.0)*x12411);
IkReal x12417=(cj4*x12411);
IkReal x12418=(r12*sj4);
IkReal x12419=(r01*sj9);
IkReal x12420=(cj4*x12412);
IkReal x12421=(r11*sj4*sj9);
IkReal x12422=(cj9*r00);
IkReal x12423=((1.0)*cj4*x12412);
IkReal x12424=(cj9*r10*sj4);
IkReal x12425=(r02*sj4);
IkReal x12426=(r11*sj9);
IkReal x12427=(cj9*r00*sj4);
IkReal x12428=(cj9*r10);
IkReal x12429=((1.0)*cj4*x12411);
IkReal x12430=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x12414*x12415))+((r22*x12411))+((x12412*x12413)));
evalcond[1]=((((-1.0)*r22*x12415))+(((-1.0)*x12414*x12416))+((x12411*x12413)));
evalcond[2]=((((-1.0)*x12422*x12423))+((x12412*x12421))+((x12419*x12420))+((x12411*x12418))+(((-1.0)*x12415*x12424))+((r02*x12417)));
evalcond[3]=((((-1.0)*x12428*x12429))+(((-1.0)*r12*x12423))+((x12411*x12427))+((x12417*x12426))+(((-1.0)*x12416*x12430))+((x12412*x12425)));
evalcond[4]=((-1.0)+(((-1.0)*x12423*x12428))+(((-1.0)*x12415*x12430))+((x12412*x12427))+((r12*x12417))+(((-1.0)*x12416*x12425))+((x12420*x12426)));
evalcond[5]=((-1.0)+((x12417*x12419))+(((-1.0)*x12416*x12424))+((x12411*x12421))+(((-1.0)*x12422*x12429))+(((-1.0)*x12415*x12418))+(((-1.0)*r02*x12423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12431=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x12431.valid){
continue;
}
CheckValue<IkReal> x12432 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x12432.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12431.value)))+(x12432.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12433=IKcos(j8);
IkReal x12434=IKsin(j8);
IkReal x12435=(r21*sj9);
IkReal x12436=(cj9*r20);
IkReal x12437=((1.0)*x12434);
IkReal x12438=((1.0)*x12433);
IkReal x12439=(cj4*x12433);
IkReal x12440=(r12*sj4);
IkReal x12441=(r01*sj9);
IkReal x12442=(cj4*x12434);
IkReal x12443=(r11*sj4*sj9);
IkReal x12444=(cj9*r00);
IkReal x12445=((1.0)*cj4*x12434);
IkReal x12446=(cj9*r10*sj4);
IkReal x12447=(r02*sj4);
IkReal x12448=(r11*sj9);
IkReal x12449=(cj9*r00*sj4);
IkReal x12450=(cj9*r10);
IkReal x12451=((1.0)*cj4*x12433);
IkReal x12452=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x12436*x12437))+((x12434*x12435))+((r22*x12433)));
evalcond[1]=((((-1.0)*r22*x12437))+(((-1.0)*x12436*x12438))+((x12433*x12435)));
evalcond[2]=((((-1.0)*x12444*x12445))+((x12441*x12442))+((r02*x12439))+((x12433*x12440))+((x12434*x12443))+(((-1.0)*x12437*x12446)));
evalcond[3]=((((-1.0)*x12450*x12451))+(((-1.0)*x12438*x12452))+((x12439*x12448))+(((-1.0)*r12*x12445))+((x12433*x12449))+((x12434*x12447)));
evalcond[4]=((-1.0)+((x12442*x12448))+(((-1.0)*x12445*x12450))+((r12*x12439))+(((-1.0)*x12437*x12452))+((x12434*x12449))+(((-1.0)*x12438*x12447)));
evalcond[5]=((-1.0)+((x12433*x12443))+(((-1.0)*r02*x12445))+(((-1.0)*x12444*x12451))+(((-1.0)*x12437*x12440))+((x12439*x12441))+(((-1.0)*x12438*x12446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12453=(cj9*r21);
IkReal x12454=(r20*sj9);
IkReal x12455=((1.0)*cj4);
IkReal x12456=(cj9*r01);
IkReal x12457=(r00*sj9);
IkReal x12458=((1.0)*sj4);
IkReal x12459=(cj9*r11);
IkReal x12460=(r10*sj9);
IkReal x12461=(sj4*x12456);
IkReal x12462=(sj4*x12457);
IkReal x12463=((0.03431)*cj4);
IkReal x12464=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x12454))+(((-1.0)*x12453)));
evalcond[2]=((((-1.0)*x12458*x12459))+(((-1.0)*x12455*x12456))+(((-1.0)*x12455*x12457))+(((-1.0)*x12458*x12460)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x12453))+(((0.03431)*x12454)));
evalcond[4]=((((-1.0)*x12455*x12460))+x12461+x12462+(((-1.0)*x12455*x12459)));
evalcond[5]=((0.00301)+((x12460*x12464))+(((-1.0)*py*x12458))+((x12456*x12463))+((x12457*x12463))+(((-1.0)*px*x12455))+((x12459*x12464)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x12455))+((x12460*x12463))+(((-0.03431)*x12462))+((x12459*x12463))+(((-0.03431)*x12461)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x12465=((1.0)*cj9);
IkReal x12466=((1.0)*sj9);
IkReal x12467=((((-1.0)*r11*sj4*x12465))+(((-1.0)*cj4*r00*x12466))+(((-1.0)*cj4*r01*x12465))+(((-1.0)*r10*sj4*x12466)));
j8eval[0]=x12467;
j8eval[1]=((IKabs(((((-1.0)*r21*x12466))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x12467);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x12468=((1.0)*sj9);
IkReal x12469=((((-1.0)*cj4*r10*x12468))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x12469;
j8eval[1]=IKsign(x12469);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*r21*x12468)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x12470=(cj4*r01);
IkReal x12471=(r21*x12470);
IkReal x12472=(r11*sj4);
IkReal x12473=(r21*x12472);
IkReal x12474=(cj4*r00);
IkReal x12475=cj9*cj9;
IkReal x12476=(r20*x12475);
IkReal x12477=(r10*sj4);
IkReal x12478=((1.0)*cj9*r21*sj9);
IkReal x12479=((1.0)*cj9*r20*sj9);
IkReal x12480=((1.0)*x12475);
IkReal x12481=((((-1.0)*x12477*x12478))+(((-1.0)*x12472*x12479))+(((-1.0)*x12474*x12478))+(((-1.0)*x12473*x12480))+(((-1.0)*x12471*x12480))+(((-1.0)*x12470*x12479))+((r12*r22*sj4))+((cj4*r02*r22))+((x12476*x12477))+((x12474*x12476))+x12471+x12473);
j8eval[0]=x12481;
j8eval[1]=IKsign(x12481);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12482=(cj4*r01);
IkReal x12483=(r21*x12482);
IkReal x12484=(r11*sj4);
IkReal x12485=(r21*x12484);
IkReal x12486=(cj4*r00);
IkReal x12487=cj9*cj9;
IkReal x12488=(r20*x12487);
IkReal x12489=(r10*sj4);
IkReal x12490=((1.0)*cj9*r21*sj9);
IkReal x12491=((1.0)*cj9*r20*sj9);
IkReal x12492=((1.0)*x12487);
CheckValue<IkReal> x12493=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12485*x12492))+(((-1.0)*x12482*x12491))+((x12486*x12488))+(((-1.0)*x12483*x12492))+x12485+x12483+((x12488*x12489))+(((-1.0)*x12484*x12491))+(((-1.0)*x12489*x12490))+((r12*r22*sj4))+(((-1.0)*x12486*x12490))+((cj4*r02*r22)))),-1);
if(!x12493.valid){
continue;
}
CheckValue<IkReal> x12494 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x12494.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12493.value)))+(x12494.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12495=IKcos(j8);
IkReal x12496=IKsin(j8);
IkReal x12497=(r21*sj9);
IkReal x12498=(cj9*r20);
IkReal x12499=((1.0)*x12496);
IkReal x12500=((1.0)*x12495);
IkReal x12501=(cj4*x12495);
IkReal x12502=(r12*sj4);
IkReal x12503=(r01*sj9);
IkReal x12504=(cj4*x12496);
IkReal x12505=(r11*sj4*sj9);
IkReal x12506=(cj9*r00);
IkReal x12507=((1.0)*cj4*x12496);
IkReal x12508=(cj9*r10*sj4);
IkReal x12509=(r02*sj4);
IkReal x12510=(r11*sj9);
IkReal x12511=(cj9*r00*sj4);
IkReal x12512=(cj9*r10);
IkReal x12513=((1.0)*cj4*x12495);
IkReal x12514=(r01*sj4*sj9);
evalcond[0]=(((r22*x12495))+((x12496*x12497))+(((-1.0)*x12498*x12499)));
evalcond[1]=((((-1.0)*r22*x12499))+((x12495*x12497))+(((-1.0)*x12498*x12500)));
evalcond[2]=((((-1.0)*x12506*x12507))+((r02*x12501))+((x12495*x12502))+(((-1.0)*x12499*x12508))+((x12503*x12504))+((x12496*x12505)));
evalcond[3]=((((-1.0)*r12*x12507))+(((-1.0)*x12512*x12513))+((x12496*x12509))+((x12495*x12511))+(((-1.0)*x12500*x12514))+((x12501*x12510)));
evalcond[4]=((1.0)+((x12496*x12511))+(((-1.0)*x12499*x12514))+((r12*x12501))+(((-1.0)*x12507*x12512))+(((-1.0)*x12500*x12509))+((x12504*x12510)));
evalcond[5]=((1.0)+(((-1.0)*x12506*x12513))+(((-1.0)*x12499*x12502))+((x12501*x12503))+((x12495*x12505))+(((-1.0)*x12500*x12508))+(((-1.0)*r02*x12507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12515=((1.0)*sj9);
CheckValue<IkReal> x12516=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x12515))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x12516.valid){
continue;
}
CheckValue<IkReal> x12517 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x12515))+((cj9*r20)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x12517.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12516.value)))+(x12517.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12518=IKcos(j8);
IkReal x12519=IKsin(j8);
IkReal x12520=(r21*sj9);
IkReal x12521=(cj9*r20);
IkReal x12522=((1.0)*x12519);
IkReal x12523=((1.0)*x12518);
IkReal x12524=(cj4*x12518);
IkReal x12525=(r12*sj4);
IkReal x12526=(r01*sj9);
IkReal x12527=(cj4*x12519);
IkReal x12528=(r11*sj4*sj9);
IkReal x12529=(cj9*r00);
IkReal x12530=((1.0)*cj4*x12519);
IkReal x12531=(cj9*r10*sj4);
IkReal x12532=(r02*sj4);
IkReal x12533=(r11*sj9);
IkReal x12534=(cj9*r00*sj4);
IkReal x12535=(cj9*r10);
IkReal x12536=((1.0)*cj4*x12518);
IkReal x12537=(r01*sj4*sj9);
evalcond[0]=(((x12519*x12520))+((r22*x12518))+(((-1.0)*x12521*x12522)));
evalcond[1]=((((-1.0)*r22*x12522))+((x12518*x12520))+(((-1.0)*x12521*x12523)));
evalcond[2]=((((-1.0)*x12522*x12531))+((x12526*x12527))+((r02*x12524))+(((-1.0)*x12529*x12530))+((x12518*x12525))+((x12519*x12528)));
evalcond[3]=((((-1.0)*r12*x12530))+((x12524*x12533))+((x12519*x12532))+(((-1.0)*x12535*x12536))+((x12518*x12534))+(((-1.0)*x12523*x12537)));
evalcond[4]=((1.0)+((r12*x12524))+(((-1.0)*x12523*x12532))+((x12519*x12534))+((x12527*x12533))+(((-1.0)*x12530*x12535))+(((-1.0)*x12522*x12537)));
evalcond[5]=((1.0)+((x12524*x12526))+(((-1.0)*x12522*x12525))+(((-1.0)*x12529*x12536))+(((-1.0)*r02*x12530))+(((-1.0)*x12523*x12531))+((x12518*x12528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12538=((1.0)*sj9);
IkReal x12539=((1.0)*cj9);
CheckValue<IkReal> x12540 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x12538))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x12540.valid){
continue;
}
CheckValue<IkReal> x12541=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x12538))+(((-1.0)*cj4*r01*x12539))+(((-1.0)*r11*sj4*x12539))+(((-1.0)*cj4*r00*x12538)))),-1);
if(!x12541.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12540.value)+(((1.5707963267949)*(x12541.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12542=IKcos(j8);
IkReal x12543=IKsin(j8);
IkReal x12544=(r21*sj9);
IkReal x12545=(cj9*r20);
IkReal x12546=((1.0)*x12543);
IkReal x12547=((1.0)*x12542);
IkReal x12548=(cj4*x12542);
IkReal x12549=(r12*sj4);
IkReal x12550=(r01*sj9);
IkReal x12551=(cj4*x12543);
IkReal x12552=(r11*sj4*sj9);
IkReal x12553=(cj9*r00);
IkReal x12554=((1.0)*cj4*x12543);
IkReal x12555=(cj9*r10*sj4);
IkReal x12556=(r02*sj4);
IkReal x12557=(r11*sj9);
IkReal x12558=(cj9*r00*sj4);
IkReal x12559=(cj9*r10);
IkReal x12560=((1.0)*cj4*x12542);
IkReal x12561=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x12545*x12546))+((r22*x12542))+((x12543*x12544)));
evalcond[1]=((((-1.0)*x12545*x12547))+(((-1.0)*r22*x12546))+((x12542*x12544)));
evalcond[2]=(((x12550*x12551))+((x12542*x12549))+(((-1.0)*x12546*x12555))+((r02*x12548))+(((-1.0)*x12553*x12554))+((x12543*x12552)));
evalcond[3]=((((-1.0)*r12*x12554))+((x12548*x12557))+(((-1.0)*x12547*x12561))+((x12543*x12556))+((x12542*x12558))+(((-1.0)*x12559*x12560)));
evalcond[4]=((1.0)+((x12551*x12557))+(((-1.0)*x12547*x12556))+((r12*x12548))+(((-1.0)*x12554*x12559))+(((-1.0)*x12546*x12561))+((x12543*x12558)));
evalcond[5]=((1.0)+((x12542*x12552))+((x12548*x12550))+(((-1.0)*r02*x12554))+(((-1.0)*x12547*x12555))+(((-1.0)*x12553*x12560))+(((-1.0)*x12546*x12549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12562=(cj9*r21);
IkReal x12563=(r20*sj9);
IkReal x12564=((1.0)*cj4);
IkReal x12565=(cj9*r01);
IkReal x12566=(r00*sj9);
IkReal x12567=((1.0)*sj4);
IkReal x12568=(cj9*r11);
IkReal x12569=(r10*sj9);
IkReal x12570=(sj4*x12565);
IkReal x12571=(sj4*x12566);
IkReal x12572=((0.03431)*cj4);
IkReal x12573=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x12562))+(((-1.0)*x12563)));
evalcond[2]=((((-1.0)*x12564*x12565))+(((-1.0)*x12567*x12569))+(((-1.0)*x12567*x12568))+(((-1.0)*x12564*x12566)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x12563))+(((0.03431)*x12562)));
evalcond[4]=((((-1.0)*x12564*x12569))+x12571+x12570+(((-1.0)*x12564*x12568)));
evalcond[5]=((0.00337)+(((-1.0)*px*x12564))+((x12568*x12573))+(((-1.0)*py*x12567))+((x12566*x12572))+((x12569*x12573))+((x12565*x12572)));
evalcond[6]=((-0.00036)+((px*sj4))+((x12569*x12572))+((x12568*x12572))+(((-0.03431)*x12570))+(((-1.0)*py*x12564))+(((-0.03431)*x12571)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x12574=((1.0)*sj9);
IkReal x12575=((((-1.0)*cj4*r10*x12574))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x12575;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*r21*x12574)))))+(IKabs(r22)));
j8eval[2]=IKsign(x12575);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x12576=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x12576;
j8eval[1]=IKsign(x12576);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x12577=(cj4*r11);
IkReal x12578=((1.0)*r21);
IkReal x12579=(r01*sj4);
IkReal x12580=(cj9*r20*sj9);
IkReal x12581=(cj4*r10);
IkReal x12582=cj9*cj9;
IkReal x12583=(r20*x12582);
IkReal x12584=(((r21*x12577))+(((-1.0)*r21*x12577*x12582))+((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+((x12581*x12583))+(((-1.0)*r02*r22*sj4))+(((-1.0)*cj9*r21*sj9*x12581))+(((-1.0)*cj4*r11*x12580))+(((-1.0)*x12578*x12579))+(((-1.0)*r00*sj4*x12583))+((r21*x12579*x12582))+((x12579*x12580)));
j8eval[0]=x12584;
j8eval[1]=IKsign(x12584);
j8eval[2]=((IKabs(((((-1.0)*sj9*x12578))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12585=((1.0)*r21);
IkReal x12586=(cj4*r11);
IkReal x12587=(r01*sj4);
IkReal x12588=(cj9*r20*sj9);
IkReal x12589=(cj4*r10);
IkReal x12590=cj9*cj9;
IkReal x12591=(r20*x12590);
CheckValue<IkReal> x12592 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x12585))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x12592.valid){
continue;
}
CheckValue<IkReal> x12593=IKPowWithIntegerCheck(IKsign((((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*r02*r22*sj4))+((r21*x12587*x12590))+((x12587*x12588))+(((-1.0)*cj9*r21*sj9*x12589))+(((-1.0)*x12585*x12587))+(((-1.0)*cj4*r11*x12588))+((r21*x12586))+(((-1.0)*r00*sj4*x12591))+((x12589*x12591))+(((-1.0)*r21*x12586*x12590)))),-1);
if(!x12593.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12592.value)+(((1.5707963267949)*(x12593.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12594=IKcos(j8);
IkReal x12595=IKsin(j8);
IkReal x12596=(r21*sj9);
IkReal x12597=(cj9*r20);
IkReal x12598=((1.0)*x12595);
IkReal x12599=((1.0)*x12594);
IkReal x12600=(cj4*x12594);
IkReal x12601=(r12*sj4);
IkReal x12602=(r01*sj9);
IkReal x12603=(cj4*x12595);
IkReal x12604=(r11*sj4*sj9);
IkReal x12605=(cj9*r00);
IkReal x12606=((1.0)*cj4*x12595);
IkReal x12607=(cj9*r10*sj4);
IkReal x12608=(r02*sj4);
IkReal x12609=(r11*sj9);
IkReal x12610=(cj9*r00*sj4);
IkReal x12611=(cj9*r10);
IkReal x12612=(r01*sj4*sj9);
IkReal x12613=((1.0)*cj4*x12594);
evalcond[0]=((((-1.0)*x12597*x12598))+((x12595*x12596))+((r22*x12594)));
evalcond[1]=(((x12594*x12596))+(((-1.0)*r22*x12598))+(((-1.0)*x12597*x12599)));
evalcond[2]=((-1.0)+((x12602*x12603))+(((-1.0)*x12605*x12606))+(((-1.0)*x12598*x12607))+((r02*x12600))+((x12595*x12604))+((x12594*x12601)));
evalcond[3]=((((-1.0)*x12606*x12611))+((x12603*x12609))+(((-1.0)*x12599*x12608))+(((-1.0)*x12598*x12612))+((x12595*x12610))+((r12*x12600)));
evalcond[4]=((((-1.0)*x12605*x12613))+(((-1.0)*x12598*x12601))+(((-1.0)*r02*x12606))+(((-1.0)*x12599*x12607))+((x12600*x12602))+((x12594*x12604)));
evalcond[5]=((1.0)+((x12595*x12608))+((x12600*x12609))+((x12594*x12610))+(((-1.0)*x12599*x12612))+(((-1.0)*r12*x12606))+(((-1.0)*x12611*x12613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12614 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x12614.valid){
continue;
}
CheckValue<IkReal> x12615=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x12615.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12614.value)+(((1.5707963267949)*(x12615.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12616=IKcos(j8);
IkReal x12617=IKsin(j8);
IkReal x12618=(r21*sj9);
IkReal x12619=(cj9*r20);
IkReal x12620=((1.0)*x12617);
IkReal x12621=((1.0)*x12616);
IkReal x12622=(cj4*x12616);
IkReal x12623=(r12*sj4);
IkReal x12624=(r01*sj9);
IkReal x12625=(cj4*x12617);
IkReal x12626=(r11*sj4*sj9);
IkReal x12627=(cj9*r00);
IkReal x12628=((1.0)*cj4*x12617);
IkReal x12629=(cj9*r10*sj4);
IkReal x12630=(r02*sj4);
IkReal x12631=(r11*sj9);
IkReal x12632=(cj9*r00*sj4);
IkReal x12633=(cj9*r10);
IkReal x12634=(r01*sj4*sj9);
IkReal x12635=((1.0)*cj4*x12616);
evalcond[0]=(((r22*x12616))+(((-1.0)*x12619*x12620))+((x12617*x12618)));
evalcond[1]=(((x12616*x12618))+(((-1.0)*x12619*x12621))+(((-1.0)*r22*x12620)));
evalcond[2]=((-1.0)+(((-1.0)*x12620*x12629))+((x12616*x12623))+(((-1.0)*x12627*x12628))+((r02*x12622))+((x12624*x12625))+((x12617*x12626)));
evalcond[3]=((((-1.0)*x12628*x12633))+((r12*x12622))+((x12617*x12632))+((x12625*x12631))+(((-1.0)*x12621*x12630))+(((-1.0)*x12620*x12634)));
evalcond[4]=((((-1.0)*r02*x12628))+((x12622*x12624))+(((-1.0)*x12627*x12635))+((x12616*x12626))+(((-1.0)*x12620*x12623))+(((-1.0)*x12621*x12629)));
evalcond[5]=((1.0)+((x12617*x12630))+((x12616*x12632))+(((-1.0)*x12621*x12634))+((x12622*x12631))+(((-1.0)*x12633*x12635))+(((-1.0)*r12*x12628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12636=((1.0)*sj9);
CheckValue<IkReal> x12637=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x12636))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x12637.valid){
continue;
}
CheckValue<IkReal> x12638 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x12636))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x12638.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12637.value)))+(x12638.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12639=IKcos(j8);
IkReal x12640=IKsin(j8);
IkReal x12641=(r21*sj9);
IkReal x12642=(cj9*r20);
IkReal x12643=((1.0)*x12640);
IkReal x12644=((1.0)*x12639);
IkReal x12645=(cj4*x12639);
IkReal x12646=(r12*sj4);
IkReal x12647=(r01*sj9);
IkReal x12648=(cj4*x12640);
IkReal x12649=(r11*sj4*sj9);
IkReal x12650=(cj9*r00);
IkReal x12651=((1.0)*cj4*x12640);
IkReal x12652=(cj9*r10*sj4);
IkReal x12653=(r02*sj4);
IkReal x12654=(r11*sj9);
IkReal x12655=(cj9*r00*sj4);
IkReal x12656=(cj9*r10);
IkReal x12657=(r01*sj4*sj9);
IkReal x12658=((1.0)*cj4*x12639);
evalcond[0]=(((r22*x12639))+(((-1.0)*x12642*x12643))+((x12640*x12641)));
evalcond[1]=((((-1.0)*x12642*x12644))+((x12639*x12641))+(((-1.0)*r22*x12643)));
evalcond[2]=((-1.0)+(((-1.0)*x12643*x12652))+((x12640*x12649))+((x12647*x12648))+((x12639*x12646))+((r02*x12645))+(((-1.0)*x12650*x12651)));
evalcond[3]=((((-1.0)*x12644*x12653))+(((-1.0)*x12651*x12656))+(((-1.0)*x12643*x12657))+((x12640*x12655))+((r12*x12645))+((x12648*x12654)));
evalcond[4]=(((x12645*x12647))+((x12639*x12649))+(((-1.0)*x12644*x12652))+(((-1.0)*r02*x12651))+(((-1.0)*x12650*x12658))+(((-1.0)*x12643*x12646)));
evalcond[5]=((1.0)+(((-1.0)*x12644*x12657))+((x12639*x12655))+(((-1.0)*r12*x12651))+((x12645*x12654))+((x12640*x12653))+(((-1.0)*x12656*x12658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12659=(cj9*r21);
IkReal x12660=(r20*sj9);
IkReal x12661=((1.0)*cj4);
IkReal x12662=(cj9*r01);
IkReal x12663=(r00*sj9);
IkReal x12664=((1.0)*sj4);
IkReal x12665=(cj9*r11);
IkReal x12666=(r10*sj9);
IkReal x12667=(sj4*x12662);
IkReal x12668=(sj4*x12663);
IkReal x12669=((0.03431)*cj4);
IkReal x12670=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x12660))+(((-1.0)*x12659)));
evalcond[2]=((((-1.0)*x12661*x12663))+(((-1.0)*x12661*x12662))+(((-1.0)*x12664*x12666))+(((-1.0)*x12664*x12665)));
evalcond[3]=((-0.16132)+(((0.03431)*x12660))+(((-1.0)*(1.0)*pz))+(((0.03431)*x12659)));
evalcond[4]=(x12667+x12668+(((-1.0)*x12661*x12666))+(((-1.0)*x12661*x12665)));
evalcond[5]=((0.00337)+((x12663*x12669))+((x12666*x12670))+(((-1.0)*px*x12661))+(((-1.0)*py*x12664))+((x12665*x12670))+((x12662*x12669)));
evalcond[6]=((0.00036)+((px*sj4))+((x12666*x12669))+((x12665*x12669))+(((-0.03431)*x12668))+(((-0.03431)*x12667))+(((-1.0)*py*x12661)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x12671=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x12671;
j8eval[1]=IKsign(x12671);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x12672=((1.0)*sj9);
IkReal x12673=((((-1.0)*r00*sj4*x12672))+((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)));
j8eval[0]=x12673;
j8eval[1]=((IKabs(((((-1.0)*r21*x12672))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x12673);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x12674=(r01*sj4);
IkReal x12675=((1.0)*r21);
IkReal x12676=(cj4*r11);
IkReal x12677=(cj9*r20*sj9);
IkReal x12678=cj9*cj9;
IkReal x12679=(r00*sj4);
IkReal x12680=(r20*x12678);
IkReal x12681=((((-1.0)*r01*sj4*x12677))+(((-1.0)*x12675*x12676))+((r21*x12674))+(((-1.0)*cj9*r21*sj9*x12679))+((r02*r22*sj4))+((x12676*x12677))+(((-1.0)*cj4*r10*x12680))+((r21*x12676*x12678))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*r21*x12674*x12678))+((x12679*x12680)));
j8eval[0]=x12681;
j8eval[1]=IKsign(x12681);
j8eval[2]=((IKabs(((((-1.0)*sj9*x12675))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12682=((1.0)*r21);
IkReal x12683=(r01*sj4);
IkReal x12684=(cj4*r11);
IkReal x12685=(cj9*r20*sj9);
IkReal x12686=cj9*cj9;
IkReal x12687=(r00*sj4);
IkReal x12688=(r20*x12686);
CheckValue<IkReal> x12689=IKPowWithIntegerCheck(IKsign((((r21*x12684*x12686))+((x12684*x12685))+(((-1.0)*cj4*r10*x12688))+(((-1.0)*cj9*r21*sj9*x12687))+(((-1.0)*r21*x12683*x12686))+((r21*x12683))+(((-1.0)*x12682*x12684))+((x12687*x12688))+((r02*r22*sj4))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*r01*sj4*x12685)))),-1);
if(!x12689.valid){
continue;
}
CheckValue<IkReal> x12690 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x12682))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x12690.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12689.value)))+(x12690.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12691=IKcos(j8);
IkReal x12692=IKsin(j8);
IkReal x12693=(r21*sj9);
IkReal x12694=(cj9*r20);
IkReal x12695=((1.0)*x12692);
IkReal x12696=((1.0)*x12691);
IkReal x12697=(cj4*x12691);
IkReal x12698=(r12*sj4);
IkReal x12699=(r01*sj9);
IkReal x12700=(cj4*x12692);
IkReal x12701=(r11*sj4*sj9);
IkReal x12702=(cj9*r00);
IkReal x12703=((1.0)*cj4*x12692);
IkReal x12704=(cj9*r10*sj4);
IkReal x12705=(r02*sj4);
IkReal x12706=(r11*sj9);
IkReal x12707=(cj9*r00*sj4);
IkReal x12708=(cj9*r10);
IkReal x12709=(r01*sj4*sj9);
IkReal x12710=((1.0)*cj4*x12691);
evalcond[0]=(((x12692*x12693))+((r22*x12691))+(((-1.0)*x12694*x12695)));
evalcond[1]=(((x12691*x12693))+(((-1.0)*r22*x12695))+(((-1.0)*x12694*x12696)));
evalcond[2]=((1.0)+((r02*x12697))+((x12691*x12698))+((x12699*x12700))+(((-1.0)*x12695*x12704))+(((-1.0)*x12702*x12703))+((x12692*x12701)));
evalcond[3]=(((x12692*x12707))+((x12700*x12706))+((r12*x12697))+(((-1.0)*x12695*x12709))+(((-1.0)*x12703*x12708))+(((-1.0)*x12696*x12705)));
evalcond[4]=((((-1.0)*x12696*x12704))+(((-1.0)*x12695*x12698))+((x12697*x12699))+(((-1.0)*r02*x12703))+(((-1.0)*x12702*x12710))+((x12691*x12701)));
evalcond[5]=((-1.0)+((x12691*x12707))+(((-1.0)*x12696*x12709))+((x12692*x12705))+(((-1.0)*x12708*x12710))+((x12697*x12706))+(((-1.0)*r12*x12703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12711=((1.0)*sj9);
CheckValue<IkReal> x12712 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x12711))),IKFAST_ATAN2_MAGTHRESH);
if(!x12712.valid){
continue;
}
CheckValue<IkReal> x12713=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+(((-1.0)*r00*sj4*x12711))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x12713.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12712.value)+(((1.5707963267949)*(x12713.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12714=IKcos(j8);
IkReal x12715=IKsin(j8);
IkReal x12716=(r21*sj9);
IkReal x12717=(cj9*r20);
IkReal x12718=((1.0)*x12715);
IkReal x12719=((1.0)*x12714);
IkReal x12720=(cj4*x12714);
IkReal x12721=(r12*sj4);
IkReal x12722=(r01*sj9);
IkReal x12723=(cj4*x12715);
IkReal x12724=(r11*sj4*sj9);
IkReal x12725=(cj9*r00);
IkReal x12726=((1.0)*cj4*x12715);
IkReal x12727=(cj9*r10*sj4);
IkReal x12728=(r02*sj4);
IkReal x12729=(r11*sj9);
IkReal x12730=(cj9*r00*sj4);
IkReal x12731=(cj9*r10);
IkReal x12732=(r01*sj4*sj9);
IkReal x12733=((1.0)*cj4*x12714);
evalcond[0]=(((x12715*x12716))+((r22*x12714))+(((-1.0)*x12717*x12718)));
evalcond[1]=((((-1.0)*r22*x12718))+(((-1.0)*x12717*x12719))+((x12714*x12716)));
evalcond[2]=((1.0)+((x12714*x12721))+((x12715*x12724))+(((-1.0)*x12725*x12726))+(((-1.0)*x12718*x12727))+((r02*x12720))+((x12722*x12723)));
evalcond[3]=((((-1.0)*x12718*x12732))+(((-1.0)*x12719*x12728))+(((-1.0)*x12726*x12731))+((r12*x12720))+((x12715*x12730))+((x12723*x12729)));
evalcond[4]=((((-1.0)*x12725*x12733))+(((-1.0)*r02*x12726))+((x12720*x12722))+(((-1.0)*x12719*x12727))+(((-1.0)*x12718*x12721))+((x12714*x12724)));
evalcond[5]=((-1.0)+((x12715*x12728))+(((-1.0)*x12731*x12733))+(((-1.0)*x12719*x12732))+((x12720*x12729))+((x12714*x12730))+(((-1.0)*r12*x12726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12734 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x12734.valid){
continue;
}
CheckValue<IkReal> x12735=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x12735.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12734.value)+(((1.5707963267949)*(x12735.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12736=IKcos(j8);
IkReal x12737=IKsin(j8);
IkReal x12738=(r21*sj9);
IkReal x12739=(cj9*r20);
IkReal x12740=((1.0)*x12737);
IkReal x12741=((1.0)*x12736);
IkReal x12742=(cj4*x12736);
IkReal x12743=(r12*sj4);
IkReal x12744=(r01*sj9);
IkReal x12745=(cj4*x12737);
IkReal x12746=(r11*sj4*sj9);
IkReal x12747=(cj9*r00);
IkReal x12748=((1.0)*cj4*x12737);
IkReal x12749=(cj9*r10*sj4);
IkReal x12750=(r02*sj4);
IkReal x12751=(r11*sj9);
IkReal x12752=(cj9*r00*sj4);
IkReal x12753=(cj9*r10);
IkReal x12754=(r01*sj4*sj9);
IkReal x12755=((1.0)*cj4*x12736);
evalcond[0]=(((r22*x12736))+(((-1.0)*x12739*x12740))+((x12737*x12738)));
evalcond[1]=(((x12736*x12738))+(((-1.0)*x12739*x12741))+(((-1.0)*r22*x12740)));
evalcond[2]=((1.0)+((x12744*x12745))+(((-1.0)*x12747*x12748))+(((-1.0)*x12740*x12749))+((x12737*x12746))+((x12736*x12743))+((r02*x12742)));
evalcond[3]=(((r12*x12742))+((x12745*x12751))+(((-1.0)*x12741*x12750))+(((-1.0)*x12740*x12754))+(((-1.0)*x12748*x12753))+((x12737*x12752)));
evalcond[4]=(((x12742*x12744))+(((-1.0)*r02*x12748))+(((-1.0)*x12740*x12743))+((x12736*x12746))+(((-1.0)*x12747*x12755))+(((-1.0)*x12741*x12749)));
evalcond[5]=((-1.0)+(((-1.0)*x12741*x12754))+((x12736*x12752))+(((-1.0)*x12753*x12755))+((x12737*x12750))+(((-1.0)*r12*x12748))+((x12742*x12751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12756=((1.0)*cj4);
CheckValue<IkReal> x12757=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*r10*sj9*x12756))+(((-1.0)*cj9*r11*x12756))+((r00*sj4*sj9)))),-1);
if(!x12757.valid){
continue;
}
CheckValue<IkReal> x12758 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x12758.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12757.value)))+(x12758.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12759=IKcos(j8);
IkReal x12760=IKsin(j8);
IkReal x12761=(r21*sj9);
IkReal x12762=(cj9*r20);
IkReal x12763=((1.0)*x12760);
IkReal x12764=((1.0)*x12759);
IkReal x12765=(r02*sj4);
IkReal x12766=((1.0)*cj4*x12760);
IkReal x12767=(r11*sj9);
IkReal x12768=(cj4*x12759);
IkReal x12769=(cj9*r00*sj4);
IkReal x12770=(cj9*r10);
IkReal x12771=((1.0)*cj4*x12759);
IkReal x12772=(r01*sj4*sj9);
IkReal x12773=(r12*sj4);
IkReal x12774=(r01*sj9);
IkReal x12775=(cj4*x12760);
IkReal x12776=(r11*sj4*sj9);
IkReal x12777=(cj9*r00);
IkReal x12778=(cj9*r10*sj4);
IkReal x12779=((-1.0)*(((1.0)*cj6)));
evalcond[0]=(((x12760*x12761))+((r22*x12759))+(((-1.0)*x12762*x12763)));
evalcond[1]=((((-1.0)*r22*x12763))+((x12759*x12761))+(((-1.0)*x12762*x12764)));
evalcond[2]=(((x12759*x12769))+((x12760*x12765))+sj6+((x12767*x12768))+(((-1.0)*r12*x12766))+(((-1.0)*x12770*x12771))+(((-1.0)*x12764*x12772)));
evalcond[3]=(((x12759*x12773))+(((-1.0)*x12763*x12778))+((x12760*x12776))+(((-1.0)*x12766*x12777))+((r02*x12768))+((x12774*x12775))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=((((-1.0)*x12766*x12770))+((x12760*x12769))+((r12*x12768))+(((-1.0)*x12764*x12765))+x12779+(((-1.0)*x12763*x12772))+((x12767*x12775)));
evalcond[5]=((((-1.0)*x12763*x12773))+((x12759*x12776))+((x12768*x12774))+(((-1.0)*x12771*x12777))+x12779+(((-1.0)*r02*x12766))+(((-1.0)*x12764*x12778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12780=((1.0)*sj6);
CheckValue<IkReal> x12781=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x12781.valid){
continue;
}
CheckValue<IkReal> x12782 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj9*x12780))+((cj9*r20*sj6)))),((-1.0)*r22*x12780),IKFAST_ATAN2_MAGTHRESH);
if(!x12782.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12781.value)))+(x12782.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12783=IKcos(j8);
IkReal x12784=IKsin(j8);
IkReal x12785=(r21*sj9);
IkReal x12786=(cj9*r20);
IkReal x12787=((1.0)*x12784);
IkReal x12788=((1.0)*x12783);
IkReal x12789=(r02*sj4);
IkReal x12790=((1.0)*cj4*x12784);
IkReal x12791=(r11*sj9);
IkReal x12792=(cj4*x12783);
IkReal x12793=(cj9*r00*sj4);
IkReal x12794=(cj9*r10);
IkReal x12795=((1.0)*cj4*x12783);
IkReal x12796=(r01*sj4*sj9);
IkReal x12797=(r12*sj4);
IkReal x12798=(r01*sj9);
IkReal x12799=(cj4*x12784);
IkReal x12800=(r11*sj4*sj9);
IkReal x12801=(cj9*r00);
IkReal x12802=(cj9*r10*sj4);
IkReal x12803=((-1.0)*(((1.0)*cj6)));
evalcond[0]=(((r22*x12783))+(((-1.0)*x12786*x12787))+((x12784*x12785)));
evalcond[1]=(((x12783*x12785))+(((-1.0)*r22*x12787))+(((-1.0)*x12786*x12788)));
evalcond[2]=(((x12784*x12789))+((x12791*x12792))+((x12783*x12793))+(((-1.0)*r12*x12790))+(((-1.0)*x12794*x12795))+sj6+(((-1.0)*x12788*x12796)));
evalcond[3]=(((x12798*x12799))+(((-1.0)*x12790*x12801))+((x12783*x12797))+((x12784*x12800))+(((-1.0)*x12787*x12802))+(((-1.0)*(1.0)*sj6))+((r02*x12792)));
evalcond[4]=(((r12*x12792))+((x12784*x12793))+(((-1.0)*x12787*x12796))+(((-1.0)*x12788*x12789))+((x12791*x12799))+(((-1.0)*x12790*x12794))+x12803);
evalcond[5]=(((x12783*x12800))+(((-1.0)*x12787*x12797))+(((-1.0)*x12795*x12801))+(((-1.0)*x12788*x12802))+x12803+((x12792*x12798))+(((-1.0)*r02*x12790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12804 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x12804.valid){
continue;
}
CheckValue<IkReal> x12805=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x12805.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12804.value)+(((1.5707963267949)*(x12805.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12806=IKcos(j8);
IkReal x12807=IKsin(j8);
IkReal x12808=(r21*sj9);
IkReal x12809=(cj9*r20);
IkReal x12810=((1.0)*x12807);
IkReal x12811=((1.0)*x12806);
IkReal x12812=(r02*sj4);
IkReal x12813=((1.0)*cj4*x12807);
IkReal x12814=(r11*sj9);
IkReal x12815=(cj4*x12806);
IkReal x12816=(cj9*r00*sj4);
IkReal x12817=(cj9*r10);
IkReal x12818=((1.0)*cj4*x12806);
IkReal x12819=(r01*sj4*sj9);
IkReal x12820=(r12*sj4);
IkReal x12821=(r01*sj9);
IkReal x12822=(cj4*x12807);
IkReal x12823=(r11*sj4*sj9);
IkReal x12824=(cj9*r00);
IkReal x12825=(cj9*r10*sj4);
IkReal x12826=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x12809*x12810))+((x12807*x12808))+((r22*x12806)));
evalcond[1]=(((x12806*x12808))+(((-1.0)*x12809*x12811))+(((-1.0)*r22*x12810)));
evalcond[2]=(((x12814*x12815))+((x12807*x12812))+sj6+(((-1.0)*x12817*x12818))+(((-1.0)*x12811*x12819))+(((-1.0)*r12*x12813))+((x12806*x12816)));
evalcond[3]=(((r02*x12815))+((x12806*x12820))+((x12807*x12823))+(((-1.0)*x12810*x12825))+((x12821*x12822))+(((-1.0)*x12813*x12824))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=((((-1.0)*x12811*x12812))+((x12814*x12822))+(((-1.0)*x12813*x12817))+((x12807*x12816))+((r12*x12815))+x12826+(((-1.0)*x12810*x12819)));
evalcond[5]=((((-1.0)*x12810*x12820))+((x12815*x12821))+((x12806*x12823))+x12826+(((-1.0)*x12818*x12824))+(((-1.0)*r02*x12813))+(((-1.0)*x12811*x12825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12827=r21*r21;
IkReal x12828=(cj9*r20);
IkReal x12829=cj9*cj9;
IkReal x12830=(sj5*sj7);
IkReal x12831=(cj5*cj6);
IkReal x12832=(r21*sj9);
IkReal x12833=((1.0)*cj9*r20);
IkReal x12834=(cj5*cj7*sj6);
CheckValue<IkReal> x12835 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12834))+(((-1.0)*x12831*x12833))+((r22*x12830))+((x12831*x12832)))),((((-1.0)*x12833*x12834))+(((-1.0)*sj5*sj7*x12832))+((r22*x12831))+((x12828*x12830))+((x12832*x12834))),IKFAST_ATAN2_MAGTHRESH);
if(!x12835.valid){
continue;
}
CheckValue<IkReal> x12836=IKPowWithIntegerCheck(IKsign(((((-2.0)*r21*sj9*x12828))+((x12829*(r20*r20)))+(((-1.0)*x12827*x12829))+x12827+(r22*r22))),-1);
if(!x12836.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12835.value)+(((1.5707963267949)*(x12836.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12837=IKcos(j8);
IkReal x12838=IKsin(j8);
IkReal x12839=(r21*sj9);
IkReal x12840=(cj9*r20);
IkReal x12841=((1.0)*x12838);
IkReal x12842=((1.0)*sj6);
IkReal x12843=((1.0)*x12837);
IkReal x12844=(cj4*x12837);
IkReal x12845=(r12*sj4);
IkReal x12846=(r01*sj9);
IkReal x12847=(cj4*x12838);
IkReal x12848=(r11*sj4*sj9);
IkReal x12849=(cj9*r00);
IkReal x12850=((1.0)*cj4*x12838);
IkReal x12851=(cj9*r10*sj4);
IkReal x12852=(r02*sj4);
IkReal x12853=(r11*sj9);
IkReal x12854=(cj9*r00*sj4);
IkReal x12855=(cj9*r10);
IkReal x12856=(r01*sj4*sj9);
IkReal x12857=((1.0)*cj4*x12837);
evalcond[0]=((((-1.0)*x12840*x12841))+(((-1.0)*(1.0)*cj5*cj6))+((x12838*x12839))+((r22*x12837)));
evalcond[1]=(((x12837*x12839))+(((-1.0)*x12840*x12843))+((sj5*sj7))+(((-1.0)*cj5*cj7*x12842))+(((-1.0)*r22*x12841)));
evalcond[2]=(((x12846*x12847))+((x12837*x12845))+(((-1.0)*x12849*x12850))+((r02*x12844))+(((-1.0)*x12841*x12851))+(((-1.0)*x12842))+((x12838*x12848)));
evalcond[3]=(((x12838*x12854))+((x12847*x12853))+(((-1.0)*x12850*x12855))+((cj6*sj5))+((r12*x12844))+(((-1.0)*x12841*x12856))+(((-1.0)*x12843*x12852)));
evalcond[4]=((((-1.0)*r02*x12850))+(((-1.0)*x12849*x12857))+((cj6*cj7))+((x12837*x12848))+(((-1.0)*x12843*x12851))+(((-1.0)*x12841*x12845))+((x12844*x12846)));
evalcond[5]=(((cj5*sj7))+((x12844*x12853))+(((-1.0)*x12843*x12856))+(((-1.0)*x12855*x12857))+((cj7*sj5*sj6))+((x12838*x12852))+((x12837*x12854))+(((-1.0)*r12*x12850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12858=(cj6*sj5);
IkReal x12859=(cj4*cj5*cj6);
IkReal x12860=(cj5*cj6);
CheckValue<IkReal> x12861=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r00*sj9))+(((-1.0)*r10*sj4*sj9))+(((-1.0)*cj9*r11*sj4))+(((-1.0)*cj4*cj9*r01)))),-1);
if(!x12861.valid){
continue;
}
CheckValue<IkReal> x12862 = IKatan2WithCheck(IkReal((((r12*x12859))+(((-1.0)*r02*sj4*x12860))+((r22*x12858)))),((((-1.0)*r21*sj9*x12858))+(((-1.0)*cj4*r11*sj9*x12860))+((r01*sj4*sj9*x12860))+((cj9*r20*x12858))+(((-1.0)*cj9*r00*sj4*x12860))+((cj9*r10*x12859))),IKFAST_ATAN2_MAGTHRESH);
if(!x12862.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12861.value)))+(x12862.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12863=IKcos(j8);
IkReal x12864=IKsin(j8);
IkReal x12865=(r21*sj9);
IkReal x12866=(cj9*r20);
IkReal x12867=((1.0)*x12864);
IkReal x12868=((1.0)*sj6);
IkReal x12869=((1.0)*x12863);
IkReal x12870=(cj4*x12863);
IkReal x12871=(r12*sj4);
IkReal x12872=(r01*sj9);
IkReal x12873=(cj4*x12864);
IkReal x12874=(r11*sj4*sj9);
IkReal x12875=(cj9*r00);
IkReal x12876=((1.0)*cj4*x12864);
IkReal x12877=(cj9*r10*sj4);
IkReal x12878=(r02*sj4);
IkReal x12879=(r11*sj9);
IkReal x12880=(cj9*r00*sj4);
IkReal x12881=(cj9*r10);
IkReal x12882=(r01*sj4*sj9);
IkReal x12883=((1.0)*cj4*x12863);
evalcond[0]=(((x12864*x12865))+(((-1.0)*(1.0)*cj5*cj6))+(((-1.0)*x12866*x12867))+((r22*x12863)));
evalcond[1]=((((-1.0)*r22*x12867))+((sj5*sj7))+(((-1.0)*cj5*cj7*x12868))+((x12863*x12865))+(((-1.0)*x12866*x12869)));
evalcond[2]=((((-1.0)*x12868))+(((-1.0)*x12875*x12876))+((r02*x12870))+((x12863*x12871))+((x12872*x12873))+((x12864*x12874))+(((-1.0)*x12867*x12877)));
evalcond[3]=((((-1.0)*x12869*x12878))+((x12873*x12879))+((r12*x12870))+((cj6*sj5))+(((-1.0)*x12876*x12881))+(((-1.0)*x12867*x12882))+((x12864*x12880)));
evalcond[4]=((((-1.0)*r02*x12876))+(((-1.0)*x12869*x12877))+((x12870*x12872))+((cj6*cj7))+(((-1.0)*x12867*x12871))+(((-1.0)*x12875*x12883))+((x12863*x12874)));
evalcond[5]=(((cj5*sj7))+((x12864*x12878))+((x12870*x12879))+(((-1.0)*r12*x12876))+(((-1.0)*x12881*x12883))+((cj7*sj5*sj6))+((x12863*x12880))+(((-1.0)*x12869*x12882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12884=((1.0)*sj6);
IkReal x12885=(cj5*cj6);
IkReal x12886=(cj5*cj6*sj4);
CheckValue<IkReal> x12887=IKPowWithIntegerCheck(IKsign((((r10*((cj4*sj9))))+(((-1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*sj9))+((r11*((cj4*cj9)))))),-1);
if(!x12887.valid){
continue;
}
CheckValue<IkReal> x12888 = IKatan2WithCheck(IkReal((((r12*x12886))+((cj4*r02*x12885))+(((-1.0)*r22*x12884)))),(((cj4*cj9*r00*x12885))+(((-1.0)*cj9*r20*x12884))+(((-1.0)*r11*sj4*sj9*x12885))+((cj9*r10*x12886))+(((-1.0)*cj4*r01*sj9*x12885))+((r21*sj6*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x12888.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12887.value)))+(x12888.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12889=IKcos(j8);
IkReal x12890=IKsin(j8);
IkReal x12891=(r21*sj9);
IkReal x12892=(cj9*r20);
IkReal x12893=((1.0)*x12890);
IkReal x12894=((1.0)*sj6);
IkReal x12895=((1.0)*x12889);
IkReal x12896=(cj4*x12889);
IkReal x12897=(r12*sj4);
IkReal x12898=(r01*sj9);
IkReal x12899=(cj4*x12890);
IkReal x12900=(r11*sj4*sj9);
IkReal x12901=(cj9*r00);
IkReal x12902=((1.0)*cj4*x12890);
IkReal x12903=(cj9*r10*sj4);
IkReal x12904=(r02*sj4);
IkReal x12905=(r11*sj9);
IkReal x12906=(cj9*r00*sj4);
IkReal x12907=(cj9*r10);
IkReal x12908=(r01*sj4*sj9);
IkReal x12909=((1.0)*cj4*x12889);
evalcond[0]=(((x12890*x12891))+(((-1.0)*x12892*x12893))+(((-1.0)*(1.0)*cj5*cj6))+((r22*x12889)));
evalcond[1]=((((-1.0)*r22*x12893))+((x12889*x12891))+((sj5*sj7))+(((-1.0)*x12892*x12895))+(((-1.0)*cj5*cj7*x12894)));
evalcond[2]=(((x12889*x12897))+(((-1.0)*x12894))+((x12898*x12899))+(((-1.0)*x12901*x12902))+((r02*x12896))+((x12890*x12900))+(((-1.0)*x12893*x12903)));
evalcond[3]=((((-1.0)*x12893*x12908))+((x12899*x12905))+((cj6*sj5))+(((-1.0)*x12902*x12907))+(((-1.0)*x12895*x12904))+((x12890*x12906))+((r12*x12896)));
evalcond[4]=((((-1.0)*x12893*x12897))+((cj6*cj7))+((x12896*x12898))+((x12889*x12900))+(((-1.0)*x12901*x12909))+(((-1.0)*r02*x12902))+(((-1.0)*x12895*x12903)));
evalcond[5]=(((cj5*sj7))+(((-1.0)*x12907*x12909))+((x12896*x12905))+((cj7*sj5*sj6))+((x12889*x12906))+(((-1.0)*r12*x12902))+(((-1.0)*x12895*x12908))+((x12890*x12904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x12912 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),((-1.0)*(((1.0)*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x12912.valid){
continue;
}
IkReal x12910=((-1.0)*(x12912.value));
if((((r20*r20)+(r21*r21))) < -0.00001)
continue;
CheckValue<IkReal> x12913=IKPowWithIntegerCheck(IKabs(IKsqrt(((r20*r20)+(r21*r21)))),-1);
if(!x12913.valid){
continue;
}
if( (((x12913.value)*((((cj5*sj6*sj7))+((cj7*sj5)))))) < -1-IKFAST_SINCOS_THRESH || (((x12913.value)*((((cj5*sj6*sj7))+((cj7*sj5)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x12911=IKasin(((x12913.value)*((((cj5*sj6*sj7))+((cj7*sj5))))));
j9array[0]=(x12910+(((-1.0)*x12911)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+x12911+x12910);
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
IkReal x12914=(cj5*sj6);
evalcond[0]=((((-1.0)*(1.0)*pz))+(((-0.00036)*x12914))+(((0.03431)*r21*(IKcos(j9))))+(((0.32901)*sj5))+(((0.16769)*sj7*x12914))+(((0.16769)*cj7*sj5))+(((0.03431)*r20*(IKsin(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x12915=(((cj9*rxp1_2))+((rxp0_2*sj9)));
j4eval[0]=x12915;
j4eval[1]=IKsign(x12915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x12916=r21*r21;
IkReal x12917=(cj9*r20);
IkReal x12918=cj9*cj9;
IkReal x12919=((((-1.0)*x12916*x12918))+x12916+(r22*r22)+((x12918*(r20*r20)))+(((-2.0)*r21*sj9*x12917)));
IkReal x12920=(sj5*sj7);
IkReal x12921=(cj5*cj6);
IkReal x12922=(r21*sj9);
IkReal x12923=((1.0)*cj9*r20);
IkReal x12924=(cj5*cj7*sj6);
j8eval[0]=x12919;
j8eval[1]=((IKabs((((x12917*x12920))+(((-1.0)*sj5*sj7*x12922))+((r22*x12921))+(((-1.0)*x12923*x12924))+((x12922*x12924)))))+(IKabs((((x12921*x12922))+(((-1.0)*r22*x12924))+((r22*x12920))+(((-1.0)*x12921*x12923))))));
j8eval[2]=IKsign(x12919);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12925=r20*r20;
IkReal x12926=cj9*cj9;
IkReal x12927=((-1.0)+x12925+(((2.0)*cj9*r20*r21*sj9))+(((-1.0)*x12925*x12926))+((x12926*(r21*r21))));
j4eval[0]=x12927;
j4eval[1]=IKsign(x12927);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x12929 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x12929)==0){
continue;
}
IkReal x12928=pow(x12929,-0.5);
CheckValue<IkReal> x12930 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x12930.valid){
continue;
}
IkReal gconst12=((-1.0)*(((1.0)*(x12930.value))));
IkReal gconst13=((-1.0)*rxp1_2*x12928);
IkReal gconst14=(rxp0_2*x12928);
IkReal x12931=(cj7*sj5);
IkReal x12932=(gconst13*r20);
IkReal x12933=(gconst14*r21);
IkReal x12934=(cj5*sj6);
IkReal x12935=(sj7*x12934);
CheckValue<IkReal> x12936 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x12936.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j9+(x12936.value))))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x12933))+(((-1.0)*x12932))+x12935+x12931);
evalcond[2]=((((0.16769)*x12931))+(((-1.0)*(1.0)*pz))+(((-0.00036)*x12934))+(((0.03431)*x12932))+(((0.03431)*x12933))+(((0.32901)*sj5))+(((0.16769)*x12935)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12937=(gconst14*r20);
IkReal x12938=(sj5*sj7);
IkReal x12939=(cj5*cj6);
IkReal x12940=(gconst13*r21);
IkReal x12941=((1.0)*gconst14*r20);
IkReal x12942=(cj5*cj7*sj6);
CheckValue<IkReal> x12943 = IKatan2WithCheck(IkReal(((((-1.0)*x12939*x12941))+((r22*x12938))+(((-1.0)*r22*x12942))+((x12939*x12940)))),(((x12937*x12938))+(((-1.0)*sj5*sj7*x12940))+((r22*x12939))+(((-1.0)*x12941*x12942))+((x12940*x12942))),IKFAST_ATAN2_MAGTHRESH);
if(!x12943.valid){
continue;
}
CheckValue<IkReal> x12944=IKPowWithIntegerCheck(IKsign(((((gconst13*gconst13)*(r21*r21)))+(((gconst14*gconst14)*(r20*r20)))+(((-2.0)*gconst13*r21*x12937))+(r22*r22))),-1);
if(!x12944.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12943.value)+(((1.5707963267949)*(x12944.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x12945=((1.0)*cj5);
IkReal x12946=IKcos(j8);
IkReal x12947=IKsin(j8);
IkReal x12948=(gconst13*r21);
IkReal x12949=(gconst14*r20);
IkReal x12950=((1.0)*x12947);
evalcond[0]=((((-1.0)*x12949*x12950))+((r22*x12946))+(((-1.0)*cj6*x12945))+((x12947*x12948)));
evalcond[1]=((((-1.0)*x12946*x12949))+((x12946*x12948))+((sj5*sj7))+(((-1.0)*r22*x12950))+(((-1.0)*cj7*sj6*x12945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12951=((1.0)*sj8);
IkReal x12952=(gconst13*sj6);
IkReal x12953=((1.0)*r01);
IkReal x12954=(gconst14*sj6);
IkReal x12955=(cj6*sj7);
IkReal x12956=(cj6*gconst13*sj7*sj8);
CheckValue<IkReal> x12957=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x12951*(gconst14*gconst14)))+(((-1.0)*x12951*(gconst13*gconst13)))))))+(((-1.0)*cj8*gconst14*r20))+((cj8*gconst13*r21)))),-1);
if(!x12957.valid){
continue;
}
CheckValue<IkReal> x12958 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x12952))+(((-1.0)*cj8*r02*x12955))+(((-1.0)*x12953*x12954))+((((gconst14*r00))*((cj6*sj7*sj8))))+(((-1.0)*x12953*x12956)))),(((cj8*r12*x12955))+(((-1.0)*cj6*gconst14*r10*sj7*x12951))+((r10*x12952))+((r11*x12956))+((r11*x12954))),IKFAST_ATAN2_MAGTHRESH);
if(!x12958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12957.value)))+(x12958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x12959=(cj6*sj7);
IkReal x12960=(gconst13*r00);
IkReal x12961=IKcos(j4);
IkReal x12962=((1.0)*x12961);
IkReal x12963=(gconst13*r10);
IkReal x12964=IKsin(j4);
IkReal x12965=((1.0)*x12964);
IkReal x12966=(gconst14*r01);
IkReal x12967=(gconst14*r11);
IkReal x12968=(cj5*cj7);
IkReal x12969=(gconst13*r00*x12964);
IkReal x12970=(gconst14*r01*x12964);
IkReal x12971=((1.0)*sj6);
IkReal x12972=(cj8*x12961);
IkReal x12973=(cj8*x12964);
IkReal x12974=(gconst13*r01);
IkReal x12975=(sj8*x12961);
IkReal x12976=(gconst13*r11);
IkReal x12977=(sj8*x12964);
IkReal x12978=(gconst14*r00);
IkReal x12979=((1.0)*sj8*x12961);
IkReal x12980=(gconst14*r10);
IkReal x12981=((1.0)*sj8*x12964);
IkReal x12982=((1.0)*cj8*x12964);
IkReal x12983=(r02*sj8);
IkReal x12984=(r12*sj8);
IkReal x12985=(cj8*gconst13*x12961);
IkReal x12986=((1.0)*cj8*x12961);
IkReal x12987=((0.03431)*x12961);
IkReal x12988=((0.03431)*x12964);
IkReal x12989=(sj5*sj6);
evalcond[0]=((((-1.0)*x12965*x12967))+(((-1.0)*x12959))+(((-1.0)*x12963*x12965))+(((-1.0)*x12962*x12966))+(((-1.0)*x12960*x12962)));
evalcond[1]=(x12969+x12968+x12970+(((-1.0)*x12962*x12963))+(((-1.0)*x12962*x12967))+(((-1.0)*sj5*sj7*x12971)));
evalcond[2]=(((x12976*x12977))+(((-1.0)*x12978*x12979))+(((-1.0)*x12971))+((r02*x12972))+((r12*x12973))+((x12974*x12975))+(((-1.0)*x12980*x12981)));
evalcond[3]=(((cj6*sj5))+((x12977*x12978))+((r12*x12972))+(((-1.0)*x12979*x12980))+(((-1.0)*x12974*x12981))+(((-1.0)*r02*x12982))+((x12975*x12976)));
evalcond[4]=(((r01*x12985))+(((-1.0)*x12980*x12982))+(((-1.0)*x12978*x12986))+(((-1.0)*x12965*x12984))+((x12973*x12976))+((cj6*cj7))+(((-1.0)*x12962*x12983)));
evalcond[5]=((0.00337)+((x12967*x12988))+((x12960*x12987))+((x12963*x12988))+(((0.00036)*cj6))+(((-0.16769)*x12959))+(((-1.0)*py*x12965))+((x12966*x12987))+(((-1.0)*px*x12962)));
evalcond[6]=(((cj5*sj7))+((cj7*x12989))+((x12973*x12978))+(((-1.0)*x12974*x12982))+(((-1.0)*x12962*x12984))+(((-1.0)*x12980*x12986))+((x12964*x12983))+((r11*x12985)));
evalcond[7]=(((x12967*x12987))+((px*x12964))+((x12963*x12987))+(((-0.16769)*sj7*x12989))+(((0.16769)*x12968))+(((0.32901)*cj5))+(((-1.0)*py*x12962))+(((-0.03431)*x12970))+(((-0.03431)*x12969))+(((0.00036)*x12989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12991 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x12991)==0){
continue;
}
IkReal x12990=((1.0)*(pow(x12991,-0.5)));
CheckValue<IkReal> x12992 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x12992.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(1.0)*(x12992.value))));
IkReal gconst16=(rxp1_2*x12990);
IkReal gconst17=((-1.0)*rxp0_2*x12990);
IkReal x12993=(cj7*sj5);
IkReal x12994=(gconst16*r20);
IkReal x12995=(gconst17*r21);
IkReal x12996=(cj5*sj6);
IkReal x12997=(sj7*x12996);
CheckValue<IkReal> x12998 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x12998.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9+(x12998.value))))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x12994))+x12997+x12993+(((-1.0)*x12995)));
evalcond[2]=((((0.16769)*x12997))+(((0.03431)*x12995))+(((-1.0)*(1.0)*pz))+(((0.32901)*sj5))+(((-0.00036)*x12996))+(((0.03431)*x12994))+(((0.16769)*x12993)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12999=(gconst17*r20);
IkReal x13000=(sj5*sj7);
IkReal x13001=(cj5*cj6);
IkReal x13002=(gconst16*r21);
IkReal x13003=((1.0)*gconst17*r20);
IkReal x13004=(cj5*cj7*sj6);
CheckValue<IkReal> x13005=IKPowWithIntegerCheck(IKsign(((((gconst17*gconst17)*(r20*r20)))+(((-2.0)*gconst16*r21*x12999))+(((gconst16*gconst16)*(r21*r21)))+(r22*r22))),-1);
if(!x13005.valid){
continue;
}
CheckValue<IkReal> x13006 = IKatan2WithCheck(IkReal((((x13001*x13002))+(((-1.0)*x13001*x13003))+(((-1.0)*r22*x13004))+((r22*x13000)))),(((x12999*x13000))+(((-1.0)*x13003*x13004))+(((-1.0)*sj5*sj7*x13002))+((r22*x13001))+((x13002*x13004))),IKFAST_ATAN2_MAGTHRESH);
if(!x13006.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13005.value)))+(x13006.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x13007=((1.0)*cj5);
IkReal x13008=IKcos(j8);
IkReal x13009=IKsin(j8);
IkReal x13010=(gconst16*r21);
IkReal x13011=(gconst17*r20);
IkReal x13012=((1.0)*x13009);
evalcond[0]=(((r22*x13008))+(((-1.0)*cj6*x13007))+(((-1.0)*x13011*x13012))+((x13009*x13010)));
evalcond[1]=((((-1.0)*x13008*x13011))+(((-1.0)*r22*x13012))+(((-1.0)*cj7*sj6*x13007))+((sj5*sj7))+((x13008*x13010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13013=((1.0)*sj8);
IkReal x13014=(gconst16*sj6);
IkReal x13015=((1.0)*r01);
IkReal x13016=(gconst17*sj6);
IkReal x13017=(cj6*sj7);
IkReal x13018=(cj6*gconst16*sj7*sj8);
CheckValue<IkReal> x13019 = IKatan2WithCheck(IkReal((((((gconst17*r00))*((cj6*sj7*sj8))))+(((-1.0)*r00*x13014))+(((-1.0)*x13015*x13018))+(((-1.0)*cj8*r02*x13017))+(((-1.0)*x13015*x13016)))),(((cj8*r12*x13017))+((r10*x13014))+(((-1.0)*cj6*gconst17*r10*sj7*x13013))+((r11*x13018))+((r11*x13016))),IKFAST_ATAN2_MAGTHRESH);
if(!x13019.valid){
continue;
}
CheckValue<IkReal> x13020=IKPowWithIntegerCheck(IKsign((((cj8*gconst16*r21))+((r22*(((((-1.0)*x13013*(gconst16*gconst16)))+(((-1.0)*x13013*(gconst17*gconst17)))))))+(((-1.0)*cj8*gconst17*r20)))),-1);
if(!x13020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13019.value)+(((1.5707963267949)*(x13020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x13021=(cj6*sj7);
IkReal x13022=(gconst16*r00);
IkReal x13023=IKcos(j4);
IkReal x13024=((1.0)*x13023);
IkReal x13025=(gconst16*r10);
IkReal x13026=IKsin(j4);
IkReal x13027=((1.0)*x13026);
IkReal x13028=(gconst17*r01);
IkReal x13029=(gconst17*r11);
IkReal x13030=(cj5*cj7);
IkReal x13031=(gconst16*r00*x13026);
IkReal x13032=(gconst17*r01*x13026);
IkReal x13033=((1.0)*sj6);
IkReal x13034=(cj8*x13023);
IkReal x13035=(cj8*x13026);
IkReal x13036=(gconst16*r01);
IkReal x13037=(sj8*x13023);
IkReal x13038=(gconst16*r11);
IkReal x13039=(sj8*x13026);
IkReal x13040=(gconst17*r00);
IkReal x13041=((1.0)*sj8*x13023);
IkReal x13042=(gconst17*r10);
IkReal x13043=((1.0)*sj8*x13026);
IkReal x13044=((1.0)*cj8*x13026);
IkReal x13045=(r02*sj8);
IkReal x13046=(r12*sj8);
IkReal x13047=(cj8*gconst16*x13023);
IkReal x13048=((1.0)*cj8*x13023);
IkReal x13049=((0.03431)*x13023);
IkReal x13050=((0.03431)*x13026);
IkReal x13051=(sj5*sj6);
evalcond[0]=((((-1.0)*x13024*x13028))+(((-1.0)*x13027*x13029))+(((-1.0)*x13021))+(((-1.0)*x13022*x13024))+(((-1.0)*x13025*x13027)));
evalcond[1]=(x13030+x13032+x13031+(((-1.0)*x13024*x13025))+(((-1.0)*x13024*x13029))+(((-1.0)*sj5*sj7*x13033)));
evalcond[2]=((((-1.0)*x13033))+(((-1.0)*x13040*x13041))+((r12*x13035))+((x13038*x13039))+((x13036*x13037))+((r02*x13034))+(((-1.0)*x13042*x13043)));
evalcond[3]=((((-1.0)*x13036*x13043))+(((-1.0)*r02*x13044))+((x13039*x13040))+((r12*x13034))+((cj6*sj5))+(((-1.0)*x13041*x13042))+((x13037*x13038)));
evalcond[4]=(((x13035*x13038))+((cj6*cj7))+(((-1.0)*x13042*x13044))+((r01*x13047))+(((-1.0)*x13040*x13048))+(((-1.0)*x13024*x13045))+(((-1.0)*x13027*x13046)));
evalcond[5]=((0.00337)+((x13028*x13049))+(((0.00036)*cj6))+(((-1.0)*px*x13024))+((x13022*x13049))+(((-1.0)*py*x13027))+((x13025*x13050))+((x13029*x13050))+(((-0.16769)*x13021)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x13036*x13044))+((x13035*x13040))+((cj7*x13051))+((r11*x13047))+(((-1.0)*x13042*x13048))+(((-1.0)*x13024*x13046))+((x13026*x13045)));
evalcond[7]=(((px*x13026))+(((-0.03431)*x13031))+(((0.00036)*x13051))+((x13025*x13049))+(((-0.16769)*sj7*x13051))+(((-1.0)*py*x13024))+((x13029*x13049))+(((-0.03431)*x13032))+(((0.32901)*cj5))+(((0.16769)*x13030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13052=cj9*cj9;
IkReal x13053=(cj5*cj7);
IkReal x13054=(cj9*r01);
IkReal x13055=(r00*sj9);
IkReal x13056=(cj6*sj7);
IkReal x13057=(cj9*r11);
IkReal x13058=(r10*sj9);
IkReal x13059=((1.0)*sj5*sj6*sj7);
IkReal x13060=((1.0)*cj5*cj7);
IkReal x13061=(sj5*sj6*sj7);
CheckValue<IkReal> x13062 = IKatan2WithCheck(IkReal((((x13053*x13055))+((x13056*x13058))+(((-1.0)*x13054*x13059))+(((-1.0)*x13055*x13059))+((x13053*x13054))+((x13056*x13057)))),(((x13054*x13056))+(((-1.0)*x13058*x13060))+((x13055*x13056))+((x13057*x13061))+(((-1.0)*x13057*x13060))+((x13058*x13061))),IKFAST_ATAN2_MAGTHRESH);
if(!x13062.valid){
continue;
}
CheckValue<IkReal> x13063=IKPowWithIntegerCheck(IKsign(((-1.0)+((x13052*(r21*r21)))+(((2.0)*cj9*r20*r21*sj9))+(((r20*r20)*(((1.0)+(((-1.0)*x13052)))))))),-1);
if(!x13063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13062.value)+(((1.5707963267949)*(x13063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x13064=(cj6*sj7);
IkReal x13065=(cj9*r01);
IkReal x13066=IKcos(j4);
IkReal x13067=((1.0)*x13066);
IkReal x13068=(cj9*r11);
IkReal x13069=IKsin(j4);
IkReal x13070=((1.0)*x13069);
IkReal x13071=(r00*sj9);
IkReal x13072=(r10*sj9);
IkReal x13073=(cj5*cj7);
IkReal x13074=(cj9*r01*x13069);
IkReal x13075=(r00*sj9*x13069);
IkReal x13076=(sj5*sj6*sj7);
IkReal x13077=((0.03431)*x13066);
IkReal x13078=((0.03431)*x13069);
evalcond[0]=((((-1.0)*x13064))+(((-1.0)*x13068*x13070))+(((-1.0)*x13065*x13067))+(((-1.0)*x13067*x13071))+(((-1.0)*x13070*x13072)));
evalcond[1]=((((-1.0)*x13076))+x13074+x13075+x13073+(((-1.0)*x13067*x13068))+(((-1.0)*x13067*x13072)));
evalcond[2]=((0.00337)+((x13072*x13078))+(((0.00036)*cj6))+(((-1.0)*py*x13070))+(((-0.16769)*x13064))+(((-1.0)*px*x13067))+((x13071*x13077))+((x13068*x13078))+((x13065*x13077)));
evalcond[3]=((((-0.03431)*x13074))+(((-0.03431)*x13075))+(((-1.0)*py*x13067))+((x13072*x13077))+(((0.00036)*sj5*sj6))+(((0.32901)*cj5))+((px*x13069))+((x13068*x13077))+(((-0.16769)*x13076))+(((0.16769)*x13073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[2];
IkReal x13079=((1.0)*sj4);
IkReal x13080=(((cj4*cj9*r11))+(((-1.0)*r00*sj9*x13079))+((cj4*r10*sj9))+(((-1.0)*cj9*r01*x13079)));
j8eval[0]=x13080;
j8eval[1]=IKsign(x13080);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x13081=((1.0)*cj4);
IkReal x13082=((1.0)*sj4);
IkReal x13083=((((-1.0)*r00*sj9*x13081))+(((-1.0)*cj9*r11*x13082))+(((-1.0)*cj9*r01*x13081))+(((-1.0)*r10*sj9*x13082)));
j8eval[0]=x13083;
j8eval[1]=IKsign(x13083);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x13084=r21*r21;
IkReal x13085=(cj9*r20);
IkReal x13086=cj9*cj9;
IkReal x13087=((((-1.0)*x13084*x13086))+(r22*r22)+(((-2.0)*r21*sj9*x13085))+((x13086*(r20*r20)))+x13084);
IkReal x13088=(sj5*sj7);
IkReal x13089=(cj5*cj6);
IkReal x13090=(r21*sj9);
IkReal x13091=((1.0)*cj9*r20);
IkReal x13092=(cj5*cj7*sj6);
j8eval[0]=x13087;
j8eval[1]=((IKabs((((x13085*x13088))+(((-1.0)*sj5*sj7*x13090))+(((-1.0)*x13091*x13092))+((x13090*x13092))+((r22*x13089)))))+(IKabs(((((-1.0)*x13089*x13091))+((x13089*x13090))+((r22*x13088))+(((-1.0)*r22*x13092))))));
j8eval[2]=IKsign(x13087);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13093=(cj9*r21);
IkReal x13094=(r20*sj9);
IkReal x13095=((1.0)*cj4);
IkReal x13096=(cj9*r01);
IkReal x13097=(r00*sj9);
IkReal x13098=((1.0)*sj4);
IkReal x13099=(cj9*r11);
IkReal x13100=(r10*sj9);
IkReal x13101=(sj4*x13096);
IkReal x13102=(sj4*x13097);
IkReal x13103=((0.03431)*cj4);
IkReal x13104=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*x13094))+(((-1.0)*x13093)));
evalcond[2]=((((-1.0)*x13095*x13097))+(((-1.0)*x13095*x13096))+(((-1.0)*x13098*x13099))+(((-1.0)*x13098*x13100)));
evalcond[3]=((0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x13093))+(((0.03431)*x13094)));
evalcond[4]=(x13101+x13102+(((-1.0)*x13095*x13100))+(((-1.0)*x13095*x13099)));
evalcond[5]=((0.00337)+(((-1.0)*py*x13098))+((x13100*x13104))+(((0.00036)*cj6))+((x13096*x13103))+((x13099*x13104))+(((-1.0)*px*x13095))+((x13097*x13103)));
evalcond[6]=(((px*sj4))+((x13099*x13103))+(((-0.03431)*x13101))+((x13100*x13103))+(((-0.03431)*x13102))+(((-1.0)*py*x13095))+(((0.00036)*sj6)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x13105=((1.0)*cj4);
IkReal x13106=((((-1.0)*r10*sj9*x13105))+(((-1.0)*cj9*r11*x13105))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x13106;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x13106);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x13107=((1.0)*cj4);
IkReal x13108=((1.0)*sj9);
IkReal x13109=((((-1.0)*r10*sj4*x13108))+(((-1.0)*cj9*r01*x13107))+(((-1.0)*r00*sj9*x13107))+(((-1.0)*(1.0)*cj9*r11*sj4)));
j8eval[0]=x13109;
j8eval[1]=IKsign(x13109);
j8eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj6*cj9*r20))+(((-1.0)*cj6*r21*x13108))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x13110=(cj4*r21);
IkReal x13111=(r11*x13110);
IkReal x13112=((1.0)*sj4);
IkReal x13113=(r01*r21);
IkReal x13114=(r21*sj9);
IkReal x13115=(cj9*r20*sj9);
IkReal x13116=cj9*cj9;
IkReal x13117=(r20*x13116);
IkReal x13118=(((cj4*r12*r22))+((sj4*x13113*x13116))+((r01*sj4*x13115))+((cj4*r10*x13117))+(((-1.0)*r02*r22*x13112))+(((-1.0)*x13112*x13113))+(((-1.0)*cj4*r11*x13115))+(((-1.0)*cj9*r10*sj9*x13110))+(((-1.0)*r00*sj4*x13117))+(((-1.0)*x13111*x13116))+((cj9*r00*sj4*x13114))+x13111);
j8eval[0]=x13118;
j8eval[1]=IKsign(x13118);
j8eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*sj6*x13114))+((sj6*((cj9*r20))))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13119=(cj9*r21);
IkReal x13120=(r20*sj9);
IkReal x13121=((1.0)*cj4);
IkReal x13122=(cj9*r01);
IkReal x13123=(r00*sj9);
IkReal x13124=((1.0)*sj4);
IkReal x13125=(cj9*r11);
IkReal x13126=(r10*sj9);
IkReal x13127=(sj4*x13122);
IkReal x13128=(sj4*x13123);
IkReal x13129=((0.03431)*cj4);
IkReal x13130=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x13119))+(((-1.0)*x13120)));
evalcond[2]=((((-1.0)*x13121*x13122))+(((-1.0)*x13121*x13123))+(((-1.0)*x13124*x13126))+(((-1.0)*x13124*x13125)));
evalcond[3]=((0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x13119))+(((0.03431)*x13120)));
evalcond[4]=((((-1.0)*x13121*x13125))+x13128+x13127+(((-1.0)*x13121*x13126)));
evalcond[5]=((0.00373)+(((-1.0)*px*x13121))+((x13126*x13130))+(((-1.0)*py*x13124))+((x13123*x13129))+((x13125*x13130))+((x13122*x13129)));
evalcond[6]=(((px*sj4))+((x13125*x13129))+(((-1.0)*py*x13121))+((x13126*x13129))+(((-0.03431)*x13128))+(((-0.03431)*x13127)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x13131=((1.0)*cj9);
IkReal x13132=((1.0)*sj9);
IkReal x13133=((((-1.0)*cj4*r00*x13132))+(((-1.0)*r10*sj4*x13132))+(((-1.0)*r11*sj4*x13131))+(((-1.0)*cj4*r01*x13131)));
j8eval[0]=x13133;
j8eval[1]=((IKabs(((((-1.0)*r21*x13132))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x13133);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x13134=((1.0)*sj9);
IkReal x13135=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x13134))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x13135;
j8eval[1]=IKsign(x13135);
j8eval[2]=((IKabs(((((-1.0)*r21*x13134))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x13136=(cj4*r01);
IkReal x13137=(r21*x13136);
IkReal x13138=(r11*sj4);
IkReal x13139=(r21*x13138);
IkReal x13140=(cj4*r00);
IkReal x13141=cj9*cj9;
IkReal x13142=(r20*x13141);
IkReal x13143=(r10*sj4);
IkReal x13144=((1.0)*cj9*r21*sj9);
IkReal x13145=((1.0)*cj9*r20*sj9);
IkReal x13146=((1.0)*x13141);
IkReal x13147=((((-1.0)*x13136*x13145))+(((-1.0)*x13143*x13144))+(((-1.0)*x13139*x13146))+(((-1.0)*x13140*x13144))+((x13140*x13142))+((r12*r22*sj4))+x13137+x13139+((cj4*r02*r22))+(((-1.0)*x13138*x13145))+(((-1.0)*x13137*x13146))+((x13142*x13143)));
j8eval[0]=x13147;
j8eval[1]=IKsign(x13147);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13148=(cj4*r01);
IkReal x13149=(r21*x13148);
IkReal x13150=(r11*sj4);
IkReal x13151=(r21*x13150);
IkReal x13152=(cj4*r00);
IkReal x13153=cj9*cj9;
IkReal x13154=(r20*x13153);
IkReal x13155=(r10*sj4);
IkReal x13156=((1.0)*cj9*r21*sj9);
IkReal x13157=((1.0)*cj9*r20*sj9);
IkReal x13158=((1.0)*x13153);
CheckValue<IkReal> x13159=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13155*x13156))+x13151+x13149+((x13154*x13155))+((r12*r22*sj4))+(((-1.0)*x13150*x13157))+((cj4*r02*r22))+(((-1.0)*x13151*x13158))+(((-1.0)*x13148*x13157))+((x13152*x13154))+(((-1.0)*x13152*x13156))+(((-1.0)*x13149*x13158)))),-1);
if(!x13159.valid){
continue;
}
CheckValue<IkReal> x13160 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x13160.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13159.value)))+(x13160.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13161=IKcos(j8);
IkReal x13162=IKsin(j8);
IkReal x13163=(r21*sj9);
IkReal x13164=(cj9*r20);
IkReal x13165=((1.0)*x13162);
IkReal x13166=((1.0)*x13161);
IkReal x13167=(cj4*x13161);
IkReal x13168=(r12*sj4);
IkReal x13169=(r01*sj9);
IkReal x13170=(cj4*x13162);
IkReal x13171=(r11*sj4*sj9);
IkReal x13172=(cj9*r00);
IkReal x13173=((1.0)*cj4*x13162);
IkReal x13174=(cj9*r10*sj4);
IkReal x13175=(r02*sj4);
IkReal x13176=(r11*sj9);
IkReal x13177=(cj9*r00*sj4);
IkReal x13178=(cj9*r10);
IkReal x13179=((1.0)*cj4*x13161);
IkReal x13180=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x13164*x13165))+((x13162*x13163))+((r22*x13161)));
evalcond[1]=(((x13161*x13163))+(((-1.0)*x13164*x13166))+(((-1.0)*r22*x13165)));
evalcond[2]=(((x13161*x13168))+((r02*x13167))+((x13162*x13171))+(((-1.0)*x13165*x13174))+(((-1.0)*x13172*x13173))+((x13169*x13170)));
evalcond[3]=((((-1.0)*x13178*x13179))+(((-1.0)*x13166*x13180))+((x13167*x13176))+((x13162*x13175))+((x13161*x13177))+(((-1.0)*r12*x13173)));
evalcond[4]=((1.0)+(((-1.0)*x13173*x13178))+((r12*x13167))+((x13170*x13176))+(((-1.0)*x13165*x13180))+((x13162*x13177))+(((-1.0)*x13166*x13175)));
evalcond[5]=((1.0)+(((-1.0)*x13165*x13168))+(((-1.0)*x13172*x13179))+(((-1.0)*r02*x13173))+((x13167*x13169))+(((-1.0)*x13166*x13174))+((x13161*x13171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13181=((1.0)*sj9);
CheckValue<IkReal> x13182=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x13181))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x13182.valid){
continue;
}
CheckValue<IkReal> x13183 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*r21*x13181)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x13183.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13182.value)))+(x13183.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13184=IKcos(j8);
IkReal x13185=IKsin(j8);
IkReal x13186=(r21*sj9);
IkReal x13187=(cj9*r20);
IkReal x13188=((1.0)*x13185);
IkReal x13189=((1.0)*x13184);
IkReal x13190=(cj4*x13184);
IkReal x13191=(r12*sj4);
IkReal x13192=(r01*sj9);
IkReal x13193=(cj4*x13185);
IkReal x13194=(r11*sj4*sj9);
IkReal x13195=(cj9*r00);
IkReal x13196=((1.0)*cj4*x13185);
IkReal x13197=(cj9*r10*sj4);
IkReal x13198=(r02*sj4);
IkReal x13199=(r11*sj9);
IkReal x13200=(cj9*r00*sj4);
IkReal x13201=(cj9*r10);
IkReal x13202=((1.0)*cj4*x13184);
IkReal x13203=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x13187*x13188))+((r22*x13184))+((x13185*x13186)));
evalcond[1]=((((-1.0)*x13187*x13189))+(((-1.0)*r22*x13188))+((x13184*x13186)));
evalcond[2]=(((x13184*x13191))+((r02*x13190))+(((-1.0)*x13188*x13197))+(((-1.0)*x13195*x13196))+((x13185*x13194))+((x13192*x13193)));
evalcond[3]=((((-1.0)*r12*x13196))+((x13190*x13199))+((x13185*x13198))+(((-1.0)*x13201*x13202))+(((-1.0)*x13189*x13203))+((x13184*x13200)));
evalcond[4]=((1.0)+(((-1.0)*x13189*x13198))+((x13193*x13199))+(((-1.0)*x13188*x13203))+((r12*x13190))+((x13185*x13200))+(((-1.0)*x13196*x13201)));
evalcond[5]=((1.0)+(((-1.0)*r02*x13196))+(((-1.0)*x13195*x13202))+(((-1.0)*x13189*x13197))+((x13190*x13192))+(((-1.0)*x13188*x13191))+((x13184*x13194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13204=((1.0)*sj9);
IkReal x13205=((1.0)*cj9);
CheckValue<IkReal> x13206=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x13204))+(((-1.0)*cj4*r01*x13205))+(((-1.0)*cj4*r00*x13204))+(((-1.0)*r11*sj4*x13205)))),-1);
if(!x13206.valid){
continue;
}
CheckValue<IkReal> x13207 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x13204))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13207.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13206.value)))+(x13207.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13208=IKcos(j8);
IkReal x13209=IKsin(j8);
IkReal x13210=(r21*sj9);
IkReal x13211=(cj9*r20);
IkReal x13212=((1.0)*x13209);
IkReal x13213=((1.0)*x13208);
IkReal x13214=(cj4*x13208);
IkReal x13215=(r12*sj4);
IkReal x13216=(r01*sj9);
IkReal x13217=(cj4*x13209);
IkReal x13218=(r11*sj4*sj9);
IkReal x13219=(cj9*r00);
IkReal x13220=((1.0)*cj4*x13209);
IkReal x13221=(cj9*r10*sj4);
IkReal x13222=(r02*sj4);
IkReal x13223=(r11*sj9);
IkReal x13224=(cj9*r00*sj4);
IkReal x13225=(cj9*r10);
IkReal x13226=((1.0)*cj4*x13208);
IkReal x13227=(r01*sj4*sj9);
evalcond[0]=(((r22*x13208))+(((-1.0)*x13211*x13212))+((x13209*x13210)));
evalcond[1]=((((-1.0)*x13211*x13213))+(((-1.0)*r22*x13212))+((x13208*x13210)));
evalcond[2]=((((-1.0)*x13212*x13221))+((x13208*x13215))+((x13209*x13218))+((x13216*x13217))+(((-1.0)*x13219*x13220))+((r02*x13214)));
evalcond[3]=(((x13209*x13222))+((x13214*x13223))+(((-1.0)*r12*x13220))+(((-1.0)*x13213*x13227))+((x13208*x13224))+(((-1.0)*x13225*x13226)));
evalcond[4]=((1.0)+(((-1.0)*x13213*x13222))+((r12*x13214))+(((-1.0)*x13212*x13227))+(((-1.0)*x13220*x13225))+((x13217*x13223))+((x13209*x13224)));
evalcond[5]=((1.0)+(((-1.0)*x13219*x13226))+(((-1.0)*x13213*x13221))+(((-1.0)*r02*x13220))+((x13208*x13218))+(((-1.0)*x13212*x13215))+((x13214*x13216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13228=(cj9*r21);
IkReal x13229=(r20*sj9);
IkReal x13230=((1.0)*cj4);
IkReal x13231=(cj9*r01);
IkReal x13232=(r00*sj9);
IkReal x13233=((1.0)*sj4);
IkReal x13234=(cj9*r11);
IkReal x13235=(r10*sj9);
IkReal x13236=(sj4*x13231);
IkReal x13237=(sj4*x13232);
IkReal x13238=((0.03431)*cj4);
IkReal x13239=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x13229))+(((-1.0)*x13228)));
evalcond[2]=((((-1.0)*x13233*x13235))+(((-1.0)*x13230*x13232))+(((-1.0)*x13233*x13234))+(((-1.0)*x13230*x13231)));
evalcond[3]=((0.4967)+(((0.03431)*x13228))+(((-1.0)*(1.0)*pz))+(((0.03431)*x13229)));
evalcond[4]=(x13236+x13237+(((-1.0)*x13230*x13235))+(((-1.0)*x13230*x13234)));
evalcond[5]=((0.00301)+((x13232*x13238))+(((-1.0)*py*x13233))+((x13234*x13239))+(((-1.0)*px*x13230))+((x13235*x13239))+((x13231*x13238)));
evalcond[6]=((((-0.03431)*x13236))+((px*sj4))+((x13234*x13238))+((x13235*x13238))+(((-1.0)*py*x13230))+(((-0.03431)*x13237)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x13240=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x13240;
j8eval[1]=IKsign(x13240);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x13241=((1.0)*cj9);
IkReal x13242=((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x13241))+((r00*sj4*sj9)));
j8eval[0]=x13242;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x13241)))))+(IKabs(r22)));
j8eval[2]=IKsign(x13242);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x13243=((1.0)*r21);
IkReal x13244=(cj4*r01);
IkReal x13245=((1.0)*r22);
IkReal x13246=(r11*sj4);
IkReal x13247=(cj4*r00);
IkReal x13248=(cj9*r21*sj9);
IkReal x13249=(cj9*r20*sj9);
IkReal x13250=(r10*sj4);
IkReal x13251=cj9*cj9;
IkReal x13252=(r21*x13251);
IkReal x13253=((1.0)*r20*x13251);
IkReal x13254=(((x13248*x13250))+(((-1.0)*x13250*x13253))+(((-1.0)*r12*sj4*x13245))+(((-1.0)*x13243*x13244))+((x13246*x13249))+(((-1.0)*cj4*r02*x13245))+((x13247*x13248))+((x13244*x13252))+(((-1.0)*x13247*x13253))+((x13244*x13249))+((x13246*x13252))+(((-1.0)*x13243*x13246)));
j8eval[0]=x13254;
j8eval[1]=((IKabs(((((-1.0)*sj9*x13243))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x13254);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13255=((1.0)*r21);
IkReal x13256=(cj4*r01);
IkReal x13257=((1.0)*r22);
IkReal x13258=(r11*sj4);
IkReal x13259=(cj4*r00);
IkReal x13260=(cj9*r21*sj9);
IkReal x13261=(cj9*r20*sj9);
IkReal x13262=(r10*sj4);
IkReal x13263=cj9*cj9;
IkReal x13264=(r21*x13263);
IkReal x13265=((1.0)*r20*x13263);
CheckValue<IkReal> x13266 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x13255))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13266.valid){
continue;
}
CheckValue<IkReal> x13267=IKPowWithIntegerCheck(IKsign((((x13258*x13264))+((x13260*x13262))+((x13259*x13260))+(((-1.0)*x13259*x13265))+((x13258*x13261))+(((-1.0)*x13262*x13265))+(((-1.0)*x13255*x13256))+((x13256*x13261))+(((-1.0)*r12*sj4*x13257))+(((-1.0)*x13255*x13258))+((x13256*x13264))+(((-1.0)*cj4*r02*x13257)))),-1);
if(!x13267.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13266.value)+(((1.5707963267949)*(x13267.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13268=IKcos(j8);
IkReal x13269=IKsin(j8);
IkReal x13270=(r21*sj9);
IkReal x13271=(cj9*r20);
IkReal x13272=((1.0)*x13269);
IkReal x13273=((1.0)*x13268);
IkReal x13274=(cj4*x13268);
IkReal x13275=(r12*sj4);
IkReal x13276=(r01*sj9);
IkReal x13277=(cj4*x13269);
IkReal x13278=(r11*sj4*sj9);
IkReal x13279=(cj9*r00);
IkReal x13280=((1.0)*cj4*x13269);
IkReal x13281=(cj9*r10*sj4);
IkReal x13282=(r02*sj4);
IkReal x13283=(r11*sj9);
IkReal x13284=(cj9*r00*sj4);
IkReal x13285=(cj9*r10);
IkReal x13286=((1.0)*cj4*x13268);
IkReal x13287=(r01*sj4*sj9);
evalcond[0]=(((x13269*x13270))+((r22*x13268))+(((-1.0)*x13271*x13272)));
evalcond[1]=(((x13268*x13270))+(((-1.0)*r22*x13272))+(((-1.0)*x13271*x13273)));
evalcond[2]=((((-1.0)*x13279*x13280))+((x13268*x13275))+((x13269*x13278))+(((-1.0)*x13272*x13281))+((r02*x13274))+((x13276*x13277)));
evalcond[3]=((((-1.0)*x13273*x13287))+(((-1.0)*x13285*x13286))+((x13268*x13284))+(((-1.0)*r12*x13280))+((x13274*x13283))+((x13269*x13282)));
evalcond[4]=((-1.0)+(((-1.0)*x13272*x13287))+(((-1.0)*x13280*x13285))+((r12*x13274))+((x13269*x13284))+(((-1.0)*x13273*x13282))+((x13277*x13283)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x13280))+(((-1.0)*x13279*x13286))+((x13274*x13276))+((x13268*x13278))+(((-1.0)*x13273*x13281))+(((-1.0)*x13272*x13275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13288=((1.0)*cj9);
CheckValue<IkReal> x13289=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x13288))+((r00*sj4*sj9)))),-1);
if(!x13289.valid){
continue;
}
CheckValue<IkReal> x13290 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13288))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x13290.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13289.value)))+(x13290.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13291=IKcos(j8);
IkReal x13292=IKsin(j8);
IkReal x13293=(r21*sj9);
IkReal x13294=(cj9*r20);
IkReal x13295=((1.0)*x13292);
IkReal x13296=((1.0)*x13291);
IkReal x13297=(cj4*x13291);
IkReal x13298=(r12*sj4);
IkReal x13299=(r01*sj9);
IkReal x13300=(cj4*x13292);
IkReal x13301=(r11*sj4*sj9);
IkReal x13302=(cj9*r00);
IkReal x13303=((1.0)*cj4*x13292);
IkReal x13304=(cj9*r10*sj4);
IkReal x13305=(r02*sj4);
IkReal x13306=(r11*sj9);
IkReal x13307=(cj9*r00*sj4);
IkReal x13308=(cj9*r10);
IkReal x13309=((1.0)*cj4*x13291);
IkReal x13310=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x13294*x13295))+((x13292*x13293))+((r22*x13291)));
evalcond[1]=((((-1.0)*x13294*x13296))+(((-1.0)*r22*x13295))+((x13291*x13293)));
evalcond[2]=(((x13292*x13301))+(((-1.0)*x13302*x13303))+((r02*x13297))+(((-1.0)*x13295*x13304))+((x13291*x13298))+((x13299*x13300)));
evalcond[3]=((((-1.0)*r12*x13303))+(((-1.0)*x13296*x13310))+((x13291*x13307))+(((-1.0)*x13308*x13309))+((x13292*x13305))+((x13297*x13306)));
evalcond[4]=((-1.0)+((x13300*x13306))+((x13292*x13307))+((r12*x13297))+(((-1.0)*x13303*x13308))+(((-1.0)*x13296*x13305))+(((-1.0)*x13295*x13310)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x13303))+(((-1.0)*x13302*x13309))+((x13297*x13299))+(((-1.0)*x13295*x13298))+((x13291*x13301))+(((-1.0)*x13296*x13304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13311=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x13311.valid){
continue;
}
CheckValue<IkReal> x13312 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x13312.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13311.value)))+(x13312.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13313=IKcos(j8);
IkReal x13314=IKsin(j8);
IkReal x13315=(r21*sj9);
IkReal x13316=(cj9*r20);
IkReal x13317=((1.0)*x13314);
IkReal x13318=((1.0)*x13313);
IkReal x13319=(cj4*x13313);
IkReal x13320=(r12*sj4);
IkReal x13321=(r01*sj9);
IkReal x13322=(cj4*x13314);
IkReal x13323=(r11*sj4*sj9);
IkReal x13324=(cj9*r00);
IkReal x13325=((1.0)*cj4*x13314);
IkReal x13326=(cj9*r10*sj4);
IkReal x13327=(r02*sj4);
IkReal x13328=(r11*sj9);
IkReal x13329=(cj9*r00*sj4);
IkReal x13330=(cj9*r10);
IkReal x13331=((1.0)*cj4*x13313);
IkReal x13332=(r01*sj4*sj9);
evalcond[0]=(((r22*x13313))+(((-1.0)*x13316*x13317))+((x13314*x13315)));
evalcond[1]=((((-1.0)*x13316*x13318))+((x13313*x13315))+(((-1.0)*r22*x13317)));
evalcond[2]=(((x13321*x13322))+((x13314*x13323))+(((-1.0)*x13324*x13325))+(((-1.0)*x13317*x13326))+((x13313*x13320))+((r02*x13319)));
evalcond[3]=(((x13314*x13327))+(((-1.0)*x13330*x13331))+((x13313*x13329))+(((-1.0)*x13318*x13332))+((x13319*x13328))+(((-1.0)*r12*x13325)));
evalcond[4]=((-1.0)+((x13322*x13328))+((r12*x13319))+(((-1.0)*x13325*x13330))+(((-1.0)*x13317*x13332))+((x13314*x13329))+(((-1.0)*x13318*x13327)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x13325))+(((-1.0)*x13324*x13331))+(((-1.0)*x13317*x13320))+((x13319*x13321))+(((-1.0)*x13318*x13326))+((x13313*x13323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13333=(cj9*r21);
IkReal x13334=(r20*sj9);
IkReal x13335=((1.0)*cj4);
IkReal x13336=(cj9*r01);
IkReal x13337=(r00*sj9);
IkReal x13338=((1.0)*sj4);
IkReal x13339=(cj9*r11);
IkReal x13340=(r10*sj9);
IkReal x13341=(sj4*x13336);
IkReal x13342=(sj4*x13337);
IkReal x13343=((0.03431)*cj4);
IkReal x13344=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x13334))+(((-1.0)*x13333)));
evalcond[2]=((((-1.0)*x13335*x13337))+(((-1.0)*x13335*x13336))+(((-1.0)*x13338*x13339))+(((-1.0)*x13338*x13340)));
evalcond[3]=((0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x13334))+(((0.03431)*x13333)));
evalcond[4]=(x13341+x13342+(((-1.0)*x13335*x13340))+(((-1.0)*x13335*x13339)));
evalcond[5]=((0.00337)+((x13340*x13344))+(((-1.0)*px*x13335))+(((-1.0)*py*x13338))+((x13337*x13343))+((x13339*x13344))+((x13336*x13343)));
evalcond[6]=((0.00036)+((px*sj4))+((x13340*x13343))+(((-1.0)*py*x13335))+(((-0.03431)*x13342))+(((-0.03431)*x13341))+((x13339*x13343)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x13345=((1.0)*sj9);
IkReal x13346=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x13345))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x13346;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*r21*x13345)))))+(IKabs(r22)));
j8eval[2]=IKsign(x13346);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x13347=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x13347;
j8eval[1]=IKsign(x13347);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x13348=(cj4*r11);
IkReal x13349=((1.0)*r21);
IkReal x13350=(r01*sj4);
IkReal x13351=(cj9*r20*sj9);
IkReal x13352=(cj4*r10);
IkReal x13353=cj9*cj9;
IkReal x13354=(r20*x13353);
IkReal x13355=(((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*cj4*r11*x13351))+(((-1.0)*r21*x13348*x13353))+((x13350*x13351))+(((-1.0)*r02*r22*sj4))+((x13352*x13354))+(((-1.0)*r00*sj4*x13354))+((r21*x13348))+(((-1.0)*x13349*x13350))+((r21*x13350*x13353))+(((-1.0)*cj9*r21*sj9*x13352)));
j8eval[0]=x13355;
j8eval[1]=IKsign(x13355);
j8eval[2]=((IKabs(((((-1.0)*sj9*x13349))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13356=((1.0)*r21);
IkReal x13357=(cj4*r11);
IkReal x13358=(r01*sj4);
IkReal x13359=(cj9*r20*sj9);
IkReal x13360=(cj4*r10);
IkReal x13361=cj9*cj9;
IkReal x13362=(r20*x13361);
CheckValue<IkReal> x13363=IKPowWithIntegerCheck(IKsign((((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+((x13360*x13362))+((r21*x13358*x13361))+(((-1.0)*r02*r22*sj4))+(((-1.0)*x13356*x13358))+((x13358*x13359))+((r21*x13357))+(((-1.0)*r21*x13357*x13361))+(((-1.0)*r00*sj4*x13362))+(((-1.0)*cj4*r11*x13359))+(((-1.0)*cj9*r21*sj9*x13360)))),-1);
if(!x13363.valid){
continue;
}
CheckValue<IkReal> x13364 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x13356))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13364.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13363.value)))+(x13364.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13365=IKcos(j8);
IkReal x13366=IKsin(j8);
IkReal x13367=(r21*sj9);
IkReal x13368=(cj9*r20);
IkReal x13369=((1.0)*x13366);
IkReal x13370=((1.0)*x13365);
IkReal x13371=(cj4*x13365);
IkReal x13372=(r12*sj4);
IkReal x13373=(r01*sj9);
IkReal x13374=(cj4*x13366);
IkReal x13375=(r11*sj4*sj9);
IkReal x13376=(cj9*r00);
IkReal x13377=((1.0)*cj4*x13366);
IkReal x13378=(cj9*r10*sj4);
IkReal x13379=(r02*sj4);
IkReal x13380=(r11*sj9);
IkReal x13381=(cj9*r00*sj4);
IkReal x13382=(cj9*r10);
IkReal x13383=(r01*sj4*sj9);
IkReal x13384=((1.0)*cj4*x13365);
evalcond[0]=((((-1.0)*x13368*x13369))+((x13366*x13367))+((r22*x13365)));
evalcond[1]=((((-1.0)*r22*x13369))+((x13365*x13367))+(((-1.0)*x13368*x13370)));
evalcond[2]=((-1.0)+((r02*x13371))+((x13373*x13374))+(((-1.0)*x13376*x13377))+(((-1.0)*x13369*x13378))+((x13366*x13375))+((x13365*x13372)));
evalcond[3]=(((x13366*x13381))+(((-1.0)*x13370*x13379))+(((-1.0)*x13369*x13383))+((r12*x13371))+(((-1.0)*x13377*x13382))+((x13374*x13380)));
evalcond[4]=((((-1.0)*x13370*x13378))+((x13365*x13375))+(((-1.0)*x13369*x13372))+(((-1.0)*x13376*x13384))+((x13371*x13373))+(((-1.0)*r02*x13377)));
evalcond[5]=((1.0)+((x13371*x13380))+((x13365*x13381))+(((-1.0)*x13370*x13383))+(((-1.0)*x13382*x13384))+((x13366*x13379))+(((-1.0)*r12*x13377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13385 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x13385.valid){
continue;
}
CheckValue<IkReal> x13386=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x13386.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13385.value)+(((1.5707963267949)*(x13386.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13387=IKcos(j8);
IkReal x13388=IKsin(j8);
IkReal x13389=(r21*sj9);
IkReal x13390=(cj9*r20);
IkReal x13391=((1.0)*x13388);
IkReal x13392=((1.0)*x13387);
IkReal x13393=(cj4*x13387);
IkReal x13394=(r12*sj4);
IkReal x13395=(r01*sj9);
IkReal x13396=(cj4*x13388);
IkReal x13397=(r11*sj4*sj9);
IkReal x13398=(cj9*r00);
IkReal x13399=((1.0)*cj4*x13388);
IkReal x13400=(cj9*r10*sj4);
IkReal x13401=(r02*sj4);
IkReal x13402=(r11*sj9);
IkReal x13403=(cj9*r00*sj4);
IkReal x13404=(cj9*r10);
IkReal x13405=(r01*sj4*sj9);
IkReal x13406=((1.0)*cj4*x13387);
evalcond[0]=(((x13388*x13389))+(((-1.0)*x13390*x13391))+((r22*x13387)));
evalcond[1]=((((-1.0)*r22*x13391))+((x13387*x13389))+(((-1.0)*x13390*x13392)));
evalcond[2]=((-1.0)+((x13395*x13396))+((x13388*x13397))+(((-1.0)*x13391*x13400))+((r02*x13393))+(((-1.0)*x13398*x13399))+((x13387*x13394)));
evalcond[3]=((((-1.0)*x13399*x13404))+(((-1.0)*x13392*x13401))+((r12*x13393))+(((-1.0)*x13391*x13405))+((x13388*x13403))+((x13396*x13402)));
evalcond[4]=(((x13393*x13395))+(((-1.0)*x13391*x13394))+(((-1.0)*x13392*x13400))+(((-1.0)*x13398*x13406))+(((-1.0)*r02*x13399))+((x13387*x13397)));
evalcond[5]=((1.0)+((x13387*x13403))+((x13388*x13401))+((x13393*x13402))+(((-1.0)*x13392*x13405))+(((-1.0)*x13404*x13406))+(((-1.0)*r12*x13399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13407=((1.0)*sj9);
CheckValue<IkReal> x13408=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x13407))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x13408.valid){
continue;
}
CheckValue<IkReal> x13409 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x13407))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13409.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13408.value)))+(x13409.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13410=IKcos(j8);
IkReal x13411=IKsin(j8);
IkReal x13412=(r21*sj9);
IkReal x13413=(cj9*r20);
IkReal x13414=((1.0)*x13411);
IkReal x13415=((1.0)*x13410);
IkReal x13416=(cj4*x13410);
IkReal x13417=(r12*sj4);
IkReal x13418=(r01*sj9);
IkReal x13419=(cj4*x13411);
IkReal x13420=(r11*sj4*sj9);
IkReal x13421=(cj9*r00);
IkReal x13422=((1.0)*cj4*x13411);
IkReal x13423=(cj9*r10*sj4);
IkReal x13424=(r02*sj4);
IkReal x13425=(r11*sj9);
IkReal x13426=(cj9*r00*sj4);
IkReal x13427=(cj9*r10);
IkReal x13428=(r01*sj4*sj9);
IkReal x13429=((1.0)*cj4*x13410);
evalcond[0]=(((r22*x13410))+(((-1.0)*x13413*x13414))+((x13411*x13412)));
evalcond[1]=(((x13410*x13412))+(((-1.0)*r22*x13414))+(((-1.0)*x13413*x13415)));
evalcond[2]=((-1.0)+(((-1.0)*x13414*x13423))+((x13411*x13420))+((r02*x13416))+((x13410*x13417))+((x13418*x13419))+(((-1.0)*x13421*x13422)));
evalcond[3]=((((-1.0)*x13415*x13424))+((x13411*x13426))+(((-1.0)*x13422*x13427))+((r12*x13416))+(((-1.0)*x13414*x13428))+((x13419*x13425)));
evalcond[4]=((((-1.0)*x13421*x13429))+(((-1.0)*x13415*x13423))+(((-1.0)*x13414*x13417))+((x13416*x13418))+(((-1.0)*r02*x13422))+((x13410*x13420)));
evalcond[5]=((1.0)+((x13416*x13425))+((x13410*x13426))+(((-1.0)*r12*x13422))+((x13411*x13424))+(((-1.0)*x13427*x13429))+(((-1.0)*x13415*x13428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13430=(cj9*r21);
IkReal x13431=(r20*sj9);
IkReal x13432=((1.0)*cj4);
IkReal x13433=(cj9*r01);
IkReal x13434=(r00*sj9);
IkReal x13435=((1.0)*sj4);
IkReal x13436=(cj9*r11);
IkReal x13437=(r10*sj9);
IkReal x13438=(sj4*x13433);
IkReal x13439=(sj4*x13434);
IkReal x13440=((0.03431)*cj4);
IkReal x13441=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x13430))+(((-1.0)*x13431)));
evalcond[2]=((((-1.0)*x13432*x13433))+(((-1.0)*x13435*x13436))+(((-1.0)*x13432*x13434))+(((-1.0)*x13435*x13437)));
evalcond[3]=((0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x13431))+(((0.03431)*x13430)));
evalcond[4]=(x13438+x13439+(((-1.0)*x13432*x13436))+(((-1.0)*x13432*x13437)));
evalcond[5]=((0.00337)+((x13436*x13441))+(((-1.0)*px*x13432))+((x13437*x13441))+((x13433*x13440))+(((-1.0)*py*x13435))+((x13434*x13440)));
evalcond[6]=((-0.00036)+((px*sj4))+((x13436*x13440))+(((-0.03431)*x13439))+((x13437*x13440))+(((-0.03431)*x13438))+(((-1.0)*py*x13432)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x13442=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x13442;
j8eval[1]=IKsign(x13442);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x13443=((1.0)*sj9);
IkReal x13444=(((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*x13443)));
j8eval[0]=x13444;
j8eval[1]=((IKabs(((((-1.0)*r21*x13443))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x13444);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x13445=(r01*sj4);
IkReal x13446=((1.0)*r21);
IkReal x13447=(cj4*r11);
IkReal x13448=(cj9*r20*sj9);
IkReal x13449=cj9*cj9;
IkReal x13450=(r00*sj4);
IkReal x13451=(r20*x13449);
IkReal x13452=((((-1.0)*x13446*x13447))+(((-1.0)*cj4*r10*x13451))+(((-1.0)*r01*sj4*x13448))+(((-1.0)*cj9*r21*sj9*x13450))+(((-1.0)*r21*x13445*x13449))+((r21*x13447*x13449))+((r21*x13445))+((x13447*x13448))+((r02*r22*sj4))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+((x13450*x13451)));
j8eval[0]=x13452;
j8eval[1]=IKsign(x13452);
j8eval[2]=((IKabs(((((-1.0)*sj9*x13446))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13453=((1.0)*r21);
IkReal x13454=(r01*sj4);
IkReal x13455=(cj4*r11);
IkReal x13456=(cj9*r20*sj9);
IkReal x13457=cj9*cj9;
IkReal x13458=(r00*sj4);
IkReal x13459=(r20*x13457);
CheckValue<IkReal> x13460 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x13453))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13460.valid){
continue;
}
CheckValue<IkReal> x13461=IKPowWithIntegerCheck(IKsign((((x13458*x13459))+(((-1.0)*x13453*x13455))+((x13455*x13456))+(((-1.0)*r21*x13454*x13457))+((r02*r22*sj4))+(((-1.0)*cj4*r10*x13459))+((r21*x13454))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*cj9*r21*sj9*x13458))+(((-1.0)*r01*sj4*x13456))+((r21*x13455*x13457)))),-1);
if(!x13461.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13460.value)+(((1.5707963267949)*(x13461.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13462=IKcos(j8);
IkReal x13463=IKsin(j8);
IkReal x13464=(r21*sj9);
IkReal x13465=(cj9*r20);
IkReal x13466=((1.0)*x13463);
IkReal x13467=((1.0)*x13462);
IkReal x13468=(cj4*x13462);
IkReal x13469=(r12*sj4);
IkReal x13470=(r01*sj9);
IkReal x13471=(cj4*x13463);
IkReal x13472=(r11*sj4*sj9);
IkReal x13473=(cj9*r00);
IkReal x13474=((1.0)*cj4*x13463);
IkReal x13475=(cj9*r10*sj4);
IkReal x13476=(r02*sj4);
IkReal x13477=(r11*sj9);
IkReal x13478=(cj9*r00*sj4);
IkReal x13479=(cj9*r10);
IkReal x13480=(r01*sj4*sj9);
IkReal x13481=((1.0)*cj4*x13462);
evalcond[0]=(((r22*x13462))+((x13463*x13464))+(((-1.0)*x13465*x13466)));
evalcond[1]=(((x13462*x13464))+(((-1.0)*x13465*x13467))+(((-1.0)*r22*x13466)));
evalcond[2]=((1.0)+((x13462*x13469))+((x13463*x13472))+((r02*x13468))+((x13470*x13471))+(((-1.0)*x13473*x13474))+(((-1.0)*x13466*x13475)));
evalcond[3]=((((-1.0)*x13467*x13476))+((x13463*x13478))+(((-1.0)*x13466*x13480))+((x13471*x13477))+(((-1.0)*x13474*x13479))+((r12*x13468)));
evalcond[4]=((((-1.0)*x13466*x13469))+(((-1.0)*x13473*x13481))+(((-1.0)*r02*x13474))+((x13462*x13472))+((x13468*x13470))+(((-1.0)*x13467*x13475)));
evalcond[5]=((-1.0)+((x13468*x13477))+(((-1.0)*x13479*x13481))+(((-1.0)*x13467*x13480))+((x13463*x13476))+(((-1.0)*r12*x13474))+((x13462*x13478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13482=((1.0)*sj9);
CheckValue<IkReal> x13483=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*r00*sj4*x13482))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x13483.valid){
continue;
}
CheckValue<IkReal> x13484 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x13482))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13484.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13483.value)))+(x13484.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13485=IKcos(j8);
IkReal x13486=IKsin(j8);
IkReal x13487=(r21*sj9);
IkReal x13488=(cj9*r20);
IkReal x13489=((1.0)*x13486);
IkReal x13490=((1.0)*x13485);
IkReal x13491=(cj4*x13485);
IkReal x13492=(r12*sj4);
IkReal x13493=(r01*sj9);
IkReal x13494=(cj4*x13486);
IkReal x13495=(r11*sj4*sj9);
IkReal x13496=(cj9*r00);
IkReal x13497=((1.0)*cj4*x13486);
IkReal x13498=(cj9*r10*sj4);
IkReal x13499=(r02*sj4);
IkReal x13500=(r11*sj9);
IkReal x13501=(cj9*r00*sj4);
IkReal x13502=(cj9*r10);
IkReal x13503=(r01*sj4*sj9);
IkReal x13504=((1.0)*cj4*x13485);
evalcond[0]=(((x13486*x13487))+((r22*x13485))+(((-1.0)*x13488*x13489)));
evalcond[1]=((((-1.0)*x13488*x13490))+(((-1.0)*r22*x13489))+((x13485*x13487)));
evalcond[2]=((1.0)+(((-1.0)*x13489*x13498))+((x13486*x13495))+(((-1.0)*x13496*x13497))+((x13485*x13492))+((r02*x13491))+((x13493*x13494)));
evalcond[3]=(((x13486*x13501))+((r12*x13491))+(((-1.0)*x13489*x13503))+((x13494*x13500))+(((-1.0)*x13497*x13502))+(((-1.0)*x13490*x13499)));
evalcond[4]=(((x13485*x13495))+(((-1.0)*x13489*x13492))+(((-1.0)*r02*x13497))+((x13491*x13493))+(((-1.0)*x13496*x13504))+(((-1.0)*x13490*x13498)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x13497))+((x13485*x13501))+(((-1.0)*x13502*x13504))+(((-1.0)*x13490*x13503))+((x13486*x13499))+((x13491*x13500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13505 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x13505.valid){
continue;
}
CheckValue<IkReal> x13506=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x13506.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13505.value)+(((1.5707963267949)*(x13506.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13507=IKcos(j8);
IkReal x13508=IKsin(j8);
IkReal x13509=(r21*sj9);
IkReal x13510=(cj9*r20);
IkReal x13511=((1.0)*x13508);
IkReal x13512=((1.0)*x13507);
IkReal x13513=(cj4*x13507);
IkReal x13514=(r12*sj4);
IkReal x13515=(r01*sj9);
IkReal x13516=(cj4*x13508);
IkReal x13517=(r11*sj4*sj9);
IkReal x13518=(cj9*r00);
IkReal x13519=((1.0)*cj4*x13508);
IkReal x13520=(cj9*r10*sj4);
IkReal x13521=(r02*sj4);
IkReal x13522=(r11*sj9);
IkReal x13523=(cj9*r00*sj4);
IkReal x13524=(cj9*r10);
IkReal x13525=(r01*sj4*sj9);
IkReal x13526=((1.0)*cj4*x13507);
evalcond[0]=(((x13508*x13509))+((r22*x13507))+(((-1.0)*x13510*x13511)));
evalcond[1]=(((x13507*x13509))+(((-1.0)*r22*x13511))+(((-1.0)*x13510*x13512)));
evalcond[2]=((1.0)+((r02*x13513))+((x13507*x13514))+((x13515*x13516))+(((-1.0)*x13511*x13520))+((x13508*x13517))+(((-1.0)*x13518*x13519)));
evalcond[3]=((((-1.0)*x13511*x13525))+((x13508*x13523))+((r12*x13513))+(((-1.0)*x13519*x13524))+(((-1.0)*x13512*x13521))+((x13516*x13522)));
evalcond[4]=((((-1.0)*x13512*x13520))+((x13513*x13515))+((x13507*x13517))+(((-1.0)*r02*x13519))+(((-1.0)*x13511*x13514))+(((-1.0)*x13518*x13526)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x13519))+((x13508*x13521))+((x13513*x13522))+(((-1.0)*x13524*x13526))+(((-1.0)*x13512*x13525))+((x13507*x13523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13527=(r21*sj9);
IkReal x13528=(cj4*r21);
IkReal x13529=(r11*x13528);
IkReal x13530=((1.0)*sj4);
IkReal x13531=(r01*r21);
IkReal x13532=(cj9*r20*sj9);
IkReal x13533=cj9*cj9;
IkReal x13534=(r20*x13533);
CheckValue<IkReal> x13535=IKPowWithIntegerCheck(IKsign((((cj4*r10*x13534))+(((-1.0)*x13529*x13533))+((cj9*r00*sj4*x13527))+((cj4*r12*r22))+((r01*sj4*x13532))+((sj4*x13531*x13533))+(((-1.0)*cj9*r10*sj9*x13528))+(((-1.0)*cj4*r11*x13532))+x13529+(((-1.0)*r00*sj4*x13534))+(((-1.0)*x13530*x13531))+(((-1.0)*r02*r22*x13530)))),-1);
if(!x13535.valid){
continue;
}
CheckValue<IkReal> x13536 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*sj6*x13527))+((sj6*((cj9*r20))))),IKFAST_ATAN2_MAGTHRESH);
if(!x13536.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13535.value)))+(x13536.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13537=IKcos(j8);
IkReal x13538=IKsin(j8);
IkReal x13539=(r21*sj9);
IkReal x13540=(cj9*r20);
IkReal x13541=((1.0)*x13538);
IkReal x13542=((1.0)*x13537);
IkReal x13543=(cj4*x13537);
IkReal x13544=(r02*sj4);
IkReal x13545=(r11*sj9);
IkReal x13546=(cj4*x13538);
IkReal x13547=(cj9*r00*sj4);
IkReal x13548=(cj9*r10);
IkReal x13549=((1.0)*cj4*x13538);
IkReal x13550=(r01*sj4*sj9);
IkReal x13551=((1.0)*cj4*x13537);
IkReal x13552=(r12*sj4);
IkReal x13553=(r01*sj9);
IkReal x13554=(r11*sj4*sj9);
IkReal x13555=(cj9*r00);
IkReal x13556=(cj9*r10*sj4);
evalcond[0]=(((x13538*x13539))+((r22*x13537))+(((-1.0)*x13540*x13541)));
evalcond[1]=(((x13537*x13539))+(((-1.0)*x13540*x13542))+(((-1.0)*r22*x13541)));
evalcond[2]=((((-1.0)*x13542*x13544))+((r12*x13543))+((x13545*x13546))+(((-1.0)*x13541*x13550))+((x13538*x13547))+cj6+(((-1.0)*x13548*x13549)));
evalcond[3]=((((-1.0)*r12*x13549))+(((-1.0)*x13548*x13551))+((x13537*x13547))+(((-1.0)*x13542*x13550))+sj6+((x13543*x13545))+((x13538*x13544)));
evalcond[4]=(((r02*x13543))+((x13537*x13552))+((x13538*x13554))+(((-1.0)*x13541*x13556))+((x13546*x13553))+(((-1.0)*x13549*x13555))+(((-1.0)*(1.0)*sj6)));
evalcond[5]=((((-1.0)*x13541*x13552))+(((-1.0)*r02*x13549))+(((-1.0)*x13551*x13555))+(((-1.0)*x13542*x13556))+((x13543*x13553))+((x13537*x13554))+cj6);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13557=((1.0)*sj9);
IkReal x13558=((1.0)*cj4);
CheckValue<IkReal> x13559=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*cj9*r01*x13558))+(((-1.0)*r00*sj9*x13558))+(((-1.0)*r10*sj4*x13557)))),-1);
if(!x13559.valid){
continue;
}
CheckValue<IkReal> x13560 = IKatan2WithCheck(IkReal((cj6*r22)),((((-1.0)*cj6*r21*x13557))+((cj6*cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13560.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13559.value)))+(x13560.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13561=IKcos(j8);
IkReal x13562=IKsin(j8);
IkReal x13563=(r21*sj9);
IkReal x13564=(cj9*r20);
IkReal x13565=((1.0)*x13562);
IkReal x13566=((1.0)*x13561);
IkReal x13567=(cj4*x13561);
IkReal x13568=(r02*sj4);
IkReal x13569=(r11*sj9);
IkReal x13570=(cj4*x13562);
IkReal x13571=(cj9*r00*sj4);
IkReal x13572=(cj9*r10);
IkReal x13573=((1.0)*cj4*x13562);
IkReal x13574=(r01*sj4*sj9);
IkReal x13575=((1.0)*cj4*x13561);
IkReal x13576=(r12*sj4);
IkReal x13577=(r01*sj9);
IkReal x13578=(r11*sj4*sj9);
IkReal x13579=(cj9*r00);
IkReal x13580=(cj9*r10*sj4);
evalcond[0]=(((x13562*x13563))+((r22*x13561))+(((-1.0)*x13564*x13565)));
evalcond[1]=((((-1.0)*r22*x13565))+((x13561*x13563))+(((-1.0)*x13564*x13566)));
evalcond[2]=(((x13569*x13570))+((x13562*x13571))+((r12*x13567))+cj6+(((-1.0)*x13566*x13568))+(((-1.0)*x13565*x13574))+(((-1.0)*x13572*x13573)));
evalcond[3]=(((x13561*x13571))+(((-1.0)*x13572*x13575))+sj6+((x13567*x13569))+(((-1.0)*r12*x13573))+((x13562*x13568))+(((-1.0)*x13566*x13574)));
evalcond[4]=(((x13561*x13576))+((x13562*x13578))+((r02*x13567))+(((-1.0)*x13573*x13579))+(((-1.0)*x13565*x13580))+(((-1.0)*(1.0)*sj6))+((x13570*x13577)));
evalcond[5]=((((-1.0)*x13575*x13579))+cj6+(((-1.0)*x13566*x13580))+((x13561*x13578))+((x13567*x13577))+(((-1.0)*r02*x13573))+(((-1.0)*x13565*x13576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13581=((1.0)*cj4);
CheckValue<IkReal> x13582 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x13582.valid){
continue;
}
CheckValue<IkReal> x13583=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*r11*x13581))+(((-1.0)*r10*sj9*x13581))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x13583.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13582.value)+(((1.5707963267949)*(x13583.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13584=IKcos(j8);
IkReal x13585=IKsin(j8);
IkReal x13586=(r21*sj9);
IkReal x13587=(cj9*r20);
IkReal x13588=((1.0)*x13585);
IkReal x13589=((1.0)*x13584);
IkReal x13590=(cj4*x13584);
IkReal x13591=(r02*sj4);
IkReal x13592=(r11*sj9);
IkReal x13593=(cj4*x13585);
IkReal x13594=(cj9*r00*sj4);
IkReal x13595=(cj9*r10);
IkReal x13596=((1.0)*cj4*x13585);
IkReal x13597=(r01*sj4*sj9);
IkReal x13598=((1.0)*cj4*x13584);
IkReal x13599=(r12*sj4);
IkReal x13600=(r01*sj9);
IkReal x13601=(r11*sj4*sj9);
IkReal x13602=(cj9*r00);
IkReal x13603=(cj9*r10*sj4);
evalcond[0]=((((-1.0)*x13587*x13588))+((x13585*x13586))+((r22*x13584)));
evalcond[1]=((((-1.0)*r22*x13588))+(((-1.0)*x13587*x13589))+((x13584*x13586)));
evalcond[2]=((((-1.0)*x13595*x13596))+(((-1.0)*x13589*x13591))+((x13592*x13593))+(((-1.0)*x13588*x13597))+cj6+((r12*x13590))+((x13585*x13594)));
evalcond[3]=((((-1.0)*x13595*x13598))+sj6+((x13585*x13591))+(((-1.0)*x13589*x13597))+((x13584*x13594))+((x13590*x13592))+(((-1.0)*r12*x13596)));
evalcond[4]=(((x13593*x13600))+(((-1.0)*x13588*x13603))+((r02*x13590))+(((-1.0)*x13596*x13602))+((x13584*x13599))+((x13585*x13601))+(((-1.0)*(1.0)*sj6)));
evalcond[5]=((((-1.0)*r02*x13596))+(((-1.0)*x13588*x13599))+((x13590*x13600))+cj6+(((-1.0)*x13598*x13602))+(((-1.0)*x13589*x13603))+((x13584*x13601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13604=(cj9*r21);
IkReal x13605=(r20*sj9);
IkReal x13606=((1.0)*cj4);
IkReal x13607=(cj9*r01);
IkReal x13608=(r00*sj9);
IkReal x13609=((1.0)*sj4);
IkReal x13610=(cj9*r11);
IkReal x13611=(r10*sj9);
IkReal x13612=(sj4*x13607);
IkReal x13613=(sj4*x13608);
IkReal x13614=((0.03431)*cj4);
IkReal x13615=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*x13605))+(((-1.0)*x13604)));
evalcond[2]=((((-1.0)*x13609*x13610))+(((-1.0)*x13606*x13608))+(((-1.0)*x13606*x13607))+(((-1.0)*x13609*x13611)));
evalcond[3]=((0.16132)+(((0.03431)*x13605))+(((-1.0)*(1.0)*pz))+(((0.03431)*x13604)));
evalcond[4]=((((-1.0)*x13606*x13611))+(((-1.0)*x13606*x13610))+x13612+x13613);
evalcond[5]=((0.00337)+(((-1.0)*py*x13609))+((x13611*x13615))+((x13607*x13614))+((x13610*x13615))+(((0.00036)*cj6))+((x13608*x13614))+(((-1.0)*px*x13606)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x13613))+(((-0.03431)*x13612))+((x13610*x13614))+(((-1.0)*py*x13606))+(((0.00036)*sj6))+((x13611*x13614)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x13616=((1.0)*cj4);
IkReal x13617=((((-1.0)*r10*sj9*x13616))+((cj9*r01*sj4))+(((-1.0)*cj9*r11*x13616))+((r00*sj4*sj9)));
j8eval[0]=x13617;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x13617);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x13618=((1.0)*cj4);
IkReal x13619=((1.0)*sj9);
IkReal x13620=((((-1.0)*r10*sj4*x13619))+(((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*r00*sj9*x13618))+(((-1.0)*cj9*r01*x13618)));
j8eval[0]=x13620;
j8eval[1]=IKsign(x13620);
j8eval[2]=((IKabs((((cj6*cj9*r20))+(((-1.0)*cj6*r21*x13619)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x13621=(r21*sj4);
IkReal x13622=(r01*x13621);
IkReal x13623=((1.0)*cj4);
IkReal x13624=(r11*r21);
IkReal x13625=(r21*sj9);
IkReal x13626=(cj9*r20*sj9);
IkReal x13627=cj9*cj9;
IkReal x13628=(r20*x13627);
IkReal x13629=(((cj4*cj9*r10*x13625))+(((-1.0)*cj9*r00*sj9*x13621))+(((-1.0)*x13623*x13624))+(((-1.0)*cj4*r10*x13628))+((r00*sj4*x13628))+(((-1.0)*r12*r22*x13623))+((cj4*x13624*x13627))+x13622+((cj4*r11*x13626))+((r02*r22*sj4))+(((-1.0)*x13622*x13627))+(((-1.0)*r01*sj4*x13626)));
j8eval[0]=x13629;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*sj6*x13625))+((sj6*((cj9*r20))))))));
j8eval[2]=IKsign(x13629);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13630=(cj9*r21);
IkReal x13631=(r20*sj9);
IkReal x13632=((1.0)*cj4);
IkReal x13633=(cj9*r01);
IkReal x13634=(r00*sj9);
IkReal x13635=((1.0)*sj4);
IkReal x13636=(cj9*r11);
IkReal x13637=(r10*sj9);
IkReal x13638=(sj4*x13633);
IkReal x13639=(sj4*x13634);
IkReal x13640=((0.03431)*cj4);
IkReal x13641=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x13630))+(((-1.0)*x13631)));
evalcond[2]=((((-1.0)*x13635*x13636))+(((-1.0)*x13632*x13634))+(((-1.0)*x13632*x13633))+(((-1.0)*x13635*x13637)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x13631))+(((0.03431)*x13630)));
evalcond[4]=(x13639+x13638+(((-1.0)*x13632*x13637))+(((-1.0)*x13632*x13636)));
evalcond[5]=((0.00373)+((x13636*x13641))+((x13634*x13640))+(((-1.0)*py*x13635))+(((-1.0)*px*x13632))+((x13637*x13641))+((x13633*x13640)));
evalcond[6]=(((px*sj4))+((x13636*x13640))+(((-0.03431)*x13638))+((x13637*x13640))+(((-0.03431)*x13639))+(((-1.0)*py*x13632)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x13642=((1.0)*cj9);
IkReal x13643=((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x13642))+((r00*sj4*sj9)));
j8eval[0]=x13643;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x13642)))))+(IKabs(r22)));
j8eval[2]=IKsign(x13643);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x13644=((1.0)*cj9);
IkReal x13645=((1.0)*sj9);
IkReal x13646=((((-1.0)*r11*sj4*x13644))+(((-1.0)*cj4*r01*x13644))+(((-1.0)*cj4*r00*x13645))+(((-1.0)*r10*sj4*x13645)));
j8eval[0]=x13646;
j8eval[1]=((IKabs(((((-1.0)*r21*x13645))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x13646);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x13647=((1.0)*r21);
IkReal x13648=(cj4*r01);
IkReal x13649=((1.0)*r22);
IkReal x13650=(r11*sj4);
IkReal x13651=(cj4*r00);
IkReal x13652=(cj9*r21*sj9);
IkReal x13653=(cj9*r20*sj9);
IkReal x13654=(r10*sj4);
IkReal x13655=cj9*cj9;
IkReal x13656=(r21*x13655);
IkReal x13657=((1.0)*r20*x13655);
IkReal x13658=((((-1.0)*cj4*r02*x13649))+(((-1.0)*x13651*x13657))+(((-1.0)*x13647*x13648))+((x13650*x13656))+(((-1.0)*r12*sj4*x13649))+((x13648*x13653))+(((-1.0)*x13647*x13650))+((x13651*x13652))+((x13652*x13654))+(((-1.0)*x13654*x13657))+((x13650*x13653))+((x13648*x13656)));
j8eval[0]=x13658;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*sj9*x13647)))))+(IKabs(r22)));
j8eval[2]=IKsign(x13658);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13659=((1.0)*r21);
IkReal x13660=(cj4*r01);
IkReal x13661=((1.0)*r22);
IkReal x13662=(r11*sj4);
IkReal x13663=(cj4*r00);
IkReal x13664=(cj9*r21*sj9);
IkReal x13665=(cj9*r20*sj9);
IkReal x13666=(r10*sj4);
IkReal x13667=cj9*cj9;
IkReal x13668=(r21*x13667);
IkReal x13669=((1.0)*r20*x13667);
CheckValue<IkReal> x13670=IKPowWithIntegerCheck(IKsign((((x13664*x13666))+((x13663*x13664))+(((-1.0)*x13659*x13660))+(((-1.0)*cj4*r02*x13661))+((x13660*x13665))+((x13662*x13665))+(((-1.0)*x13659*x13662))+(((-1.0)*r12*sj4*x13661))+(((-1.0)*x13663*x13669))+((x13662*x13668))+(((-1.0)*x13666*x13669))+((x13660*x13668)))),-1);
if(!x13670.valid){
continue;
}
CheckValue<IkReal> x13671 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x13659))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13671.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13670.value)))+(x13671.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13672=IKcos(j8);
IkReal x13673=IKsin(j8);
IkReal x13674=(r21*sj9);
IkReal x13675=(cj9*r20);
IkReal x13676=((1.0)*x13673);
IkReal x13677=((1.0)*x13672);
IkReal x13678=(cj4*x13672);
IkReal x13679=(r12*sj4);
IkReal x13680=(r01*sj9);
IkReal x13681=(cj4*x13673);
IkReal x13682=(r11*sj4*sj9);
IkReal x13683=(cj9*r00);
IkReal x13684=((1.0)*cj4*x13673);
IkReal x13685=(cj9*r10*sj4);
IkReal x13686=(r02*sj4);
IkReal x13687=(r11*sj9);
IkReal x13688=(cj9*r00*sj4);
IkReal x13689=(cj9*r10);
IkReal x13690=((1.0)*cj4*x13672);
IkReal x13691=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x13675*x13676))+((r22*x13672))+((x13673*x13674)));
evalcond[1]=((((-1.0)*x13675*x13677))+((x13672*x13674))+(((-1.0)*r22*x13676)));
evalcond[2]=(((r02*x13678))+((x13673*x13682))+(((-1.0)*x13683*x13684))+((x13672*x13679))+((x13680*x13681))+(((-1.0)*x13676*x13685)));
evalcond[3]=((((-1.0)*r12*x13684))+(((-1.0)*x13689*x13690))+((x13673*x13686))+(((-1.0)*x13677*x13691))+((x13672*x13688))+((x13678*x13687)));
evalcond[4]=((1.0)+(((-1.0)*x13684*x13689))+((x13673*x13688))+(((-1.0)*x13676*x13691))+(((-1.0)*x13677*x13686))+((r12*x13678))+((x13681*x13687)));
evalcond[5]=((-1.0)+(((-1.0)*x13676*x13679))+(((-1.0)*x13683*x13690))+(((-1.0)*x13677*x13685))+(((-1.0)*r02*x13684))+((x13678*x13680))+((x13672*x13682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13692=((1.0)*sj9);
IkReal x13693=((1.0)*cj9);
CheckValue<IkReal> x13694 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x13692))),IKFAST_ATAN2_MAGTHRESH);
if(!x13694.valid){
continue;
}
CheckValue<IkReal> x13695=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x13693))+(((-1.0)*cj4*r00*x13692))+(((-1.0)*cj4*r01*x13693))+(((-1.0)*r10*sj4*x13692)))),-1);
if(!x13695.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13694.value)+(((1.5707963267949)*(x13695.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13696=IKcos(j8);
IkReal x13697=IKsin(j8);
IkReal x13698=(r21*sj9);
IkReal x13699=(cj9*r20);
IkReal x13700=((1.0)*x13697);
IkReal x13701=((1.0)*x13696);
IkReal x13702=(cj4*x13696);
IkReal x13703=(r12*sj4);
IkReal x13704=(r01*sj9);
IkReal x13705=(cj4*x13697);
IkReal x13706=(r11*sj4*sj9);
IkReal x13707=(cj9*r00);
IkReal x13708=((1.0)*cj4*x13697);
IkReal x13709=(cj9*r10*sj4);
IkReal x13710=(r02*sj4);
IkReal x13711=(r11*sj9);
IkReal x13712=(cj9*r00*sj4);
IkReal x13713=(cj9*r10);
IkReal x13714=((1.0)*cj4*x13696);
IkReal x13715=(r01*sj4*sj9);
evalcond[0]=(((x13697*x13698))+((r22*x13696))+(((-1.0)*x13699*x13700)));
evalcond[1]=((((-1.0)*r22*x13700))+((x13696*x13698))+(((-1.0)*x13699*x13701)));
evalcond[2]=(((x13704*x13705))+((r02*x13702))+((x13697*x13706))+(((-1.0)*x13707*x13708))+(((-1.0)*x13700*x13709))+((x13696*x13703)));
evalcond[3]=(((x13702*x13711))+(((-1.0)*x13701*x13715))+(((-1.0)*x13713*x13714))+((x13697*x13710))+(((-1.0)*r12*x13708))+((x13696*x13712)));
evalcond[4]=((1.0)+(((-1.0)*x13708*x13713))+((x13697*x13712))+(((-1.0)*x13700*x13715))+((r12*x13702))+((x13705*x13711))+(((-1.0)*x13701*x13710)));
evalcond[5]=((-1.0)+(((-1.0)*x13700*x13703))+((x13702*x13704))+(((-1.0)*r02*x13708))+(((-1.0)*x13701*x13709))+(((-1.0)*x13707*x13714))+((x13696*x13706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13716=((1.0)*cj9);
CheckValue<IkReal> x13717 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x13716)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x13717.valid){
continue;
}
CheckValue<IkReal> x13718=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x13716))+((r00*sj4*sj9)))),-1);
if(!x13718.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13717.value)+(((1.5707963267949)*(x13718.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13719=IKcos(j8);
IkReal x13720=IKsin(j8);
IkReal x13721=(r21*sj9);
IkReal x13722=(cj9*r20);
IkReal x13723=((1.0)*x13720);
IkReal x13724=((1.0)*x13719);
IkReal x13725=(cj4*x13719);
IkReal x13726=(r12*sj4);
IkReal x13727=(r01*sj9);
IkReal x13728=(cj4*x13720);
IkReal x13729=(r11*sj4*sj9);
IkReal x13730=(cj9*r00);
IkReal x13731=((1.0)*cj4*x13720);
IkReal x13732=(cj9*r10*sj4);
IkReal x13733=(r02*sj4);
IkReal x13734=(r11*sj9);
IkReal x13735=(cj9*r00*sj4);
IkReal x13736=(cj9*r10);
IkReal x13737=((1.0)*cj4*x13719);
IkReal x13738=(r01*sj4*sj9);
evalcond[0]=(((x13720*x13721))+(((-1.0)*x13722*x13723))+((r22*x13719)));
evalcond[1]=((((-1.0)*x13722*x13724))+((x13719*x13721))+(((-1.0)*r22*x13723)));
evalcond[2]=(((r02*x13725))+(((-1.0)*x13730*x13731))+((x13727*x13728))+(((-1.0)*x13723*x13732))+((x13720*x13729))+((x13719*x13726)));
evalcond[3]=(((x13719*x13735))+(((-1.0)*r12*x13731))+((x13725*x13734))+(((-1.0)*x13724*x13738))+(((-1.0)*x13736*x13737))+((x13720*x13733)));
evalcond[4]=((1.0)+((x13728*x13734))+((r12*x13725))+(((-1.0)*x13723*x13738))+(((-1.0)*x13724*x13733))+((x13720*x13735))+(((-1.0)*x13731*x13736)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x13731))+(((-1.0)*x13730*x13737))+(((-1.0)*x13723*x13726))+((x13719*x13729))+(((-1.0)*x13724*x13732))+((x13725*x13727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13739=(cj9*r21);
IkReal x13740=(r20*sj9);
IkReal x13741=((1.0)*cj4);
IkReal x13742=(cj9*r01);
IkReal x13743=(r00*sj9);
IkReal x13744=((1.0)*sj4);
IkReal x13745=(cj9*r11);
IkReal x13746=(r10*sj9);
IkReal x13747=(sj4*x13742);
IkReal x13748=(sj4*x13743);
IkReal x13749=((0.03431)*cj4);
IkReal x13750=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x13739))+(((-1.0)*x13740)));
evalcond[2]=((((-1.0)*x13741*x13743))+(((-1.0)*x13741*x13742))+(((-1.0)*x13744*x13746))+(((-1.0)*x13744*x13745)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x13740))+(((0.03431)*x13739)));
evalcond[4]=((((-1.0)*x13741*x13746))+x13748+x13747+(((-1.0)*x13741*x13745)));
evalcond[5]=((0.00301)+((x13745*x13750))+((x13746*x13750))+(((-1.0)*px*x13741))+(((-1.0)*py*x13744))+((x13742*x13749))+((x13743*x13749)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x13747))+(((-0.03431)*x13748))+(((-1.0)*py*x13741))+((x13746*x13749))+((x13745*x13749)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x13751=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x13751;
j8eval[1]=IKsign(x13751);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x13752=((1.0)*sj9);
IkReal x13753=(((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9))+(((-1.0)*cj4*r10*x13752)));
j8eval[0]=x13753;
j8eval[1]=IKsign(x13753);
j8eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x13752))+((cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x13754=(cj4*r01);
IkReal x13755=(r21*x13754);
IkReal x13756=(r11*sj4);
IkReal x13757=(r21*x13756);
IkReal x13758=(cj4*r00);
IkReal x13759=cj9*cj9;
IkReal x13760=(r20*x13759);
IkReal x13761=(r10*sj4);
IkReal x13762=((1.0)*cj9*r21*sj9);
IkReal x13763=((1.0)*cj9*r20*sj9);
IkReal x13764=((1.0)*x13759);
IkReal x13765=((((-1.0)*x13755*x13764))+(((-1.0)*x13757*x13764))+((x13758*x13760))+x13755+x13757+((r12*r22*sj4))+(((-1.0)*x13754*x13763))+(((-1.0)*x13756*x13763))+((cj4*r02*r22))+(((-1.0)*x13758*x13762))+(((-1.0)*x13761*x13762))+((x13760*x13761)));
j8eval[0]=x13765;
j8eval[1]=IKsign(x13765);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13766=(cj4*r01);
IkReal x13767=(r21*x13766);
IkReal x13768=(r11*sj4);
IkReal x13769=(r21*x13768);
IkReal x13770=(cj4*r00);
IkReal x13771=cj9*cj9;
IkReal x13772=(r20*x13771);
IkReal x13773=(r10*sj4);
IkReal x13774=((1.0)*cj9*r21*sj9);
IkReal x13775=((1.0)*cj9*r20*sj9);
IkReal x13776=((1.0)*x13771);
CheckValue<IkReal> x13777=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13770*x13774))+((x13772*x13773))+(((-1.0)*x13766*x13775))+(((-1.0)*x13767*x13776))+((x13770*x13772))+((r12*r22*sj4))+((cj4*r02*r22))+(((-1.0)*x13773*x13774))+(((-1.0)*x13769*x13776))+x13767+x13769+(((-1.0)*x13768*x13775)))),-1);
if(!x13777.valid){
continue;
}
CheckValue<IkReal> x13778 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x13778.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13777.value)))+(x13778.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13779=IKcos(j8);
IkReal x13780=IKsin(j8);
IkReal x13781=(r21*sj9);
IkReal x13782=(cj9*r20);
IkReal x13783=((1.0)*x13780);
IkReal x13784=((1.0)*x13779);
IkReal x13785=(cj4*x13779);
IkReal x13786=(r12*sj4);
IkReal x13787=(r01*sj9);
IkReal x13788=(cj4*x13780);
IkReal x13789=(r11*sj4*sj9);
IkReal x13790=(cj9*r00);
IkReal x13791=((1.0)*cj4*x13780);
IkReal x13792=(cj9*r10*sj4);
IkReal x13793=(r02*sj4);
IkReal x13794=(r11*sj9);
IkReal x13795=(cj9*r00*sj4);
IkReal x13796=(cj9*r10);
IkReal x13797=((1.0)*cj4*x13779);
IkReal x13798=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x13782*x13783))+((x13780*x13781))+((r22*x13779)));
evalcond[1]=(((x13779*x13781))+(((-1.0)*x13782*x13784))+(((-1.0)*r22*x13783)));
evalcond[2]=((((-1.0)*x13783*x13792))+((x13787*x13788))+((x13779*x13786))+((x13780*x13789))+(((-1.0)*x13790*x13791))+((r02*x13785)));
evalcond[3]=(((x13785*x13794))+(((-1.0)*x13796*x13797))+(((-1.0)*x13784*x13798))+((x13780*x13793))+(((-1.0)*r12*x13791))+((x13779*x13795)));
evalcond[4]=((-1.0)+(((-1.0)*x13791*x13796))+((x13780*x13795))+((x13788*x13794))+((r12*x13785))+(((-1.0)*x13784*x13793))+(((-1.0)*x13783*x13798)));
evalcond[5]=((1.0)+(((-1.0)*x13783*x13786))+(((-1.0)*x13784*x13792))+(((-1.0)*r02*x13791))+((x13785*x13787))+(((-1.0)*x13790*x13797))+((x13779*x13789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13799=((1.0)*sj9);
CheckValue<IkReal> x13800 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x13799))+((cj9*r20)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x13800.valid){
continue;
}
CheckValue<IkReal> x13801=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x13799))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x13801.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13800.value)+(((1.5707963267949)*(x13801.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13802=IKcos(j8);
IkReal x13803=IKsin(j8);
IkReal x13804=(r21*sj9);
IkReal x13805=(cj9*r20);
IkReal x13806=((1.0)*x13803);
IkReal x13807=((1.0)*x13802);
IkReal x13808=(cj4*x13802);
IkReal x13809=(r12*sj4);
IkReal x13810=(r01*sj9);
IkReal x13811=(cj4*x13803);
IkReal x13812=(r11*sj4*sj9);
IkReal x13813=(cj9*r00);
IkReal x13814=((1.0)*cj4*x13803);
IkReal x13815=(cj9*r10*sj4);
IkReal x13816=(r02*sj4);
IkReal x13817=(r11*sj9);
IkReal x13818=(cj9*r00*sj4);
IkReal x13819=(cj9*r10);
IkReal x13820=((1.0)*cj4*x13802);
IkReal x13821=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x13805*x13806))+((x13803*x13804))+((r22*x13802)));
evalcond[1]=((((-1.0)*x13805*x13807))+((x13802*x13804))+(((-1.0)*r22*x13806)));
evalcond[2]=((((-1.0)*x13806*x13815))+((x13802*x13809))+(((-1.0)*x13813*x13814))+((x13803*x13812))+((r02*x13808))+((x13810*x13811)));
evalcond[3]=((((-1.0)*r12*x13814))+((x13802*x13818))+((x13803*x13816))+((x13808*x13817))+(((-1.0)*x13819*x13820))+(((-1.0)*x13807*x13821)));
evalcond[4]=((-1.0)+(((-1.0)*x13807*x13816))+((r12*x13808))+((x13811*x13817))+((x13803*x13818))+(((-1.0)*x13806*x13821))+(((-1.0)*x13814*x13819)));
evalcond[5]=((1.0)+(((-1.0)*x13806*x13809))+((x13802*x13812))+((x13808*x13810))+(((-1.0)*x13813*x13820))+(((-1.0)*x13807*x13815))+(((-1.0)*r02*x13814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13822=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x13822.valid){
continue;
}
CheckValue<IkReal> x13823 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x13823.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13822.value)))+(x13823.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13824=IKcos(j8);
IkReal x13825=IKsin(j8);
IkReal x13826=(r21*sj9);
IkReal x13827=(cj9*r20);
IkReal x13828=((1.0)*x13825);
IkReal x13829=((1.0)*x13824);
IkReal x13830=(cj4*x13824);
IkReal x13831=(r12*sj4);
IkReal x13832=(r01*sj9);
IkReal x13833=(cj4*x13825);
IkReal x13834=(r11*sj4*sj9);
IkReal x13835=(cj9*r00);
IkReal x13836=((1.0)*cj4*x13825);
IkReal x13837=(cj9*r10*sj4);
IkReal x13838=(r02*sj4);
IkReal x13839=(r11*sj9);
IkReal x13840=(cj9*r00*sj4);
IkReal x13841=(cj9*r10);
IkReal x13842=((1.0)*cj4*x13824);
IkReal x13843=(r01*sj4*sj9);
evalcond[0]=(((x13825*x13826))+((r22*x13824))+(((-1.0)*x13827*x13828)));
evalcond[1]=((((-1.0)*r22*x13828))+(((-1.0)*x13827*x13829))+((x13824*x13826)));
evalcond[2]=(((r02*x13830))+((x13824*x13831))+(((-1.0)*x13835*x13836))+((x13832*x13833))+((x13825*x13834))+(((-1.0)*x13828*x13837)));
evalcond[3]=((((-1.0)*r12*x13836))+((x13830*x13839))+(((-1.0)*x13829*x13843))+((x13824*x13840))+(((-1.0)*x13841*x13842))+((x13825*x13838)));
evalcond[4]=((-1.0)+((x13833*x13839))+((r12*x13830))+(((-1.0)*x13828*x13843))+(((-1.0)*x13836*x13841))+(((-1.0)*x13829*x13838))+((x13825*x13840)));
evalcond[5]=((1.0)+((x13830*x13832))+(((-1.0)*x13829*x13837))+(((-1.0)*r02*x13836))+(((-1.0)*x13835*x13842))+(((-1.0)*x13828*x13831))+((x13824*x13834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13844=(cj9*r21);
IkReal x13845=(r20*sj9);
IkReal x13846=((1.0)*cj4);
IkReal x13847=(cj9*r01);
IkReal x13848=(r00*sj9);
IkReal x13849=((1.0)*sj4);
IkReal x13850=(cj9*r11);
IkReal x13851=(r10*sj9);
IkReal x13852=(sj4*x13847);
IkReal x13853=(sj4*x13848);
IkReal x13854=((0.03431)*cj4);
IkReal x13855=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x13844))+(((-1.0)*x13845)));
evalcond[2]=((((-1.0)*x13846*x13848))+(((-1.0)*x13846*x13847))+(((-1.0)*x13849*x13850))+(((-1.0)*x13849*x13851)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x13845))+(((0.03431)*x13844)));
evalcond[4]=((((-1.0)*x13846*x13850))+x13853+x13852+(((-1.0)*x13846*x13851)));
evalcond[5]=((0.00337)+((x13850*x13855))+((x13851*x13855))+(((-1.0)*px*x13846))+((x13848*x13854))+((x13847*x13854))+(((-1.0)*py*x13849)));
evalcond[6]=((0.00036)+((px*sj4))+((x13851*x13854))+((x13850*x13854))+(((-0.03431)*x13852))+(((-0.03431)*x13853))+(((-1.0)*py*x13846)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x13856=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x13856;
j8eval[1]=IKsign(x13856);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x13857=((1.0)*sj9);
IkReal x13858=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x13857))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x13858;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*r21*x13857)))))+(IKabs(r22)));
j8eval[2]=IKsign(x13858);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x13859=(r01*sj4);
IkReal x13860=((1.0)*r21);
IkReal x13861=(cj4*r11);
IkReal x13862=(cj9*r20*sj9);
IkReal x13863=cj9*cj9;
IkReal x13864=(r00*sj4);
IkReal x13865=(r20*x13863);
IkReal x13866=((((-1.0)*cj4*r10*x13865))+(((-1.0)*cj9*r21*sj9*x13864))+((x13864*x13865))+((x13861*x13862))+(((-1.0)*r21*x13859*x13863))+(((-1.0)*r01*sj4*x13862))+(((-1.0)*x13860*x13861))+((r02*r22*sj4))+((r21*x13859))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+((r21*x13861*x13863)));
j8eval[0]=x13866;
j8eval[1]=IKsign(x13866);
j8eval[2]=((IKabs(((((-1.0)*sj9*x13860))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13867=((1.0)*r21);
IkReal x13868=(r01*sj4);
IkReal x13869=(cj4*r11);
IkReal x13870=(cj9*r20*sj9);
IkReal x13871=cj9*cj9;
IkReal x13872=(r00*sj4);
IkReal x13873=(r20*x13871);
CheckValue<IkReal> x13874=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x13873))+((r21*x13869*x13871))+((r21*x13868))+(((-1.0)*cj9*r21*sj9*x13872))+(((-1.0)*r01*sj4*x13870))+(((-1.0)*x13867*x13869))+((x13869*x13870))+((r02*r22*sj4))+(((-1.0)*r21*x13868*x13871))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+((x13872*x13873)))),-1);
if(!x13874.valid){
continue;
}
CheckValue<IkReal> x13875 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x13867))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13875.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13874.value)))+(x13875.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13876=IKcos(j8);
IkReal x13877=IKsin(j8);
IkReal x13878=(r21*sj9);
IkReal x13879=(cj9*r20);
IkReal x13880=((1.0)*x13877);
IkReal x13881=((1.0)*x13876);
IkReal x13882=(cj4*x13876);
IkReal x13883=(r12*sj4);
IkReal x13884=(r01*sj9);
IkReal x13885=(cj4*x13877);
IkReal x13886=(r11*sj4*sj9);
IkReal x13887=(cj9*r00);
IkReal x13888=((1.0)*cj4*x13877);
IkReal x13889=(cj9*r10*sj4);
IkReal x13890=(r02*sj4);
IkReal x13891=(r11*sj9);
IkReal x13892=(cj9*r00*sj4);
IkReal x13893=(cj9*r10);
IkReal x13894=(r01*sj4*sj9);
IkReal x13895=((1.0)*cj4*x13876);
evalcond[0]=((((-1.0)*x13879*x13880))+((r22*x13876))+((x13877*x13878)));
evalcond[1]=((((-1.0)*x13879*x13881))+(((-1.0)*r22*x13880))+((x13876*x13878)));
evalcond[2]=((-1.0)+(((-1.0)*x13880*x13889))+((x13877*x13886))+((r02*x13882))+((x13876*x13883))+((x13884*x13885))+(((-1.0)*x13887*x13888)));
evalcond[3]=((((-1.0)*x13881*x13890))+(((-1.0)*x13880*x13894))+((r12*x13882))+((x13885*x13891))+((x13877*x13892))+(((-1.0)*x13888*x13893)));
evalcond[4]=((((-1.0)*x13881*x13889))+(((-1.0)*r02*x13888))+(((-1.0)*x13887*x13895))+((x13876*x13886))+((x13882*x13884))+(((-1.0)*x13880*x13883)));
evalcond[5]=((-1.0)+((x13876*x13892))+((x13882*x13891))+(((-1.0)*x13881*x13894))+(((-1.0)*r12*x13888))+((x13877*x13890))+(((-1.0)*x13893*x13895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13896=((1.0)*sj9);
CheckValue<IkReal> x13897 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x13896))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13897.valid){
continue;
}
CheckValue<IkReal> x13898=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x13896))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x13898.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13897.value)+(((1.5707963267949)*(x13898.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13899=IKcos(j8);
IkReal x13900=IKsin(j8);
IkReal x13901=(r21*sj9);
IkReal x13902=(cj9*r20);
IkReal x13903=((1.0)*x13900);
IkReal x13904=((1.0)*x13899);
IkReal x13905=(cj4*x13899);
IkReal x13906=(r12*sj4);
IkReal x13907=(r01*sj9);
IkReal x13908=(cj4*x13900);
IkReal x13909=(r11*sj4*sj9);
IkReal x13910=(cj9*r00);
IkReal x13911=((1.0)*cj4*x13900);
IkReal x13912=(cj9*r10*sj4);
IkReal x13913=(r02*sj4);
IkReal x13914=(r11*sj9);
IkReal x13915=(cj9*r00*sj4);
IkReal x13916=(cj9*r10);
IkReal x13917=(r01*sj4*sj9);
IkReal x13918=((1.0)*cj4*x13899);
evalcond[0]=((((-1.0)*x13902*x13903))+((r22*x13899))+((x13900*x13901)));
evalcond[1]=((((-1.0)*r22*x13903))+(((-1.0)*x13902*x13904))+((x13899*x13901)));
evalcond[2]=((-1.0)+(((-1.0)*x13903*x13912))+((r02*x13905))+((x13899*x13906))+((x13907*x13908))+((x13900*x13909))+(((-1.0)*x13910*x13911)));
evalcond[3]=(((x13900*x13915))+(((-1.0)*x13911*x13916))+(((-1.0)*x13903*x13917))+((r12*x13905))+((x13908*x13914))+(((-1.0)*x13904*x13913)));
evalcond[4]=(((x13899*x13909))+(((-1.0)*r02*x13911))+(((-1.0)*x13910*x13918))+((x13905*x13907))+(((-1.0)*x13903*x13906))+(((-1.0)*x13904*x13912)));
evalcond[5]=((-1.0)+(((-1.0)*x13904*x13917))+(((-1.0)*r12*x13911))+((x13905*x13914))+((x13899*x13915))+((x13900*x13913))+(((-1.0)*x13916*x13918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13919 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x13919.valid){
continue;
}
CheckValue<IkReal> x13920=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x13920.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13919.value)+(((1.5707963267949)*(x13920.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13921=IKcos(j8);
IkReal x13922=IKsin(j8);
IkReal x13923=(r21*sj9);
IkReal x13924=(cj9*r20);
IkReal x13925=((1.0)*x13922);
IkReal x13926=((1.0)*x13921);
IkReal x13927=(cj4*x13921);
IkReal x13928=(r12*sj4);
IkReal x13929=(r01*sj9);
IkReal x13930=(cj4*x13922);
IkReal x13931=(r11*sj4*sj9);
IkReal x13932=(cj9*r00);
IkReal x13933=((1.0)*cj4*x13922);
IkReal x13934=(cj9*r10*sj4);
IkReal x13935=(r02*sj4);
IkReal x13936=(r11*sj9);
IkReal x13937=(cj9*r00*sj4);
IkReal x13938=(cj9*r10);
IkReal x13939=(r01*sj4*sj9);
IkReal x13940=((1.0)*cj4*x13921);
evalcond[0]=((((-1.0)*x13924*x13925))+((x13922*x13923))+((r22*x13921)));
evalcond[1]=(((x13921*x13923))+(((-1.0)*x13924*x13926))+(((-1.0)*r22*x13925)));
evalcond[2]=((-1.0)+(((-1.0)*x13932*x13933))+((r02*x13927))+((x13921*x13928))+((x13929*x13930))+((x13922*x13931))+(((-1.0)*x13925*x13934)));
evalcond[3]=(((x13930*x13936))+((r12*x13927))+(((-1.0)*x13933*x13938))+((x13922*x13937))+(((-1.0)*x13925*x13939))+(((-1.0)*x13926*x13935)));
evalcond[4]=((((-1.0)*x13925*x13928))+(((-1.0)*x13932*x13940))+(((-1.0)*x13926*x13934))+((x13927*x13929))+((x13921*x13931))+(((-1.0)*r02*x13933)));
evalcond[5]=((-1.0)+(((-1.0)*x13926*x13939))+(((-1.0)*r12*x13933))+((x13922*x13935))+(((-1.0)*x13938*x13940))+((x13921*x13937))+((x13927*x13936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13941=(cj9*r21);
IkReal x13942=(r20*sj9);
IkReal x13943=((1.0)*cj4);
IkReal x13944=(cj9*r01);
IkReal x13945=(r00*sj9);
IkReal x13946=((1.0)*sj4);
IkReal x13947=(cj9*r11);
IkReal x13948=(r10*sj9);
IkReal x13949=(sj4*x13944);
IkReal x13950=(sj4*x13945);
IkReal x13951=((0.03431)*cj4);
IkReal x13952=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x13942))+(((-1.0)*x13941)));
evalcond[2]=((((-1.0)*x13943*x13945))+(((-1.0)*x13946*x13948))+(((-1.0)*x13943*x13944))+(((-1.0)*x13946*x13947)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x13942))+(((0.03431)*x13941)));
evalcond[4]=(x13950+(((-1.0)*x13943*x13947))+x13949+(((-1.0)*x13943*x13948)));
evalcond[5]=((0.00337)+(((-1.0)*px*x13943))+((x13945*x13951))+((x13944*x13951))+(((-1.0)*py*x13946))+((x13948*x13952))+((x13947*x13952)));
evalcond[6]=((-0.00036)+((px*sj4))+(((-0.03431)*x13950))+((x13948*x13951))+((x13947*x13951))+(((-1.0)*py*x13943))+(((-0.03431)*x13949)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x13953=((1.0)*sj9);
IkReal x13954=(((cj4*cj9*r11))+(((-1.0)*r00*sj4*x13953))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)));
j8eval[0]=x13954;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x13953))+((cj9*r20))))));
j8eval[2]=IKsign(x13954);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x13955=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x13955;
j8eval[1]=IKsign(x13955);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x13956=(cj4*r11);
IkReal x13957=((1.0)*r21);
IkReal x13958=(r01*sj4);
IkReal x13959=(cj9*r20*sj9);
IkReal x13960=(cj4*r10);
IkReal x13961=cj9*cj9;
IkReal x13962=(r20*x13961);
IkReal x13963=((((-1.0)*cj4*r11*x13959))+(((-1.0)*cj9*r21*sj9*x13960))+((cj9*r00*r21*sj4*sj9))+(((-1.0)*r21*x13956*x13961))+(((-1.0)*r00*sj4*x13962))+((cj4*r12*r22))+((x13960*x13962))+((x13958*x13959))+((r21*x13956))+(((-1.0)*r02*r22*sj4))+(((-1.0)*x13957*x13958))+((r21*x13958*x13961)));
j8eval[0]=x13963;
j8eval[1]=IKsign(x13963);
j8eval[2]=((IKabs(((((-1.0)*sj9*x13957))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13964=((1.0)*r21);
IkReal x13965=(cj4*r11);
IkReal x13966=(r01*sj4);
IkReal x13967=(cj9*r20*sj9);
IkReal x13968=(cj4*r10);
IkReal x13969=cj9*cj9;
IkReal x13970=(r20*x13969);
CheckValue<IkReal> x13971 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x13964))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x13971.valid){
continue;
}
CheckValue<IkReal> x13972=IKPowWithIntegerCheck(IKsign((((x13968*x13970))+((cj9*r00*r21*sj4*sj9))+((x13966*x13967))+((cj4*r12*r22))+(((-1.0)*cj4*r11*x13967))+(((-1.0)*x13964*x13966))+(((-1.0)*r21*x13965*x13969))+(((-1.0)*r02*r22*sj4))+((r21*x13965))+(((-1.0)*r00*sj4*x13970))+(((-1.0)*cj9*r21*sj9*x13968))+((r21*x13966*x13969)))),-1);
if(!x13972.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13971.value)+(((1.5707963267949)*(x13972.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13973=IKcos(j8);
IkReal x13974=IKsin(j8);
IkReal x13975=(r21*sj9);
IkReal x13976=(cj9*r20);
IkReal x13977=((1.0)*x13974);
IkReal x13978=((1.0)*x13973);
IkReal x13979=(cj4*x13973);
IkReal x13980=(r12*sj4);
IkReal x13981=(r01*sj9);
IkReal x13982=(cj4*x13974);
IkReal x13983=(r11*sj4*sj9);
IkReal x13984=(cj9*r00);
IkReal x13985=((1.0)*cj4*x13974);
IkReal x13986=(cj9*r10*sj4);
IkReal x13987=(r02*sj4);
IkReal x13988=(r11*sj9);
IkReal x13989=(cj9*r00*sj4);
IkReal x13990=(cj9*r10);
IkReal x13991=(r01*sj4*sj9);
IkReal x13992=((1.0)*cj4*x13973);
evalcond[0]=(((x13974*x13975))+(((-1.0)*x13976*x13977))+((r22*x13973)));
evalcond[1]=((((-1.0)*r22*x13977))+(((-1.0)*x13976*x13978))+((x13973*x13975)));
evalcond[2]=((1.0)+((r02*x13979))+(((-1.0)*x13984*x13985))+((x13973*x13980))+((x13974*x13983))+(((-1.0)*x13977*x13986))+((x13981*x13982)));
evalcond[3]=((((-1.0)*x13977*x13991))+(((-1.0)*x13985*x13990))+((r12*x13979))+((x13982*x13988))+(((-1.0)*x13978*x13987))+((x13974*x13989)));
evalcond[4]=((((-1.0)*r02*x13985))+((x13979*x13981))+(((-1.0)*x13984*x13992))+((x13973*x13983))+(((-1.0)*x13977*x13980))+(((-1.0)*x13978*x13986)));
evalcond[5]=((1.0)+((x13974*x13987))+(((-1.0)*x13990*x13992))+((x13979*x13988))+(((-1.0)*x13978*x13991))+(((-1.0)*r12*x13985))+((x13973*x13989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13993 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x13993.valid){
continue;
}
CheckValue<IkReal> x13994=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x13994.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13993.value)+(((1.5707963267949)*(x13994.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13995=IKcos(j8);
IkReal x13996=IKsin(j8);
IkReal x13997=(r21*sj9);
IkReal x13998=(cj9*r20);
IkReal x13999=((1.0)*x13996);
IkReal x14000=((1.0)*x13995);
IkReal x14001=(cj4*x13995);
IkReal x14002=(r12*sj4);
IkReal x14003=(r01*sj9);
IkReal x14004=(cj4*x13996);
IkReal x14005=(r11*sj4*sj9);
IkReal x14006=(cj9*r00);
IkReal x14007=((1.0)*cj4*x13996);
IkReal x14008=(cj9*r10*sj4);
IkReal x14009=(r02*sj4);
IkReal x14010=(r11*sj9);
IkReal x14011=(cj9*r00*sj4);
IkReal x14012=(cj9*r10);
IkReal x14013=(r01*sj4*sj9);
IkReal x14014=((1.0)*cj4*x13995);
evalcond[0]=((((-1.0)*x13998*x13999))+((r22*x13995))+((x13996*x13997)));
evalcond[1]=((((-1.0)*x13998*x14000))+((x13995*x13997))+(((-1.0)*r22*x13999)));
evalcond[2]=((1.0)+((x13996*x14005))+((x14003*x14004))+((r02*x14001))+(((-1.0)*x14006*x14007))+(((-1.0)*x13999*x14008))+((x13995*x14002)));
evalcond[3]=((((-1.0)*x14007*x14012))+(((-1.0)*x13999*x14013))+(((-1.0)*x14000*x14009))+((x14004*x14010))+((x13996*x14011))+((r12*x14001)));
evalcond[4]=((((-1.0)*x13999*x14002))+(((-1.0)*x14006*x14014))+((x14001*x14003))+(((-1.0)*r02*x14007))+(((-1.0)*x14000*x14008))+((x13995*x14005)));
evalcond[5]=((1.0)+((x13995*x14011))+(((-1.0)*x14000*x14013))+((x13996*x14009))+(((-1.0)*r12*x14007))+(((-1.0)*x14012*x14014))+((x14001*x14010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14015=((1.0)*sj9);
CheckValue<IkReal> x14016 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x14015))),IKFAST_ATAN2_MAGTHRESH);
if(!x14016.valid){
continue;
}
CheckValue<IkReal> x14017=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*x14015)))),-1);
if(!x14017.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14016.value)+(((1.5707963267949)*(x14017.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14018=IKcos(j8);
IkReal x14019=IKsin(j8);
IkReal x14020=(r21*sj9);
IkReal x14021=(cj9*r20);
IkReal x14022=((1.0)*x14019);
IkReal x14023=((1.0)*x14018);
IkReal x14024=(cj4*x14018);
IkReal x14025=(r12*sj4);
IkReal x14026=(r01*sj9);
IkReal x14027=(cj4*x14019);
IkReal x14028=(r11*sj4*sj9);
IkReal x14029=(cj9*r00);
IkReal x14030=((1.0)*cj4*x14019);
IkReal x14031=(cj9*r10*sj4);
IkReal x14032=(r02*sj4);
IkReal x14033=(r11*sj9);
IkReal x14034=(cj9*r00*sj4);
IkReal x14035=(cj9*r10);
IkReal x14036=(r01*sj4*sj9);
IkReal x14037=((1.0)*cj4*x14018);
evalcond[0]=(((x14019*x14020))+(((-1.0)*x14021*x14022))+((r22*x14018)));
evalcond[1]=(((x14018*x14020))+(((-1.0)*x14021*x14023))+(((-1.0)*r22*x14022)));
evalcond[2]=((1.0)+((r02*x14024))+((x14019*x14028))+((x14026*x14027))+(((-1.0)*x14029*x14030))+((x14018*x14025))+(((-1.0)*x14022*x14031)));
evalcond[3]=(((x14019*x14034))+(((-1.0)*x14023*x14032))+(((-1.0)*x14030*x14035))+(((-1.0)*x14022*x14036))+((x14027*x14033))+((r12*x14024)));
evalcond[4]=(((x14018*x14028))+(((-1.0)*x14023*x14031))+(((-1.0)*x14022*x14025))+((x14024*x14026))+(((-1.0)*x14029*x14037))+(((-1.0)*r02*x14030)));
evalcond[5]=((1.0)+(((-1.0)*x14023*x14036))+((x14018*x14034))+(((-1.0)*x14035*x14037))+((x14019*x14032))+(((-1.0)*r12*x14030))+((x14024*x14033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14038=(r21*sj9);
IkReal x14039=(r21*sj4);
IkReal x14040=(r01*x14039);
IkReal x14041=((1.0)*cj4);
IkReal x14042=(r11*r21);
IkReal x14043=(cj9*r20*sj9);
IkReal x14044=cj9*cj9;
IkReal x14045=(r20*x14044);
CheckValue<IkReal> x14046 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*sj6*x14038))+((sj6*((cj9*r20))))),IKFAST_ATAN2_MAGTHRESH);
if(!x14046.valid){
continue;
}
CheckValue<IkReal> x14047=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14040*x14044))+x14040+((r00*sj4*x14045))+(((-1.0)*cj9*r00*sj9*x14039))+(((-1.0)*r12*r22*x14041))+((cj4*r11*x14043))+((r02*r22*sj4))+(((-1.0)*x14041*x14042))+((cj4*x14042*x14044))+(((-1.0)*cj4*r10*x14045))+(((-1.0)*r01*sj4*x14043))+((cj4*cj9*r10*x14038)))),-1);
if(!x14047.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14046.value)+(((1.5707963267949)*(x14047.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14048=IKcos(j8);
IkReal x14049=IKsin(j8);
IkReal x14050=(r21*sj9);
IkReal x14051=(cj9*r20);
IkReal x14052=((1.0)*x14049);
IkReal x14053=((1.0)*x14048);
IkReal x14054=(cj4*x14048);
IkReal x14055=(r02*sj4);
IkReal x14056=(r11*sj9);
IkReal x14057=(cj4*x14049);
IkReal x14058=(cj9*r00*sj4);
IkReal x14059=(cj9*r10);
IkReal x14060=((1.0)*cj4*x14049);
IkReal x14061=(r01*sj4*sj9);
IkReal x14062=((-1.0)*(((1.0)*sj6)));
IkReal x14063=(r12*sj4);
IkReal x14064=(r01*sj9);
IkReal x14065=(r11*sj4*sj9);
IkReal x14066=(cj9*r00);
IkReal x14067=(cj9*r10*sj4);
IkReal x14068=((1.0)*cj4*x14048);
evalcond[0]=((((-1.0)*x14051*x14052))+((x14049*x14050))+((r22*x14048)));
evalcond[1]=((((-1.0)*x14051*x14053))+((x14048*x14050))+(((-1.0)*r22*x14052)));
evalcond[2]=((((-1.0)*x14059*x14060))+(((-1.0)*x14053*x14055))+((x14056*x14057))+(((-1.0)*x14052*x14061))+cj6+((x14049*x14058))+((r12*x14054)));
evalcond[3]=(((r02*x14054))+((x14049*x14065))+((x14057*x14064))+x14062+((x14048*x14063))+(((-1.0)*x14052*x14067))+(((-1.0)*x14060*x14066)));
evalcond[4]=(((x14049*x14055))+(((-1.0)*x14053*x14061))+(((-1.0)*r12*x14060))+((x14054*x14056))+x14062+(((-1.0)*x14059*x14068))+((x14048*x14058)));
evalcond[5]=((((-1.0)*x14052*x14063))+((x14054*x14064))+(((-1.0)*(1.0)*cj6))+((x14048*x14065))+(((-1.0)*r02*x14060))+(((-1.0)*x14053*x14067))+(((-1.0)*x14066*x14068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14069=((1.0)*sj9);
IkReal x14070=((1.0)*cj4);
CheckValue<IkReal> x14071=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*cj9*r01*x14070))+(((-1.0)*r10*sj4*x14069))+(((-1.0)*r00*sj9*x14070)))),-1);
if(!x14071.valid){
continue;
}
CheckValue<IkReal> x14072 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*cj6*r21*x14069))),IKFAST_ATAN2_MAGTHRESH);
if(!x14072.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14071.value)))+(x14072.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14073=IKcos(j8);
IkReal x14074=IKsin(j8);
IkReal x14075=(r21*sj9);
IkReal x14076=(cj9*r20);
IkReal x14077=((1.0)*x14074);
IkReal x14078=((1.0)*x14073);
IkReal x14079=(cj4*x14073);
IkReal x14080=(r02*sj4);
IkReal x14081=(r11*sj9);
IkReal x14082=(cj4*x14074);
IkReal x14083=(cj9*r00*sj4);
IkReal x14084=(cj9*r10);
IkReal x14085=((1.0)*cj4*x14074);
IkReal x14086=(r01*sj4*sj9);
IkReal x14087=((-1.0)*(((1.0)*sj6)));
IkReal x14088=(r12*sj4);
IkReal x14089=(r01*sj9);
IkReal x14090=(r11*sj4*sj9);
IkReal x14091=(cj9*r00);
IkReal x14092=(cj9*r10*sj4);
IkReal x14093=((1.0)*cj4*x14073);
evalcond[0]=(((r22*x14073))+((x14074*x14075))+(((-1.0)*x14076*x14077)));
evalcond[1]=((((-1.0)*x14076*x14078))+((x14073*x14075))+(((-1.0)*r22*x14077)));
evalcond[2]=(((r12*x14079))+(((-1.0)*x14078*x14080))+((x14074*x14083))+cj6+((x14081*x14082))+(((-1.0)*x14084*x14085))+(((-1.0)*x14077*x14086)));
evalcond[3]=((((-1.0)*x14085*x14091))+((r02*x14079))+((x14073*x14088))+x14087+((x14074*x14090))+(((-1.0)*x14077*x14092))+((x14082*x14089)));
evalcond[4]=(((x14079*x14081))+(((-1.0)*x14084*x14093))+(((-1.0)*r12*x14085))+x14087+(((-1.0)*x14078*x14086))+((x14074*x14080))+((x14073*x14083)));
evalcond[5]=((((-1.0)*x14077*x14088))+(((-1.0)*(1.0)*cj6))+((x14079*x14089))+((x14073*x14090))+(((-1.0)*r02*x14085))+(((-1.0)*x14091*x14093))+(((-1.0)*x14078*x14092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14094=((1.0)*cj4);
CheckValue<IkReal> x14095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9*x14094))+((cj9*r01*sj4))+(((-1.0)*cj9*r11*x14094))+((r00*sj4*sj9)))),-1);
if(!x14095.valid){
continue;
}
CheckValue<IkReal> x14096 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x14096.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14095.value)))+(x14096.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14097=IKcos(j8);
IkReal x14098=IKsin(j8);
IkReal x14099=(r21*sj9);
IkReal x14100=(cj9*r20);
IkReal x14101=((1.0)*x14098);
IkReal x14102=((1.0)*x14097);
IkReal x14103=(cj4*x14097);
IkReal x14104=(r02*sj4);
IkReal x14105=(r11*sj9);
IkReal x14106=(cj4*x14098);
IkReal x14107=(cj9*r00*sj4);
IkReal x14108=(cj9*r10);
IkReal x14109=((1.0)*cj4*x14098);
IkReal x14110=(r01*sj4*sj9);
IkReal x14111=((-1.0)*(((1.0)*sj6)));
IkReal x14112=(r12*sj4);
IkReal x14113=(r01*sj9);
IkReal x14114=(r11*sj4*sj9);
IkReal x14115=(cj9*r00);
IkReal x14116=(cj9*r10*sj4);
IkReal x14117=((1.0)*cj4*x14097);
evalcond[0]=(((r22*x14097))+((x14098*x14099))+(((-1.0)*x14100*x14101)));
evalcond[1]=((((-1.0)*r22*x14101))+((x14097*x14099))+(((-1.0)*x14100*x14102)));
evalcond[2]=(((x14098*x14107))+(((-1.0)*x14108*x14109))+((r12*x14103))+(((-1.0)*x14101*x14110))+((x14105*x14106))+cj6+(((-1.0)*x14102*x14104)));
evalcond[3]=(((r02*x14103))+(((-1.0)*x14101*x14116))+x14111+((x14097*x14112))+((x14098*x14114))+((x14106*x14113))+(((-1.0)*x14109*x14115)));
evalcond[4]=(x14111+((x14097*x14107))+((x14103*x14105))+(((-1.0)*x14108*x14117))+(((-1.0)*x14102*x14110))+(((-1.0)*r12*x14109))+((x14098*x14104)));
evalcond[5]=((((-1.0)*x14102*x14116))+((x14103*x14113))+(((-1.0)*r02*x14109))+((x14097*x14114))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x14101*x14112))+(((-1.0)*x14115*x14117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14118=(cj9*r21);
IkReal x14119=(r20*sj9);
IkReal x14120=((1.0)*cj4);
IkReal x14121=(cj9*r01);
IkReal x14122=(r00*sj9);
IkReal x14123=((1.0)*sj4);
IkReal x14124=(cj9*r11);
IkReal x14125=(r10*sj9);
IkReal x14126=(sj4*x14121);
IkReal x14127=(sj4*x14122);
IkReal x14128=((0.03431)*cj4);
IkReal x14129=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*x14119))+(((-1.0)*x14118)));
evalcond[2]=((((-1.0)*x14123*x14124))+(((-1.0)*x14123*x14125))+(((-1.0)*x14120*x14122))+(((-1.0)*x14120*x14121)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x14118))+(((0.03431)*x14119)));
evalcond[4]=(x14127+x14126+(((-1.0)*x14120*x14124))+(((-1.0)*x14120*x14125)));
evalcond[5]=((0.00337)+((x14125*x14129))+(((0.00036)*cj6))+((x14122*x14128))+(((-1.0)*px*x14120))+((x14124*x14129))+(((-1.0)*py*x14123))+((x14121*x14128)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x14120))+((x14125*x14128))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x14126))+((x14124*x14128))+(((-0.03431)*x14127)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x14130=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x14130;
j8eval[1]=IKsign(x14130);
j8eval[2]=((IKabs((((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x14131=((1.0)*cj4);
IkReal x14132=((((-1.0)*cj9*r11*x14131))+((cj9*r01*sj4))+(((-1.0)*r10*sj9*x14131))+((r00*sj4*sj9)));
j8eval[0]=x14132;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x14132);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x14133=(r01*((cj4*r21)));
IkReal x14134=(r11*((r21*sj4)));
IkReal x14135=cj9*cj9;
IkReal x14136=(r20*x14135);
IkReal x14137=((1.0)*cj9*sj9);
IkReal x14138=((1.0)*cj9*r20*sj9);
IkReal x14139=((1.0)*x14135);
IkReal x14140=(x14134+x14133+((r10*sj4*x14136))+(((-1.0)*x14134*x14139))+((cj4*r00*x14136))+(((-1.0)*cj4*r01*x14138))+(((-1.0)*x14133*x14139))+(((-1.0)*r11*sj4*x14138))+(((-1.0)*cj4*r00*r21*x14137))+((r12*r22*sj4))+(((-1.0)*r10*r21*sj4*x14137))+((cj4*r02*r22)));
j8eval[0]=x14140;
j8eval[1]=IKsign(x14140);
j8eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj6*((cj9*r20))))+(((-1.0)*cj6*r21*sj9))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x14141=(cj9*r21);
IkReal x14142=(r20*sj9);
IkReal x14143=((1.0)*cj4);
IkReal x14144=(cj9*r01);
IkReal x14145=(r00*sj9);
IkReal x14146=((1.0)*sj4);
IkReal x14147=(cj9*r11);
IkReal x14148=(r10*sj9);
IkReal x14149=(sj4*x14144);
IkReal x14150=(sj4*x14145);
IkReal x14151=((0.03431)*cj4);
IkReal x14152=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x14142))+(((-1.0)*x14141)));
evalcond[2]=((((-1.0)*x14146*x14148))+(((-1.0)*x14146*x14147))+(((-1.0)*x14143*x14145))+(((-1.0)*x14143*x14144)));
evalcond[3]=((-0.4967)+(((0.03431)*x14141))+(((-1.0)*(1.0)*pz))+(((0.03431)*x14142)));
evalcond[4]=((((-1.0)*x14143*x14147))+x14149+x14150+(((-1.0)*x14143*x14148)));
evalcond[5]=((0.00337)+((x14144*x14151))+(((-1.0)*py*x14146))+((x14145*x14151))+(((-1.0)*px*x14143))+((x14147*x14152))+((x14148*x14152)));
evalcond[6]=((-0.00036)+((px*sj4))+(((-1.0)*py*x14143))+(((-0.03431)*x14149))+(((-0.03431)*x14150))+((x14148*x14151))+((x14147*x14151)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x14153=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x14153;
j8eval[1]=IKsign(x14153);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x14154=((1.0)*sj9);
IkReal x14155=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x14154))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x14155;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*r21*x14154)))))+(IKabs(r22)));
j8eval[2]=IKsign(x14155);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x14156=(r01*sj4);
IkReal x14157=((1.0)*r21);
IkReal x14158=(cj4*r11);
IkReal x14159=(cj9*r20*sj9);
IkReal x14160=cj9*cj9;
IkReal x14161=(r00*sj4);
IkReal x14162=(r20*x14160);
IkReal x14163=((((-1.0)*x14157*x14158))+((r21*x14156))+((x14161*x14162))+(((-1.0)*cj4*r10*x14162))+((r21*x14158*x14160))+(((-1.0)*r21*x14156*x14160))+(((-1.0)*cj9*r21*sj9*x14161))+((r02*r22*sj4))+((x14158*x14159))+(((-1.0)*cj4*r12*r22))+(((-1.0)*r01*sj4*x14159))+((cj4*cj9*r10*r21*sj9)));
j8eval[0]=x14163;
j8eval[1]=IKsign(x14163);
j8eval[2]=((IKabs(((((-1.0)*sj9*x14157))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14164=((1.0)*r21);
IkReal x14165=(r01*sj4);
IkReal x14166=(cj4*r11);
IkReal x14167=(cj9*r20*sj9);
IkReal x14168=cj9*cj9;
IkReal x14169=(r00*sj4);
IkReal x14170=(r20*x14168);
CheckValue<IkReal> x14171=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14164*x14166))+(((-1.0)*cj9*r21*sj9*x14169))+(((-1.0)*r21*x14165*x14168))+((x14169*x14170))+(((-1.0)*cj4*r10*x14170))+((r21*x14166*x14168))+((x14166*x14167))+(((-1.0)*r01*sj4*x14167))+((r21*x14165))+((r02*r22*sj4))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9)))),-1);
if(!x14171.valid){
continue;
}
CheckValue<IkReal> x14172 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*sj9*x14164))),IKFAST_ATAN2_MAGTHRESH);
if(!x14172.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14171.value)))+(x14172.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14173=IKcos(j8);
IkReal x14174=IKsin(j8);
IkReal x14175=(r21*sj9);
IkReal x14176=(cj9*r20);
IkReal x14177=((1.0)*x14174);
IkReal x14178=((1.0)*x14173);
IkReal x14179=(cj4*x14173);
IkReal x14180=(r12*sj4);
IkReal x14181=(r01*sj9);
IkReal x14182=(cj4*x14174);
IkReal x14183=(r11*sj4*sj9);
IkReal x14184=(cj9*r00);
IkReal x14185=((1.0)*cj4*x14174);
IkReal x14186=(cj9*r10*sj4);
IkReal x14187=(r02*sj4);
IkReal x14188=(r11*sj9);
IkReal x14189=(cj9*r00*sj4);
IkReal x14190=(cj9*r10);
IkReal x14191=(r01*sj4*sj9);
IkReal x14192=((1.0)*cj4*x14173);
evalcond[0]=(((x14174*x14175))+((r22*x14173))+(((-1.0)*x14176*x14177)));
evalcond[1]=(((x14173*x14175))+(((-1.0)*r22*x14177))+(((-1.0)*x14176*x14178)));
evalcond[2]=((-1.0)+((r02*x14179))+((x14174*x14183))+((x14173*x14180))+(((-1.0)*x14184*x14185))+(((-1.0)*x14177*x14186))+((x14181*x14182)));
evalcond[3]=((((-1.0)*x14185*x14190))+((x14182*x14188))+((x14174*x14189))+((r12*x14179))+(((-1.0)*x14177*x14191))+(((-1.0)*x14178*x14187)));
evalcond[4]=(((x14179*x14181))+(((-1.0)*x14184*x14192))+(((-1.0)*x14178*x14186))+(((-1.0)*x14177*x14180))+(((-1.0)*r02*x14185))+((x14173*x14183)));
evalcond[5]=((-1.0)+((x14174*x14187))+((x14179*x14188))+((x14173*x14189))+(((-1.0)*r12*x14185))+(((-1.0)*x14190*x14192))+(((-1.0)*x14178*x14191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14193=((1.0)*sj9);
CheckValue<IkReal> x14194=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x14193))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x14194.valid){
continue;
}
CheckValue<IkReal> x14195 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x14193))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x14195.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14194.value)))+(x14195.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14196=IKcos(j8);
IkReal x14197=IKsin(j8);
IkReal x14198=(r21*sj9);
IkReal x14199=(cj9*r20);
IkReal x14200=((1.0)*x14197);
IkReal x14201=((1.0)*x14196);
IkReal x14202=(cj4*x14196);
IkReal x14203=(r12*sj4);
IkReal x14204=(r01*sj9);
IkReal x14205=(cj4*x14197);
IkReal x14206=(r11*sj4*sj9);
IkReal x14207=(cj9*r00);
IkReal x14208=((1.0)*cj4*x14197);
IkReal x14209=(cj9*r10*sj4);
IkReal x14210=(r02*sj4);
IkReal x14211=(r11*sj9);
IkReal x14212=(cj9*r00*sj4);
IkReal x14213=(cj9*r10);
IkReal x14214=(r01*sj4*sj9);
IkReal x14215=((1.0)*cj4*x14196);
evalcond[0]=((((-1.0)*x14199*x14200))+((r22*x14196))+((x14197*x14198)));
evalcond[1]=(((x14196*x14198))+(((-1.0)*x14199*x14201))+(((-1.0)*r22*x14200)));
evalcond[2]=((-1.0)+((x14196*x14203))+((r02*x14202))+((x14204*x14205))+((x14197*x14206))+(((-1.0)*x14207*x14208))+(((-1.0)*x14200*x14209)));
evalcond[3]=((((-1.0)*x14208*x14213))+((r12*x14202))+((x14205*x14211))+(((-1.0)*x14201*x14210))+((x14197*x14212))+(((-1.0)*x14200*x14214)));
evalcond[4]=(((x14202*x14204))+(((-1.0)*x14201*x14209))+(((-1.0)*x14200*x14203))+(((-1.0)*x14207*x14215))+((x14196*x14206))+(((-1.0)*r02*x14208)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x14208))+((x14196*x14212))+(((-1.0)*x14201*x14214))+(((-1.0)*x14213*x14215))+((x14197*x14210))+((x14202*x14211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14216 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x14216.valid){
continue;
}
CheckValue<IkReal> x14217=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x14217.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14216.value)+(((1.5707963267949)*(x14217.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14218=IKcos(j8);
IkReal x14219=IKsin(j8);
IkReal x14220=(r21*sj9);
IkReal x14221=(cj9*r20);
IkReal x14222=((1.0)*x14219);
IkReal x14223=((1.0)*x14218);
IkReal x14224=(cj4*x14218);
IkReal x14225=(r12*sj4);
IkReal x14226=(r01*sj9);
IkReal x14227=(cj4*x14219);
IkReal x14228=(r11*sj4*sj9);
IkReal x14229=(cj9*r00);
IkReal x14230=((1.0)*cj4*x14219);
IkReal x14231=(cj9*r10*sj4);
IkReal x14232=(r02*sj4);
IkReal x14233=(r11*sj9);
IkReal x14234=(cj9*r00*sj4);
IkReal x14235=(cj9*r10);
IkReal x14236=(r01*sj4*sj9);
IkReal x14237=((1.0)*cj4*x14218);
evalcond[0]=(((r22*x14218))+(((-1.0)*x14221*x14222))+((x14219*x14220)));
evalcond[1]=(((x14218*x14220))+(((-1.0)*x14221*x14223))+(((-1.0)*r22*x14222)));
evalcond[2]=((-1.0)+(((-1.0)*x14222*x14231))+((x14219*x14228))+((x14218*x14225))+(((-1.0)*x14229*x14230))+((x14226*x14227))+((r02*x14224)));
evalcond[3]=((((-1.0)*x14222*x14236))+((x14219*x14234))+((r12*x14224))+(((-1.0)*x14223*x14232))+(((-1.0)*x14230*x14235))+((x14227*x14233)));
evalcond[4]=((((-1.0)*x14222*x14225))+(((-1.0)*x14223*x14231))+(((-1.0)*r02*x14230))+((x14218*x14228))+(((-1.0)*x14229*x14237))+((x14224*x14226)));
evalcond[5]=((-1.0)+(((-1.0)*x14235*x14237))+((x14218*x14234))+(((-1.0)*r12*x14230))+((x14224*x14233))+(((-1.0)*x14223*x14236))+((x14219*x14232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14238=(cj9*r21);
IkReal x14239=(r20*sj9);
IkReal x14240=((1.0)*cj4);
IkReal x14241=(cj9*r01);
IkReal x14242=(r00*sj9);
IkReal x14243=((1.0)*sj4);
IkReal x14244=(cj9*r11);
IkReal x14245=(r10*sj9);
IkReal x14246=(sj4*x14241);
IkReal x14247=(sj4*x14242);
IkReal x14248=((0.03431)*cj4);
IkReal x14249=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x14238))+(((-1.0)*x14239)));
evalcond[2]=((((-1.0)*x14243*x14245))+(((-1.0)*x14243*x14244))+(((-1.0)*x14240*x14241))+(((-1.0)*x14240*x14242)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x14239))+(((0.03431)*x14238)));
evalcond[4]=((((-1.0)*x14240*x14244))+(((-1.0)*x14240*x14245))+x14246+x14247);
evalcond[5]=((0.00337)+((x14245*x14249))+((x14241*x14248))+(((-1.0)*px*x14240))+(((-1.0)*py*x14243))+((x14242*x14248))+((x14244*x14249)));
evalcond[6]=((0.00036)+((px*sj4))+((x14244*x14248))+((x14245*x14248))+(((-0.03431)*x14247))+(((-0.03431)*x14246))+(((-1.0)*py*x14240)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x14250=((1.0)*sj9);
IkReal x14251=(((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*x14250)));
j8eval[0]=x14251;
j8eval[1]=((IKabs(((((-1.0)*r21*x14250))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x14251);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x14252=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x14252;
j8eval[1]=IKsign(x14252);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x14253=(cj4*r11);
IkReal x14254=((1.0)*r21);
IkReal x14255=(r01*sj4);
IkReal x14256=(cj9*r20*sj9);
IkReal x14257=(cj4*r10);
IkReal x14258=cj9*cj9;
IkReal x14259=(r20*x14258);
IkReal x14260=(((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+((r21*x14255*x14258))+((x14257*x14259))+(((-1.0)*cj9*r21*sj9*x14257))+(((-1.0)*r02*r22*sj4))+((x14255*x14256))+(((-1.0)*r21*x14253*x14258))+(((-1.0)*r00*sj4*x14259))+(((-1.0)*x14254*x14255))+(((-1.0)*cj4*r11*x14256))+((r21*x14253)));
j8eval[0]=x14260;
j8eval[1]=IKsign(x14260);
j8eval[2]=((IKabs(((((-1.0)*sj9*x14254))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14261=((1.0)*r21);
IkReal x14262=(cj4*r11);
IkReal x14263=(r01*sj4);
IkReal x14264=(cj9*r20*sj9);
IkReal x14265=(cj4*r10);
IkReal x14266=cj9*cj9;
IkReal x14267=(r20*x14266);
CheckValue<IkReal> x14268 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x14261))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x14268.valid){
continue;
}
CheckValue<IkReal> x14269=IKPowWithIntegerCheck(IKsign((((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+((r21*x14262))+(((-1.0)*r02*r22*sj4))+(((-1.0)*r00*sj4*x14267))+((x14265*x14267))+(((-1.0)*cj9*r21*sj9*x14265))+(((-1.0)*cj4*r11*x14264))+(((-1.0)*x14261*x14263))+((r21*x14263*x14266))+((x14263*x14264))+(((-1.0)*r21*x14262*x14266)))),-1);
if(!x14269.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14268.value)+(((1.5707963267949)*(x14269.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14270=IKcos(j8);
IkReal x14271=IKsin(j8);
IkReal x14272=(r21*sj9);
IkReal x14273=(cj9*r20);
IkReal x14274=((1.0)*x14271);
IkReal x14275=((1.0)*x14270);
IkReal x14276=(cj4*x14270);
IkReal x14277=(r12*sj4);
IkReal x14278=(r01*sj9);
IkReal x14279=(cj4*x14271);
IkReal x14280=(r11*sj4*sj9);
IkReal x14281=(cj9*r00);
IkReal x14282=((1.0)*cj4*x14271);
IkReal x14283=(cj9*r10*sj4);
IkReal x14284=(r02*sj4);
IkReal x14285=(r11*sj9);
IkReal x14286=(cj9*r00*sj4);
IkReal x14287=(cj9*r10);
IkReal x14288=(r01*sj4*sj9);
IkReal x14289=((1.0)*cj4*x14270);
evalcond[0]=(((r22*x14270))+((x14271*x14272))+(((-1.0)*x14273*x14274)));
evalcond[1]=((((-1.0)*r22*x14274))+(((-1.0)*x14273*x14275))+((x14270*x14272)));
evalcond[2]=((1.0)+(((-1.0)*x14281*x14282))+((r02*x14276))+((x14271*x14280))+(((-1.0)*x14274*x14283))+((x14270*x14277))+((x14278*x14279)));
evalcond[3]=((((-1.0)*x14275*x14284))+(((-1.0)*x14282*x14287))+(((-1.0)*x14274*x14288))+((x14271*x14286))+((x14279*x14285))+((r12*x14276)));
evalcond[4]=(((x14276*x14278))+(((-1.0)*x14281*x14289))+(((-1.0)*x14275*x14283))+((x14270*x14280))+(((-1.0)*x14274*x14277))+(((-1.0)*r02*x14282)));
evalcond[5]=((1.0)+((x14271*x14284))+(((-1.0)*x14275*x14288))+((x14276*x14285))+(((-1.0)*x14287*x14289))+(((-1.0)*r12*x14282))+((x14270*x14286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14290 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x14290.valid){
continue;
}
CheckValue<IkReal> x14291=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x14291.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14290.value)+(((1.5707963267949)*(x14291.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14292=IKcos(j8);
IkReal x14293=IKsin(j8);
IkReal x14294=(r21*sj9);
IkReal x14295=(cj9*r20);
IkReal x14296=((1.0)*x14293);
IkReal x14297=((1.0)*x14292);
IkReal x14298=(cj4*x14292);
IkReal x14299=(r12*sj4);
IkReal x14300=(r01*sj9);
IkReal x14301=(cj4*x14293);
IkReal x14302=(r11*sj4*sj9);
IkReal x14303=(cj9*r00);
IkReal x14304=((1.0)*cj4*x14293);
IkReal x14305=(cj9*r10*sj4);
IkReal x14306=(r02*sj4);
IkReal x14307=(r11*sj9);
IkReal x14308=(cj9*r00*sj4);
IkReal x14309=(cj9*r10);
IkReal x14310=(r01*sj4*sj9);
IkReal x14311=((1.0)*cj4*x14292);
evalcond[0]=((((-1.0)*x14295*x14296))+((r22*x14292))+((x14293*x14294)));
evalcond[1]=((((-1.0)*x14295*x14297))+((x14292*x14294))+(((-1.0)*r22*x14296)));
evalcond[2]=((1.0)+((x14293*x14302))+((x14300*x14301))+((r02*x14298))+(((-1.0)*x14296*x14305))+((x14292*x14299))+(((-1.0)*x14303*x14304)));
evalcond[3]=((((-1.0)*x14304*x14309))+((x14301*x14307))+(((-1.0)*x14296*x14310))+((x14293*x14308))+((r12*x14298))+(((-1.0)*x14297*x14306)));
evalcond[4]=(((x14298*x14300))+(((-1.0)*r02*x14304))+(((-1.0)*x14296*x14299))+(((-1.0)*x14303*x14311))+(((-1.0)*x14297*x14305))+((x14292*x14302)));
evalcond[5]=((1.0)+(((-1.0)*r12*x14304))+(((-1.0)*x14297*x14310))+(((-1.0)*x14309*x14311))+((x14298*x14307))+((x14292*x14308))+((x14293*x14306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14312=((1.0)*sj9);
CheckValue<IkReal> x14313=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+(((-1.0)*r00*sj4*x14312))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x14313.valid){
continue;
}
CheckValue<IkReal> x14314 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x14312))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x14314.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14313.value)))+(x14314.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14315=IKcos(j8);
IkReal x14316=IKsin(j8);
IkReal x14317=(r21*sj9);
IkReal x14318=(cj9*r20);
IkReal x14319=((1.0)*x14316);
IkReal x14320=((1.0)*x14315);
IkReal x14321=(cj4*x14315);
IkReal x14322=(r12*sj4);
IkReal x14323=(r01*sj9);
IkReal x14324=(cj4*x14316);
IkReal x14325=(r11*sj4*sj9);
IkReal x14326=(cj9*r00);
IkReal x14327=((1.0)*cj4*x14316);
IkReal x14328=(cj9*r10*sj4);
IkReal x14329=(r02*sj4);
IkReal x14330=(r11*sj9);
IkReal x14331=(cj9*r00*sj4);
IkReal x14332=(cj9*r10);
IkReal x14333=(r01*sj4*sj9);
IkReal x14334=((1.0)*cj4*x14315);
evalcond[0]=((((-1.0)*x14318*x14319))+((x14316*x14317))+((r22*x14315)));
evalcond[1]=((((-1.0)*r22*x14319))+((x14315*x14317))+(((-1.0)*x14318*x14320)));
evalcond[2]=((1.0)+((x14316*x14325))+((x14323*x14324))+(((-1.0)*x14319*x14328))+(((-1.0)*x14326*x14327))+((r02*x14321))+((x14315*x14322)));
evalcond[3]=(((x14316*x14331))+(((-1.0)*x14319*x14333))+((r12*x14321))+(((-1.0)*x14327*x14332))+((x14324*x14330))+(((-1.0)*x14320*x14329)));
evalcond[4]=(((x14321*x14323))+(((-1.0)*x14319*x14322))+(((-1.0)*r02*x14327))+(((-1.0)*x14320*x14328))+(((-1.0)*x14326*x14334))+((x14315*x14325)));
evalcond[5]=((1.0)+(((-1.0)*x14332*x14334))+(((-1.0)*x14320*x14333))+(((-1.0)*r12*x14327))+((x14321*x14330))+((x14315*x14331))+((x14316*x14329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14335=(cj9*r21);
IkReal x14336=(r20*sj9);
IkReal x14337=((1.0)*cj4);
IkReal x14338=(cj9*r01);
IkReal x14339=(r00*sj9);
IkReal x14340=((1.0)*sj4);
IkReal x14341=(cj9*r11);
IkReal x14342=(r10*sj9);
IkReal x14343=(sj4*x14338);
IkReal x14344=(sj4*x14339);
IkReal x14345=((0.03431)*cj4);
IkReal x14346=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x14335))+(((-1.0)*x14336)));
evalcond[2]=((((-1.0)*x14340*x14341))+(((-1.0)*x14337*x14339))+(((-1.0)*x14340*x14342))+(((-1.0)*x14337*x14338)));
evalcond[3]=((-0.4967)+(((0.03431)*x14336))+(((-1.0)*(1.0)*pz))+(((0.03431)*x14335)));
evalcond[4]=((((-1.0)*x14337*x14341))+x14343+x14344+(((-1.0)*x14337*x14342)));
evalcond[5]=((0.00373)+((x14338*x14345))+(((-1.0)*px*x14337))+((x14341*x14346))+(((-1.0)*py*x14340))+((x14339*x14345))+((x14342*x14346)));
evalcond[6]=(((px*sj4))+((x14341*x14345))+(((-0.03431)*x14343))+((x14342*x14345))+(((-0.03431)*x14344))+(((-1.0)*py*x14337)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x14347=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x14347;
j8eval[1]=IKsign(x14347);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x14348=((1.0)*sj9);
IkReal x14349=((((-1.0)*cj4*r10*x14348))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x14349;
j8eval[1]=IKsign(x14349);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*r21*x14348)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x14350=(cj4*r01);
IkReal x14351=(r21*x14350);
IkReal x14352=(r11*sj4);
IkReal x14353=(r21*x14352);
IkReal x14354=(cj4*r00);
IkReal x14355=cj9*cj9;
IkReal x14356=(r20*x14355);
IkReal x14357=(r10*sj4);
IkReal x14358=((1.0)*cj9*r21*sj9);
IkReal x14359=((1.0)*cj9*r20*sj9);
IkReal x14360=((1.0)*x14355);
IkReal x14361=(x14351+x14353+(((-1.0)*x14352*x14359))+(((-1.0)*x14350*x14359))+(((-1.0)*x14357*x14358))+((x14356*x14357))+(((-1.0)*x14351*x14360))+((x14354*x14356))+((r12*r22*sj4))+((cj4*r02*r22))+(((-1.0)*x14353*x14360))+(((-1.0)*x14354*x14358)));
j8eval[0]=x14361;
j8eval[1]=IKsign(x14361);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14362=(cj4*r01);
IkReal x14363=(r21*x14362);
IkReal x14364=(r11*sj4);
IkReal x14365=(r21*x14364);
IkReal x14366=(cj4*r00);
IkReal x14367=cj9*cj9;
IkReal x14368=(r20*x14367);
IkReal x14369=(r10*sj4);
IkReal x14370=((1.0)*cj9*r21*sj9);
IkReal x14371=((1.0)*cj9*r20*sj9);
IkReal x14372=((1.0)*x14367);
CheckValue<IkReal> x14373=IKPowWithIntegerCheck(IKsign((((x14368*x14369))+(((-1.0)*x14362*x14371))+(((-1.0)*x14366*x14370))+x14363+x14365+(((-1.0)*x14363*x14372))+(((-1.0)*x14365*x14372))+((r12*r22*sj4))+((cj4*r02*r22))+((x14366*x14368))+(((-1.0)*x14369*x14370))+(((-1.0)*x14364*x14371)))),-1);
if(!x14373.valid){
continue;
}
CheckValue<IkReal> x14374 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x14374.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14373.value)))+(x14374.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14375=IKcos(j8);
IkReal x14376=IKsin(j8);
IkReal x14377=(r21*sj9);
IkReal x14378=(cj9*r20);
IkReal x14379=((1.0)*x14376);
IkReal x14380=((1.0)*x14375);
IkReal x14381=(cj4*x14375);
IkReal x14382=(r12*sj4);
IkReal x14383=(r01*sj9);
IkReal x14384=(cj4*x14376);
IkReal x14385=(r11*sj4*sj9);
IkReal x14386=(cj9*r00);
IkReal x14387=((1.0)*cj4*x14376);
IkReal x14388=(cj9*r10*sj4);
IkReal x14389=(r02*sj4);
IkReal x14390=(r11*sj9);
IkReal x14391=(cj9*r00*sj4);
IkReal x14392=(cj9*r10);
IkReal x14393=((1.0)*cj4*x14375);
IkReal x14394=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x14378*x14379))+((x14376*x14377))+((r22*x14375)));
evalcond[1]=((((-1.0)*r22*x14379))+((x14375*x14377))+(((-1.0)*x14378*x14380)));
evalcond[2]=(((x14375*x14382))+((r02*x14381))+((x14376*x14385))+((x14383*x14384))+(((-1.0)*x14386*x14387))+(((-1.0)*x14379*x14388)));
evalcond[3]=((((-1.0)*r12*x14387))+(((-1.0)*x14380*x14394))+((x14376*x14389))+((x14381*x14390))+((x14375*x14391))+(((-1.0)*x14392*x14393)));
evalcond[4]=((-1.0)+(((-1.0)*x14387*x14392))+((r12*x14381))+(((-1.0)*x14380*x14389))+(((-1.0)*x14379*x14394))+((x14384*x14390))+((x14376*x14391)));
evalcond[5]=((1.0)+((x14375*x14385))+(((-1.0)*x14379*x14382))+(((-1.0)*r02*x14387))+(((-1.0)*x14386*x14393))+(((-1.0)*x14380*x14388))+((x14381*x14383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14395=((1.0)*sj9);
CheckValue<IkReal> x14396 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x14395))+((cj9*r20)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x14396.valid){
continue;
}
CheckValue<IkReal> x14397=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x14395))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x14397.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14396.value)+(((1.5707963267949)*(x14397.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14398=IKcos(j8);
IkReal x14399=IKsin(j8);
IkReal x14400=(r21*sj9);
IkReal x14401=(cj9*r20);
IkReal x14402=((1.0)*x14399);
IkReal x14403=((1.0)*x14398);
IkReal x14404=(cj4*x14398);
IkReal x14405=(r12*sj4);
IkReal x14406=(r01*sj9);
IkReal x14407=(cj4*x14399);
IkReal x14408=(r11*sj4*sj9);
IkReal x14409=(cj9*r00);
IkReal x14410=((1.0)*cj4*x14399);
IkReal x14411=(cj9*r10*sj4);
IkReal x14412=(r02*sj4);
IkReal x14413=(r11*sj9);
IkReal x14414=(cj9*r00*sj4);
IkReal x14415=(cj9*r10);
IkReal x14416=((1.0)*cj4*x14398);
IkReal x14417=(r01*sj4*sj9);
evalcond[0]=(((r22*x14398))+((x14399*x14400))+(((-1.0)*x14401*x14402)));
evalcond[1]=((((-1.0)*x14401*x14403))+(((-1.0)*r22*x14402))+((x14398*x14400)));
evalcond[2]=(((x14399*x14408))+(((-1.0)*x14402*x14411))+((x14398*x14405))+((r02*x14404))+(((-1.0)*x14409*x14410))+((x14406*x14407)));
evalcond[3]=(((x14398*x14414))+((x14399*x14412))+(((-1.0)*x14403*x14417))+((x14404*x14413))+(((-1.0)*r12*x14410))+(((-1.0)*x14415*x14416)));
evalcond[4]=((-1.0)+((x14399*x14414))+((x14407*x14413))+(((-1.0)*x14410*x14415))+(((-1.0)*x14402*x14417))+(((-1.0)*x14403*x14412))+((r12*x14404)));
evalcond[5]=((1.0)+((x14398*x14408))+(((-1.0)*x14402*x14405))+(((-1.0)*r02*x14410))+(((-1.0)*x14403*x14411))+((x14404*x14406))+(((-1.0)*x14409*x14416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14418=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x14418.valid){
continue;
}
CheckValue<IkReal> x14419 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x14419.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14418.value)))+(x14419.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14420=IKcos(j8);
IkReal x14421=IKsin(j8);
IkReal x14422=(r21*sj9);
IkReal x14423=(cj9*r20);
IkReal x14424=((1.0)*x14421);
IkReal x14425=((1.0)*x14420);
IkReal x14426=(cj4*x14420);
IkReal x14427=(r12*sj4);
IkReal x14428=(r01*sj9);
IkReal x14429=(cj4*x14421);
IkReal x14430=(r11*sj4*sj9);
IkReal x14431=(cj9*r00);
IkReal x14432=((1.0)*cj4*x14421);
IkReal x14433=(cj9*r10*sj4);
IkReal x14434=(r02*sj4);
IkReal x14435=(r11*sj9);
IkReal x14436=(cj9*r00*sj4);
IkReal x14437=(cj9*r10);
IkReal x14438=((1.0)*cj4*x14420);
IkReal x14439=(r01*sj4*sj9);
evalcond[0]=(((x14421*x14422))+((r22*x14420))+(((-1.0)*x14423*x14424)));
evalcond[1]=((((-1.0)*r22*x14424))+((x14420*x14422))+(((-1.0)*x14423*x14425)));
evalcond[2]=((((-1.0)*x14431*x14432))+((r02*x14426))+((x14428*x14429))+((x14421*x14430))+((x14420*x14427))+(((-1.0)*x14424*x14433)));
evalcond[3]=((((-1.0)*r12*x14432))+((x14420*x14436))+((x14421*x14434))+(((-1.0)*x14425*x14439))+((x14426*x14435))+(((-1.0)*x14437*x14438)));
evalcond[4]=((-1.0)+((x14429*x14435))+((r12*x14426))+((x14421*x14436))+(((-1.0)*x14425*x14434))+(((-1.0)*x14432*x14437))+(((-1.0)*x14424*x14439)));
evalcond[5]=((1.0)+((x14420*x14430))+(((-1.0)*x14424*x14427))+(((-1.0)*r02*x14432))+((x14426*x14428))+(((-1.0)*x14425*x14433))+(((-1.0)*x14431*x14438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14440=(cj9*r21);
IkReal x14441=(r20*sj9);
IkReal x14442=((1.0)*cj4);
IkReal x14443=(cj9*r01);
IkReal x14444=(r00*sj9);
IkReal x14445=((1.0)*sj4);
IkReal x14446=(cj9*r11);
IkReal x14447=(r10*sj9);
IkReal x14448=(sj4*x14443);
IkReal x14449=(sj4*x14444);
IkReal x14450=((0.03431)*cj4);
IkReal x14451=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x14441))+(((-1.0)*x14440)));
evalcond[2]=((((-1.0)*x14442*x14444))+(((-1.0)*x14442*x14443))+(((-1.0)*x14445*x14447))+(((-1.0)*x14445*x14446)));
evalcond[3]=((-0.4967)+(((0.03431)*x14441))+(((-1.0)*(1.0)*pz))+(((0.03431)*x14440)));
evalcond[4]=((((-1.0)*x14442*x14446))+(((-1.0)*x14442*x14447))+x14449+x14448);
evalcond[5]=((0.00301)+((x14447*x14451))+((x14444*x14450))+((x14446*x14451))+(((-1.0)*px*x14442))+((x14443*x14450))+(((-1.0)*py*x14445)));
evalcond[6]=(((px*sj4))+((x14447*x14450))+(((-0.03431)*x14449))+(((-1.0)*py*x14442))+(((-0.03431)*x14448))+((x14446*x14450)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x14452=((1.0)*cj9);
IkReal x14453=((((-1.0)*cj4*r11*x14452))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x14453;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x14452)))))+(IKabs(r22)));
j8eval[2]=IKsign(x14453);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x14454=((1.0)*cj9);
IkReal x14455=((1.0)*sj9);
IkReal x14456=((((-1.0)*r11*sj4*x14454))+(((-1.0)*cj4*r01*x14454))+(((-1.0)*cj4*r00*x14455))+(((-1.0)*r10*sj4*x14455)));
j8eval[0]=x14456;
j8eval[1]=((IKabs(((((-1.0)*r21*x14455))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x14456);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x14457=((1.0)*r21);
IkReal x14458=(cj4*r01);
IkReal x14459=((1.0)*r22);
IkReal x14460=(r11*sj4);
IkReal x14461=(cj4*r00);
IkReal x14462=(cj9*r21*sj9);
IkReal x14463=(cj9*r20*sj9);
IkReal x14464=(r10*sj4);
IkReal x14465=cj9*cj9;
IkReal x14466=(r21*x14465);
IkReal x14467=((1.0)*r20*x14465);
IkReal x14468=(((x14461*x14462))+(((-1.0)*x14461*x14467))+(((-1.0)*x14457*x14458))+(((-1.0)*r12*sj4*x14459))+(((-1.0)*cj4*r02*x14459))+((x14460*x14463))+(((-1.0)*x14464*x14467))+((x14458*x14463))+((x14460*x14466))+((x14462*x14464))+((x14458*x14466))+(((-1.0)*x14457*x14460)));
j8eval[0]=x14468;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*sj9*x14457))+((cj9*r20))))));
j8eval[2]=IKsign(x14468);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14469=((1.0)*r21);
IkReal x14470=(cj4*r01);
IkReal x14471=((1.0)*r22);
IkReal x14472=(r11*sj4);
IkReal x14473=(cj4*r00);
IkReal x14474=(cj9*r21*sj9);
IkReal x14475=(cj9*r20*sj9);
IkReal x14476=(r10*sj4);
IkReal x14477=cj9*cj9;
IkReal x14478=(r21*x14477);
IkReal x14479=((1.0)*r20*x14477);
CheckValue<IkReal> x14480 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*sj9*x14469))),IKFAST_ATAN2_MAGTHRESH);
if(!x14480.valid){
continue;
}
CheckValue<IkReal> x14481=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02*x14471))+((x14470*x14478))+((x14473*x14474))+((x14472*x14475))+(((-1.0)*x14469*x14472))+(((-1.0)*x14469*x14470))+((x14470*x14475))+((x14472*x14478))+(((-1.0)*r12*sj4*x14471))+(((-1.0)*x14476*x14479))+((x14474*x14476))+(((-1.0)*x14473*x14479)))),-1);
if(!x14481.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14480.value)+(((1.5707963267949)*(x14481.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14482=IKcos(j8);
IkReal x14483=IKsin(j8);
IkReal x14484=(r21*sj9);
IkReal x14485=(cj9*r20);
IkReal x14486=((1.0)*x14483);
IkReal x14487=((1.0)*x14482);
IkReal x14488=(cj4*x14482);
IkReal x14489=(r12*sj4);
IkReal x14490=(r01*sj9);
IkReal x14491=(cj4*x14483);
IkReal x14492=(r11*sj4*sj9);
IkReal x14493=(cj9*r00);
IkReal x14494=((1.0)*cj4*x14483);
IkReal x14495=(cj9*r10*sj4);
IkReal x14496=(r02*sj4);
IkReal x14497=(r11*sj9);
IkReal x14498=(cj9*r00*sj4);
IkReal x14499=(cj9*r10);
IkReal x14500=((1.0)*cj4*x14482);
IkReal x14501=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x14485*x14486))+((r22*x14482))+((x14483*x14484)));
evalcond[1]=((((-1.0)*x14485*x14487))+(((-1.0)*r22*x14486))+((x14482*x14484)));
evalcond[2]=((((-1.0)*x14493*x14494))+((x14483*x14492))+(((-1.0)*x14486*x14495))+((x14490*x14491))+((r02*x14488))+((x14482*x14489)));
evalcond[3]=((((-1.0)*r12*x14494))+((x14488*x14497))+(((-1.0)*x14499*x14500))+((x14482*x14498))+(((-1.0)*x14487*x14501))+((x14483*x14496)));
evalcond[4]=((1.0)+(((-1.0)*x14487*x14496))+((x14491*x14497))+(((-1.0)*x14486*x14501))+((r12*x14488))+(((-1.0)*x14494*x14499))+((x14483*x14498)));
evalcond[5]=((-1.0)+(((-1.0)*x14493*x14500))+(((-1.0)*x14486*x14489))+(((-1.0)*x14487*x14495))+(((-1.0)*r02*x14494))+((x14482*x14492))+((x14488*x14490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14502=((1.0)*sj9);
IkReal x14503=((1.0)*cj9);
CheckValue<IkReal> x14504 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x14502))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x14504.valid){
continue;
}
CheckValue<IkReal> x14505=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x14503))+(((-1.0)*cj4*r00*x14502))+(((-1.0)*r10*sj4*x14502))+(((-1.0)*cj4*r01*x14503)))),-1);
if(!x14505.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14504.value)+(((1.5707963267949)*(x14505.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14506=IKcos(j8);
IkReal x14507=IKsin(j8);
IkReal x14508=(r21*sj9);
IkReal x14509=(cj9*r20);
IkReal x14510=((1.0)*x14507);
IkReal x14511=((1.0)*x14506);
IkReal x14512=(cj4*x14506);
IkReal x14513=(r12*sj4);
IkReal x14514=(r01*sj9);
IkReal x14515=(cj4*x14507);
IkReal x14516=(r11*sj4*sj9);
IkReal x14517=(cj9*r00);
IkReal x14518=((1.0)*cj4*x14507);
IkReal x14519=(cj9*r10*sj4);
IkReal x14520=(r02*sj4);
IkReal x14521=(r11*sj9);
IkReal x14522=(cj9*r00*sj4);
IkReal x14523=(cj9*r10);
IkReal x14524=((1.0)*cj4*x14506);
IkReal x14525=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x14509*x14510))+((r22*x14506))+((x14507*x14508)));
evalcond[1]=(((x14506*x14508))+(((-1.0)*r22*x14510))+(((-1.0)*x14509*x14511)));
evalcond[2]=(((r02*x14512))+((x14507*x14516))+(((-1.0)*x14510*x14519))+((x14506*x14513))+(((-1.0)*x14517*x14518))+((x14514*x14515)));
evalcond[3]=((((-1.0)*r12*x14518))+((x14512*x14521))+(((-1.0)*x14511*x14525))+((x14507*x14520))+((x14506*x14522))+(((-1.0)*x14523*x14524)));
evalcond[4]=((1.0)+(((-1.0)*x14518*x14523))+(((-1.0)*x14511*x14520))+((x14507*x14522))+((x14515*x14521))+((r12*x14512))+(((-1.0)*x14510*x14525)));
evalcond[5]=((-1.0)+(((-1.0)*x14511*x14519))+(((-1.0)*x14510*x14513))+(((-1.0)*r02*x14518))+((x14506*x14516))+((x14512*x14514))+(((-1.0)*x14517*x14524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14526=((1.0)*cj9);
CheckValue<IkReal> x14527 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x14526)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x14527.valid){
continue;
}
CheckValue<IkReal> x14528=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9))+(((-1.0)*cj4*r11*x14526)))),-1);
if(!x14528.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14527.value)+(((1.5707963267949)*(x14528.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14529=IKcos(j8);
IkReal x14530=IKsin(j8);
IkReal x14531=(r21*sj9);
IkReal x14532=(cj9*r20);
IkReal x14533=((1.0)*x14530);
IkReal x14534=((1.0)*x14529);
IkReal x14535=(cj4*x14529);
IkReal x14536=(r12*sj4);
IkReal x14537=(r01*sj9);
IkReal x14538=(cj4*x14530);
IkReal x14539=(r11*sj4*sj9);
IkReal x14540=(cj9*r00);
IkReal x14541=((1.0)*cj4*x14530);
IkReal x14542=(cj9*r10*sj4);
IkReal x14543=(r02*sj4);
IkReal x14544=(r11*sj9);
IkReal x14545=(cj9*r00*sj4);
IkReal x14546=(cj9*r10);
IkReal x14547=((1.0)*cj4*x14529);
IkReal x14548=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x14532*x14533))+((r22*x14529))+((x14530*x14531)));
evalcond[1]=((((-1.0)*x14532*x14534))+((x14529*x14531))+(((-1.0)*r22*x14533)));
evalcond[2]=((((-1.0)*x14540*x14541))+((x14530*x14539))+(((-1.0)*x14533*x14542))+((x14529*x14536))+((x14537*x14538))+((r02*x14535)));
evalcond[3]=(((x14529*x14545))+((x14535*x14544))+((x14530*x14543))+(((-1.0)*x14546*x14547))+(((-1.0)*r12*x14541))+(((-1.0)*x14534*x14548)));
evalcond[4]=((1.0)+(((-1.0)*x14541*x14546))+(((-1.0)*x14533*x14548))+((r12*x14535))+((x14530*x14545))+(((-1.0)*x14534*x14543))+((x14538*x14544)));
evalcond[5]=((-1.0)+(((-1.0)*x14533*x14536))+((x14535*x14537))+((x14529*x14539))+(((-1.0)*x14534*x14542))+(((-1.0)*x14540*x14547))+(((-1.0)*r02*x14541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14549=(r01*((cj4*r21)));
IkReal x14550=(r11*((r21*sj4)));
IkReal x14551=cj9*cj9;
IkReal x14552=(r20*x14551);
IkReal x14553=((1.0)*cj9*sj9);
IkReal x14554=((1.0)*cj9*r20*sj9);
IkReal x14555=((1.0)*x14551);
CheckValue<IkReal> x14556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x14554))+x14549+(((-1.0)*r10*r21*sj4*x14553))+x14550+((r12*r22*sj4))+(((-1.0)*x14549*x14555))+(((-1.0)*cj4*r00*r21*x14553))+((cj4*r02*r22))+((r10*sj4*x14552))+(((-1.0)*cj4*r01*x14554))+((cj4*r00*x14552))+(((-1.0)*x14550*x14555)))),-1);
if(!x14556.valid){
continue;
}
CheckValue<IkReal> x14557 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*((cj9*r20))))+(((-1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x14557.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14556.value)))+(x14557.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14558=IKcos(j8);
IkReal x14559=IKsin(j8);
IkReal x14560=(r21*sj9);
IkReal x14561=(cj9*r20);
IkReal x14562=((1.0)*x14559);
IkReal x14563=((1.0)*x14558);
IkReal x14564=((-1.0)*(((1.0)*sj6)));
IkReal x14565=(cj4*x14558);
IkReal x14566=(r12*sj4);
IkReal x14567=(r01*sj9);
IkReal x14568=(cj4*x14559);
IkReal x14569=(r11*sj4*sj9);
IkReal x14570=(cj9*r00);
IkReal x14571=((1.0)*cj4*x14559);
IkReal x14572=(cj9*r10*sj4);
IkReal x14573=((1.0)*cj4*x14558);
IkReal x14574=(r02*sj4);
IkReal x14575=(r11*sj9);
IkReal x14576=(cj9*r00*sj4);
IkReal x14577=(cj9*r10);
IkReal x14578=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x14561*x14562))+((x14559*x14560))+((r22*x14558)));
evalcond[1]=((((-1.0)*x14561*x14563))+(((-1.0)*r22*x14562))+((x14558*x14560)));
evalcond[2]=(((x14567*x14568))+x14564+((r02*x14565))+(((-1.0)*x14570*x14571))+((x14559*x14569))+(((-1.0)*x14562*x14572))+((x14558*x14566)));
evalcond[3]=((((-1.0)*x14563*x14572))+((x14558*x14569))+cj6+(((-1.0)*x14562*x14566))+(((-1.0)*x14570*x14573))+(((-1.0)*r02*x14571))+((x14565*x14567)));
evalcond[4]=((((-1.0)*x14563*x14574))+(((-1.0)*x14562*x14578))+((r12*x14565))+(((-1.0)*(1.0)*cj6))+((x14568*x14575))+(((-1.0)*x14571*x14577))+((x14559*x14576)));
evalcond[5]=(((x14559*x14574))+(((-1.0)*x14563*x14578))+(((-1.0)*x14573*x14577))+((x14558*x14576))+x14564+(((-1.0)*r12*x14571))+((x14565*x14575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14579=((1.0)*cj4);
CheckValue<IkReal> x14580 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x14580.valid){
continue;
}
CheckValue<IkReal> x14581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9*x14579))+((cj9*r01*sj4))+(((-1.0)*cj9*r11*x14579))+((r00*sj4*sj9)))),-1);
if(!x14581.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14580.value)+(((1.5707963267949)*(x14581.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14582=IKcos(j8);
IkReal x14583=IKsin(j8);
IkReal x14584=(r21*sj9);
IkReal x14585=(cj9*r20);
IkReal x14586=((1.0)*x14583);
IkReal x14587=((1.0)*x14582);
IkReal x14588=((-1.0)*(((1.0)*sj6)));
IkReal x14589=(cj4*x14582);
IkReal x14590=(r12*sj4);
IkReal x14591=(r01*sj9);
IkReal x14592=(cj4*x14583);
IkReal x14593=(r11*sj4*sj9);
IkReal x14594=(cj9*r00);
IkReal x14595=((1.0)*cj4*x14583);
IkReal x14596=(cj9*r10*sj4);
IkReal x14597=((1.0)*cj4*x14582);
IkReal x14598=(r02*sj4);
IkReal x14599=(r11*sj9);
IkReal x14600=(cj9*r00*sj4);
IkReal x14601=(cj9*r10);
IkReal x14602=(r01*sj4*sj9);
evalcond[0]=(((x14583*x14584))+(((-1.0)*x14585*x14586))+((r22*x14582)));
evalcond[1]=(((x14582*x14584))+(((-1.0)*r22*x14586))+(((-1.0)*x14585*x14587)));
evalcond[2]=((((-1.0)*x14594*x14595))+((r02*x14589))+x14588+(((-1.0)*x14586*x14596))+((x14582*x14590))+((x14583*x14593))+((x14591*x14592)));
evalcond[3]=((((-1.0)*x14586*x14590))+(((-1.0)*x14594*x14597))+cj6+((x14589*x14591))+((x14582*x14593))+(((-1.0)*r02*x14595))+(((-1.0)*x14587*x14596)));
evalcond[4]=((((-1.0)*x14595*x14601))+(((-1.0)*(1.0)*cj6))+((x14583*x14600))+((x14592*x14599))+(((-1.0)*x14586*x14602))+(((-1.0)*x14587*x14598))+((r12*x14589)));
evalcond[5]=(((x14582*x14600))+(((-1.0)*x14587*x14602))+(((-1.0)*r12*x14595))+((x14589*x14599))+x14588+((x14583*x14598))+(((-1.0)*x14597*x14601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14603 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x14603.valid){
continue;
}
CheckValue<IkReal> x14604=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x14604.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14603.value)+(((1.5707963267949)*(x14604.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14605=IKcos(j8);
IkReal x14606=IKsin(j8);
IkReal x14607=(r21*sj9);
IkReal x14608=(cj9*r20);
IkReal x14609=((1.0)*x14606);
IkReal x14610=((1.0)*x14605);
IkReal x14611=((-1.0)*(((1.0)*sj6)));
IkReal x14612=(cj4*x14605);
IkReal x14613=(r12*sj4);
IkReal x14614=(r01*sj9);
IkReal x14615=(cj4*x14606);
IkReal x14616=(r11*sj4*sj9);
IkReal x14617=(cj9*r00);
IkReal x14618=((1.0)*cj4*x14606);
IkReal x14619=(cj9*r10*sj4);
IkReal x14620=((1.0)*cj4*x14605);
IkReal x14621=(r02*sj4);
IkReal x14622=(r11*sj9);
IkReal x14623=(cj9*r00*sj4);
IkReal x14624=(cj9*r10);
IkReal x14625=(r01*sj4*sj9);
evalcond[0]=(((x14606*x14607))+(((-1.0)*x14608*x14609))+((r22*x14605)));
evalcond[1]=((((-1.0)*r22*x14609))+(((-1.0)*x14608*x14610))+((x14605*x14607)));
evalcond[2]=(((x14605*x14613))+((r02*x14612))+x14611+(((-1.0)*x14609*x14619))+((x14614*x14615))+(((-1.0)*x14617*x14618))+((x14606*x14616)));
evalcond[3]=((((-1.0)*x14609*x14613))+(((-1.0)*x14617*x14620))+(((-1.0)*x14610*x14619))+cj6+((x14605*x14616))+((x14612*x14614))+(((-1.0)*r02*x14618)));
evalcond[4]=((((-1.0)*x14609*x14625))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x14610*x14621))+((x14606*x14623))+((x14615*x14622))+((r12*x14612))+(((-1.0)*x14618*x14624)));
evalcond[5]=(((x14605*x14623))+(((-1.0)*x14620*x14624))+(((-1.0)*x14610*x14625))+((x14606*x14621))+x14611+(((-1.0)*r12*x14618))+((x14612*x14622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14626=(cj9*r21);
IkReal x14627=(r20*sj9);
IkReal x14628=((1.0)*cj4);
IkReal x14629=(cj9*r01);
IkReal x14630=(r00*sj9);
IkReal x14631=((1.0)*sj4);
IkReal x14632=(cj9*r11);
IkReal x14633=(r10*sj9);
IkReal x14634=(sj4*x14629);
IkReal x14635=(sj4*x14630);
IkReal x14636=((0.03431)*cj4);
IkReal x14637=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*x14626))+(((-1.0)*x14627)));
evalcond[2]=((((-1.0)*x14631*x14632))+(((-1.0)*x14628*x14630))+(((-1.0)*x14631*x14633))+(((-1.0)*x14628*x14629)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x14626))+(((0.03431)*x14627)));
evalcond[4]=((((-1.0)*x14628*x14633))+(((-1.0)*x14628*x14632))+x14635+x14634);
evalcond[5]=((0.00337)+(((-1.0)*px*x14628))+(((-1.0)*py*x14631))+(((0.00036)*cj6))+((x14629*x14636))+((x14630*x14636))+((x14633*x14637))+((x14632*x14637)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x14628))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x14634))+(((-0.03431)*x14635))+((x14633*x14636))+((x14632*x14636)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x14638=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x14638;
j8eval[1]=IKsign(x14638);
j8eval[2]=((IKabs((((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x14639=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x14639;
j8eval[1]=IKsign(x14639);
j8eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x14640=((1.0)*cj4);
IkReal x14641=((((-1.0)*r10*sj9*x14640))+((cj9*r01*sj4))+(((-1.0)*cj9*r11*x14640))+((r00*sj4*sj9)));
j8eval[0]=x14641;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x14641);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x14642=(cj9*r21);
IkReal x14643=(r20*sj9);
IkReal x14644=((1.0)*cj4);
IkReal x14645=(cj9*r01);
IkReal x14646=(r00*sj9);
IkReal x14647=((1.0)*sj4);
IkReal x14648=(cj9*r11);
IkReal x14649=(r10*sj9);
IkReal x14650=(sj4*x14645);
IkReal x14651=(sj4*x14646);
IkReal x14652=((0.03431)*cj4);
IkReal x14653=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x14642))+(((-1.0)*x14643)));
evalcond[2]=((((-1.0)*x14644*x14646))+(((-1.0)*x14644*x14645))+(((-1.0)*x14647*x14648))+(((-1.0)*x14647*x14649)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x14643))+(((0.03431)*x14642)));
evalcond[4]=(x14651+x14650+(((-1.0)*x14644*x14649))+(((-1.0)*x14644*x14648)));
evalcond[5]=((0.00373)+(((-1.0)*py*x14647))+((x14649*x14653))+(((-1.0)*px*x14644))+((x14648*x14653))+((x14645*x14652))+((x14646*x14652)));
evalcond[6]=((((-0.03431)*x14650))+((px*sj4))+(((-0.03431)*x14651))+((x14649*x14652))+((x14648*x14652))+(((-1.0)*py*x14644)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x14654=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x14654;
j8eval[1]=IKsign(x14654);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x14655=((1.0)*cj9);
IkReal x14656=((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x14655))+((r00*sj4*sj9)));
j8eval[0]=x14656;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x14655)))))+(IKabs(r22)));
j8eval[2]=IKsign(x14656);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x14657=((1.0)*r21);
IkReal x14658=(cj4*r01);
IkReal x14659=((1.0)*r22);
IkReal x14660=(r11*sj4);
IkReal x14661=(cj4*r00);
IkReal x14662=(cj9*r21*sj9);
IkReal x14663=(cj9*r20*sj9);
IkReal x14664=(r10*sj4);
IkReal x14665=cj9*cj9;
IkReal x14666=(r21*x14665);
IkReal x14667=((1.0)*r20*x14665);
IkReal x14668=((((-1.0)*x14661*x14667))+(((-1.0)*x14657*x14658))+(((-1.0)*x14657*x14660))+((x14658*x14666))+((x14661*x14662))+(((-1.0)*x14664*x14667))+(((-1.0)*cj4*r02*x14659))+((x14660*x14666))+((x14658*x14663))+((x14660*x14663))+(((-1.0)*r12*sj4*x14659))+((x14662*x14664)));
j8eval[0]=x14668;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*sj9*x14657))+((cj9*r20))))));
j8eval[2]=IKsign(x14668);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14669=((1.0)*r21);
IkReal x14670=(cj4*r01);
IkReal x14671=((1.0)*r22);
IkReal x14672=(r11*sj4);
IkReal x14673=(cj4*r00);
IkReal x14674=(cj9*r21*sj9);
IkReal x14675=(cj9*r20*sj9);
IkReal x14676=(r10*sj4);
IkReal x14677=cj9*cj9;
IkReal x14678=(r21*x14677);
IkReal x14679=((1.0)*r20*x14677);
CheckValue<IkReal> x14680=IKPowWithIntegerCheck(IKsign((((x14670*x14678))+((x14673*x14674))+(((-1.0)*x14676*x14679))+((x14674*x14676))+(((-1.0)*cj4*r02*x14671))+((x14672*x14678))+(((-1.0)*x14673*x14679))+(((-1.0)*x14669*x14672))+(((-1.0)*r12*sj4*x14671))+((x14670*x14675))+(((-1.0)*x14669*x14670))+((x14672*x14675)))),-1);
if(!x14680.valid){
continue;
}
CheckValue<IkReal> x14681 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x14669))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x14681.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14680.value)))+(x14681.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14682=IKcos(j8);
IkReal x14683=IKsin(j8);
IkReal x14684=(r21*sj9);
IkReal x14685=(cj9*r20);
IkReal x14686=((1.0)*x14683);
IkReal x14687=((1.0)*x14682);
IkReal x14688=(cj4*x14682);
IkReal x14689=(r12*sj4);
IkReal x14690=(r01*sj9);
IkReal x14691=(cj4*x14683);
IkReal x14692=(r11*sj4*sj9);
IkReal x14693=(cj9*r00);
IkReal x14694=((1.0)*cj4*x14683);
IkReal x14695=(cj9*r10*sj4);
IkReal x14696=(r02*sj4);
IkReal x14697=(r11*sj9);
IkReal x14698=(cj9*r00*sj4);
IkReal x14699=(cj9*r10);
IkReal x14700=((1.0)*cj4*x14682);
IkReal x14701=(r01*sj4*sj9);
evalcond[0]=(((x14683*x14684))+((r22*x14682))+(((-1.0)*x14685*x14686)));
evalcond[1]=(((x14682*x14684))+(((-1.0)*r22*x14686))+(((-1.0)*x14685*x14687)));
evalcond[2]=((((-1.0)*x14686*x14695))+((x14682*x14689))+((x14683*x14692))+((x14690*x14691))+((r02*x14688))+(((-1.0)*x14693*x14694)));
evalcond[3]=((((-1.0)*x14699*x14700))+((x14682*x14698))+((x14683*x14696))+((x14688*x14697))+(((-1.0)*x14687*x14701))+(((-1.0)*r12*x14694)));
evalcond[4]=((-1.0)+((x14683*x14698))+(((-1.0)*x14687*x14696))+(((-1.0)*x14694*x14699))+((x14691*x14697))+((r12*x14688))+(((-1.0)*x14686*x14701)));
evalcond[5]=((-1.0)+(((-1.0)*x14687*x14695))+((x14688*x14690))+(((-1.0)*x14686*x14689))+(((-1.0)*x14693*x14700))+((x14682*x14692))+(((-1.0)*r02*x14694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14702=((1.0)*cj9);
CheckValue<IkReal> x14703 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x14702)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x14703.valid){
continue;
}
CheckValue<IkReal> x14704=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r11*x14702))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x14704.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14703.value)+(((1.5707963267949)*(x14704.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14705=IKcos(j8);
IkReal x14706=IKsin(j8);
IkReal x14707=(r21*sj9);
IkReal x14708=(cj9*r20);
IkReal x14709=((1.0)*x14706);
IkReal x14710=((1.0)*x14705);
IkReal x14711=(cj4*x14705);
IkReal x14712=(r12*sj4);
IkReal x14713=(r01*sj9);
IkReal x14714=(cj4*x14706);
IkReal x14715=(r11*sj4*sj9);
IkReal x14716=(cj9*r00);
IkReal x14717=((1.0)*cj4*x14706);
IkReal x14718=(cj9*r10*sj4);
IkReal x14719=(r02*sj4);
IkReal x14720=(r11*sj9);
IkReal x14721=(cj9*r00*sj4);
IkReal x14722=(cj9*r10);
IkReal x14723=((1.0)*cj4*x14705);
IkReal x14724=(r01*sj4*sj9);
evalcond[0]=(((x14706*x14707))+((r22*x14705))+(((-1.0)*x14708*x14709)));
evalcond[1]=((((-1.0)*x14708*x14710))+((x14705*x14707))+(((-1.0)*r22*x14709)));
evalcond[2]=((((-1.0)*x14716*x14717))+((x14705*x14712))+((r02*x14711))+((x14713*x14714))+((x14706*x14715))+(((-1.0)*x14709*x14718)));
evalcond[3]=(((x14705*x14721))+(((-1.0)*r12*x14717))+((x14711*x14720))+(((-1.0)*x14722*x14723))+(((-1.0)*x14710*x14724))+((x14706*x14719)));
evalcond[4]=((-1.0)+((x14706*x14721))+((x14714*x14720))+(((-1.0)*x14710*x14719))+(((-1.0)*x14717*x14722))+(((-1.0)*x14709*x14724))+((r12*x14711)));
evalcond[5]=((-1.0)+((x14711*x14713))+(((-1.0)*x14709*x14712))+(((-1.0)*r02*x14717))+((x14705*x14715))+(((-1.0)*x14710*x14718))+(((-1.0)*x14716*x14723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14725=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x14725.valid){
continue;
}
CheckValue<IkReal> x14726 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x14726.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14725.value)))+(x14726.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14727=IKcos(j8);
IkReal x14728=IKsin(j8);
IkReal x14729=(r21*sj9);
IkReal x14730=(cj9*r20);
IkReal x14731=((1.0)*x14728);
IkReal x14732=((1.0)*x14727);
IkReal x14733=(cj4*x14727);
IkReal x14734=(r12*sj4);
IkReal x14735=(r01*sj9);
IkReal x14736=(cj4*x14728);
IkReal x14737=(r11*sj4*sj9);
IkReal x14738=(cj9*r00);
IkReal x14739=((1.0)*cj4*x14728);
IkReal x14740=(cj9*r10*sj4);
IkReal x14741=(r02*sj4);
IkReal x14742=(r11*sj9);
IkReal x14743=(cj9*r00*sj4);
IkReal x14744=(cj9*r10);
IkReal x14745=((1.0)*cj4*x14727);
IkReal x14746=(r01*sj4*sj9);
evalcond[0]=(((r22*x14727))+((x14728*x14729))+(((-1.0)*x14730*x14731)));
evalcond[1]=((((-1.0)*x14730*x14732))+(((-1.0)*r22*x14731))+((x14727*x14729)));
evalcond[2]=(((x14735*x14736))+((x14728*x14737))+((r02*x14733))+(((-1.0)*x14738*x14739))+(((-1.0)*x14731*x14740))+((x14727*x14734)));
evalcond[3]=((((-1.0)*x14744*x14745))+(((-1.0)*r12*x14739))+((x14733*x14742))+((x14727*x14743))+(((-1.0)*x14732*x14746))+((x14728*x14741)));
evalcond[4]=((-1.0)+(((-1.0)*x14732*x14741))+((x14728*x14743))+(((-1.0)*x14731*x14746))+((x14736*x14742))+(((-1.0)*x14739*x14744))+((r12*x14733)));
evalcond[5]=((-1.0)+(((-1.0)*x14738*x14745))+(((-1.0)*x14731*x14734))+((x14733*x14735))+(((-1.0)*r02*x14739))+((x14727*x14737))+(((-1.0)*x14732*x14740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14747=(cj9*r21);
IkReal x14748=(r20*sj9);
IkReal x14749=((1.0)*cj4);
IkReal x14750=(cj9*r01);
IkReal x14751=(r00*sj9);
IkReal x14752=((1.0)*sj4);
IkReal x14753=(cj9*r11);
IkReal x14754=(r10*sj9);
IkReal x14755=(sj4*x14750);
IkReal x14756=(sj4*x14751);
IkReal x14757=((0.03431)*cj4);
IkReal x14758=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x14747))+(((-1.0)*x14748)));
evalcond[2]=((((-1.0)*x14749*x14750))+(((-1.0)*x14752*x14753))+(((-1.0)*x14749*x14751))+(((-1.0)*x14752*x14754)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x14748))+(((0.03431)*x14747)));
evalcond[4]=((((-1.0)*x14749*x14754))+x14755+x14756+(((-1.0)*x14749*x14753)));
evalcond[5]=((0.00301)+(((-1.0)*px*x14749))+((x14750*x14757))+((x14754*x14758))+((x14753*x14758))+((x14751*x14757))+(((-1.0)*py*x14752)));
evalcond[6]=((((-0.03431)*x14755))+((px*sj4))+((x14754*x14757))+((x14753*x14757))+(((-0.03431)*x14756))+(((-1.0)*py*x14749)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x14759=((1.0)*cj9);
IkReal x14760=((1.0)*sj9);
IkReal x14761=((((-1.0)*cj4*r01*x14759))+(((-1.0)*r10*sj4*x14760))+(((-1.0)*cj4*r00*x14760))+(((-1.0)*r11*sj4*x14759)));
j8eval[0]=x14761;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x14760))+((cj9*r20))))));
j8eval[2]=IKsign(x14761);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x14762=((1.0)*sj9);
IkReal x14763=(((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9))+(((-1.0)*cj4*r10*x14762)));
j8eval[0]=x14763;
j8eval[1]=IKsign(x14763);
j8eval[2]=((IKabs(((((-1.0)*r21*x14762))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x14764=(cj4*r01);
IkReal x14765=(r21*x14764);
IkReal x14766=(r11*sj4);
IkReal x14767=(r21*x14766);
IkReal x14768=(cj4*r00);
IkReal x14769=cj9*cj9;
IkReal x14770=(r20*x14769);
IkReal x14771=(r10*sj4);
IkReal x14772=((1.0)*cj9*r21*sj9);
IkReal x14773=((1.0)*cj9*r20*sj9);
IkReal x14774=((1.0)*x14769);
IkReal x14775=((((-1.0)*x14766*x14773))+(((-1.0)*x14765*x14774))+(((-1.0)*x14767*x14774))+((x14770*x14771))+x14765+x14767+(((-1.0)*x14771*x14772))+((r12*r22*sj4))+((x14768*x14770))+((cj4*r02*r22))+(((-1.0)*x14764*x14773))+(((-1.0)*x14768*x14772)));
j8eval[0]=x14775;
j8eval[1]=IKsign(x14775);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14776=(cj4*r01);
IkReal x14777=(r21*x14776);
IkReal x14778=(r11*sj4);
IkReal x14779=(r21*x14778);
IkReal x14780=(cj4*r00);
IkReal x14781=cj9*cj9;
IkReal x14782=(r20*x14781);
IkReal x14783=(r10*sj4);
IkReal x14784=((1.0)*cj9*r21*sj9);
IkReal x14785=((1.0)*cj9*r20*sj9);
IkReal x14786=((1.0)*x14781);
CheckValue<IkReal> x14787=IKPowWithIntegerCheck(IKsign((x14779+x14777+((r12*r22*sj4))+(((-1.0)*x14779*x14786))+(((-1.0)*x14777*x14786))+((x14780*x14782))+(((-1.0)*x14780*x14784))+(((-1.0)*x14778*x14785))+((cj4*r02*r22))+(((-1.0)*x14776*x14785))+((x14782*x14783))+(((-1.0)*x14783*x14784)))),-1);
if(!x14787.valid){
continue;
}
CheckValue<IkReal> x14788 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x14788.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14787.value)))+(x14788.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14789=IKcos(j8);
IkReal x14790=IKsin(j8);
IkReal x14791=(r21*sj9);
IkReal x14792=(cj9*r20);
IkReal x14793=((1.0)*x14790);
IkReal x14794=((1.0)*x14789);
IkReal x14795=(cj4*x14789);
IkReal x14796=(r12*sj4);
IkReal x14797=(r01*sj9);
IkReal x14798=(cj4*x14790);
IkReal x14799=(r11*sj4*sj9);
IkReal x14800=(cj9*r00);
IkReal x14801=((1.0)*cj4*x14790);
IkReal x14802=(cj9*r10*sj4);
IkReal x14803=(r02*sj4);
IkReal x14804=(r11*sj9);
IkReal x14805=(cj9*r00*sj4);
IkReal x14806=(cj9*r10);
IkReal x14807=((1.0)*cj4*x14789);
IkReal x14808=(r01*sj4*sj9);
evalcond[0]=(((x14790*x14791))+(((-1.0)*x14792*x14793))+((r22*x14789)));
evalcond[1]=(((x14789*x14791))+(((-1.0)*x14792*x14794))+(((-1.0)*r22*x14793)));
evalcond[2]=((((-1.0)*x14793*x14802))+((x14797*x14798))+((r02*x14795))+(((-1.0)*x14800*x14801))+((x14789*x14796))+((x14790*x14799)));
evalcond[3]=(((x14790*x14803))+(((-1.0)*x14806*x14807))+((x14789*x14805))+(((-1.0)*x14794*x14808))+(((-1.0)*r12*x14801))+((x14795*x14804)));
evalcond[4]=((1.0)+((x14798*x14804))+(((-1.0)*x14793*x14808))+((x14790*x14805))+(((-1.0)*x14794*x14803))+(((-1.0)*x14801*x14806))+((r12*x14795)));
evalcond[5]=((1.0)+(((-1.0)*x14793*x14796))+(((-1.0)*x14794*x14802))+(((-1.0)*x14800*x14807))+((x14789*x14799))+((x14795*x14797))+(((-1.0)*r02*x14801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14809=((1.0)*sj9);
CheckValue<IkReal> x14810=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x14809))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x14810.valid){
continue;
}
CheckValue<IkReal> x14811 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*r21*x14809)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x14811.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14810.value)))+(x14811.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14812=IKcos(j8);
IkReal x14813=IKsin(j8);
IkReal x14814=(r21*sj9);
IkReal x14815=(cj9*r20);
IkReal x14816=((1.0)*x14813);
IkReal x14817=((1.0)*x14812);
IkReal x14818=(cj4*x14812);
IkReal x14819=(r12*sj4);
IkReal x14820=(r01*sj9);
IkReal x14821=(cj4*x14813);
IkReal x14822=(r11*sj4*sj9);
IkReal x14823=(cj9*r00);
IkReal x14824=((1.0)*cj4*x14813);
IkReal x14825=(cj9*r10*sj4);
IkReal x14826=(r02*sj4);
IkReal x14827=(r11*sj9);
IkReal x14828=(cj9*r00*sj4);
IkReal x14829=(cj9*r10);
IkReal x14830=((1.0)*cj4*x14812);
IkReal x14831=(r01*sj4*sj9);
evalcond[0]=(((r22*x14812))+((x14813*x14814))+(((-1.0)*x14815*x14816)));
evalcond[1]=(((x14812*x14814))+(((-1.0)*r22*x14816))+(((-1.0)*x14815*x14817)));
evalcond[2]=((((-1.0)*x14816*x14825))+((x14812*x14819))+(((-1.0)*x14823*x14824))+((x14813*x14822))+((r02*x14818))+((x14820*x14821)));
evalcond[3]=((((-1.0)*r12*x14824))+((x14813*x14826))+((x14818*x14827))+(((-1.0)*x14829*x14830))+((x14812*x14828))+(((-1.0)*x14817*x14831)));
evalcond[4]=((1.0)+(((-1.0)*x14824*x14829))+(((-1.0)*x14816*x14831))+((x14813*x14828))+((r12*x14818))+((x14821*x14827))+(((-1.0)*x14817*x14826)));
evalcond[5]=((1.0)+(((-1.0)*x14817*x14825))+((x14812*x14822))+(((-1.0)*x14816*x14819))+(((-1.0)*r02*x14824))+(((-1.0)*x14823*x14830))+((x14818*x14820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14832=((1.0)*sj9);
IkReal x14833=((1.0)*cj9);
CheckValue<IkReal> x14834=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r01*x14833))+(((-1.0)*cj4*r00*x14832))+(((-1.0)*r10*sj4*x14832))+(((-1.0)*r11*sj4*x14833)))),-1);
if(!x14834.valid){
continue;
}
CheckValue<IkReal> x14835 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x14832))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x14835.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14834.value)))+(x14835.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14836=IKcos(j8);
IkReal x14837=IKsin(j8);
IkReal x14838=(r21*sj9);
IkReal x14839=(cj9*r20);
IkReal x14840=((1.0)*x14837);
IkReal x14841=((1.0)*x14836);
IkReal x14842=(cj4*x14836);
IkReal x14843=(r12*sj4);
IkReal x14844=(r01*sj9);
IkReal x14845=(cj4*x14837);
IkReal x14846=(r11*sj4*sj9);
IkReal x14847=(cj9*r00);
IkReal x14848=((1.0)*cj4*x14837);
IkReal x14849=(cj9*r10*sj4);
IkReal x14850=(r02*sj4);
IkReal x14851=(r11*sj9);
IkReal x14852=(cj9*r00*sj4);
IkReal x14853=(cj9*r10);
IkReal x14854=((1.0)*cj4*x14836);
IkReal x14855=(r01*sj4*sj9);
evalcond[0]=(((r22*x14836))+((x14837*x14838))+(((-1.0)*x14839*x14840)));
evalcond[1]=(((x14836*x14838))+(((-1.0)*x14839*x14841))+(((-1.0)*r22*x14840)));
evalcond[2]=(((r02*x14842))+(((-1.0)*x14847*x14848))+(((-1.0)*x14840*x14849))+((x14837*x14846))+((x14844*x14845))+((x14836*x14843)));
evalcond[3]=((((-1.0)*x14841*x14855))+((x14837*x14850))+(((-1.0)*x14853*x14854))+((x14836*x14852))+((x14842*x14851))+(((-1.0)*r12*x14848)));
evalcond[4]=((1.0)+(((-1.0)*x14841*x14850))+(((-1.0)*x14840*x14855))+((x14845*x14851))+((x14837*x14852))+(((-1.0)*x14848*x14853))+((r12*x14842)));
evalcond[5]=((1.0)+((x14836*x14846))+(((-1.0)*x14847*x14854))+(((-1.0)*x14840*x14843))+((x14842*x14844))+(((-1.0)*r02*x14848))+(((-1.0)*x14841*x14849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14856=(cj9*r21);
IkReal x14857=(r20*sj9);
IkReal x14858=((1.0)*cj4);
IkReal x14859=(cj9*r01);
IkReal x14860=(r00*sj9);
IkReal x14861=((1.0)*sj4);
IkReal x14862=(cj9*r11);
IkReal x14863=(r10*sj9);
IkReal x14864=(sj4*x14859);
IkReal x14865=(sj4*x14860);
IkReal x14866=((0.03431)*cj4);
IkReal x14867=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x14856))+(((-1.0)*x14857)));
evalcond[2]=((((-1.0)*x14858*x14859))+(((-1.0)*x14861*x14862))+(((-1.0)*x14861*x14863))+(((-1.0)*x14858*x14860)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x14856))+(((0.03431)*x14857)));
evalcond[4]=(x14864+x14865+(((-1.0)*x14858*x14862))+(((-1.0)*x14858*x14863)));
evalcond[5]=((0.00337)+((x14863*x14867))+((x14859*x14866))+((x14862*x14867))+(((-1.0)*px*x14858))+(((-1.0)*py*x14861))+((x14860*x14866)));
evalcond[6]=((-0.00036)+((px*sj4))+((x14863*x14866))+(((-0.03431)*x14865))+(((-1.0)*py*x14858))+(((-0.03431)*x14864))+((x14862*x14866)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x14868=((1.0)*sj9);
IkReal x14869=((((-1.0)*cj4*r10*x14868))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x14869;
j8eval[1]=((IKabs(((((-1.0)*r21*x14868))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x14869);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x14870=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x14870;
j8eval[1]=IKsign(x14870);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x14871=(cj4*r11);
IkReal x14872=((1.0)*r21);
IkReal x14873=(r01*sj4);
IkReal x14874=(cj9*r20*sj9);
IkReal x14875=(cj4*r10);
IkReal x14876=cj9*cj9;
IkReal x14877=(r20*x14876);
IkReal x14878=(((cj9*r00*r21*sj4*sj9))+((x14873*x14874))+((cj4*r12*r22))+(((-1.0)*cj9*r21*sj9*x14875))+((r21*x14871))+(((-1.0)*x14872*x14873))+(((-1.0)*r02*r22*sj4))+((r21*x14873*x14876))+((x14875*x14877))+(((-1.0)*r00*sj4*x14877))+(((-1.0)*r21*x14871*x14876))+(((-1.0)*cj4*r11*x14874)));
j8eval[0]=x14878;
j8eval[1]=IKsign(x14878);
j8eval[2]=((IKabs(((((-1.0)*sj9*x14872))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14879=((1.0)*r21);
IkReal x14880=(cj4*r11);
IkReal x14881=(r01*sj4);
IkReal x14882=(cj9*r20*sj9);
IkReal x14883=(cj4*r10);
IkReal x14884=cj9*cj9;
IkReal x14885=(r20*x14884);
CheckValue<IkReal> x14886=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14879*x14881))+((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*r00*sj4*x14885))+(((-1.0)*r02*r22*sj4))+((x14881*x14882))+((x14883*x14885))+(((-1.0)*r21*x14880*x14884))+(((-1.0)*cj4*r11*x14882))+((r21*x14881*x14884))+(((-1.0)*cj9*r21*sj9*x14883))+((r21*x14880)))),-1);
if(!x14886.valid){
continue;
}
CheckValue<IkReal> x14887 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*sj9*x14879))),IKFAST_ATAN2_MAGTHRESH);
if(!x14887.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14886.value)))+(x14887.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14888=IKcos(j8);
IkReal x14889=IKsin(j8);
IkReal x14890=(r21*sj9);
IkReal x14891=(cj9*r20);
IkReal x14892=((1.0)*x14889);
IkReal x14893=((1.0)*x14888);
IkReal x14894=(cj4*x14888);
IkReal x14895=(r12*sj4);
IkReal x14896=(r01*sj9);
IkReal x14897=(cj4*x14889);
IkReal x14898=(r11*sj4*sj9);
IkReal x14899=(cj9*r00);
IkReal x14900=((1.0)*cj4*x14889);
IkReal x14901=(cj9*r10*sj4);
IkReal x14902=(r02*sj4);
IkReal x14903=(r11*sj9);
IkReal x14904=(cj9*r00*sj4);
IkReal x14905=(cj9*r10);
IkReal x14906=(r01*sj4*sj9);
IkReal x14907=((1.0)*cj4*x14888);
evalcond[0]=((((-1.0)*x14891*x14892))+((r22*x14888))+((x14889*x14890)));
evalcond[1]=((((-1.0)*x14891*x14893))+((x14888*x14890))+(((-1.0)*r22*x14892)));
evalcond[2]=((-1.0)+((x14888*x14895))+((x14896*x14897))+((x14889*x14898))+((r02*x14894))+(((-1.0)*x14899*x14900))+(((-1.0)*x14892*x14901)));
evalcond[3]=((((-1.0)*x14900*x14905))+(((-1.0)*x14893*x14902))+((x14889*x14904))+((x14897*x14903))+((r12*x14894))+(((-1.0)*x14892*x14906)));
evalcond[4]=(((x14894*x14896))+(((-1.0)*r02*x14900))+(((-1.0)*x14893*x14901))+(((-1.0)*x14899*x14907))+((x14888*x14898))+(((-1.0)*x14892*x14895)));
evalcond[5]=((1.0)+((x14888*x14904))+((x14889*x14902))+(((-1.0)*x14893*x14906))+(((-1.0)*r12*x14900))+((x14894*x14903))+(((-1.0)*x14905*x14907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14908 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x14908.valid){
continue;
}
CheckValue<IkReal> x14909=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x14909.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14908.value)+(((1.5707963267949)*(x14909.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14910=IKcos(j8);
IkReal x14911=IKsin(j8);
IkReal x14912=(r21*sj9);
IkReal x14913=(cj9*r20);
IkReal x14914=((1.0)*x14911);
IkReal x14915=((1.0)*x14910);
IkReal x14916=(cj4*x14910);
IkReal x14917=(r12*sj4);
IkReal x14918=(r01*sj9);
IkReal x14919=(cj4*x14911);
IkReal x14920=(r11*sj4*sj9);
IkReal x14921=(cj9*r00);
IkReal x14922=((1.0)*cj4*x14911);
IkReal x14923=(cj9*r10*sj4);
IkReal x14924=(r02*sj4);
IkReal x14925=(r11*sj9);
IkReal x14926=(cj9*r00*sj4);
IkReal x14927=(cj9*r10);
IkReal x14928=(r01*sj4*sj9);
IkReal x14929=((1.0)*cj4*x14910);
evalcond[0]=(((r22*x14910))+(((-1.0)*x14913*x14914))+((x14911*x14912)));
evalcond[1]=(((x14910*x14912))+(((-1.0)*x14913*x14915))+(((-1.0)*r22*x14914)));
evalcond[2]=((-1.0)+((x14918*x14919))+((x14910*x14917))+(((-1.0)*x14921*x14922))+((x14911*x14920))+((r02*x14916))+(((-1.0)*x14914*x14923)));
evalcond[3]=(((x14919*x14925))+(((-1.0)*x14914*x14928))+((r12*x14916))+(((-1.0)*x14915*x14924))+((x14911*x14926))+(((-1.0)*x14922*x14927)));
evalcond[4]=((((-1.0)*r02*x14922))+(((-1.0)*x14921*x14929))+(((-1.0)*x14915*x14923))+(((-1.0)*x14914*x14917))+((x14916*x14918))+((x14910*x14920)));
evalcond[5]=((1.0)+(((-1.0)*r12*x14922))+(((-1.0)*x14927*x14929))+((x14910*x14926))+((x14916*x14925))+((x14911*x14924))+(((-1.0)*x14915*x14928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14930=((1.0)*sj9);
CheckValue<IkReal> x14931=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x14930))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x14931.valid){
continue;
}
CheckValue<IkReal> x14932 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x14930))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x14932.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14931.value)))+(x14932.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14933=IKcos(j8);
IkReal x14934=IKsin(j8);
IkReal x14935=(r21*sj9);
IkReal x14936=(cj9*r20);
IkReal x14937=((1.0)*x14934);
IkReal x14938=((1.0)*x14933);
IkReal x14939=(cj4*x14933);
IkReal x14940=(r12*sj4);
IkReal x14941=(r01*sj9);
IkReal x14942=(cj4*x14934);
IkReal x14943=(r11*sj4*sj9);
IkReal x14944=(cj9*r00);
IkReal x14945=((1.0)*cj4*x14934);
IkReal x14946=(cj9*r10*sj4);
IkReal x14947=(r02*sj4);
IkReal x14948=(r11*sj9);
IkReal x14949=(cj9*r00*sj4);
IkReal x14950=(cj9*r10);
IkReal x14951=(r01*sj4*sj9);
IkReal x14952=((1.0)*cj4*x14933);
evalcond[0]=(((x14934*x14935))+(((-1.0)*x14936*x14937))+((r22*x14933)));
evalcond[1]=(((x14933*x14935))+(((-1.0)*x14936*x14938))+(((-1.0)*r22*x14937)));
evalcond[2]=((-1.0)+((x14934*x14943))+(((-1.0)*x14944*x14945))+((x14933*x14940))+((r02*x14939))+((x14941*x14942))+(((-1.0)*x14937*x14946)));
evalcond[3]=(((r12*x14939))+((x14942*x14948))+(((-1.0)*x14938*x14947))+(((-1.0)*x14945*x14950))+((x14934*x14949))+(((-1.0)*x14937*x14951)));
evalcond[4]=(((x14939*x14941))+(((-1.0)*x14937*x14940))+(((-1.0)*x14938*x14946))+(((-1.0)*x14944*x14952))+((x14933*x14943))+(((-1.0)*r02*x14945)));
evalcond[5]=((1.0)+((x14939*x14948))+((x14933*x14949))+((x14934*x14947))+(((-1.0)*r12*x14945))+(((-1.0)*x14950*x14952))+(((-1.0)*x14938*x14951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14953=(cj9*r21);
IkReal x14954=(r20*sj9);
IkReal x14955=((1.0)*cj4);
IkReal x14956=(cj9*r01);
IkReal x14957=(r00*sj9);
IkReal x14958=((1.0)*sj4);
IkReal x14959=(cj9*r11);
IkReal x14960=(r10*sj9);
IkReal x14961=(sj4*x14956);
IkReal x14962=(sj4*x14957);
IkReal x14963=((0.03431)*cj4);
IkReal x14964=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x14954))+(((-1.0)*x14953)));
evalcond[2]=((((-1.0)*x14958*x14959))+(((-1.0)*x14955*x14957))+(((-1.0)*x14958*x14960))+(((-1.0)*x14955*x14956)));
evalcond[3]=((-0.16132)+(((0.03431)*x14954))+(((-1.0)*(1.0)*pz))+(((0.03431)*x14953)));
evalcond[4]=(x14961+x14962+(((-1.0)*x14955*x14959))+(((-1.0)*x14955*x14960)));
evalcond[5]=((0.00337)+((x14956*x14963))+(((-1.0)*px*x14955))+(((-1.0)*py*x14958))+((x14960*x14964))+((x14957*x14963))+((x14959*x14964)));
evalcond[6]=((0.00036)+((px*sj4))+((x14960*x14963))+(((-1.0)*py*x14955))+(((-0.03431)*x14962))+((x14959*x14963))+(((-0.03431)*x14961)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x14965=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x14965;
j8eval[1]=IKsign(x14965);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x14966=((1.0)*sj9);
IkReal x14967=(((cj4*cj9*r11))+(((-1.0)*r00*sj4*x14966))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)));
j8eval[0]=x14967;
j8eval[1]=((IKabs(((((-1.0)*r21*x14966))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x14967);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x14968=(r01*sj4);
IkReal x14969=((1.0)*r21);
IkReal x14970=(cj4*r11);
IkReal x14971=(cj9*r20*sj9);
IkReal x14972=cj9*cj9;
IkReal x14973=(r00*sj4);
IkReal x14974=(r20*x14972);
IkReal x14975=(((x14970*x14971))+(((-1.0)*r01*sj4*x14971))+((r21*x14968))+(((-1.0)*r21*x14968*x14972))+(((-1.0)*x14969*x14970))+(((-1.0)*cj9*r21*sj9*x14973))+(((-1.0)*cj4*r10*x14974))+((x14973*x14974))+((r02*r22*sj4))+(((-1.0)*cj4*r12*r22))+((r21*x14970*x14972))+((cj4*cj9*r10*r21*sj9)));
j8eval[0]=x14975;
j8eval[1]=IKsign(x14975);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*sj9*x14969)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14976=((1.0)*r21);
IkReal x14977=(r01*sj4);
IkReal x14978=(cj4*r11);
IkReal x14979=(cj9*r20*sj9);
IkReal x14980=cj9*cj9;
IkReal x14981=(r00*sj4);
IkReal x14982=(r20*x14980);
CheckValue<IkReal> x14983=IKPowWithIntegerCheck(IKsign((((r21*x14977))+((r21*x14978*x14980))+((x14978*x14979))+((x14981*x14982))+(((-1.0)*cj4*r10*x14982))+((r02*r22*sj4))+(((-1.0)*r01*sj4*x14979))+(((-1.0)*cj4*r12*r22))+(((-1.0)*cj9*r21*sj9*x14981))+(((-1.0)*r21*x14977*x14980))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*x14976*x14978)))),-1);
if(!x14983.valid){
continue;
}
CheckValue<IkReal> x14984 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x14976))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x14984.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14983.value)))+(x14984.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14985=IKcos(j8);
IkReal x14986=IKsin(j8);
IkReal x14987=(r21*sj9);
IkReal x14988=(cj9*r20);
IkReal x14989=((1.0)*x14986);
IkReal x14990=((1.0)*x14985);
IkReal x14991=(cj4*x14985);
IkReal x14992=(r12*sj4);
IkReal x14993=(r01*sj9);
IkReal x14994=(cj4*x14986);
IkReal x14995=(r11*sj4*sj9);
IkReal x14996=(cj9*r00);
IkReal x14997=((1.0)*cj4*x14986);
IkReal x14998=(cj9*r10*sj4);
IkReal x14999=(r02*sj4);
IkReal x15000=(r11*sj9);
IkReal x15001=(cj9*r00*sj4);
IkReal x15002=(cj9*r10);
IkReal x15003=(r01*sj4*sj9);
IkReal x15004=((1.0)*cj4*x14985);
evalcond[0]=((((-1.0)*x14988*x14989))+((r22*x14985))+((x14986*x14987)));
evalcond[1]=(((x14985*x14987))+(((-1.0)*r22*x14989))+(((-1.0)*x14988*x14990)));
evalcond[2]=((1.0)+((r02*x14991))+(((-1.0)*x14989*x14998))+(((-1.0)*x14996*x14997))+((x14986*x14995))+((x14993*x14994))+((x14985*x14992)));
evalcond[3]=(((x14994*x15000))+(((-1.0)*x14997*x15002))+(((-1.0)*x14990*x14999))+(((-1.0)*x14989*x15003))+((r12*x14991))+((x14986*x15001)));
evalcond[4]=((((-1.0)*r02*x14997))+(((-1.0)*x14996*x15004))+(((-1.0)*x14990*x14998))+(((-1.0)*x14989*x14992))+((x14985*x14995))+((x14991*x14993)));
evalcond[5]=((-1.0)+(((-1.0)*x15002*x15004))+(((-1.0)*r12*x14997))+((x14986*x14999))+(((-1.0)*x14990*x15003))+((x14985*x15001))+((x14991*x15000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15005=((1.0)*sj9);
CheckValue<IkReal> x15006 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x15005))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x15006.valid){
continue;
}
CheckValue<IkReal> x15007=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+(((-1.0)*r00*sj4*x15005))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x15007.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x15006.value)+(((1.5707963267949)*(x15007.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x15008=IKcos(j8);
IkReal x15009=IKsin(j8);
IkReal x15010=(r21*sj9);
IkReal x15011=(cj9*r20);
IkReal x15012=((1.0)*x15009);
IkReal x15013=((1.0)*x15008);
IkReal x15014=(cj4*x15008);
IkReal x15015=(r12*sj4);
IkReal x15016=(r01*sj9);
IkReal x15017=(cj4*x15009);
IkReal x15018=(r11*sj4*sj9);
IkReal x15019=(cj9*r00);
IkReal x15020=((1.0)*cj4*x15009);
IkReal x15021=(cj9*r10*sj4);
IkReal x15022=(r02*sj4);
IkReal x15023=(r11*sj9);
IkReal x15024=(cj9*r00*sj4);
IkReal x15025=(cj9*r10);
IkReal x15026=(r01*sj4*sj9);
IkReal x15027=((1.0)*cj4*x15008);
evalcond[0]=(((r22*x15008))+(((-1.0)*x15011*x15012))+((x15009*x15010)));
evalcond[1]=((((-1.0)*r22*x15012))+((x15008*x15010))+(((-1.0)*x15011*x15013)));
evalcond[2]=((1.0)+((x15008*x15015))+((r02*x15014))+((x15016*x15017))+((x15009*x15018))+(((-1.0)*x15019*x15020))+(((-1.0)*x15012*x15021)));
evalcond[3]=((((-1.0)*x15012*x15026))+(((-1.0)*x15013*x15022))+((x15009*x15024))+(((-1.0)*x15020*x15025))+((x15017*x15023))+((r12*x15014)));
evalcond[4]=((((-1.0)*x15012*x15015))+(((-1.0)*x15013*x15021))+((x15014*x15016))+(((-1.0)*r02*x15020))+(((-1.0)*x15019*x15027))+((x15008*x15018)));
evalcond[5]=((-1.0)+(((-1.0)*x15013*x15026))+((x15008*x15024))+(((-1.0)*x15025*x15027))+((x15014*x15023))+((x15009*x15022))+(((-1.0)*r12*x15020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x15028 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x15028.valid){
continue;
}
CheckValue<IkReal> x15029=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x15029.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x15028.value)+(((1.5707963267949)*(x15029.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x15030=IKcos(j8);
IkReal x15031=IKsin(j8);
IkReal x15032=(r21*sj9);
IkReal x15033=(cj9*r20);
IkReal x15034=((1.0)*x15031);
IkReal x15035=((1.0)*x15030);
IkReal x15036=(cj4*x15030);
IkReal x15037=(r12*sj4);
IkReal x15038=(r01*sj9);
IkReal x15039=(cj4*x15031);
IkReal x15040=(r11*sj4*sj9);
IkReal x15041=(cj9*r00);
IkReal x15042=((1.0)*cj4*x15031);
IkReal x15043=(cj9*r10*sj4);
IkReal x15044=(r02*sj4);
IkReal x15045=(r11*sj9);
IkReal x15046=(cj9*r00*sj4);
IkReal x15047=(cj9*r10);
IkReal x15048=(r01*sj4*sj9);
IkReal x15049=((1.0)*cj4*x15030);
evalcond[0]=(((r22*x15030))+((x15031*x15032))+(((-1.0)*x15033*x15034)));
evalcond[1]=((((-1.0)*x15033*x15035))+(((-1.0)*r22*x15034))+((x15030*x15032)));
evalcond[2]=((1.0)+((x15030*x15037))+((r02*x15036))+((x15031*x15040))+(((-1.0)*x15041*x15042))+(((-1.0)*x15034*x15043))+((x15038*x15039)));
evalcond[3]=((((-1.0)*x15034*x15048))+((x15039*x15045))+((r12*x15036))+((x15031*x15046))+(((-1.0)*x15035*x15044))+(((-1.0)*x15042*x15047)));
evalcond[4]=((((-1.0)*x15035*x15043))+(((-1.0)*x15034*x15037))+(((-1.0)*x15041*x15049))+((x15036*x15038))+(((-1.0)*r02*x15042))+((x15030*x15040)));
evalcond[5]=((-1.0)+(((-1.0)*x15047*x15049))+(((-1.0)*r12*x15042))+(((-1.0)*x15035*x15048))+((x15031*x15044))+((x15030*x15046))+((x15036*x15045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15050=((1.0)*cj4);
CheckValue<IkReal> x15051 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x15051.valid){
continue;
}
CheckValue<IkReal> x15052=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*r11*x15050))+((cj9*r01*sj4))+(((-1.0)*r10*sj9*x15050))+((r00*sj4*sj9)))),-1);
if(!x15052.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x15051.value)+(((1.5707963267949)*(x15052.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x15053=IKcos(j8);
IkReal x15054=IKsin(j8);
IkReal x15055=(r21*sj9);
IkReal x15056=(cj9*r20);
IkReal x15057=((1.0)*x15054);
IkReal x15058=((1.0)*x15053);
IkReal x15059=(r02*sj4);
IkReal x15060=((1.0)*cj4*x15054);
IkReal x15061=(r11*sj9);
IkReal x15062=(cj4*x15053);
IkReal x15063=(cj9*r00*sj4);
IkReal x15064=(cj9*r10);
IkReal x15065=((1.0)*cj4*x15053);
IkReal x15066=(r01*sj4*sj9);
IkReal x15067=(r12*sj4);
IkReal x15068=(r01*sj9);
IkReal x15069=(cj4*x15054);
IkReal x15070=(r11*sj4*sj9);
IkReal x15071=(cj9*r00);
IkReal x15072=(cj9*r10*sj4);
IkReal x15073=((-1.0)*(((1.0)*cj6)));
evalcond[0]=(((x15054*x15055))+((r22*x15053))+(((-1.0)*x15056*x15057)));
evalcond[1]=(((x15053*x15055))+(((-1.0)*x15056*x15058))+(((-1.0)*r22*x15057)));
evalcond[2]=(((x15053*x15063))+((x15054*x15059))+(((-1.0)*r12*x15060))+((x15061*x15062))+sj6+(((-1.0)*x15064*x15065))+(((-1.0)*x15058*x15066)));
evalcond[3]=(((r02*x15062))+((x15054*x15070))+(((-1.0)*x15060*x15071))+(((-1.0)*x15057*x15072))+((x15053*x15067))+((x15068*x15069))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=(((x15054*x15063))+(((-1.0)*x15060*x15064))+((r12*x15062))+(((-1.0)*x15057*x15066))+x15073+(((-1.0)*x15058*x15059))+((x15061*x15069)));
evalcond[5]=((((-1.0)*r02*x15060))+((x15062*x15068))+(((-1.0)*x15057*x15067))+(((-1.0)*x15058*x15072))+x15073+((x15053*x15070))+(((-1.0)*x15065*x15071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15074=((1.0)*sj6);
CheckValue<IkReal> x15075=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x15075.valid){
continue;
}
CheckValue<IkReal> x15076 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj9*x15074))+((cj9*r20*sj6)))),((-1.0)*r22*x15074),IKFAST_ATAN2_MAGTHRESH);
if(!x15076.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15075.value)))+(x15076.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x15077=IKcos(j8);
IkReal x15078=IKsin(j8);
IkReal x15079=(r21*sj9);
IkReal x15080=(cj9*r20);
IkReal x15081=((1.0)*x15078);
IkReal x15082=((1.0)*x15077);
IkReal x15083=(r02*sj4);
IkReal x15084=((1.0)*cj4*x15078);
IkReal x15085=(r11*sj9);
IkReal x15086=(cj4*x15077);
IkReal x15087=(cj9*r00*sj4);
IkReal x15088=(cj9*r10);
IkReal x15089=((1.0)*cj4*x15077);
IkReal x15090=(r01*sj4*sj9);
IkReal x15091=(r12*sj4);
IkReal x15092=(r01*sj9);
IkReal x15093=(cj4*x15078);
IkReal x15094=(r11*sj4*sj9);
IkReal x15095=(cj9*r00);
IkReal x15096=(cj9*r10*sj4);
IkReal x15097=((-1.0)*(((1.0)*cj6)));
evalcond[0]=(((r22*x15077))+(((-1.0)*x15080*x15081))+((x15078*x15079)));
evalcond[1]=((((-1.0)*r22*x15081))+((x15077*x15079))+(((-1.0)*x15080*x15082)));
evalcond[2]=((((-1.0)*x15088*x15089))+((x15085*x15086))+((x15077*x15087))+((x15078*x15083))+(((-1.0)*x15082*x15090))+sj6+(((-1.0)*r12*x15084)));
evalcond[3]=(((x15078*x15094))+((x15077*x15091))+(((-1.0)*x15081*x15096))+(((-1.0)*x15084*x15095))+((x15092*x15093))+(((-1.0)*(1.0)*sj6))+((r02*x15086)));
evalcond[4]=(((x15085*x15093))+(((-1.0)*x15081*x15090))+(((-1.0)*x15084*x15088))+x15097+((x15078*x15087))+((r12*x15086))+(((-1.0)*x15082*x15083)));
evalcond[5]=((((-1.0)*x15082*x15096))+(((-1.0)*r02*x15084))+((x15077*x15094))+(((-1.0)*x15089*x15095))+x15097+((x15086*x15092))+(((-1.0)*x15081*x15091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x15098 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x15098.valid){
continue;
}
CheckValue<IkReal> x15099=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x15099.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x15098.value)+(((1.5707963267949)*(x15099.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x15100=IKcos(j8);
IkReal x15101=IKsin(j8);
IkReal x15102=(r21*sj9);
IkReal x15103=(cj9*r20);
IkReal x15104=((1.0)*x15101);
IkReal x15105=((1.0)*x15100);
IkReal x15106=(r02*sj4);
IkReal x15107=((1.0)*cj4*x15101);
IkReal x15108=(r11*sj9);
IkReal x15109=(cj4*x15100);
IkReal x15110=(cj9*r00*sj4);
IkReal x15111=(cj9*r10);
IkReal x15112=((1.0)*cj4*x15100);
IkReal x15113=(r01*sj4*sj9);
IkReal x15114=(r12*sj4);
IkReal x15115=(r01*sj9);
IkReal x15116=(cj4*x15101);
IkReal x15117=(r11*sj4*sj9);
IkReal x15118=(cj9*r00);
IkReal x15119=(cj9*r10*sj4);
IkReal x15120=((-1.0)*(((1.0)*cj6)));
evalcond[0]=(((r22*x15100))+((x15101*x15102))+(((-1.0)*x15103*x15104)));
evalcond[1]=((((-1.0)*x15103*x15105))+((x15100*x15102))+(((-1.0)*r22*x15104)));
evalcond[2]=((((-1.0)*r12*x15107))+((x15108*x15109))+sj6+((x15101*x15106))+(((-1.0)*x15111*x15112))+(((-1.0)*x15105*x15113))+((x15100*x15110)));
evalcond[3]=(((x15100*x15114))+((x15101*x15117))+((r02*x15109))+(((-1.0)*x15107*x15118))+(((-1.0)*x15104*x15119))+(((-1.0)*(1.0)*sj6))+((x15115*x15116)));
evalcond[4]=(x15120+((x15108*x15116))+((r12*x15109))+(((-1.0)*x15105*x15106))+((x15101*x15110))+(((-1.0)*x15104*x15113))+(((-1.0)*x15107*x15111)));
evalcond[5]=((((-1.0)*x15112*x15118))+(((-1.0)*x15105*x15119))+x15120+(((-1.0)*r02*x15107))+((x15100*x15117))+((x15109*x15115))+(((-1.0)*x15104*x15114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15121=r21*r21;
IkReal x15122=(cj9*r20);
IkReal x15123=cj9*cj9;
IkReal x15124=(sj5*sj7);
IkReal x15125=(cj5*cj6);
IkReal x15126=(r21*sj9);
IkReal x15127=((1.0)*cj9*r20);
IkReal x15128=(cj5*cj7*sj6);
CheckValue<IkReal> x15129=IKPowWithIntegerCheck(IKsign((x15121+(r22*r22)+(((-1.0)*x15121*x15123))+(((-2.0)*r21*sj9*x15122))+((x15123*(r20*r20))))),-1);
if(!x15129.valid){
continue;
}
CheckValue<IkReal> x15130 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15128))+((r22*x15124))+((x15125*x15126))+(((-1.0)*x15125*x15127)))),(((r22*x15125))+(((-1.0)*x15127*x15128))+((x15122*x15124))+((x15126*x15128))+(((-1.0)*sj5*sj7*x15126))),IKFAST_ATAN2_MAGTHRESH);
if(!x15130.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15129.value)))+(x15130.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x15131=IKcos(j8);
IkReal x15132=IKsin(j8);
IkReal x15133=(r21*sj9);
IkReal x15134=(cj9*r20);
IkReal x15135=((1.0)*x15132);
IkReal x15136=((1.0)*sj6);
IkReal x15137=((1.0)*x15131);
IkReal x15138=(cj4*x15131);
IkReal x15139=(r12*sj4);
IkReal x15140=(r01*sj9);
IkReal x15141=(cj4*x15132);
IkReal x15142=(r11*sj4*sj9);
IkReal x15143=(cj9*r00);
IkReal x15144=((1.0)*cj4*x15132);
IkReal x15145=(cj9*r10*sj4);
IkReal x15146=(r02*sj4);
IkReal x15147=(r11*sj9);
IkReal x15148=(cj9*r00*sj4);
IkReal x15149=(cj9*r10);
IkReal x15150=(r01*sj4*sj9);
IkReal x15151=((1.0)*cj4*x15131);
evalcond[0]=((((-1.0)*x15134*x15135))+(((-1.0)*(1.0)*cj5*cj6))+((x15132*x15133))+((r22*x15131)));
evalcond[1]=((((-1.0)*x15134*x15137))+((x15131*x15133))+((sj5*sj7))+(((-1.0)*r22*x15135))+(((-1.0)*cj5*cj7*x15136)));
evalcond[2]=((((-1.0)*x15135*x15145))+(((-1.0)*x15136))+((x15140*x15141))+((x15132*x15142))+(((-1.0)*x15143*x15144))+((r02*x15138))+((x15131*x15139)));
evalcond[3]=(((x15132*x15148))+(((-1.0)*x15135*x15150))+((cj6*sj5))+(((-1.0)*x15137*x15146))+(((-1.0)*x15144*x15149))+((r12*x15138))+((x15141*x15147)));
evalcond[4]=((((-1.0)*x15137*x15145))+(((-1.0)*r02*x15144))+(((-1.0)*x15135*x15139))+((x15138*x15140))+(((-1.0)*x15143*x15151))+((cj6*cj7))+((x15131*x15142)));
evalcond[5]=(((cj5*sj7))+(((-1.0)*x15137*x15150))+(((-1.0)*r12*x15144))+(((-1.0)*x15149*x15151))+((x15138*x15147))+((cj7*sj5*sj6))+((x15131*x15148))+((x15132*x15146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15152=(cj6*sj5);
IkReal x15153=(cj4*cj5*cj6);
IkReal x15154=(cj5*cj6);
CheckValue<IkReal> x15155=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r00*sj9))+(((-1.0)*r10*sj4*sj9))+(((-1.0)*cj9*r11*sj4))+(((-1.0)*cj4*cj9*r01)))),-1);
if(!x15155.valid){
continue;
}
CheckValue<IkReal> x15156 = IKatan2WithCheck(IkReal((((r12*x15153))+(((-1.0)*r02*sj4*x15154))+((r22*x15152)))),((((-1.0)*r21*sj9*x15152))+((cj9*r20*x15152))+((cj9*r10*x15153))+(((-1.0)*cj9*r00*sj4*x15154))+((r01*sj4*sj9*x15154))+(((-1.0)*cj4*r11*sj9*x15154))),IKFAST_ATAN2_MAGTHRESH);
if(!x15156.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15155.value)))+(x15156.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x15157=IKcos(j8);
IkReal x15158=IKsin(j8);
IkReal x15159=(r21*sj9);
IkReal x15160=(cj9*r20);
IkReal x15161=((1.0)*x15158);
IkReal x15162=((1.0)*sj6);
IkReal x15163=((1.0)*x15157);
IkReal x15164=(cj4*x15157);
IkReal x15165=(r12*sj4);
IkReal x15166=(r01*sj9);
IkReal x15167=(cj4*x15158);
IkReal x15168=(r11*sj4*sj9);
IkReal x15169=(cj9*r00);
IkReal x15170=((1.0)*cj4*x15158);
IkReal x15171=(cj9*r10*sj4);
IkReal x15172=(r02*sj4);
IkReal x15173=(r11*sj9);
IkReal x15174=(cj9*r00*sj4);
IkReal x15175=(cj9*r10);
IkReal x15176=(r01*sj4*sj9);
IkReal x15177=((1.0)*cj4*x15157);
evalcond[0]=((((-1.0)*(1.0)*cj5*cj6))+((x15158*x15159))+((r22*x15157))+(((-1.0)*x15160*x15161)));
evalcond[1]=((((-1.0)*cj5*cj7*x15162))+(((-1.0)*r22*x15161))+((x15157*x15159))+((sj5*sj7))+(((-1.0)*x15160*x15163)));
evalcond[2]=(((x15158*x15168))+((r02*x15164))+(((-1.0)*x15162))+(((-1.0)*x15169*x15170))+((x15157*x15165))+(((-1.0)*x15161*x15171))+((x15166*x15167)));
evalcond[3]=(((cj6*sj5))+(((-1.0)*x15163*x15172))+(((-1.0)*x15161*x15176))+(((-1.0)*x15170*x15175))+((x15167*x15173))+((r12*x15164))+((x15158*x15174)));
evalcond[4]=((((-1.0)*r02*x15170))+((x15157*x15168))+(((-1.0)*x15161*x15165))+((x15164*x15166))+((cj6*cj7))+(((-1.0)*x15163*x15171))+(((-1.0)*x15169*x15177)));
evalcond[5]=(((cj5*sj7))+((x15158*x15172))+(((-1.0)*x15175*x15177))+(((-1.0)*x15163*x15176))+((x15157*x15174))+((cj7*sj5*sj6))+((x15164*x15173))+(((-1.0)*r12*x15170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15178=((1.0)*sj6);
IkReal x15179=(cj5*cj6);
IkReal x15180=(cj5*cj6*sj4);
CheckValue<IkReal> x15181=IKPowWithIntegerCheck(IKsign((((r10*((cj4*sj9))))+(((-1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*sj9))+((r11*((cj4*cj9)))))),-1);
if(!x15181.valid){
continue;
}
CheckValue<IkReal> x15182 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15178))+((r12*x15180))+((cj4*r02*x15179)))),((((-1.0)*cj4*r01*sj9*x15179))+((cj9*r10*x15180))+((cj4*cj9*r00*x15179))+(((-1.0)*cj9*r20*x15178))+((r21*sj6*sj9))+(((-1.0)*r11*sj4*sj9*x15179))),IKFAST_ATAN2_MAGTHRESH);
if(!x15182.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15181.value)))+(x15182.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x15183=IKcos(j8);
IkReal x15184=IKsin(j8);
IkReal x15185=(r21*sj9);
IkReal x15186=(cj9*r20);
IkReal x15187=((1.0)*x15184);
IkReal x15188=((1.0)*sj6);
IkReal x15189=((1.0)*x15183);
IkReal x15190=(cj4*x15183);
IkReal x15191=(r12*sj4);
IkReal x15192=(r01*sj9);
IkReal x15193=(cj4*x15184);
IkReal x15194=(r11*sj4*sj9);
IkReal x15195=(cj9*r00);
IkReal x15196=((1.0)*cj4*x15184);
IkReal x15197=(cj9*r10*sj4);
IkReal x15198=(r02*sj4);
IkReal x15199=(r11*sj9);
IkReal x15200=(cj9*r00*sj4);
IkReal x15201=(cj9*r10);
IkReal x15202=(r01*sj4*sj9);
IkReal x15203=((1.0)*cj4*x15183);
evalcond[0]=((((-1.0)*(1.0)*cj5*cj6))+(((-1.0)*x15186*x15187))+((x15184*x15185))+((r22*x15183)));
evalcond[1]=((((-1.0)*r22*x15187))+((x15183*x15185))+((sj5*sj7))+(((-1.0)*x15186*x15189))+(((-1.0)*cj5*cj7*x15188)));
evalcond[2]=((((-1.0)*x15187*x15197))+(((-1.0)*x15188))+((x15184*x15194))+(((-1.0)*x15195*x15196))+((r02*x15190))+((x15183*x15191))+((x15192*x15193)));
evalcond[3]=((((-1.0)*x15187*x15202))+((cj6*sj5))+((r12*x15190))+((x15184*x15200))+(((-1.0)*x15196*x15201))+((x15193*x15199))+(((-1.0)*x15189*x15198)));
evalcond[4]=(((x15183*x15194))+(((-1.0)*x15189*x15197))+(((-1.0)*x15187*x15191))+(((-1.0)*x15195*x15203))+((cj6*cj7))+((x15190*x15192))+(((-1.0)*r02*x15196)));
evalcond[5]=(((cj5*sj7))+((x15184*x15198))+(((-1.0)*x15201*x15203))+(((-1.0)*x15189*x15202))+((x15183*x15200))+((cj7*sj5*sj6))+((x15190*x15199))+(((-1.0)*r12*x15196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15204=r21*r21;
IkReal x15205=(cj9*r20);
IkReal x15206=cj9*cj9;
IkReal x15207=(sj5*sj7);
IkReal x15208=(cj5*cj6);
IkReal x15209=(r21*sj9);
IkReal x15210=((1.0)*cj9*r20);
IkReal x15211=(cj5*cj7*sj6);
CheckValue<IkReal> x15212=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15204*x15206))+x15204+(((-2.0)*r21*sj9*x15205))+(r22*r22)+((x15206*(r20*r20))))),-1);
if(!x15212.valid){
continue;
}
CheckValue<IkReal> x15213 = IKatan2WithCheck(IkReal((((x15208*x15209))+(((-1.0)*r22*x15211))+(((-1.0)*x15208*x15210))+((r22*x15207)))),(((x15205*x15207))+(((-1.0)*sj5*sj7*x15209))+(((-1.0)*x15210*x15211))+((r22*x15208))+((x15209*x15211))),IKFAST_ATAN2_MAGTHRESH);
if(!x15213.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15212.value)))+(x15213.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x15214=((1.0)*cj5);
IkReal x15215=IKcos(j8);
IkReal x15216=IKsin(j8);
IkReal x15217=(r21*sj9);
IkReal x15218=(cj9*r20);
IkReal x15219=((1.0)*x15216);
evalcond[0]=(((r22*x15215))+(((-1.0)*cj6*x15214))+((x15216*x15217))+(((-1.0)*x15218*x15219)));
evalcond[1]=((((-1.0)*x15215*x15218))+((x15215*x15217))+(((-1.0)*r22*x15219))+((sj5*sj7))+(((-1.0)*cj7*sj6*x15214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x15220=(((cj8*r21*sj9))+(((-1.0)*(1.0)*r22*sj8))+(((-1.0)*(1.0)*cj8*cj9*r20)));
j4eval[0]=x15220;
j4eval[1]=IKsign(x15220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15221=((((-1.0)*cj8*r22))+((cj9*r20*sj8))+(((-1.0)*r21*sj8*sj9)));
IkReal x15222=(cj6*cj7*cj9);
IkReal x15223=(cj6*cj7);
IkReal x15224=(cj6*sj7*sj8);
IkReal x15225=(cj6*cj8*sj7);
IkReal x15226=((1.0)*cj6*cj8*sj7);
j4eval[0]=x15221;
j4eval[1]=IKsign(x15221);
j4eval[2]=((IKabs(((((-1.0)*r12*x15224))+(((-1.0)*cj9*r10*x15226))+(((-1.0)*r10*sj9*x15223))+((r11*sj9*x15225))+(((-1.0)*r11*x15222)))))+(IKabs((((cj9*r00*x15225))+((r01*x15222))+((r02*x15224))+(((-1.0)*r01*sj9*x15226))+((r00*sj9*x15223))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15227=r20*r20;
IkReal x15228=cj9*cj9;
IkReal x15229=((-1.0)+x15227+((x15228*(r21*r21)))+(((2.0)*cj9*r20*r21*sj9))+(((-1.0)*x15227*x15228)));
j4eval[0]=x15229;
j4eval[1]=IKsign(x15229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x15230=(cj5*sj7);
IkReal x15231=(cj7*sj5);
IkReal x15232=(cj9*r21);
IkReal x15233=(r20*sj9);
IkReal x15234=(r21*sj9);
IkReal x15235=((1.0)*sj8);
IkReal x15236=(cj9*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=(x15231+x15230+(((-1.0)*x15232))+(((-1.0)*x15233)));
evalcond[2]=(((sj8*x15234))+(((-1.0)*x15235*x15236))+((cj8*r22)));
evalcond[3]=(((cj8*x15234))+(((-1.0)*(1.0)*cj5*cj7))+(((-1.0)*r22*x15235))+((sj5*sj7))+(((-1.0)*cj8*x15236)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((0.16769)*x15230))+(((0.32901)*sj5))+(((0.03431)*x15233))+(((0.03431)*x15232))+(((0.16769)*x15231))+(((-1.0)*(0.00036)*cj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x15237=(cj9*rxp1_2);
IkReal x15238=(rxp0_2*sj9);
IkReal x15239=((337.0)*cj9);
IkReal x15240=((337.0)*sj9);
j4eval[0]=(x15237+x15238);
j4eval[1]=((IKabs((((r00*x15240))+((r01*x15239)))))+(IKabs(((((-1.0)*r10*x15240))+(((-1.0)*r11*x15239))))));
j4eval[2]=IKsign(((((100000.0)*x15238))+(((100000.0)*x15237))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x15241=((1.0)*cj9);
IkReal x15242=((((-1.0)*cj8*r20*x15241))+((cj8*r21*sj9))+(((-1.0)*(1.0)*r22*sj8)));
j4eval[0]=x15242;
j4eval[1]=IKsign(x15242);
j4eval[2]=((IKabs((((cj9*r11))+((r10*sj9)))))+(IKabs(((((-1.0)*(1.0)*r00*sj9))+(((-1.0)*r01*x15241))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x15243=r20*r20;
IkReal x15244=cj9*cj9;
IkReal x15245=((-1.0)+(((2.0)*cj9*r20*r21*sj9))+(((-1.0)*x15243*x15244))+((x15244*(r21*r21)))+x15243);
IkReal x15246=(cj5*cj7*cj9);
IkReal x15247=(cj5*cj7*sj9);
IkReal x15248=(cj9*sj5*sj7);
IkReal x15249=(sj5*sj7*sj9);
j4eval[0]=x15245;
j4eval[1]=((IKabs(((((-1.0)*r01*x15248))+((r01*x15246))+(((-1.0)*r00*x15249))+((r00*x15247)))))+(IKabs(((((-1.0)*r10*x15247))+(((-1.0)*r11*x15246))+((r11*x15248))+((r10*x15249))))));
j4eval[2]=IKsign(x15245);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x15251 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x15251)==0){
continue;
}
IkReal x15250=pow(x15251,-0.5);
CheckValue<IkReal> x15252 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15252.valid){
continue;
}
IkReal gconst0=((-1.0)*(((1.0)*(x15252.value))));
IkReal gconst1=((-1.0)*rxp1_2*x15250);
IkReal gconst2=(rxp0_2*x15250);
IkReal x15253=(cj5*sj7);
IkReal x15254=(cj7*sj5);
IkReal x15255=(gconst1*r20);
IkReal x15256=(gconst2*r21);
IkReal x15257=(gconst1*r21);
IkReal x15258=((1.0)*sj8);
IkReal x15259=(gconst2*r20);
CheckValue<IkReal> x15260 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15260.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j9+(x15260.value))))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x15255))+x15253+x15254+(((-1.0)*x15256)));
evalcond[2]=((((-1.0)*x15258*x15259))+((cj8*r22))+((sj8*x15257)));
evalcond[3]=((((-1.0)*r22*x15258))+(((-1.0)*(1.0)*cj5*cj7))+((cj8*x15257))+(((-1.0)*cj8*x15259))+((sj5*sj7)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((0.03431)*x15255))+(((0.16769)*x15254))+(((0.16769)*x15253))+(((0.32901)*sj5))+(((0.03431)*x15256))+(((-1.0)*(0.00036)*cj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x15263 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15263.valid){
continue;
}
IkReal x15261=((-1.0)*(((1.0)*(x15263.value))));
IkReal x15262=x15250;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=gconst1;
cj9=gconst2;
j9=x15261;
IkReal gconst0=x15261;
IkReal gconst1=((-1.0)*rxp1_2*x15262);
IkReal gconst2=(rxp0_2*x15262);
IkReal x15264=x15250;
IkReal x15265=(rxp0_2*x15264);
IkReal x15266=(rxp1_2*x15264);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*r11*x15265))+((r10*x15266)))))+(IKabs(((((-1.0)*r00*x15266))+((r01*x15265))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15269 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15269.valid){
continue;
}
IkReal x15267=((-1.0)*(((1.0)*(x15269.value))));
IkReal x15268=x15250;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=gconst1;
cj9=gconst2;
j9=x15267;
IkReal gconst0=x15267;
IkReal gconst1=((-1.0)*rxp1_2*x15268);
IkReal gconst2=(rxp0_2*x15268);
IkReal x15270=x15250;
IkReal x15271=(rxp1_2*x15270);
IkReal x15272=(rxp0_2*x15270);
j4eval[0]=((IKabs(((((-1.0)*r10*x15271))+((r11*x15272)))))+(IKabs(((((-1.0)*r01*x15272))+((r00*x15271))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15273=gconst1*gconst1;
IkReal x15274=gconst2*gconst2;
IkReal x15275=(cj5*cj7*gconst1);
IkReal x15276=(cj5*cj7*gconst2);
IkReal x15277=(gconst1*sj5*sj7);
IkReal x15278=(gconst2*sj5*sj7);
CheckValue<IkReal> x15279 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x15277))+((r00*x15275))+((r01*x15276))+(((-1.0)*r01*x15278)))),((((-1.0)*r10*x15275))+((r11*x15278))+((r10*x15277))+(((-1.0)*r11*x15276))),IKFAST_ATAN2_MAGTHRESH);
if(!x15279.valid){
continue;
}
CheckValue<IkReal> x15280=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15273))+(((-1.0)*x15274))+((x15273*(r20*r20)))+((x15274*(r21*r21)))+(((2.0)*gconst1*gconst2*r20*r21)))),-1);
if(!x15280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15279.value)+(((1.5707963267949)*(x15280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15281=(gconst1*r00);
IkReal x15282=IKcos(j4);
IkReal x15283=((1.0)*x15282);
IkReal x15284=(gconst1*r10);
IkReal x15285=IKsin(j4);
IkReal x15286=((1.0)*x15285);
IkReal x15287=(gconst2*r01);
IkReal x15288=(gconst2*r11);
IkReal x15289=(cj5*cj7);
IkReal x15290=(sj5*sj7);
IkReal x15291=(gconst1*r00*x15285);
IkReal x15292=(gconst2*r01*x15285);
IkReal x15293=((0.03431)*x15282);
IkReal x15294=((0.03431)*x15285);
IkReal x15295=(cj8*x15282);
IkReal x15296=(cj8*x15285);
IkReal x15297=(gconst1*r01);
IkReal x15298=(sj8*x15282);
IkReal x15299=(gconst1*r11);
IkReal x15300=(sj8*x15285);
IkReal x15301=(gconst2*r00);
IkReal x15302=((1.0)*sj8*x15282);
IkReal x15303=(gconst2*r10);
IkReal x15304=((1.0)*sj8*x15285);
IkReal x15305=((1.0)*cj8*x15285);
IkReal x15306=(r02*sj8);
IkReal x15307=(r12*sj8);
IkReal x15308=(cj8*gconst1*x15282);
IkReal x15309=((1.0)*cj8*x15282);
evalcond[0]=((((-1.0)*x15286*x15288))+(((-1.0)*x15283*x15287))+(((-1.0)*x15281*x15283))+(((-1.0)*x15284*x15286)));
evalcond[1]=((((-1.0)*x15290))+x15292+x15291+(((-1.0)*x15283*x15284))+(((-1.0)*x15283*x15288))+x15289);
evalcond[2]=((0.00337)+(((-1.0)*py*x15286))+((x15288*x15294))+((x15284*x15294))+((x15287*x15293))+((x15281*x15293))+(((-1.0)*px*x15283)));
evalcond[3]=((-1.0)+((x15299*x15300))+((r02*x15295))+((x15297*x15298))+((r12*x15296))+(((-1.0)*x15301*x15302))+(((-1.0)*x15303*x15304)));
evalcond[4]=((((-1.0)*x15302*x15303))+((x15298*x15299))+((r12*x15295))+(((-1.0)*x15297*x15304))+((x15300*x15301))+(((-1.0)*r02*x15305)));
evalcond[5]=((((-1.0)*x15301*x15309))+((x15296*x15299))+(((-1.0)*x15283*x15306))+(((-1.0)*x15303*x15305))+((r01*x15308))+(((-1.0)*x15286*x15307)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x15303*x15309))+((cj7*sj5))+(((-1.0)*x15283*x15307))+((r11*x15308))+((x15296*x15301))+((x15285*x15306))+(((-1.0)*x15297*x15305)));
evalcond[7]=((((-0.16769)*x15290))+(((0.16769)*x15289))+(((-0.03431)*x15292))+((x15284*x15293))+(((-1.0)*py*x15283))+(((-0.03431)*x15291))+(((0.32901)*cj5))+((px*x15285))+((x15288*x15293))+(((0.00036)*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15310=((1.0)*gconst2);
IkReal x15311=((1.0)*sj8);
CheckValue<IkReal> x15312=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x15311*(gconst2*gconst2)))+(((-1.0)*x15311*(gconst1*gconst1)))))))+((cj8*gconst1*r21))+(((-1.0)*cj8*r20*x15310)))),-1);
if(!x15312.valid){
continue;
}
CheckValue<IkReal> x15313 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x15310))+(((-1.0)*(1.0)*gconst1*r00)))),(((gconst1*r10))+((gconst2*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x15313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15312.value)))+(x15313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15314=(gconst1*r00);
IkReal x15315=IKcos(j4);
IkReal x15316=((1.0)*x15315);
IkReal x15317=(gconst1*r10);
IkReal x15318=IKsin(j4);
IkReal x15319=((1.0)*x15318);
IkReal x15320=(gconst2*r01);
IkReal x15321=(gconst2*r11);
IkReal x15322=(cj5*cj7);
IkReal x15323=(sj5*sj7);
IkReal x15324=(gconst1*r00*x15318);
IkReal x15325=(gconst2*r01*x15318);
IkReal x15326=((0.03431)*x15315);
IkReal x15327=((0.03431)*x15318);
IkReal x15328=(cj8*x15315);
IkReal x15329=(cj8*x15318);
IkReal x15330=(gconst1*r01);
IkReal x15331=(sj8*x15315);
IkReal x15332=(gconst1*r11);
IkReal x15333=(sj8*x15318);
IkReal x15334=(gconst2*r00);
IkReal x15335=((1.0)*sj8*x15315);
IkReal x15336=(gconst2*r10);
IkReal x15337=((1.0)*sj8*x15318);
IkReal x15338=((1.0)*cj8*x15318);
IkReal x15339=(r02*sj8);
IkReal x15340=(r12*sj8);
IkReal x15341=(cj8*gconst1*x15315);
IkReal x15342=((1.0)*cj8*x15315);
evalcond[0]=((((-1.0)*x15317*x15319))+(((-1.0)*x15316*x15320))+(((-1.0)*x15314*x15316))+(((-1.0)*x15319*x15321)));
evalcond[1]=((((-1.0)*x15323))+(((-1.0)*x15316*x15317))+x15325+x15324+x15322+(((-1.0)*x15316*x15321)));
evalcond[2]=((0.00337)+((x15314*x15326))+((x15321*x15327))+(((-1.0)*px*x15316))+((x15320*x15326))+(((-1.0)*py*x15319))+((x15317*x15327)));
evalcond[3]=((-1.0)+((r12*x15329))+((r02*x15328))+((x15330*x15331))+(((-1.0)*x15334*x15335))+((x15332*x15333))+(((-1.0)*x15336*x15337)));
evalcond[4]=((((-1.0)*x15335*x15336))+(((-1.0)*x15330*x15337))+((x15331*x15332))+((r12*x15328))+((x15333*x15334))+(((-1.0)*r02*x15338)));
evalcond[5]=((((-1.0)*x15316*x15339))+((x15329*x15332))+(((-1.0)*x15336*x15338))+((r01*x15341))+(((-1.0)*x15334*x15342))+(((-1.0)*x15319*x15340)));
evalcond[6]=(((cj5*sj7))+((x15318*x15339))+(((-1.0)*x15316*x15340))+((cj7*sj5))+(((-1.0)*x15330*x15338))+((r11*x15341))+(((-1.0)*x15336*x15342))+((x15329*x15334)));
evalcond[7]=((((-0.03431)*x15325))+(((0.16769)*x15322))+(((0.32901)*cj5))+(((-0.16769)*x15323))+((x15321*x15326))+(((-0.03431)*x15324))+((x15317*x15326))+(((-1.0)*py*x15316))+(((0.00036)*sj5))+((px*x15318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15343=((337.0)*gconst1);
IkReal x15344=((337.0)*gconst2);
CheckValue<IkReal> x15345 = IKatan2WithCheck(IkReal((((r00*x15343))+((r01*x15344)))),((((-1.0)*r10*x15343))+(((-1.0)*r11*x15344))),IKFAST_ATAN2_MAGTHRESH);
if(!x15345.valid){
continue;
}
CheckValue<IkReal> x15346=IKPowWithIntegerCheck(IKsign(((((100000.0)*gconst1*rxp0_2))+(((100000.0)*gconst2*rxp1_2)))),-1);
if(!x15346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15345.value)+(((1.5707963267949)*(x15346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15347=(gconst1*r00);
IkReal x15348=IKcos(j4);
IkReal x15349=((1.0)*x15348);
IkReal x15350=(gconst1*r10);
IkReal x15351=IKsin(j4);
IkReal x15352=((1.0)*x15351);
IkReal x15353=(gconst2*r01);
IkReal x15354=(gconst2*r11);
IkReal x15355=(cj5*cj7);
IkReal x15356=(sj5*sj7);
IkReal x15357=(gconst1*r00*x15351);
IkReal x15358=(gconst2*r01*x15351);
IkReal x15359=((0.03431)*x15348);
IkReal x15360=((0.03431)*x15351);
IkReal x15361=(cj8*x15348);
IkReal x15362=(cj8*x15351);
IkReal x15363=(gconst1*r01);
IkReal x15364=(sj8*x15348);
IkReal x15365=(gconst1*r11);
IkReal x15366=(sj8*x15351);
IkReal x15367=(gconst2*r00);
IkReal x15368=((1.0)*sj8*x15348);
IkReal x15369=(gconst2*r10);
IkReal x15370=((1.0)*sj8*x15351);
IkReal x15371=((1.0)*cj8*x15351);
IkReal x15372=(r02*sj8);
IkReal x15373=(r12*sj8);
IkReal x15374=(cj8*gconst1*x15348);
IkReal x15375=((1.0)*cj8*x15348);
evalcond[0]=((((-1.0)*x15350*x15352))+(((-1.0)*x15349*x15353))+(((-1.0)*x15347*x15349))+(((-1.0)*x15352*x15354)));
evalcond[1]=((((-1.0)*x15356))+x15358+x15357+x15355+(((-1.0)*x15349*x15350))+(((-1.0)*x15349*x15354)));
evalcond[2]=((0.00337)+(((-1.0)*py*x15352))+((x15353*x15359))+((x15347*x15359))+((x15350*x15360))+(((-1.0)*px*x15349))+((x15354*x15360)));
evalcond[3]=((-1.0)+(((-1.0)*x15367*x15368))+((x15365*x15366))+(((-1.0)*x15369*x15370))+((r02*x15361))+((r12*x15362))+((x15363*x15364)));
evalcond[4]=(((x15364*x15365))+(((-1.0)*r02*x15371))+((x15366*x15367))+((r12*x15361))+(((-1.0)*x15368*x15369))+(((-1.0)*x15363*x15370)));
evalcond[5]=((((-1.0)*x15367*x15375))+(((-1.0)*x15352*x15373))+((x15362*x15365))+((r01*x15374))+(((-1.0)*x15349*x15372))+(((-1.0)*x15369*x15371)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x15363*x15371))+(((-1.0)*x15349*x15373))+((cj7*sj5))+((x15351*x15372))+((x15362*x15367))+(((-1.0)*x15369*x15375))+((r11*x15374)));
evalcond[7]=((((-0.16769)*x15356))+((x15350*x15359))+(((-1.0)*py*x15349))+(((-0.03431)*x15357))+(((0.32901)*cj5))+((px*x15351))+(((0.16769)*x15355))+(((0.00036)*sj5))+((x15354*x15359))+(((-0.03431)*x15358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15377 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x15377)==0){
continue;
}
IkReal x15376=((1.0)*(pow(x15377,-0.5)));
CheckValue<IkReal> x15378 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15378.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(1.0)*(x15378.value))));
IkReal gconst4=(rxp1_2*x15376);
IkReal gconst5=((-1.0)*rxp0_2*x15376);
IkReal x15379=(cj5*sj7);
IkReal x15380=(cj7*sj5);
IkReal x15381=(gconst4*r20);
IkReal x15382=(gconst5*r21);
IkReal x15383=(gconst4*r21);
IkReal x15384=((1.0)*sj8);
IkReal x15385=(gconst5*r20);
CheckValue<IkReal> x15386 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15386.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9+(x15386.value))))), 6.28318530717959)));
evalcond[1]=(x15380+(((-1.0)*x15381))+(((-1.0)*x15382))+x15379);
evalcond[2]=(((sj8*x15383))+(((-1.0)*x15384*x15385))+((cj8*r22)));
evalcond[3]=(((cj8*x15383))+(((-1.0)*(1.0)*cj5*cj7))+((sj5*sj7))+(((-1.0)*r22*x15384))+(((-1.0)*cj8*x15385)));
evalcond[4]=((((0.16769)*x15380))+(((0.03431)*x15382))+(((-1.0)*(1.0)*pz))+(((0.32901)*sj5))+(((0.03431)*x15381))+(((0.16769)*x15379))+(((-1.0)*(0.00036)*cj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x15389 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15389.valid){
continue;
}
IkReal x15387=((-1.0)*(((1.0)*(x15389.value))));
IkReal x15388=x15376;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+x15387);
IkReal gconst3=((3.14159265358979)+x15387);
IkReal gconst4=(rxp1_2*x15388);
IkReal gconst5=((-1.0)*rxp0_2*x15388);
IkReal x15390=x15376;
IkReal x15391=((337.0)*rxp1_2*x15390);
IkReal x15392=((337.0)*rxp0_2*x15390);
j4eval[0]=0;
j4eval[1]=((IKabs((((r11*x15392))+(((-1.0)*r10*x15391)))))+(IKabs((((r00*x15391))+(((-1.0)*r01*x15392))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15395 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15395.valid){
continue;
}
IkReal x15393=((-1.0)*(((1.0)*(x15395.value))));
IkReal x15394=x15376;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+x15393);
IkReal gconst3=((3.14159265358979)+x15393);
IkReal gconst4=(rxp1_2*x15394);
IkReal gconst5=((-1.0)*rxp0_2*x15394);
IkReal x15396=x15376;
IkReal x15397=(rxp0_2*x15396);
IkReal x15398=(rxp1_2*x15396);
j4eval[0]=((((1.0)*(IKabs(((((-1.0)*r11*x15397))+((r10*x15398)))))))+(((1.0)*(IKabs((((r01*x15397))+(((-1.0)*r00*x15398))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15399=gconst4*gconst4;
IkReal x15400=gconst5*gconst5;
IkReal x15401=(cj5*cj7*gconst4);
IkReal x15402=(cj5*cj7*gconst5);
IkReal x15403=(gconst4*sj5*sj7);
IkReal x15404=(gconst5*sj5*sj7);
CheckValue<IkReal> x15405 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x15404))+((r00*x15401))+(((-1.0)*r00*x15403))+((r01*x15402)))),(((r11*x15404))+((r10*x15403))+(((-1.0)*r10*x15401))+(((-1.0)*r11*x15402))),IKFAST_ATAN2_MAGTHRESH);
if(!x15405.valid){
continue;
}
CheckValue<IkReal> x15406=IKPowWithIntegerCheck(IKsign((((x15400*(r21*r21)))+((x15399*(r20*r20)))+(((-1.0)*x15399))+(((2.0)*gconst4*gconst5*r20*r21))+(((-1.0)*x15400)))),-1);
if(!x15406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15405.value)+(((1.5707963267949)*(x15406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15407=(gconst4*r00);
IkReal x15408=IKcos(j4);
IkReal x15409=((1.0)*x15408);
IkReal x15410=(gconst4*r10);
IkReal x15411=IKsin(j4);
IkReal x15412=((1.0)*x15411);
IkReal x15413=(gconst5*r01);
IkReal x15414=(gconst5*r11);
IkReal x15415=(cj5*cj7);
IkReal x15416=(sj5*sj7);
IkReal x15417=(gconst4*r00*x15411);
IkReal x15418=(gconst5*r01*x15411);
IkReal x15419=((0.03431)*x15408);
IkReal x15420=((0.03431)*x15411);
IkReal x15421=(cj8*x15408);
IkReal x15422=(cj8*x15411);
IkReal x15423=(gconst4*r01);
IkReal x15424=(sj8*x15408);
IkReal x15425=(gconst4*r11);
IkReal x15426=(sj8*x15411);
IkReal x15427=(gconst5*r00);
IkReal x15428=((1.0)*sj8*x15408);
IkReal x15429=(gconst5*r10);
IkReal x15430=((1.0)*sj8*x15411);
IkReal x15431=((1.0)*cj8*x15411);
IkReal x15432=(r02*sj8);
IkReal x15433=(r12*sj8);
IkReal x15434=(cj8*gconst4*x15408);
IkReal x15435=((1.0)*cj8*x15408);
evalcond[0]=((((-1.0)*x15410*x15412))+(((-1.0)*x15407*x15409))+(((-1.0)*x15412*x15414))+(((-1.0)*x15409*x15413)));
evalcond[1]=((((-1.0)*x15416))+(((-1.0)*x15409*x15410))+x15417+x15418+x15415+(((-1.0)*x15409*x15414)));
evalcond[2]=((0.00337)+(((-1.0)*px*x15409))+((x15413*x15419))+((x15414*x15420))+((x15407*x15419))+((x15410*x15420))+(((-1.0)*py*x15412)));
evalcond[3]=((-1.0)+((r12*x15422))+((x15425*x15426))+((x15423*x15424))+((r02*x15421))+(((-1.0)*x15427*x15428))+(((-1.0)*x15429*x15430)));
evalcond[4]=(((x15426*x15427))+(((-1.0)*x15428*x15429))+(((-1.0)*r02*x15431))+((x15424*x15425))+((r12*x15421))+(((-1.0)*x15423*x15430)));
evalcond[5]=((((-1.0)*x15412*x15433))+((x15422*x15425))+(((-1.0)*x15427*x15435))+(((-1.0)*x15429*x15431))+((r01*x15434))+(((-1.0)*x15409*x15432)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x15429*x15435))+((x15422*x15427))+((x15411*x15432))+((cj7*sj5))+(((-1.0)*x15423*x15431))+((r11*x15434))+(((-1.0)*x15409*x15433)));
evalcond[7]=((((-0.16769)*x15416))+((px*x15411))+(((0.32901)*cj5))+(((-1.0)*py*x15409))+((x15414*x15419))+(((-0.03431)*x15418))+(((0.00036)*sj5))+(((-0.03431)*x15417))+((x15410*x15419))+(((0.16769)*x15415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15436=((1.0)*gconst5);
IkReal x15437=((1.0)*sj8);
CheckValue<IkReal> x15438=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj8*r20*x15436))+((r22*(((((-1.0)*x15437*(gconst4*gconst4)))+(((-1.0)*x15437*(gconst5*gconst5)))))))+((cj8*gconst4*r21)))),-1);
if(!x15438.valid){
continue;
}
CheckValue<IkReal> x15439 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x15436))+(((-1.0)*(1.0)*gconst4*r00)))),(((gconst4*r10))+((gconst5*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x15439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15438.value)))+(x15439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15440=(gconst4*r00);
IkReal x15441=IKcos(j4);
IkReal x15442=((1.0)*x15441);
IkReal x15443=(gconst4*r10);
IkReal x15444=IKsin(j4);
IkReal x15445=((1.0)*x15444);
IkReal x15446=(gconst5*r01);
IkReal x15447=(gconst5*r11);
IkReal x15448=(cj5*cj7);
IkReal x15449=(sj5*sj7);
IkReal x15450=(gconst4*r00*x15444);
IkReal x15451=(gconst5*r01*x15444);
IkReal x15452=((0.03431)*x15441);
IkReal x15453=((0.03431)*x15444);
IkReal x15454=(cj8*x15441);
IkReal x15455=(cj8*x15444);
IkReal x15456=(gconst4*r01);
IkReal x15457=(sj8*x15441);
IkReal x15458=(gconst4*r11);
IkReal x15459=(sj8*x15444);
IkReal x15460=(gconst5*r00);
IkReal x15461=((1.0)*sj8*x15441);
IkReal x15462=(gconst5*r10);
IkReal x15463=((1.0)*sj8*x15444);
IkReal x15464=((1.0)*cj8*x15444);
IkReal x15465=(r02*sj8);
IkReal x15466=(r12*sj8);
IkReal x15467=(cj8*gconst4*x15441);
IkReal x15468=((1.0)*cj8*x15441);
evalcond[0]=((((-1.0)*x15440*x15442))+(((-1.0)*x15445*x15447))+(((-1.0)*x15443*x15445))+(((-1.0)*x15442*x15446)));
evalcond[1]=((((-1.0)*x15449))+x15450+x15451+(((-1.0)*x15442*x15447))+x15448+(((-1.0)*x15442*x15443)));
evalcond[2]=((0.00337)+(((-1.0)*px*x15442))+((x15443*x15453))+((x15447*x15453))+((x15440*x15452))+(((-1.0)*py*x15445))+((x15446*x15452)));
evalcond[3]=((-1.0)+((x15456*x15457))+((r02*x15454))+(((-1.0)*x15462*x15463))+((r12*x15455))+(((-1.0)*x15460*x15461))+((x15458*x15459)));
evalcond[4]=(((x15457*x15458))+((r12*x15454))+(((-1.0)*x15456*x15463))+((x15459*x15460))+(((-1.0)*r02*x15464))+(((-1.0)*x15461*x15462)));
evalcond[5]=(((x15455*x15458))+(((-1.0)*x15442*x15465))+(((-1.0)*x15462*x15464))+(((-1.0)*x15460*x15468))+(((-1.0)*x15445*x15466))+((r01*x15467)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x15462*x15468))+(((-1.0)*x15456*x15464))+((cj7*sj5))+((x15444*x15465))+((x15455*x15460))+((r11*x15467))+(((-1.0)*x15442*x15466)));
evalcond[7]=(((px*x15444))+(((0.16769)*x15448))+(((-0.03431)*x15450))+(((-0.16769)*x15449))+((x15447*x15452))+(((0.32901)*cj5))+(((-1.0)*py*x15442))+(((-0.03431)*x15451))+((x15443*x15452))+(((0.00036)*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15469=((337.0)*gconst4);
IkReal x15470=((337.0)*gconst5);
CheckValue<IkReal> x15471 = IKatan2WithCheck(IkReal((((r01*x15470))+((r00*x15469)))),((((-1.0)*r11*x15470))+(((-1.0)*r10*x15469))),IKFAST_ATAN2_MAGTHRESH);
if(!x15471.valid){
continue;
}
CheckValue<IkReal> x15472=IKPowWithIntegerCheck(IKsign(((((100000.0)*gconst4*rxp0_2))+(((100000.0)*gconst5*rxp1_2)))),-1);
if(!x15472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15471.value)+(((1.5707963267949)*(x15472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15473=(gconst4*r00);
IkReal x15474=IKcos(j4);
IkReal x15475=((1.0)*x15474);
IkReal x15476=(gconst4*r10);
IkReal x15477=IKsin(j4);
IkReal x15478=((1.0)*x15477);
IkReal x15479=(gconst5*r01);
IkReal x15480=(gconst5*r11);
IkReal x15481=(cj5*cj7);
IkReal x15482=(sj5*sj7);
IkReal x15483=(gconst4*r00*x15477);
IkReal x15484=(gconst5*r01*x15477);
IkReal x15485=((0.03431)*x15474);
IkReal x15486=((0.03431)*x15477);
IkReal x15487=(cj8*x15474);
IkReal x15488=(cj8*x15477);
IkReal x15489=(gconst4*r01);
IkReal x15490=(sj8*x15474);
IkReal x15491=(gconst4*r11);
IkReal x15492=(sj8*x15477);
IkReal x15493=(gconst5*r00);
IkReal x15494=((1.0)*sj8*x15474);
IkReal x15495=(gconst5*r10);
IkReal x15496=((1.0)*sj8*x15477);
IkReal x15497=((1.0)*cj8*x15477);
IkReal x15498=(r02*sj8);
IkReal x15499=(r12*sj8);
IkReal x15500=(cj8*gconst4*x15474);
IkReal x15501=((1.0)*cj8*x15474);
evalcond[0]=((((-1.0)*x15478*x15480))+(((-1.0)*x15475*x15479))+(((-1.0)*x15476*x15478))+(((-1.0)*x15473*x15475)));
evalcond[1]=(x15484+x15481+x15483+(((-1.0)*x15475*x15476))+(((-1.0)*x15482))+(((-1.0)*x15475*x15480)));
evalcond[2]=((0.00337)+((x15476*x15486))+((x15480*x15486))+(((-1.0)*py*x15478))+(((-1.0)*px*x15475))+((x15479*x15485))+((x15473*x15485)));
evalcond[3]=((-1.0)+(((-1.0)*x15495*x15496))+((x15489*x15490))+((x15491*x15492))+((r12*x15488))+((r02*x15487))+(((-1.0)*x15493*x15494)));
evalcond[4]=((((-1.0)*x15489*x15496))+((x15492*x15493))+(((-1.0)*r02*x15497))+(((-1.0)*x15494*x15495))+((r12*x15487))+((x15490*x15491)));
evalcond[5]=(((x15488*x15491))+(((-1.0)*x15493*x15501))+(((-1.0)*x15478*x15499))+(((-1.0)*x15475*x15498))+(((-1.0)*x15495*x15497))+((r01*x15500)));
evalcond[6]=(((cj5*sj7))+((x15477*x15498))+(((-1.0)*x15489*x15497))+((cj7*sj5))+((r11*x15500))+((x15488*x15493))+(((-1.0)*x15495*x15501))+(((-1.0)*x15475*x15499)));
evalcond[7]=((((-0.16769)*x15482))+(((0.16769)*x15481))+(((0.32901)*cj5))+((x15476*x15485))+(((-0.03431)*x15484))+((px*x15477))+((x15480*x15485))+(((-0.03431)*x15483))+(((-1.0)*py*x15475))+(((0.00036)*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15502=cj9*cj9;
IkReal x15503=(cj5*cj7*cj9);
IkReal x15504=(cj5*cj7*sj9);
IkReal x15505=(cj9*sj5*sj7);
IkReal x15506=(sj5*sj7*sj9);
CheckValue<IkReal> x15507 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x15505))+(((-1.0)*r00*x15506))+((r00*x15504))+((r01*x15503)))),((((-1.0)*r10*x15504))+((r11*x15505))+(((-1.0)*r11*x15503))+((r10*x15506))),IKFAST_ATAN2_MAGTHRESH);
if(!x15507.valid){
continue;
}
CheckValue<IkReal> x15508=IKPowWithIntegerCheck(IKsign(((-1.0)+((x15502*(r21*r21)))+(((2.0)*cj9*r20*r21*sj9))+(((r20*r20)*(((1.0)+(((-1.0)*x15502)))))))),-1);
if(!x15508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15507.value)+(((1.5707963267949)*(x15508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15509=(cj9*r01);
IkReal x15510=IKcos(j4);
IkReal x15511=((1.0)*x15510);
IkReal x15512=(cj9*r11);
IkReal x15513=IKsin(j4);
IkReal x15514=((1.0)*x15513);
IkReal x15515=(r00*sj9);
IkReal x15516=(r10*sj9);
IkReal x15517=(cj5*cj7);
IkReal x15518=(sj5*sj7);
IkReal x15519=(cj9*r01*x15513);
IkReal x15520=(r00*sj9*x15513);
IkReal x15521=((0.03431)*x15510);
IkReal x15522=((0.03431)*x15513);
IkReal x15523=(cj8*x15510);
IkReal x15524=(cj8*x15513);
IkReal x15525=(r01*sj9);
IkReal x15526=(sj8*x15510);
IkReal x15527=(r11*sj9);
IkReal x15528=(sj8*x15513);
IkReal x15529=(cj9*r00);
IkReal x15530=((1.0)*sj8*x15510);
IkReal x15531=(cj9*r10);
IkReal x15532=((1.0)*sj8*x15513);
IkReal x15533=((1.0)*cj8*x15513);
IkReal x15534=(r02*sj8);
IkReal x15535=(r12*sj8);
IkReal x15536=(cj8*sj9*x15510);
IkReal x15537=((1.0)*cj8*x15510);
evalcond[0]=((((-1.0)*x15509*x15511))+(((-1.0)*x15514*x15516))+(((-1.0)*x15512*x15514))+(((-1.0)*x15511*x15515)));
evalcond[1]=((((-1.0)*x15518))+(((-1.0)*x15511*x15516))+x15520+(((-1.0)*x15511*x15512))+x15517+x15519);
evalcond[2]=((0.00337)+((x15512*x15522))+((x15509*x15521))+((x15515*x15521))+((x15516*x15522))+(((-1.0)*px*x15511))+(((-1.0)*py*x15514)));
evalcond[3]=((-1.0)+((x15525*x15526))+((r02*x15523))+(((-1.0)*x15531*x15532))+(((-1.0)*x15529*x15530))+((r12*x15524))+((x15527*x15528)));
evalcond[4]=(((x15526*x15527))+(((-1.0)*r02*x15533))+((r12*x15523))+((x15528*x15529))+(((-1.0)*x15525*x15532))+(((-1.0)*x15530*x15531)));
evalcond[5]=((((-1.0)*x15531*x15533))+((r01*x15536))+(((-1.0)*x15511*x15534))+(((-1.0)*x15514*x15535))+((x15524*x15527))+(((-1.0)*x15529*x15537)));
evalcond[6]=(((cj5*sj7))+((r11*x15536))+(((-1.0)*x15511*x15535))+(((-1.0)*x15525*x15533))+((x15513*x15534))+((cj7*sj5))+(((-1.0)*x15531*x15537))+((x15524*x15529)));
evalcond[7]=(((x15516*x15521))+(((-1.0)*py*x15511))+((px*x15513))+(((-0.16769)*x15518))+((x15512*x15521))+(((0.32901)*cj5))+(((-0.03431)*x15519))+(((0.16769)*x15517))+(((0.00036)*sj5))+(((-0.03431)*x15520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15538=((1.0)*cj9);
CheckValue<IkReal> x15539 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x15538))+(((-1.0)*(1.0)*r00*sj9)))),(((cj9*r11))+((r10*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x15539.valid){
continue;
}
CheckValue<IkReal> x15540=IKPowWithIntegerCheck(IKsign((((cj8*r21*sj9))+(((-1.0)*(1.0)*r22*sj8))+(((-1.0)*cj8*r20*x15538)))),-1);
if(!x15540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15539.value)+(((1.5707963267949)*(x15540.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15541=(cj9*r01);
IkReal x15542=IKcos(j4);
IkReal x15543=((1.0)*x15542);
IkReal x15544=(cj9*r11);
IkReal x15545=IKsin(j4);
IkReal x15546=((1.0)*x15545);
IkReal x15547=(r00*sj9);
IkReal x15548=(r10*sj9);
IkReal x15549=(cj5*cj7);
IkReal x15550=(sj5*sj7);
IkReal x15551=(cj9*r01*x15545);
IkReal x15552=(r00*sj9*x15545);
IkReal x15553=((0.03431)*x15542);
IkReal x15554=((0.03431)*x15545);
IkReal x15555=(cj8*x15542);
IkReal x15556=(cj8*x15545);
IkReal x15557=(r01*sj9);
IkReal x15558=(sj8*x15542);
IkReal x15559=(r11*sj9);
IkReal x15560=(sj8*x15545);
IkReal x15561=(cj9*r00);
IkReal x15562=((1.0)*sj8*x15542);
IkReal x15563=(cj9*r10);
IkReal x15564=((1.0)*sj8*x15545);
IkReal x15565=((1.0)*cj8*x15545);
IkReal x15566=(r02*sj8);
IkReal x15567=(r12*sj8);
IkReal x15568=(cj8*sj9*x15542);
IkReal x15569=((1.0)*cj8*x15542);
evalcond[0]=((((-1.0)*x15546*x15548))+(((-1.0)*x15544*x15546))+(((-1.0)*x15541*x15543))+(((-1.0)*x15543*x15547)));
evalcond[1]=((((-1.0)*x15543*x15548))+(((-1.0)*x15543*x15544))+x15549+(((-1.0)*x15550))+x15552+x15551);
evalcond[2]=((0.00337)+(((-1.0)*px*x15543))+((x15544*x15554))+((x15548*x15554))+(((-1.0)*py*x15546))+((x15541*x15553))+((x15547*x15553)));
evalcond[3]=((-1.0)+(((-1.0)*x15561*x15562))+(((-1.0)*x15563*x15564))+((x15559*x15560))+((r12*x15556))+((x15557*x15558))+((r02*x15555)));
evalcond[4]=(((r12*x15555))+(((-1.0)*x15562*x15563))+(((-1.0)*x15557*x15564))+((x15558*x15559))+((x15560*x15561))+(((-1.0)*r02*x15565)));
evalcond[5]=((((-1.0)*x15543*x15566))+((r01*x15568))+(((-1.0)*x15546*x15567))+(((-1.0)*x15563*x15565))+(((-1.0)*x15561*x15569))+((x15556*x15559)));
evalcond[6]=((((-1.0)*x15543*x15567))+((cj5*sj7))+((r11*x15568))+((x15556*x15561))+((x15545*x15566))+(((-1.0)*x15557*x15565))+((cj7*sj5))+(((-1.0)*x15563*x15569)));
evalcond[7]=((((0.16769)*x15549))+(((-0.03431)*x15551))+((px*x15545))+((x15544*x15553))+((x15548*x15553))+(((0.32901)*cj5))+(((-1.0)*py*x15543))+(((-0.16769)*x15550))+(((0.00036)*sj5))+(((-0.03431)*x15552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15570=((337.0)*cj9);
IkReal x15571=((337.0)*sj9);
CheckValue<IkReal> x15572=IKPowWithIntegerCheck(IKsign(((((100000.0)*cj9*rxp1_2))+(((100000.0)*rxp0_2*sj9)))),-1);
if(!x15572.valid){
continue;
}
CheckValue<IkReal> x15573 = IKatan2WithCheck(IkReal((((r01*x15570))+((r00*x15571)))),((((-1.0)*r10*x15571))+(((-1.0)*r11*x15570))),IKFAST_ATAN2_MAGTHRESH);
if(!x15573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15572.value)))+(x15573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15574=(cj9*r01);
IkReal x15575=IKcos(j4);
IkReal x15576=((1.0)*x15575);
IkReal x15577=(cj9*r11);
IkReal x15578=IKsin(j4);
IkReal x15579=((1.0)*x15578);
IkReal x15580=(r00*sj9);
IkReal x15581=(r10*sj9);
IkReal x15582=(cj5*cj7);
IkReal x15583=(sj5*sj7);
IkReal x15584=(cj9*r01*x15578);
IkReal x15585=(r00*sj9*x15578);
IkReal x15586=((0.03431)*x15575);
IkReal x15587=((0.03431)*x15578);
IkReal x15588=(cj8*x15575);
IkReal x15589=(cj8*x15578);
IkReal x15590=(r01*sj9);
IkReal x15591=(sj8*x15575);
IkReal x15592=(r11*sj9);
IkReal x15593=(sj8*x15578);
IkReal x15594=(cj9*r00);
IkReal x15595=((1.0)*sj8*x15575);
IkReal x15596=(cj9*r10);
IkReal x15597=((1.0)*sj8*x15578);
IkReal x15598=((1.0)*cj8*x15578);
IkReal x15599=(r02*sj8);
IkReal x15600=(r12*sj8);
IkReal x15601=(cj8*sj9*x15575);
IkReal x15602=((1.0)*cj8*x15575);
evalcond[0]=((((-1.0)*x15579*x15581))+(((-1.0)*x15576*x15580))+(((-1.0)*x15577*x15579))+(((-1.0)*x15574*x15576)));
evalcond[1]=((((-1.0)*x15576*x15581))+(((-1.0)*x15576*x15577))+(((-1.0)*x15583))+x15584+x15585+x15582);
evalcond[2]=((0.00337)+(((-1.0)*px*x15576))+((x15580*x15586))+((x15574*x15586))+((x15581*x15587))+((x15577*x15587))+(((-1.0)*py*x15579)));
evalcond[3]=((-1.0)+(((-1.0)*x15594*x15595))+((x15590*x15591))+(((-1.0)*x15596*x15597))+((r02*x15588))+((x15592*x15593))+((r12*x15589)));
evalcond[4]=((((-1.0)*x15590*x15597))+(((-1.0)*r02*x15598))+((x15591*x15592))+((x15593*x15594))+((r12*x15588))+(((-1.0)*x15595*x15596)));
evalcond[5]=((((-1.0)*x15594*x15602))+(((-1.0)*x15579*x15600))+((x15589*x15592))+(((-1.0)*x15576*x15599))+((r01*x15601))+(((-1.0)*x15596*x15598)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x15590*x15598))+((x15589*x15594))+((cj7*sj5))+(((-1.0)*x15576*x15600))+((r11*x15601))+((x15578*x15599))+(((-1.0)*x15596*x15602)));
evalcond[7]=(((px*x15578))+(((0.32901)*cj5))+((x15581*x15586))+(((-0.03431)*x15584))+(((-0.03431)*x15585))+(((-1.0)*py*x15576))+(((0.00036)*sj5))+((x15577*x15586))+(((0.16769)*x15582))+(((-0.16769)*x15583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15603=(cj7*sj5);
IkReal x15604=(cj5*sj7);
IkReal x15605=(cj9*r21);
IkReal x15606=(r20*sj9);
IkReal x15607=(r21*sj9);
IkReal x15608=((1.0)*sj8);
IkReal x15609=(cj9*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x15606))+x15603+(((-1.0)*x15605))+(((-1.0)*x15604)));
evalcond[2]=((((-1.0)*x15608*x15609))+((sj8*x15607))+((cj8*r22)));
evalcond[3]=((((-1.0)*cj8*x15609))+((cj5*cj7))+((sj5*sj7))+((cj8*x15607))+(((-1.0)*r22*x15608)));
evalcond[4]=((((0.03431)*x15606))+(((-1.0)*(1.0)*pz))+(((0.16769)*x15603))+(((0.00036)*cj5))+(((-0.16769)*x15604))+(((0.32901)*sj5))+(((0.03431)*x15605)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x15610=(cj9*rxp1_2);
IkReal x15611=(rxp0_2*sj9);
IkReal x15612=((337.0)*cj9);
IkReal x15613=((337.0)*sj9);
j4eval[0]=(x15611+x15610);
j4eval[1]=((IKabs((((r00*x15613))+((r01*x15612)))))+(IKabs(((((-1.0)*r11*x15612))+(((-1.0)*r10*x15613))))));
j4eval[2]=IKsign(((((100000.0)*x15610))+(((100000.0)*x15611))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x15614=((1.0)*cj9);
IkReal x15615=(((cj8*r21*sj9))+(((-1.0)*cj8*r20*x15614))+(((-1.0)*(1.0)*r22*sj8)));
j4eval[0]=x15615;
j4eval[1]=((IKabs((((cj9*r01))+((r00*sj9)))))+(IKabs(((((-1.0)*r11*x15614))+(((-1.0)*(1.0)*r10*sj9))))));
j4eval[2]=IKsign(x15615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x15616=r20*r20;
IkReal x15617=cj9*cj9;
IkReal x15618=((-1.0)+x15616+(((2.0)*cj9*r20*r21*sj9))+((x15617*(r21*r21)))+(((-1.0)*x15616*x15617)));
IkReal x15619=(cj5*cj7);
IkReal x15620=(cj9*r01);
IkReal x15621=(r00*sj9);
IkReal x15622=(sj5*sj7);
IkReal x15623=(cj9*r11);
IkReal x15624=((1.0)*cj5*cj7);
IkReal x15625=(r10*sj9);
IkReal x15626=((1.0)*sj5*sj7);
j4eval[0]=x15618;
j4eval[1]=((IKabs((((x15619*x15621))+((x15621*x15622))+((x15619*x15620))+((x15620*x15622)))))+(IKabs(((((-1.0)*x15623*x15626))+(((-1.0)*x15624*x15625))+(((-1.0)*x15623*x15624))+(((-1.0)*x15625*x15626))))));
j4eval[2]=IKsign(x15618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x15628 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x15628)==0){
continue;
}
IkReal x15627=pow(x15628,-0.5);
CheckValue<IkReal> x15629 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15629.valid){
continue;
}
IkReal gconst6=((-1.0)*(((1.0)*(x15629.value))));
IkReal gconst7=((-1.0)*rxp1_2*x15627);
IkReal gconst8=(rxp0_2*x15627);
IkReal x15630=(cj7*sj5);
IkReal x15631=(cj5*sj7);
IkReal x15632=(gconst7*r20);
IkReal x15633=(gconst8*r21);
IkReal x15634=(gconst7*r21);
IkReal x15635=((1.0)*sj8);
IkReal x15636=(gconst8*r20);
CheckValue<IkReal> x15637 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15637.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j9+(x15637.value))))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x15632))+(((-1.0)*x15631))+x15630+(((-1.0)*x15633)));
evalcond[2]=((((-1.0)*x15635*x15636))+((sj8*x15634))+((cj8*r22)));
evalcond[3]=(((cj5*cj7))+((cj8*x15634))+((sj5*sj7))+(((-1.0)*r22*x15635))+(((-1.0)*cj8*x15636)));
evalcond[4]=((((0.03431)*x15633))+(((-1.0)*(1.0)*pz))+(((0.00036)*cj5))+(((0.32901)*sj5))+(((0.16769)*x15630))+(((0.03431)*x15632))+(((-0.16769)*x15631)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x15640 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15640.valid){
continue;
}
IkReal x15638=((-1.0)*(((1.0)*(x15640.value))));
IkReal x15639=x15627;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=gconst7;
cj9=gconst8;
j9=x15638;
IkReal gconst6=x15638;
IkReal gconst7=((-1.0)*rxp1_2*x15639);
IkReal gconst8=(rxp0_2*x15639);
IkReal x15641=x15627;
IkReal x15642=(rxp0_2*x15641);
IkReal x15643=(rxp1_2*x15641);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*r11*x15642))+((r10*x15643)))))+(IKabs((((r01*x15642))+(((-1.0)*r00*x15643))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15646 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15646.valid){
continue;
}
IkReal x15644=((-1.0)*(((1.0)*(x15646.value))));
IkReal x15645=x15627;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=gconst7;
cj9=gconst8;
j9=x15644;
IkReal gconst6=x15644;
IkReal gconst7=((-1.0)*rxp1_2*x15645);
IkReal gconst8=(rxp0_2*x15645);
IkReal x15647=x15627;
IkReal x15648=(rxp0_2*x15647);
IkReal x15649=(rxp1_2*x15647);
j4eval[0]=((IKabs((((r10*x15649))+(((-1.0)*r11*x15648)))))+(IKabs((((r01*x15648))+(((-1.0)*r00*x15649))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15650=gconst7*gconst7;
IkReal x15651=gconst8*gconst8;
IkReal x15652=(cj5*cj7);
IkReal x15653=(gconst7*r00);
IkReal x15654=(gconst8*r01);
IkReal x15655=(sj5*sj7);
IkReal x15656=(gconst7*r10);
IkReal x15657=((1.0)*cj5*cj7);
IkReal x15658=(gconst8*r11);
IkReal x15659=((1.0)*sj5*sj7);
CheckValue<IkReal> x15660 = IKatan2WithCheck(IkReal((((x15652*x15653))+((x15654*x15655))+((x15653*x15655))+((x15652*x15654)))),((((-1.0)*x15657*x15658))+(((-1.0)*x15656*x15657))+(((-1.0)*x15656*x15659))+(((-1.0)*x15658*x15659))),IKFAST_ATAN2_MAGTHRESH);
if(!x15660.valid){
continue;
}
CheckValue<IkReal> x15661=IKPowWithIntegerCheck(IKsign((((x15650*(r20*r20)))+(((-1.0)*x15650))+(((-1.0)*x15651))+((x15651*(r21*r21)))+(((2.0)*gconst7*gconst8*r20*r21)))),-1);
if(!x15661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15660.value)+(((1.5707963267949)*(x15661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15662=(gconst7*r00);
IkReal x15663=IKcos(j4);
IkReal x15664=((1.0)*x15663);
IkReal x15665=(gconst7*r10);
IkReal x15666=IKsin(j4);
IkReal x15667=((1.0)*x15666);
IkReal x15668=(gconst8*r01);
IkReal x15669=(gconst8*r11);
IkReal x15670=(cj5*cj7);
IkReal x15671=(sj5*sj7);
IkReal x15672=(gconst7*r00*x15666);
IkReal x15673=(gconst8*r01*x15666);
IkReal x15674=((0.03431)*x15663);
IkReal x15675=((0.03431)*x15666);
IkReal x15676=(cj8*x15663);
IkReal x15677=(cj8*x15666);
IkReal x15678=(gconst7*r01);
IkReal x15679=(sj8*x15663);
IkReal x15680=(gconst7*r11);
IkReal x15681=(sj8*x15666);
IkReal x15682=(gconst8*r00);
IkReal x15683=((1.0)*sj8*x15663);
IkReal x15684=(gconst8*r10);
IkReal x15685=((1.0)*sj8*x15666);
IkReal x15686=((1.0)*cj8*x15666);
IkReal x15687=(r02*sj8);
IkReal x15688=(r12*sj8);
IkReal x15689=(cj8*gconst7*x15663);
IkReal x15690=((1.0)*cj8*x15663);
evalcond[0]=((((-1.0)*x15665*x15667))+(((-1.0)*x15664*x15668))+(((-1.0)*x15667*x15669))+(((-1.0)*x15662*x15664)));
evalcond[1]=((((-1.0)*x15664*x15665))+(((-1.0)*x15664*x15669))+x15672+x15673+x15670+x15671);
evalcond[2]=((0.00337)+((x15669*x15675))+((x15662*x15674))+((x15668*x15674))+((x15665*x15675))+(((-1.0)*px*x15664))+(((-1.0)*py*x15667)));
evalcond[3]=((1.0)+(((-1.0)*x15682*x15683))+((r12*x15677))+((x15678*x15679))+(((-1.0)*x15684*x15685))+((r02*x15676))+((x15680*x15681)));
evalcond[4]=(((r12*x15676))+(((-1.0)*x15678*x15685))+((x15681*x15682))+(((-1.0)*x15683*x15684))+((x15679*x15680))+(((-1.0)*r02*x15686)));
evalcond[5]=(((x15677*x15680))+(((-1.0)*x15664*x15687))+((r01*x15689))+(((-1.0)*x15682*x15690))+(((-1.0)*x15684*x15686))+(((-1.0)*x15667*x15688)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x15678*x15686))+(((-1.0)*(1.0)*cj7*sj5))+((r11*x15689))+(((-1.0)*x15664*x15688))+((x15666*x15687))+((x15677*x15682))+(((-1.0)*x15684*x15690)));
evalcond[7]=((((-1.0)*py*x15664))+((px*x15666))+(((-1.0)*(0.00036)*sj5))+(((0.16769)*x15670))+(((0.16769)*x15671))+((x15669*x15674))+(((0.32901)*cj5))+((x15665*x15674))+(((-0.03431)*x15673))+(((-0.03431)*x15672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15691=((1.0)*gconst8);
IkReal x15692=((1.0)*sj8);
CheckValue<IkReal> x15693 = IKatan2WithCheck(IkReal((((gconst7*r00))+((gconst8*r01)))),((((-1.0)*r11*x15691))+(((-1.0)*(1.0)*gconst7*r10))),IKFAST_ATAN2_MAGTHRESH);
if(!x15693.valid){
continue;
}
CheckValue<IkReal> x15694=IKPowWithIntegerCheck(IKsign((((cj8*gconst7*r21))+((r22*(((((-1.0)*x15692*(gconst8*gconst8)))+(((-1.0)*x15692*(gconst7*gconst7)))))))+(((-1.0)*cj8*r20*x15691)))),-1);
if(!x15694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15693.value)+(((1.5707963267949)*(x15694.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15695=(gconst7*r00);
IkReal x15696=IKcos(j4);
IkReal x15697=((1.0)*x15696);
IkReal x15698=(gconst7*r10);
IkReal x15699=IKsin(j4);
IkReal x15700=((1.0)*x15699);
IkReal x15701=(gconst8*r01);
IkReal x15702=(gconst8*r11);
IkReal x15703=(cj5*cj7);
IkReal x15704=(sj5*sj7);
IkReal x15705=(gconst7*r00*x15699);
IkReal x15706=(gconst8*r01*x15699);
IkReal x15707=((0.03431)*x15696);
IkReal x15708=((0.03431)*x15699);
IkReal x15709=(cj8*x15696);
IkReal x15710=(cj8*x15699);
IkReal x15711=(gconst7*r01);
IkReal x15712=(sj8*x15696);
IkReal x15713=(gconst7*r11);
IkReal x15714=(sj8*x15699);
IkReal x15715=(gconst8*r00);
IkReal x15716=((1.0)*sj8*x15696);
IkReal x15717=(gconst8*r10);
IkReal x15718=((1.0)*sj8*x15699);
IkReal x15719=((1.0)*cj8*x15699);
IkReal x15720=(r02*sj8);
IkReal x15721=(r12*sj8);
IkReal x15722=(cj8*gconst7*x15696);
IkReal x15723=((1.0)*cj8*x15696);
evalcond[0]=((((-1.0)*x15698*x15700))+(((-1.0)*x15697*x15701))+(((-1.0)*x15700*x15702))+(((-1.0)*x15695*x15697)));
evalcond[1]=((((-1.0)*x15697*x15702))+(((-1.0)*x15697*x15698))+x15706+x15703+x15705+x15704);
evalcond[2]=((0.00337)+(((-1.0)*px*x15697))+((x15702*x15708))+((x15698*x15708))+((x15695*x15707))+(((-1.0)*py*x15700))+((x15701*x15707)));
evalcond[3]=((1.0)+((x15711*x15712))+((r12*x15710))+(((-1.0)*x15717*x15718))+(((-1.0)*x15715*x15716))+((r02*x15709))+((x15713*x15714)));
evalcond[4]=(((x15714*x15715))+(((-1.0)*x15711*x15718))+((r12*x15709))+(((-1.0)*r02*x15719))+(((-1.0)*x15716*x15717))+((x15712*x15713)));
evalcond[5]=((((-1.0)*x15697*x15720))+(((-1.0)*x15717*x15719))+((r01*x15722))+((x15710*x15713))+(((-1.0)*x15700*x15721))+(((-1.0)*x15715*x15723)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x15697*x15721))+((x15710*x15715))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x15717*x15723))+(((-1.0)*x15711*x15719))+((r11*x15722))+((x15699*x15720)));
evalcond[7]=((((-0.03431)*x15705))+((x15698*x15707))+(((-1.0)*(0.00036)*sj5))+((x15702*x15707))+((px*x15699))+(((0.32901)*cj5))+(((-1.0)*py*x15697))+(((-0.03431)*x15706))+(((0.16769)*x15703))+(((0.16769)*x15704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15724=((337.0)*gconst7);
IkReal x15725=((337.0)*gconst8);
CheckValue<IkReal> x15726 = IKatan2WithCheck(IkReal((((r01*x15725))+((r00*x15724)))),((((-1.0)*r11*x15725))+(((-1.0)*r10*x15724))),IKFAST_ATAN2_MAGTHRESH);
if(!x15726.valid){
continue;
}
CheckValue<IkReal> x15727=IKPowWithIntegerCheck(IKsign(((((100000.0)*gconst8*rxp1_2))+(((100000.0)*gconst7*rxp0_2)))),-1);
if(!x15727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15726.value)+(((1.5707963267949)*(x15727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15728=(gconst7*r00);
IkReal x15729=IKcos(j4);
IkReal x15730=((1.0)*x15729);
IkReal x15731=(gconst7*r10);
IkReal x15732=IKsin(j4);
IkReal x15733=((1.0)*x15732);
IkReal x15734=(gconst8*r01);
IkReal x15735=(gconst8*r11);
IkReal x15736=(cj5*cj7);
IkReal x15737=(sj5*sj7);
IkReal x15738=(gconst7*r00*x15732);
IkReal x15739=(gconst8*r01*x15732);
IkReal x15740=((0.03431)*x15729);
IkReal x15741=((0.03431)*x15732);
IkReal x15742=(cj8*x15729);
IkReal x15743=(cj8*x15732);
IkReal x15744=(gconst7*r01);
IkReal x15745=(sj8*x15729);
IkReal x15746=(gconst7*r11);
IkReal x15747=(sj8*x15732);
IkReal x15748=(gconst8*r00);
IkReal x15749=((1.0)*sj8*x15729);
IkReal x15750=(gconst8*r10);
IkReal x15751=((1.0)*sj8*x15732);
IkReal x15752=((1.0)*cj8*x15732);
IkReal x15753=(r02*sj8);
IkReal x15754=(r12*sj8);
IkReal x15755=(cj8*gconst7*x15729);
IkReal x15756=((1.0)*cj8*x15729);
evalcond[0]=((((-1.0)*x15730*x15734))+(((-1.0)*x15733*x15735))+(((-1.0)*x15731*x15733))+(((-1.0)*x15728*x15730)));
evalcond[1]=((((-1.0)*x15730*x15735))+(((-1.0)*x15730*x15731))+x15737+x15736+x15739+x15738);
evalcond[2]=((0.00337)+(((-1.0)*py*x15733))+((x15728*x15740))+((x15734*x15740))+((x15735*x15741))+(((-1.0)*px*x15730))+((x15731*x15741)));
evalcond[3]=((1.0)+((x15746*x15747))+((x15744*x15745))+(((-1.0)*x15750*x15751))+(((-1.0)*x15748*x15749))+((r02*x15742))+((r12*x15743)));
evalcond[4]=(((x15745*x15746))+(((-1.0)*r02*x15752))+((x15747*x15748))+(((-1.0)*x15749*x15750))+(((-1.0)*x15744*x15751))+((r12*x15742)));
evalcond[5]=((((-1.0)*x15750*x15752))+(((-1.0)*x15730*x15753))+(((-1.0)*x15733*x15754))+((r01*x15755))+(((-1.0)*x15748*x15756))+((x15743*x15746)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x15750*x15756))+(((-1.0)*x15730*x15754))+((x15743*x15748))+(((-1.0)*(1.0)*cj7*sj5))+((r11*x15755))+((x15732*x15753))+(((-1.0)*x15744*x15752)));
evalcond[7]=((((-0.03431)*x15739))+(((-1.0)*(0.00036)*sj5))+(((-0.03431)*x15738))+((px*x15732))+((x15735*x15740))+(((0.32901)*cj5))+(((0.16769)*x15736))+(((0.16769)*x15737))+((x15731*x15740))+(((-1.0)*py*x15730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15758 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x15758)==0){
continue;
}
IkReal x15757=((1.0)*(pow(x15758,-0.5)));
CheckValue<IkReal> x15759 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15759.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(1.0)*(x15759.value))));
IkReal gconst10=(rxp1_2*x15757);
IkReal gconst11=((-1.0)*rxp0_2*x15757);
IkReal x15760=(cj7*sj5);
IkReal x15761=(cj5*sj7);
IkReal x15762=(gconst10*r20);
IkReal x15763=(gconst11*r21);
IkReal x15764=(gconst10*r21);
IkReal x15765=((1.0)*sj8);
IkReal x15766=(gconst11*r20);
CheckValue<IkReal> x15767 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15767.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9+(x15767.value))))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x15761))+(((-1.0)*x15762))+x15760+(((-1.0)*x15763)));
evalcond[2]=((((-1.0)*x15765*x15766))+((sj8*x15764))+((cj8*r22)));
evalcond[3]=(((cj8*x15764))+(((-1.0)*r22*x15765))+((cj5*cj7))+((sj5*sj7))+(((-1.0)*cj8*x15766)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((0.03431)*x15762))+(((0.16769)*x15760))+(((0.00036)*cj5))+(((0.32901)*sj5))+(((-0.16769)*x15761))+(((0.03431)*x15763)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x15770 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15770.valid){
continue;
}
IkReal x15768=((-1.0)*(((1.0)*(x15770.value))));
IkReal x15769=x15757;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+x15768);
IkReal gconst9=((3.14159265358979)+x15768);
IkReal gconst10=(rxp1_2*x15769);
IkReal gconst11=((-1.0)*rxp0_2*x15769);
IkReal x15771=x15757;
IkReal x15772=((337.0)*rxp1_2*x15771);
IkReal x15773=((337.0)*rxp0_2*x15771);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*r01*x15773))+((r00*x15772)))))+(IKabs(((((-1.0)*r10*x15772))+((r11*x15773))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15776 = IKatan2WithCheck(IkReal(rxp1_2),rxp0_2,IKFAST_ATAN2_MAGTHRESH);
if(!x15776.valid){
continue;
}
IkReal x15774=((-1.0)*(((1.0)*(x15776.value))));
IkReal x15775=x15757;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+x15774);
IkReal gconst9=((3.14159265358979)+x15774);
IkReal gconst10=(rxp1_2*x15775);
IkReal gconst11=((-1.0)*rxp0_2*x15775);
IkReal x15777=x15757;
IkReal x15778=(rxp1_2*x15777);
IkReal x15779=(rxp0_2*x15777);
j4eval[0]=((((1.0)*(IKabs((((r00*x15778))+(((-1.0)*r01*x15779)))))))+(((1.0)*(IKabs((((r11*x15779))+(((-1.0)*r10*x15778))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15780=gconst10*gconst10;
IkReal x15781=gconst11*gconst11;
IkReal x15782=(cj5*cj7);
IkReal x15783=(gconst10*r00);
IkReal x15784=(gconst11*r01);
IkReal x15785=(sj5*sj7);
IkReal x15786=(gconst10*r10);
IkReal x15787=((1.0)*cj5*cj7);
IkReal x15788=(gconst11*r11);
IkReal x15789=((1.0)*sj5*sj7);
CheckValue<IkReal> x15790=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst10*gconst11*r20*r21))+((x15781*(r21*r21)))+(((-1.0)*x15780))+(((-1.0)*x15781))+((x15780*(r20*r20))))),-1);
if(!x15790.valid){
continue;
}
CheckValue<IkReal> x15791 = IKatan2WithCheck(IkReal((((x15782*x15783))+((x15783*x15785))+((x15782*x15784))+((x15784*x15785)))),((((-1.0)*x15787*x15788))+(((-1.0)*x15788*x15789))+(((-1.0)*x15786*x15789))+(((-1.0)*x15786*x15787))),IKFAST_ATAN2_MAGTHRESH);
if(!x15791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15790.value)))+(x15791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15792=(gconst10*r00);
IkReal x15793=IKcos(j4);
IkReal x15794=((1.0)*x15793);
IkReal x15795=(gconst10*r10);
IkReal x15796=IKsin(j4);
IkReal x15797=((1.0)*x15796);
IkReal x15798=(gconst11*r01);
IkReal x15799=(gconst11*r11);
IkReal x15800=(cj5*cj7);
IkReal x15801=(sj5*sj7);
IkReal x15802=(gconst10*r00*x15796);
IkReal x15803=(gconst11*r01*x15796);
IkReal x15804=((0.03431)*x15793);
IkReal x15805=((0.03431)*x15796);
IkReal x15806=(cj8*x15793);
IkReal x15807=(cj8*x15796);
IkReal x15808=(gconst10*r01);
IkReal x15809=(sj8*x15793);
IkReal x15810=(gconst10*r11);
IkReal x15811=(sj8*x15796);
IkReal x15812=(gconst11*r00);
IkReal x15813=((1.0)*sj8*x15793);
IkReal x15814=(gconst11*r10);
IkReal x15815=((1.0)*sj8*x15796);
IkReal x15816=((1.0)*cj8*x15796);
IkReal x15817=(r02*sj8);
IkReal x15818=(r12*sj8);
IkReal x15819=(cj8*gconst10*x15793);
IkReal x15820=((1.0)*cj8*x15793);
evalcond[0]=((((-1.0)*x15792*x15794))+(((-1.0)*x15795*x15797))+(((-1.0)*x15794*x15798))+(((-1.0)*x15797*x15799)));
evalcond[1]=((((-1.0)*x15794*x15795))+(((-1.0)*x15794*x15799))+x15800+x15803+x15801+x15802);
evalcond[2]=((0.00337)+((x15798*x15804))+((x15799*x15805))+(((-1.0)*py*x15797))+(((-1.0)*px*x15794))+((x15792*x15804))+((x15795*x15805)));
evalcond[3]=((1.0)+((x15810*x15811))+((r12*x15807))+((x15808*x15809))+(((-1.0)*x15814*x15815))+((r02*x15806))+(((-1.0)*x15812*x15813)));
evalcond[4]=(((r12*x15806))+(((-1.0)*r02*x15816))+((x15809*x15810))+(((-1.0)*x15813*x15814))+((x15811*x15812))+(((-1.0)*x15808*x15815)));
evalcond[5]=((((-1.0)*x15797*x15818))+((r01*x15819))+(((-1.0)*x15794*x15817))+(((-1.0)*x15814*x15816))+((x15807*x15810))+(((-1.0)*x15812*x15820)));
evalcond[6]=(((cj5*sj7))+((x15796*x15817))+(((-1.0)*x15814*x15820))+(((-1.0)*(1.0)*cj7*sj5))+((r11*x15819))+(((-1.0)*x15794*x15818))+(((-1.0)*x15808*x15816))+((x15807*x15812)));
evalcond[7]=((((0.16769)*x15801))+(((-1.0)*(0.00036)*sj5))+((px*x15796))+(((-0.03431)*x15802))+(((0.32901)*cj5))+(((0.16769)*x15800))+((x15795*x15804))+(((-0.03431)*x15803))+((x15799*x15804))+(((-1.0)*py*x15794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15821=((1.0)*gconst11);
IkReal x15822=((1.0)*sj8);
CheckValue<IkReal> x15823=IKPowWithIntegerCheck(IKsign((((r22*(((((-1.0)*x15822*(gconst11*gconst11)))+(((-1.0)*x15822*(gconst10*gconst10)))))))+((cj8*gconst10*r21))+(((-1.0)*cj8*r20*x15821)))),-1);
if(!x15823.valid){
continue;
}
CheckValue<IkReal> x15824 = IKatan2WithCheck(IkReal((((gconst11*r01))+((gconst10*r00)))),((((-1.0)*r11*x15821))+(((-1.0)*(1.0)*gconst10*r10))),IKFAST_ATAN2_MAGTHRESH);
if(!x15824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15823.value)))+(x15824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15825=(gconst10*r00);
IkReal x15826=IKcos(j4);
IkReal x15827=((1.0)*x15826);
IkReal x15828=(gconst10*r10);
IkReal x15829=IKsin(j4);
IkReal x15830=((1.0)*x15829);
IkReal x15831=(gconst11*r01);
IkReal x15832=(gconst11*r11);
IkReal x15833=(cj5*cj7);
IkReal x15834=(sj5*sj7);
IkReal x15835=(gconst10*r00*x15829);
IkReal x15836=(gconst11*r01*x15829);
IkReal x15837=((0.03431)*x15826);
IkReal x15838=((0.03431)*x15829);
IkReal x15839=(cj8*x15826);
IkReal x15840=(cj8*x15829);
IkReal x15841=(gconst10*r01);
IkReal x15842=(sj8*x15826);
IkReal x15843=(gconst10*r11);
IkReal x15844=(sj8*x15829);
IkReal x15845=(gconst11*r00);
IkReal x15846=((1.0)*sj8*x15826);
IkReal x15847=(gconst11*r10);
IkReal x15848=((1.0)*sj8*x15829);
IkReal x15849=((1.0)*cj8*x15829);
IkReal x15850=(r02*sj8);
IkReal x15851=(r12*sj8);
IkReal x15852=(cj8*gconst10*x15826);
IkReal x15853=((1.0)*cj8*x15826);
evalcond[0]=((((-1.0)*x15825*x15827))+(((-1.0)*x15830*x15832))+(((-1.0)*x15827*x15831))+(((-1.0)*x15828*x15830)));
evalcond[1]=((((-1.0)*x15827*x15828))+x15835+x15836+x15833+x15834+(((-1.0)*x15827*x15832)));
evalcond[2]=((0.00337)+((x15825*x15837))+((x15828*x15838))+((x15832*x15838))+(((-1.0)*py*x15830))+(((-1.0)*px*x15827))+((x15831*x15837)));
evalcond[3]=((1.0)+((r02*x15839))+(((-1.0)*x15847*x15848))+((r12*x15840))+(((-1.0)*x15845*x15846))+((x15843*x15844))+((x15841*x15842)));
evalcond[4]=((((-1.0)*x15846*x15847))+(((-1.0)*x15841*x15848))+((x15844*x15845))+(((-1.0)*r02*x15849))+((x15842*x15843))+((r12*x15839)));
evalcond[5]=(((r01*x15852))+(((-1.0)*x15830*x15851))+(((-1.0)*x15845*x15853))+(((-1.0)*x15827*x15850))+(((-1.0)*x15847*x15849))+((x15840*x15843)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x15847*x15853))+(((-1.0)*x15827*x15851))+(((-1.0)*(1.0)*cj7*sj5))+((r11*x15852))+((x15840*x15845))+((x15829*x15850))+(((-1.0)*x15841*x15849)));
evalcond[7]=((((-1.0)*py*x15827))+(((-1.0)*(0.00036)*sj5))+((px*x15829))+(((0.32901)*cj5))+(((0.16769)*x15834))+((x15832*x15837))+(((0.16769)*x15833))+(((-0.03431)*x15836))+((x15828*x15837))+(((-0.03431)*x15835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15854=((337.0)*gconst10);
IkReal x15855=((337.0)*gconst11);
CheckValue<IkReal> x15856 = IKatan2WithCheck(IkReal((((r01*x15855))+((r00*x15854)))),((((-1.0)*r11*x15855))+(((-1.0)*r10*x15854))),IKFAST_ATAN2_MAGTHRESH);
if(!x15856.valid){
continue;
}
CheckValue<IkReal> x15857=IKPowWithIntegerCheck(IKsign(((((100000.0)*gconst10*rxp0_2))+(((100000.0)*gconst11*rxp1_2)))),-1);
if(!x15857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15856.value)+(((1.5707963267949)*(x15857.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15858=(gconst10*r00);
IkReal x15859=IKcos(j4);
IkReal x15860=((1.0)*x15859);
IkReal x15861=(gconst10*r10);
IkReal x15862=IKsin(j4);
IkReal x15863=((1.0)*x15862);
IkReal x15864=(gconst11*r01);
IkReal x15865=(gconst11*r11);
IkReal x15866=(cj5*cj7);
IkReal x15867=(sj5*sj7);
IkReal x15868=(gconst10*r00*x15862);
IkReal x15869=(gconst11*r01*x15862);
IkReal x15870=((0.03431)*x15859);
IkReal x15871=((0.03431)*x15862);
IkReal x15872=(cj8*x15859);
IkReal x15873=(cj8*x15862);
IkReal x15874=(gconst10*r01);
IkReal x15875=(sj8*x15859);
IkReal x15876=(gconst10*r11);
IkReal x15877=(sj8*x15862);
IkReal x15878=(gconst11*r00);
IkReal x15879=((1.0)*sj8*x15859);
IkReal x15880=(gconst11*r10);
IkReal x15881=((1.0)*sj8*x15862);
IkReal x15882=((1.0)*cj8*x15862);
IkReal x15883=(r02*sj8);
IkReal x15884=(r12*sj8);
IkReal x15885=(cj8*gconst10*x15859);
IkReal x15886=((1.0)*cj8*x15859);
evalcond[0]=((((-1.0)*x15861*x15863))+(((-1.0)*x15863*x15865))+(((-1.0)*x15860*x15864))+(((-1.0)*x15858*x15860)));
evalcond[1]=((((-1.0)*x15860*x15865))+(((-1.0)*x15860*x15861))+x15867+x15866+x15869+x15868);
evalcond[2]=((0.00337)+((x15858*x15870))+(((-1.0)*px*x15860))+((x15864*x15870))+((x15865*x15871))+(((-1.0)*py*x15863))+((x15861*x15871)));
evalcond[3]=((1.0)+(((-1.0)*x15878*x15879))+((r02*x15872))+(((-1.0)*x15880*x15881))+((x15874*x15875))+((x15876*x15877))+((r12*x15873)));
evalcond[4]=(((x15877*x15878))+(((-1.0)*r02*x15882))+(((-1.0)*x15874*x15881))+((r12*x15872))+(((-1.0)*x15879*x15880))+((x15875*x15876)));
evalcond[5]=((((-1.0)*x15880*x15882))+(((-1.0)*x15878*x15886))+((r01*x15885))+(((-1.0)*x15863*x15884))+(((-1.0)*x15860*x15883))+((x15873*x15876)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x15874*x15882))+((x15873*x15878))+((x15862*x15883))+(((-1.0)*x15860*x15884))+(((-1.0)*x15880*x15886))+((r11*x15885)));
evalcond[7]=(((px*x15862))+(((-1.0)*(0.00036)*sj5))+(((0.32901)*cj5))+((x15865*x15870))+(((-0.03431)*x15868))+(((-0.03431)*x15869))+((x15861*x15870))+(((-1.0)*py*x15860))+(((0.16769)*x15866))+(((0.16769)*x15867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15887=cj9*cj9;
IkReal x15888=(cj5*cj7);
IkReal x15889=(cj9*r01);
IkReal x15890=(r00*sj9);
IkReal x15891=(sj5*sj7);
IkReal x15892=(cj9*r11);
IkReal x15893=((1.0)*cj5*cj7);
IkReal x15894=(r10*sj9);
IkReal x15895=((1.0)*sj5*sj7);
CheckValue<IkReal> x15896 = IKatan2WithCheck(IkReal((((x15888*x15890))+((x15888*x15889))+((x15889*x15891))+((x15890*x15891)))),((((-1.0)*x15892*x15893))+(((-1.0)*x15894*x15895))+(((-1.0)*x15893*x15894))+(((-1.0)*x15892*x15895))),IKFAST_ATAN2_MAGTHRESH);
if(!x15896.valid){
continue;
}
CheckValue<IkReal> x15897=IKPowWithIntegerCheck(IKsign(((-1.0)+((x15887*(r21*r21)))+(((2.0)*cj9*r20*r21*sj9))+(((r20*r20)*(((1.0)+(((-1.0)*x15887)))))))),-1);
if(!x15897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15896.value)+(((1.5707963267949)*(x15897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15898=(cj9*r01);
IkReal x15899=IKcos(j4);
IkReal x15900=((1.0)*x15899);
IkReal x15901=(cj9*r11);
IkReal x15902=IKsin(j4);
IkReal x15903=((1.0)*x15902);
IkReal x15904=(r00*sj9);
IkReal x15905=(r10*sj9);
IkReal x15906=(cj5*cj7);
IkReal x15907=(sj5*sj7);
IkReal x15908=(cj9*r01*x15902);
IkReal x15909=(r00*sj9*x15902);
IkReal x15910=((0.03431)*x15899);
IkReal x15911=((0.03431)*x15902);
IkReal x15912=(cj8*x15899);
IkReal x15913=(cj8*x15902);
IkReal x15914=(r01*sj9);
IkReal x15915=(sj8*x15899);
IkReal x15916=(r11*sj9);
IkReal x15917=(sj8*x15902);
IkReal x15918=(cj9*r00);
IkReal x15919=((1.0)*sj8*x15899);
IkReal x15920=(cj9*r10);
IkReal x15921=((1.0)*sj8*x15902);
IkReal x15922=((1.0)*cj8*x15902);
IkReal x15923=(r02*sj8);
IkReal x15924=(r12*sj8);
IkReal x15925=(cj8*sj9*x15899);
IkReal x15926=((1.0)*cj8*x15899);
evalcond[0]=((((-1.0)*x15898*x15900))+(((-1.0)*x15901*x15903))+(((-1.0)*x15900*x15904))+(((-1.0)*x15903*x15905)));
evalcond[1]=(x15908+x15909+x15907+x15906+(((-1.0)*x15900*x15905))+(((-1.0)*x15900*x15901)));
evalcond[2]=((0.00337)+((x15905*x15911))+(((-1.0)*px*x15900))+(((-1.0)*py*x15903))+((x15898*x15910))+((x15901*x15911))+((x15904*x15910)));
evalcond[3]=((1.0)+(((-1.0)*x15918*x15919))+((r02*x15912))+((x15916*x15917))+(((-1.0)*x15920*x15921))+((r12*x15913))+((x15914*x15915)));
evalcond[4]=(((r12*x15912))+((x15915*x15916))+(((-1.0)*x15919*x15920))+((x15917*x15918))+(((-1.0)*r02*x15922))+(((-1.0)*x15914*x15921)));
evalcond[5]=((((-1.0)*x15903*x15924))+(((-1.0)*x15900*x15923))+(((-1.0)*x15920*x15922))+(((-1.0)*x15918*x15926))+((x15913*x15916))+((r01*x15925)));
evalcond[6]=(((cj5*sj7))+((r11*x15925))+((x15902*x15923))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x15920*x15926))+(((-1.0)*x15914*x15922))+(((-1.0)*x15900*x15924))+((x15913*x15918)));
evalcond[7]=(((x15905*x15910))+(((0.16769)*x15907))+(((-0.03431)*x15909))+(((-1.0)*(0.00036)*sj5))+((x15901*x15910))+(((0.32901)*cj5))+(((0.16769)*x15906))+((px*x15902))+(((-1.0)*py*x15900))+(((-0.03431)*x15908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15927=((1.0)*cj9);
CheckValue<IkReal> x15928 = IKatan2WithCheck(IkReal((((cj9*r01))+((r00*sj9)))),((((-1.0)*r11*x15927))+(((-1.0)*(1.0)*r10*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x15928.valid){
continue;
}
CheckValue<IkReal> x15929=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj8*r20*x15927))+((cj8*r21*sj9))+(((-1.0)*(1.0)*r22*sj8)))),-1);
if(!x15929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15928.value)+(((1.5707963267949)*(x15929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15930=(cj9*r01);
IkReal x15931=IKcos(j4);
IkReal x15932=((1.0)*x15931);
IkReal x15933=(cj9*r11);
IkReal x15934=IKsin(j4);
IkReal x15935=((1.0)*x15934);
IkReal x15936=(r00*sj9);
IkReal x15937=(r10*sj9);
IkReal x15938=(cj5*cj7);
IkReal x15939=(sj5*sj7);
IkReal x15940=(cj9*r01*x15934);
IkReal x15941=(r00*sj9*x15934);
IkReal x15942=((0.03431)*x15931);
IkReal x15943=((0.03431)*x15934);
IkReal x15944=(cj8*x15931);
IkReal x15945=(cj8*x15934);
IkReal x15946=(r01*sj9);
IkReal x15947=(sj8*x15931);
IkReal x15948=(r11*sj9);
IkReal x15949=(sj8*x15934);
IkReal x15950=(cj9*r00);
IkReal x15951=((1.0)*sj8*x15931);
IkReal x15952=(cj9*r10);
IkReal x15953=((1.0)*sj8*x15934);
IkReal x15954=((1.0)*cj8*x15934);
IkReal x15955=(r02*sj8);
IkReal x15956=(r12*sj8);
IkReal x15957=(cj8*sj9*x15931);
IkReal x15958=((1.0)*cj8*x15931);
evalcond[0]=((((-1.0)*x15930*x15932))+(((-1.0)*x15933*x15935))+(((-1.0)*x15932*x15936))+(((-1.0)*x15935*x15937)));
evalcond[1]=((((-1.0)*x15932*x15933))+(((-1.0)*x15932*x15937))+x15938+x15939+x15940+x15941);
evalcond[2]=((0.00337)+(((-1.0)*py*x15935))+((x15937*x15943))+(((-1.0)*px*x15932))+((x15930*x15942))+((x15933*x15943))+((x15936*x15942)));
evalcond[3]=((1.0)+(((-1.0)*x15952*x15953))+((r12*x15945))+((x15946*x15947))+((x15948*x15949))+((r02*x15944))+(((-1.0)*x15950*x15951)));
evalcond[4]=((((-1.0)*r02*x15954))+(((-1.0)*x15946*x15953))+((r12*x15944))+((x15949*x15950))+(((-1.0)*x15951*x15952))+((x15947*x15948)));
evalcond[5]=(((x15945*x15948))+(((-1.0)*x15950*x15958))+(((-1.0)*x15952*x15954))+((r01*x15957))+(((-1.0)*x15932*x15955))+(((-1.0)*x15935*x15956)));
evalcond[6]=(((cj5*sj7))+((x15945*x15950))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x15952*x15958))+(((-1.0)*x15932*x15956))+(((-1.0)*x15946*x15954))+((r11*x15957))+((x15934*x15955)));
evalcond[7]=((((-0.03431)*x15941))+((x15937*x15942))+(((0.16769)*x15938))+(((-1.0)*(0.00036)*sj5))+(((-1.0)*py*x15932))+(((-0.03431)*x15940))+((x15933*x15942))+(((0.32901)*cj5))+((px*x15934))+(((0.16769)*x15939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15959=((337.0)*cj9);
IkReal x15960=((337.0)*sj9);
CheckValue<IkReal> x15961=IKPowWithIntegerCheck(IKsign(((((100000.0)*cj9*rxp1_2))+(((100000.0)*rxp0_2*sj9)))),-1);
if(!x15961.valid){
continue;
}
CheckValue<IkReal> x15962 = IKatan2WithCheck(IkReal((((r00*x15960))+((r01*x15959)))),((((-1.0)*r11*x15959))+(((-1.0)*r10*x15960))),IKFAST_ATAN2_MAGTHRESH);
if(!x15962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15961.value)))+(x15962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15963=(cj9*r01);
IkReal x15964=IKcos(j4);
IkReal x15965=((1.0)*x15964);
IkReal x15966=(cj9*r11);
IkReal x15967=IKsin(j4);
IkReal x15968=((1.0)*x15967);
IkReal x15969=(r00*sj9);
IkReal x15970=(r10*sj9);
IkReal x15971=(cj5*cj7);
IkReal x15972=(sj5*sj7);
IkReal x15973=(cj9*r01*x15967);
IkReal x15974=(r00*sj9*x15967);
IkReal x15975=((0.03431)*x15964);
IkReal x15976=((0.03431)*x15967);
IkReal x15977=(cj8*x15964);
IkReal x15978=(cj8*x15967);
IkReal x15979=(r01*sj9);
IkReal x15980=(sj8*x15964);
IkReal x15981=(r11*sj9);
IkReal x15982=(sj8*x15967);
IkReal x15983=(cj9*r00);
IkReal x15984=((1.0)*sj8*x15964);
IkReal x15985=(cj9*r10);
IkReal x15986=((1.0)*sj8*x15967);
IkReal x15987=((1.0)*cj8*x15967);
IkReal x15988=(r02*sj8);
IkReal x15989=(r12*sj8);
IkReal x15990=(cj8*sj9*x15964);
IkReal x15991=((1.0)*cj8*x15964);
evalcond[0]=((((-1.0)*x15965*x15969))+(((-1.0)*x15966*x15968))+(((-1.0)*x15963*x15965))+(((-1.0)*x15968*x15970)));
evalcond[1]=((((-1.0)*x15965*x15966))+x15973+x15972+x15971+x15974+(((-1.0)*x15965*x15970)));
evalcond[2]=((0.00337)+((x15969*x15975))+(((-1.0)*px*x15965))+(((-1.0)*py*x15968))+((x15970*x15976))+((x15963*x15975))+((x15966*x15976)));
evalcond[3]=((1.0)+(((-1.0)*x15985*x15986))+((r02*x15977))+((x15979*x15980))+((x15981*x15982))+((r12*x15978))+(((-1.0)*x15983*x15984)));
evalcond[4]=(((x15980*x15981))+(((-1.0)*r02*x15987))+(((-1.0)*x15979*x15986))+((r12*x15977))+((x15982*x15983))+(((-1.0)*x15984*x15985)));
evalcond[5]=((((-1.0)*x15968*x15989))+(((-1.0)*x15965*x15988))+(((-1.0)*x15985*x15987))+((x15978*x15981))+((r01*x15990))+(((-1.0)*x15983*x15991)));
evalcond[6]=(((cj5*sj7))+((r11*x15990))+(((-1.0)*x15985*x15991))+(((-1.0)*x15965*x15989))+((x15967*x15988))+(((-1.0)*(1.0)*cj7*sj5))+(((-1.0)*x15979*x15987))+((x15978*x15983)));
evalcond[7]=((((0.16769)*x15972))+(((-1.0)*py*x15965))+(((-0.03431)*x15973))+(((-1.0)*(0.00036)*sj5))+(((-0.03431)*x15974))+((px*x15967))+(((0.32901)*cj5))+(((0.16769)*x15971))+((x15970*x15975))+((x15966*x15975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15992=cj9*cj9;
IkReal x15993=(cj5*cj7);
IkReal x15994=(cj9*r01);
IkReal x15995=(r00*sj9);
IkReal x15996=(cj6*sj7);
IkReal x15997=(cj9*r11);
IkReal x15998=(r10*sj9);
IkReal x15999=((1.0)*sj5*sj6*sj7);
IkReal x16000=((1.0)*cj5*cj7);
IkReal x16001=(sj5*sj6*sj7);
CheckValue<IkReal> x16002=IKPowWithIntegerCheck(IKsign(((-1.0)+(((2.0)*cj9*r20*r21*sj9))+(((r20*r20)*(((1.0)+(((-1.0)*x15992))))))+((x15992*(r21*r21))))),-1);
if(!x16002.valid){
continue;
}
CheckValue<IkReal> x16003 = IKatan2WithCheck(IkReal((((x15996*x15997))+(((-1.0)*x15995*x15999))+((x15996*x15998))+((x15993*x15995))+((x15993*x15994))+(((-1.0)*x15994*x15999)))),((((-1.0)*x15997*x16000))+((x15998*x16001))+((x15995*x15996))+((x15994*x15996))+(((-1.0)*x15998*x16000))+((x15997*x16001))),IKFAST_ATAN2_MAGTHRESH);
if(!x16003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16002.value)))+(x16003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x16004=(cj6*sj7);
IkReal x16005=(cj9*r01);
IkReal x16006=IKcos(j4);
IkReal x16007=((1.0)*x16006);
IkReal x16008=(cj9*r11);
IkReal x16009=IKsin(j4);
IkReal x16010=((1.0)*x16009);
IkReal x16011=(r00*sj9);
IkReal x16012=(r10*sj9);
IkReal x16013=(cj5*cj7);
IkReal x16014=(cj9*r01*x16009);
IkReal x16015=(r00*sj9*x16009);
IkReal x16016=((1.0)*sj6);
IkReal x16017=(cj8*x16006);
IkReal x16018=(cj8*x16009);
IkReal x16019=(r01*sj9);
IkReal x16020=(sj8*x16006);
IkReal x16021=(r11*sj9);
IkReal x16022=(sj8*x16009);
IkReal x16023=(cj9*r00);
IkReal x16024=((1.0)*sj8*x16006);
IkReal x16025=(cj9*r10);
IkReal x16026=((1.0)*sj8*x16009);
IkReal x16027=((1.0)*cj8*x16009);
IkReal x16028=(r02*sj8);
IkReal x16029=(r12*sj8);
IkReal x16030=(cj8*sj9*x16006);
IkReal x16031=((1.0)*cj8*x16006);
IkReal x16032=((0.03431)*x16006);
IkReal x16033=((0.03431)*x16009);
IkReal x16034=(sj5*sj6);
evalcond[0]=((((-1.0)*x16005*x16007))+(((-1.0)*x16008*x16010))+(((-1.0)*x16007*x16011))+(((-1.0)*x16010*x16012))+(((-1.0)*x16004)));
evalcond[1]=((((-1.0)*x16007*x16008))+(((-1.0)*sj5*sj7*x16016))+x16014+x16015+x16013+(((-1.0)*x16007*x16012)));
evalcond[2]=(((r12*x16018))+((r02*x16017))+((x16021*x16022))+(((-1.0)*x16023*x16024))+((x16019*x16020))+(((-1.0)*x16016))+(((-1.0)*x16025*x16026)));
evalcond[3]=((((-1.0)*r02*x16027))+(((-1.0)*x16019*x16026))+((cj6*sj5))+((x16022*x16023))+(((-1.0)*x16024*x16025))+((r12*x16017))+((x16020*x16021)));
evalcond[4]=(((x16018*x16021))+(((-1.0)*x16023*x16031))+(((-1.0)*x16007*x16028))+(((-1.0)*x16010*x16029))+((r01*x16030))+((cj6*cj7))+(((-1.0)*x16025*x16027)));
evalcond[5]=((0.00337)+((x16005*x16032))+((x16008*x16033))+(((0.00036)*cj6))+(((-0.16769)*x16004))+((x16011*x16032))+(((-1.0)*px*x16007))+(((-1.0)*py*x16010))+((x16012*x16033)));
evalcond[6]=(((cj5*sj7))+((x16018*x16023))+((cj7*x16034))+(((-1.0)*x16025*x16031))+(((-1.0)*x16019*x16027))+((r11*x16030))+((x16009*x16028))+(((-1.0)*x16007*x16029)));
evalcond[7]=((((-0.03431)*x16014))+(((0.00036)*x16034))+((x16008*x16032))+((x16012*x16032))+(((-0.03431)*x16015))+(((0.16769)*x16013))+(((0.32901)*cj5))+(((-0.16769)*sj7*x16034))+((px*x16009))+(((-1.0)*py*x16007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16035=(cj6*cj7*cj9);
IkReal x16036=(cj6*cj7);
IkReal x16037=(cj6*sj7*sj8);
IkReal x16038=(cj6*cj8*sj7);
IkReal x16039=((1.0)*cj6*cj8*sj7);
CheckValue<IkReal> x16040 = IKatan2WithCheck(IkReal((((cj9*r00*x16038))+((r01*x16035))+(((-1.0)*r01*sj9*x16039))+((r00*sj9*x16036))+((r02*x16037)))),((((-1.0)*r11*x16035))+((r11*sj9*x16038))+(((-1.0)*r12*x16037))+(((-1.0)*cj9*r10*x16039))+(((-1.0)*r10*sj9*x16036))),IKFAST_ATAN2_MAGTHRESH);
if(!x16040.valid){
continue;
}
CheckValue<IkReal> x16041=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj8*r22))+((cj9*r20*sj8))+(((-1.0)*r21*sj8*sj9)))),-1);
if(!x16041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16040.value)+(((1.5707963267949)*(x16041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x16042=(cj6*sj7);
IkReal x16043=(cj9*r01);
IkReal x16044=IKcos(j4);
IkReal x16045=((1.0)*x16044);
IkReal x16046=(cj9*r11);
IkReal x16047=IKsin(j4);
IkReal x16048=((1.0)*x16047);
IkReal x16049=(r00*sj9);
IkReal x16050=(r10*sj9);
IkReal x16051=(cj5*cj7);
IkReal x16052=(cj9*r01*x16047);
IkReal x16053=(r00*sj9*x16047);
IkReal x16054=((1.0)*sj6);
IkReal x16055=(cj8*x16044);
IkReal x16056=(cj8*x16047);
IkReal x16057=(r01*sj9);
IkReal x16058=(sj8*x16044);
IkReal x16059=(r11*sj9);
IkReal x16060=(sj8*x16047);
IkReal x16061=(cj9*r00);
IkReal x16062=((1.0)*sj8*x16044);
IkReal x16063=(cj9*r10);
IkReal x16064=((1.0)*sj8*x16047);
IkReal x16065=((1.0)*cj8*x16047);
IkReal x16066=(r02*sj8);
IkReal x16067=(r12*sj8);
IkReal x16068=(cj8*sj9*x16044);
IkReal x16069=((1.0)*cj8*x16044);
IkReal x16070=((0.03431)*x16044);
IkReal x16071=((0.03431)*x16047);
IkReal x16072=(sj5*sj6);
evalcond[0]=((((-1.0)*x16042))+(((-1.0)*x16045*x16049))+(((-1.0)*x16046*x16048))+(((-1.0)*x16048*x16050))+(((-1.0)*x16043*x16045)));
evalcond[1]=(x16051+x16053+x16052+(((-1.0)*x16045*x16046))+(((-1.0)*sj5*sj7*x16054))+(((-1.0)*x16045*x16050)));
evalcond[2]=((((-1.0)*x16061*x16062))+(((-1.0)*x16054))+((x16057*x16058))+(((-1.0)*x16063*x16064))+((r12*x16056))+((r02*x16055))+((x16059*x16060)));
evalcond[3]=((((-1.0)*x16057*x16064))+(((-1.0)*x16062*x16063))+((x16060*x16061))+((r12*x16055))+((cj6*sj5))+(((-1.0)*r02*x16065))+((x16058*x16059)));
evalcond[4]=(((x16056*x16059))+((r01*x16068))+(((-1.0)*x16048*x16067))+(((-1.0)*x16063*x16065))+((cj6*cj7))+(((-1.0)*x16045*x16066))+(((-1.0)*x16061*x16069)));
evalcond[5]=((0.00337)+((x16049*x16070))+(((0.00036)*cj6))+((x16050*x16071))+((x16043*x16070))+(((-0.16769)*x16042))+(((-1.0)*py*x16048))+(((-1.0)*px*x16045))+((x16046*x16071)));
evalcond[6]=(((cj5*sj7))+(((-1.0)*x16057*x16065))+((x16056*x16061))+((r11*x16068))+((cj7*x16072))+(((-1.0)*x16063*x16069))+(((-1.0)*x16045*x16067))+((x16047*x16066)));
evalcond[7]=((((-0.16769)*sj7*x16072))+(((-1.0)*py*x16045))+(((-0.03431)*x16052))+((x16050*x16070))+(((0.16769)*x16051))+((px*x16047))+(((0.32901)*cj5))+(((0.00036)*x16072))+(((-0.03431)*x16053))+((x16046*x16070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16073=(cj9*sj6);
IkReal x16074=(sj6*sj9);
IkReal x16075=(cj6*sj7);
IkReal x16076=(cj6*sj7*sj8);
IkReal x16077=((1.0)*cj6*sj7*sj8);
CheckValue<IkReal> x16078=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*sj8))+((cj8*r21*sj9))+(((-1.0)*cj8*cj9*r20)))),-1);
if(!x16078.valid){
continue;
}
CheckValue<IkReal> x16079 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x16074))+(((-1.0)*cj8*r02*x16075))+(((-1.0)*r01*x16073))+(((-1.0)*r01*sj9*x16077))+((cj9*r00*x16076)))),(((cj8*r12*x16075))+((r11*sj9*x16076))+((r10*x16074))+((r11*x16073))+(((-1.0)*cj9*r10*x16077))),IKFAST_ATAN2_MAGTHRESH);
if(!x16079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16078.value)))+(x16079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x16080=(cj6*sj7);
IkReal x16081=(cj9*r01);
IkReal x16082=IKcos(j4);
IkReal x16083=((1.0)*x16082);
IkReal x16084=(cj9*r11);
IkReal x16085=IKsin(j4);
IkReal x16086=((1.0)*x16085);
IkReal x16087=(r00*sj9);
IkReal x16088=(r10*sj9);
IkReal x16089=(cj5*cj7);
IkReal x16090=(cj9*r01*x16085);
IkReal x16091=(r00*sj9*x16085);
IkReal x16092=((1.0)*sj6);
IkReal x16093=(cj8*x16082);
IkReal x16094=(cj8*x16085);
IkReal x16095=(r01*sj9);
IkReal x16096=(sj8*x16082);
IkReal x16097=(r11*sj9);
IkReal x16098=(sj8*x16085);
IkReal x16099=(cj9*r00);
IkReal x16100=((1.0)*sj8*x16082);
IkReal x16101=(cj9*r10);
IkReal x16102=((1.0)*sj8*x16085);
IkReal x16103=((1.0)*cj8*x16085);
IkReal x16104=(r02*sj8);
IkReal x16105=(r12*sj8);
IkReal x16106=(cj8*sj9*x16082);
IkReal x16107=((1.0)*cj8*x16082);
IkReal x16108=((0.03431)*x16082);
IkReal x16109=((0.03431)*x16085);
IkReal x16110=(sj5*sj6);
evalcond[0]=((((-1.0)*x16084*x16086))+(((-1.0)*x16086*x16088))+(((-1.0)*x16080))+(((-1.0)*x16083*x16087))+(((-1.0)*x16081*x16083)));
evalcond[1]=(x16089+x16091+x16090+(((-1.0)*x16083*x16088))+(((-1.0)*sj5*sj7*x16092))+(((-1.0)*x16083*x16084)));
evalcond[2]=(((x16095*x16096))+(((-1.0)*x16101*x16102))+(((-1.0)*x16092))+((x16097*x16098))+((r02*x16093))+(((-1.0)*x16099*x16100))+((r12*x16094)));
evalcond[3]=(((x16096*x16097))+((x16098*x16099))+(((-1.0)*r02*x16103))+((cj6*sj5))+(((-1.0)*x16095*x16102))+(((-1.0)*x16100*x16101))+((r12*x16093)));
evalcond[4]=((((-1.0)*x16083*x16104))+(((-1.0)*x16101*x16103))+((x16094*x16097))+((r01*x16106))+(((-1.0)*x16086*x16105))+((cj6*cj7))+(((-1.0)*x16099*x16107)));
evalcond[5]=((0.00337)+((x16087*x16108))+((x16088*x16109))+(((-1.0)*px*x16083))+(((-1.0)*py*x16086))+(((0.00036)*cj6))+((x16081*x16108))+((x16084*x16109))+(((-0.16769)*x16080)));
evalcond[6]=((((-1.0)*x16101*x16107))+((cj5*sj7))+((r11*x16106))+(((-1.0)*x16083*x16105))+(((-1.0)*x16095*x16103))+((cj7*x16110))+((x16085*x16104))+((x16094*x16099)));
evalcond[7]=((((0.00036)*x16110))+(((-0.03431)*x16090))+(((0.16769)*x16089))+(((-1.0)*py*x16083))+(((-0.03431)*x16091))+(((-0.16769)*sj7*x16110))+((x16084*x16108))+(((0.32901)*cj5))+((px*x16085))+((x16088*x16108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16111=((0.00337)*cj9);
IkReal x16112=((0.00337)*sj9);
IkReal x16113=(cj6*sj7);
IkReal x16114=((0.00036)*cj6*cj9);
IkReal x16115=((0.00036)*cj6*sj9);
IkReal x16116=((0.202)*cj6*cj9*sj7);
IkReal x16117=((0.202)*cj6*sj7*sj9);
CheckValue<IkReal> x16118=IKPowWithIntegerCheck(IKsign((((cj9*rxp1_2))+((rxp0_2*sj9)))),-1);
if(!x16118.valid){
continue;
}
CheckValue<IkReal> x16119 = IKatan2WithCheck(IkReal((((r01*x16111))+(((-1.0)*r00*x16117))+(((-1.0)*r01*x16116))+((r00*x16112))+((r00*x16115))+((px*x16113))+((r01*x16114)))),((((-1.0)*py*x16113))+(((-1.0)*r10*x16112))+(((-1.0)*r11*x16111))+(((-1.0)*r10*x16115))+((r10*x16117))+((r11*x16116))+(((-1.0)*r11*x16114))),IKFAST_ATAN2_MAGTHRESH);
if(!x16119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16118.value)))+(x16119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x16120=(cj6*sj7);
IkReal x16121=(cj9*r01);
IkReal x16122=IKcos(j4);
IkReal x16123=((1.0)*x16122);
IkReal x16124=(cj9*r11);
IkReal x16125=IKsin(j4);
IkReal x16126=((1.0)*x16125);
IkReal x16127=(r00*sj9);
IkReal x16128=(r10*sj9);
IkReal x16129=(cj5*cj7);
IkReal x16130=(cj9*r01*x16125);
IkReal x16131=(r00*sj9*x16125);
IkReal x16132=(sj5*sj6*sj7);
IkReal x16133=((0.03431)*x16122);
IkReal x16134=((0.03431)*x16125);
evalcond[0]=((((-1.0)*x16123*x16127))+(((-1.0)*x16121*x16123))+(((-1.0)*x16124*x16126))+(((-1.0)*x16126*x16128))+(((-1.0)*x16120)));
evalcond[1]=(x16131+x16130+x16129+(((-1.0)*x16132))+(((-1.0)*x16123*x16128))+(((-1.0)*x16123*x16124)));
evalcond[2]=((0.00337)+((x16121*x16133))+(((0.00036)*cj6))+(((-0.16769)*x16120))+(((-1.0)*py*x16126))+((x16127*x16133))+((x16124*x16134))+(((-1.0)*px*x16123))+((x16128*x16134)));
evalcond[3]=((((-0.03431)*x16131))+((x16124*x16133))+(((-0.16769)*x16132))+(((-0.03431)*x16130))+((px*x16125))+(((0.00036)*sj5*sj6))+(((0.32901)*cj5))+(((-1.0)*py*x16123))+((x16128*x16133))+(((0.16769)*x16129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[2];
IkReal x16135=((1.0)*sj4);
IkReal x16136=(((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*cj9*r01*x16135))+(((-1.0)*r00*sj9*x16135)));
j8eval[0]=x16136;
j8eval[1]=IKsign(x16136);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x16137=((1.0)*cj4);
IkReal x16138=((1.0)*sj4);
IkReal x16139=((((-1.0)*cj9*r11*x16138))+(((-1.0)*cj9*r01*x16137))+(((-1.0)*r10*sj9*x16138))+(((-1.0)*r00*sj9*x16137)));
j8eval[0]=x16139;
j8eval[1]=IKsign(x16139);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x16140=r21*r21;
IkReal x16141=(cj9*r20);
IkReal x16142=cj9*cj9;
IkReal x16143=((((-1.0)*x16140*x16142))+((x16142*(r20*r20)))+x16140+(r22*r22)+(((-2.0)*r21*sj9*x16141)));
IkReal x16144=(sj5*sj7);
IkReal x16145=(cj5*cj6);
IkReal x16146=(r21*sj9);
IkReal x16147=((1.0)*cj9*r20);
IkReal x16148=(cj5*cj7*sj6);
j8eval[0]=x16143;
j8eval[1]=((IKabs((((r22*x16144))+(((-1.0)*r22*x16148))+((x16145*x16146))+(((-1.0)*x16145*x16147)))))+(IKabs((((x16141*x16144))+((r22*x16145))+(((-1.0)*x16147*x16148))+(((-1.0)*sj5*sj7*x16146))+((x16146*x16148))))));
j8eval[2]=IKsign(x16143);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x16149=(cj9*r21);
IkReal x16150=(r20*sj9);
IkReal x16151=((1.0)*cj4);
IkReal x16152=(cj9*r01);
IkReal x16153=(r00*sj9);
IkReal x16154=((1.0)*sj4);
IkReal x16155=(cj9*r11);
IkReal x16156=(r10*sj9);
IkReal x16157=(sj4*x16152);
IkReal x16158=(sj4*x16153);
IkReal x16159=((0.03431)*cj4);
IkReal x16160=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*x16150))+(((-1.0)*x16149)));
evalcond[2]=((((-1.0)*x16151*x16153))+(((-1.0)*x16154*x16156))+(((-1.0)*x16154*x16155))+(((-1.0)*x16151*x16152)));
evalcond[3]=((0.4967)+(((0.03431)*x16149))+(((-1.0)*(1.0)*pz))+(((0.03431)*x16150)));
evalcond[4]=((((-1.0)*x16151*x16155))+(((-1.0)*x16151*x16156))+x16157+x16158);
evalcond[5]=((0.00337)+((x16153*x16159))+(((-1.0)*py*x16154))+(((0.00036)*cj6))+((x16155*x16160))+((x16152*x16159))+(((-1.0)*px*x16151))+((x16156*x16160)));
evalcond[6]=(((px*sj4))+((x16156*x16159))+(((-0.03431)*x16158))+(((-0.03431)*x16157))+(((0.00036)*sj6))+(((-1.0)*py*x16151))+((x16155*x16159)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x16161=((1.0)*cj4);
IkReal x16162=((((-1.0)*r10*sj9*x16161))+(((-1.0)*cj9*r11*x16161))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x16162;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x16162);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x16163=((1.0)*cj4);
IkReal x16164=((1.0)*sj9);
IkReal x16165=((((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*r00*sj9*x16163))+(((-1.0)*r10*sj4*x16164))+(((-1.0)*cj9*r01*x16163)));
j8eval[0]=x16165;
j8eval[1]=IKsign(x16165);
j8eval[2]=((IKabs(((((-1.0)*cj6*r21*x16164))+((cj6*cj9*r20)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x16166=(cj4*r21);
IkReal x16167=(r11*x16166);
IkReal x16168=((1.0)*sj4);
IkReal x16169=(r01*r21);
IkReal x16170=(r21*sj9);
IkReal x16171=(cj9*r20*sj9);
IkReal x16172=cj9*cj9;
IkReal x16173=(r20*x16172);
IkReal x16174=(((cj4*r12*r22))+((sj4*x16169*x16172))+(((-1.0)*r02*r22*x16168))+(((-1.0)*cj4*r11*x16171))+(((-1.0)*r00*sj4*x16173))+((cj9*r00*sj4*x16170))+((cj4*r10*x16173))+(((-1.0)*cj9*r10*sj9*x16166))+(((-1.0)*x16167*x16172))+x16167+(((-1.0)*x16168*x16169))+((r01*sj4*x16171)));
j8eval[0]=x16174;
j8eval[1]=IKsign(x16174);
j8eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*sj6*x16170))+((sj6*((cj9*r20))))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x16175=(cj9*r21);
IkReal x16176=(r20*sj9);
IkReal x16177=((1.0)*cj4);
IkReal x16178=(cj9*r01);
IkReal x16179=(r00*sj9);
IkReal x16180=((1.0)*sj4);
IkReal x16181=(cj9*r11);
IkReal x16182=(r10*sj9);
IkReal x16183=(sj4*x16178);
IkReal x16184=(sj4*x16179);
IkReal x16185=((0.03431)*cj4);
IkReal x16186=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x16176))+(((-1.0)*x16175)));
evalcond[2]=((((-1.0)*x16180*x16181))+(((-1.0)*x16180*x16182))+(((-1.0)*x16177*x16178))+(((-1.0)*x16177*x16179)));
evalcond[3]=((0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x16175))+(((0.03431)*x16176)));
evalcond[4]=((((-1.0)*x16177*x16182))+(((-1.0)*x16177*x16181))+x16184+x16183);
evalcond[5]=((0.00373)+(((-1.0)*px*x16177))+((x16182*x16186))+(((-1.0)*py*x16180))+((x16179*x16185))+((x16181*x16186))+((x16178*x16185)));
evalcond[6]=(((px*sj4))+((x16182*x16185))+(((-0.03431)*x16184))+(((-0.03431)*x16183))+(((-1.0)*py*x16177))+((x16181*x16185)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x16187=((1.0)*cj9);
IkReal x16188=((1.0)*sj9);
IkReal x16189=((((-1.0)*r11*sj4*x16187))+(((-1.0)*cj4*r00*x16188))+(((-1.0)*cj4*r01*x16187))+(((-1.0)*r10*sj4*x16188)));
j8eval[0]=x16189;
j8eval[1]=((IKabs(((((-1.0)*r21*x16188))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x16189);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x16190=((1.0)*sj9);
IkReal x16191=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x16190))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x16191;
j8eval[1]=IKsign(x16191);
j8eval[2]=((IKabs(((((-1.0)*r21*x16190))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x16192=(cj4*r01);
IkReal x16193=(r21*x16192);
IkReal x16194=(r11*sj4);
IkReal x16195=(r21*x16194);
IkReal x16196=(cj4*r00);
IkReal x16197=cj9*cj9;
IkReal x16198=(r20*x16197);
IkReal x16199=(r10*sj4);
IkReal x16200=((1.0)*cj9*r21*sj9);
IkReal x16201=((1.0)*cj9*r20*sj9);
IkReal x16202=((1.0)*x16197);
IkReal x16203=((((-1.0)*x16195*x16202))+(((-1.0)*x16196*x16200))+((x16196*x16198))+(((-1.0)*x16199*x16200))+(((-1.0)*x16193*x16202))+((r12*r22*sj4))+x16193+x16195+(((-1.0)*x16192*x16201))+((cj4*r02*r22))+((x16198*x16199))+(((-1.0)*x16194*x16201)));
j8eval[0]=x16203;
j8eval[1]=IKsign(x16203);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16204=(cj4*r01);
IkReal x16205=(r21*x16204);
IkReal x16206=(r11*sj4);
IkReal x16207=(r21*x16206);
IkReal x16208=(cj4*r00);
IkReal x16209=cj9*cj9;
IkReal x16210=(r20*x16209);
IkReal x16211=(r10*sj4);
IkReal x16212=((1.0)*cj9*r21*sj9);
IkReal x16213=((1.0)*cj9*r20*sj9);
IkReal x16214=((1.0)*x16209);
CheckValue<IkReal> x16215=IKPowWithIntegerCheck(IKsign((((x16208*x16210))+(((-1.0)*x16208*x16212))+(((-1.0)*x16205*x16214))+((x16210*x16211))+(((-1.0)*x16207*x16214))+x16207+x16205+(((-1.0)*x16211*x16212))+((r12*r22*sj4))+(((-1.0)*x16204*x16213))+(((-1.0)*x16206*x16213))+((cj4*r02*r22)))),-1);
if(!x16215.valid){
continue;
}
CheckValue<IkReal> x16216 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x16216.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16215.value)))+(x16216.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16217=IKcos(j8);
IkReal x16218=IKsin(j8);
IkReal x16219=(r21*sj9);
IkReal x16220=(cj9*r20);
IkReal x16221=((1.0)*x16218);
IkReal x16222=((1.0)*x16217);
IkReal x16223=(cj4*x16217);
IkReal x16224=(r12*sj4);
IkReal x16225=(r01*sj9);
IkReal x16226=(cj4*x16218);
IkReal x16227=(r11*sj4*sj9);
IkReal x16228=(cj9*r00);
IkReal x16229=((1.0)*cj4*x16218);
IkReal x16230=(cj9*r10*sj4);
IkReal x16231=(r02*sj4);
IkReal x16232=(r11*sj9);
IkReal x16233=(cj9*r00*sj4);
IkReal x16234=(cj9*r10);
IkReal x16235=((1.0)*cj4*x16217);
IkReal x16236=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x16220*x16221))+((x16218*x16219))+((r22*x16217)));
evalcond[1]=((((-1.0)*r22*x16221))+(((-1.0)*x16220*x16222))+((x16217*x16219)));
evalcond[2]=((((-1.0)*x16221*x16230))+((x16218*x16227))+((x16225*x16226))+((r02*x16223))+((x16217*x16224))+(((-1.0)*x16228*x16229)));
evalcond[3]=((((-1.0)*x16222*x16236))+(((-1.0)*x16234*x16235))+((x16223*x16232))+(((-1.0)*r12*x16229))+((x16217*x16233))+((x16218*x16231)));
evalcond[4]=((1.0)+(((-1.0)*x16229*x16234))+((r12*x16223))+(((-1.0)*x16222*x16231))+(((-1.0)*x16221*x16236))+((x16218*x16233))+((x16226*x16232)));
evalcond[5]=((1.0)+((x16217*x16227))+(((-1.0)*x16222*x16230))+(((-1.0)*x16228*x16235))+(((-1.0)*x16221*x16224))+(((-1.0)*r02*x16229))+((x16223*x16225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16237=((1.0)*sj9);
CheckValue<IkReal> x16238 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x16237))+((cj9*r20)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x16238.valid){
continue;
}
CheckValue<IkReal> x16239=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x16237))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x16239.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x16238.value)+(((1.5707963267949)*(x16239.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16240=IKcos(j8);
IkReal x16241=IKsin(j8);
IkReal x16242=(r21*sj9);
IkReal x16243=(cj9*r20);
IkReal x16244=((1.0)*x16241);
IkReal x16245=((1.0)*x16240);
IkReal x16246=(cj4*x16240);
IkReal x16247=(r12*sj4);
IkReal x16248=(r01*sj9);
IkReal x16249=(cj4*x16241);
IkReal x16250=(r11*sj4*sj9);
IkReal x16251=(cj9*r00);
IkReal x16252=((1.0)*cj4*x16241);
IkReal x16253=(cj9*r10*sj4);
IkReal x16254=(r02*sj4);
IkReal x16255=(r11*sj9);
IkReal x16256=(cj9*r00*sj4);
IkReal x16257=(cj9*r10);
IkReal x16258=((1.0)*cj4*x16240);
IkReal x16259=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x16243*x16244))+((x16241*x16242))+((r22*x16240)));
evalcond[1]=((((-1.0)*r22*x16244))+(((-1.0)*x16243*x16245))+((x16240*x16242)));
evalcond[2]=(((r02*x16246))+((x16241*x16250))+(((-1.0)*x16244*x16253))+((x16248*x16249))+(((-1.0)*x16251*x16252))+((x16240*x16247)));
evalcond[3]=((((-1.0)*x16245*x16259))+(((-1.0)*x16257*x16258))+(((-1.0)*r12*x16252))+((x16240*x16256))+((x16241*x16254))+((x16246*x16255)));
evalcond[4]=((1.0)+((x16241*x16256))+(((-1.0)*x16252*x16257))+((x16249*x16255))+(((-1.0)*x16244*x16259))+(((-1.0)*x16245*x16254))+((r12*x16246)));
evalcond[5]=((1.0)+((x16240*x16250))+((x16246*x16248))+(((-1.0)*x16251*x16258))+(((-1.0)*x16245*x16253))+(((-1.0)*r02*x16252))+(((-1.0)*x16244*x16247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16260=((1.0)*sj9);
IkReal x16261=((1.0)*cj9);
CheckValue<IkReal> x16262=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x16260))+(((-1.0)*cj4*r01*x16261))+(((-1.0)*r11*sj4*x16261))+(((-1.0)*cj4*r00*x16260)))),-1);
if(!x16262.valid){
continue;
}
CheckValue<IkReal> x16263 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x16260))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x16263.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16262.value)))+(x16263.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16264=IKcos(j8);
IkReal x16265=IKsin(j8);
IkReal x16266=(r21*sj9);
IkReal x16267=(cj9*r20);
IkReal x16268=((1.0)*x16265);
IkReal x16269=((1.0)*x16264);
IkReal x16270=(cj4*x16264);
IkReal x16271=(r12*sj4);
IkReal x16272=(r01*sj9);
IkReal x16273=(cj4*x16265);
IkReal x16274=(r11*sj4*sj9);
IkReal x16275=(cj9*r00);
IkReal x16276=((1.0)*cj4*x16265);
IkReal x16277=(cj9*r10*sj4);
IkReal x16278=(r02*sj4);
IkReal x16279=(r11*sj9);
IkReal x16280=(cj9*r00*sj4);
IkReal x16281=(cj9*r10);
IkReal x16282=((1.0)*cj4*x16264);
IkReal x16283=(r01*sj4*sj9);
evalcond[0]=(((x16265*x16266))+(((-1.0)*x16267*x16268))+((r22*x16264)));
evalcond[1]=(((x16264*x16266))+(((-1.0)*x16267*x16269))+(((-1.0)*r22*x16268)));
evalcond[2]=(((x16264*x16271))+(((-1.0)*x16275*x16276))+((r02*x16270))+((x16272*x16273))+((x16265*x16274))+(((-1.0)*x16268*x16277)));
evalcond[3]=(((x16264*x16280))+(((-1.0)*r12*x16276))+(((-1.0)*x16269*x16283))+(((-1.0)*x16281*x16282))+((x16265*x16278))+((x16270*x16279)));
evalcond[4]=((1.0)+(((-1.0)*x16276*x16281))+(((-1.0)*x16269*x16278))+((r12*x16270))+((x16273*x16279))+(((-1.0)*x16268*x16283))+((x16265*x16280)));
evalcond[5]=((1.0)+(((-1.0)*x16269*x16277))+(((-1.0)*r02*x16276))+(((-1.0)*x16275*x16282))+(((-1.0)*x16268*x16271))+((x16270*x16272))+((x16264*x16274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16284=(cj9*r21);
IkReal x16285=(r20*sj9);
IkReal x16286=((1.0)*cj4);
IkReal x16287=(cj9*r01);
IkReal x16288=(r00*sj9);
IkReal x16289=((1.0)*sj4);
IkReal x16290=(cj9*r11);
IkReal x16291=(r10*sj9);
IkReal x16292=(sj4*x16287);
IkReal x16293=(sj4*x16288);
IkReal x16294=((0.03431)*cj4);
IkReal x16295=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x16284))+(((-1.0)*x16285)));
evalcond[2]=((((-1.0)*x16286*x16288))+(((-1.0)*x16286*x16287))+(((-1.0)*x16289*x16291))+(((-1.0)*x16289*x16290)));
evalcond[3]=((0.4967)+(((0.03431)*x16284))+(((-1.0)*(1.0)*pz))+(((0.03431)*x16285)));
evalcond[4]=(x16293+x16292+(((-1.0)*x16286*x16290))+(((-1.0)*x16286*x16291)));
evalcond[5]=((0.00301)+((x16290*x16295))+((x16291*x16295))+(((-1.0)*py*x16289))+(((-1.0)*px*x16286))+((x16287*x16294))+((x16288*x16294)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x16292))+(((-1.0)*py*x16286))+((x16291*x16294))+(((-0.03431)*x16293))+((x16290*x16294)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x16296=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x16296;
j8eval[1]=IKsign(x16296);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x16297=((1.0)*cj9);
IkReal x16298=((((-1.0)*cj4*r11*x16297))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x16298;
j8eval[1]=((IKabs(((((-1.0)*r20*x16297))+((r21*sj9)))))+(IKabs(r22)));
j8eval[2]=IKsign(x16298);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x16299=((1.0)*r21);
IkReal x16300=(cj4*r01);
IkReal x16301=((1.0)*r22);
IkReal x16302=(r11*sj4);
IkReal x16303=(cj4*r00);
IkReal x16304=(cj9*r21*sj9);
IkReal x16305=(cj9*r20*sj9);
IkReal x16306=(r10*sj4);
IkReal x16307=cj9*cj9;
IkReal x16308=(r21*x16307);
IkReal x16309=((1.0)*r20*x16307);
IkReal x16310=(((x16302*x16308))+(((-1.0)*x16299*x16302))+((x16300*x16308))+(((-1.0)*r12*sj4*x16301))+(((-1.0)*x16306*x16309))+(((-1.0)*x16303*x16309))+((x16303*x16304))+(((-1.0)*x16299*x16300))+((x16304*x16306))+((x16302*x16305))+((x16300*x16305))+(((-1.0)*cj4*r02*x16301)));
j8eval[0]=x16310;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*sj9*x16299))+((cj9*r20))))));
j8eval[2]=IKsign(x16310);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16311=((1.0)*r21);
IkReal x16312=(cj4*r01);
IkReal x16313=((1.0)*r22);
IkReal x16314=(r11*sj4);
IkReal x16315=(cj4*r00);
IkReal x16316=(cj9*r21*sj9);
IkReal x16317=(cj9*r20*sj9);
IkReal x16318=(r10*sj4);
IkReal x16319=cj9*cj9;
IkReal x16320=(r21*x16319);
IkReal x16321=((1.0)*r20*x16319);
CheckValue<IkReal> x16322=IKPowWithIntegerCheck(IKsign((((x16314*x16320))+(((-1.0)*x16315*x16321))+((x16314*x16317))+(((-1.0)*x16318*x16321))+(((-1.0)*cj4*r02*x16313))+((x16312*x16320))+((x16312*x16317))+(((-1.0)*x16311*x16312))+(((-1.0)*x16311*x16314))+((x16316*x16318))+((x16315*x16316))+(((-1.0)*r12*sj4*x16313)))),-1);
if(!x16322.valid){
continue;
}
CheckValue<IkReal> x16323 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*sj9*x16311))),IKFAST_ATAN2_MAGTHRESH);
if(!x16323.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16322.value)))+(x16323.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16324=IKcos(j8);
IkReal x16325=IKsin(j8);
IkReal x16326=(r21*sj9);
IkReal x16327=(cj9*r20);
IkReal x16328=((1.0)*x16325);
IkReal x16329=((1.0)*x16324);
IkReal x16330=(cj4*x16324);
IkReal x16331=(r12*sj4);
IkReal x16332=(r01*sj9);
IkReal x16333=(cj4*x16325);
IkReal x16334=(r11*sj4*sj9);
IkReal x16335=(cj9*r00);
IkReal x16336=((1.0)*cj4*x16325);
IkReal x16337=(cj9*r10*sj4);
IkReal x16338=(r02*sj4);
IkReal x16339=(r11*sj9);
IkReal x16340=(cj9*r00*sj4);
IkReal x16341=(cj9*r10);
IkReal x16342=((1.0)*cj4*x16324);
IkReal x16343=(r01*sj4*sj9);
evalcond[0]=(((r22*x16324))+((x16325*x16326))+(((-1.0)*x16327*x16328)));
evalcond[1]=((((-1.0)*r22*x16328))+((x16324*x16326))+(((-1.0)*x16327*x16329)));
evalcond[2]=(((x16332*x16333))+((x16324*x16331))+(((-1.0)*x16335*x16336))+((x16325*x16334))+(((-1.0)*x16328*x16337))+((r02*x16330)));
evalcond[3]=((((-1.0)*r12*x16336))+(((-1.0)*x16329*x16343))+((x16330*x16339))+((x16324*x16340))+(((-1.0)*x16341*x16342))+((x16325*x16338)));
evalcond[4]=((-1.0)+((x16333*x16339))+((r12*x16330))+((x16325*x16340))+(((-1.0)*x16328*x16343))+(((-1.0)*x16336*x16341))+(((-1.0)*x16329*x16338)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x16336))+(((-1.0)*x16335*x16342))+(((-1.0)*x16328*x16331))+((x16324*x16334))+((x16330*x16332))+(((-1.0)*x16329*x16337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16344=((1.0)*cj9);
CheckValue<IkReal> x16345=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x16344))+((r00*sj4*sj9)))),-1);
if(!x16345.valid){
continue;
}
CheckValue<IkReal> x16346 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x16344)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x16346.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16345.value)))+(x16346.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16347=IKcos(j8);
IkReal x16348=IKsin(j8);
IkReal x16349=(r21*sj9);
IkReal x16350=(cj9*r20);
IkReal x16351=((1.0)*x16348);
IkReal x16352=((1.0)*x16347);
IkReal x16353=(cj4*x16347);
IkReal x16354=(r12*sj4);
IkReal x16355=(r01*sj9);
IkReal x16356=(cj4*x16348);
IkReal x16357=(r11*sj4*sj9);
IkReal x16358=(cj9*r00);
IkReal x16359=((1.0)*cj4*x16348);
IkReal x16360=(cj9*r10*sj4);
IkReal x16361=(r02*sj4);
IkReal x16362=(r11*sj9);
IkReal x16363=(cj9*r00*sj4);
IkReal x16364=(cj9*r10);
IkReal x16365=((1.0)*cj4*x16347);
IkReal x16366=(r01*sj4*sj9);
evalcond[0]=(((r22*x16347))+(((-1.0)*x16350*x16351))+((x16348*x16349)));
evalcond[1]=((((-1.0)*x16350*x16352))+(((-1.0)*r22*x16351))+((x16347*x16349)));
evalcond[2]=(((r02*x16353))+((x16348*x16357))+((x16355*x16356))+(((-1.0)*x16358*x16359))+(((-1.0)*x16351*x16360))+((x16347*x16354)));
evalcond[3]=((((-1.0)*x16352*x16366))+(((-1.0)*r12*x16359))+(((-1.0)*x16364*x16365))+((x16347*x16363))+((x16353*x16362))+((x16348*x16361)));
evalcond[4]=((-1.0)+(((-1.0)*x16351*x16366))+((r12*x16353))+(((-1.0)*x16359*x16364))+((x16356*x16362))+((x16348*x16363))+(((-1.0)*x16352*x16361)));
evalcond[5]=((-1.0)+((x16353*x16355))+(((-1.0)*x16352*x16360))+((x16347*x16357))+(((-1.0)*x16358*x16365))+(((-1.0)*r02*x16359))+(((-1.0)*x16351*x16354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x16367=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x16367.valid){
continue;
}
CheckValue<IkReal> x16368 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x16368.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16367.value)))+(x16368.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16369=IKcos(j8);
IkReal x16370=IKsin(j8);
IkReal x16371=(r21*sj9);
IkReal x16372=(cj9*r20);
IkReal x16373=((1.0)*x16370);
IkReal x16374=((1.0)*x16369);
IkReal x16375=(cj4*x16369);
IkReal x16376=(r12*sj4);
IkReal x16377=(r01*sj9);
IkReal x16378=(cj4*x16370);
IkReal x16379=(r11*sj4*sj9);
IkReal x16380=(cj9*r00);
IkReal x16381=((1.0)*cj4*x16370);
IkReal x16382=(cj9*r10*sj4);
IkReal x16383=(r02*sj4);
IkReal x16384=(r11*sj9);
IkReal x16385=(cj9*r00*sj4);
IkReal x16386=(cj9*r10);
IkReal x16387=((1.0)*cj4*x16369);
IkReal x16388=(r01*sj4*sj9);
evalcond[0]=(((r22*x16369))+((x16370*x16371))+(((-1.0)*x16372*x16373)));
evalcond[1]=((((-1.0)*r22*x16373))+((x16369*x16371))+(((-1.0)*x16372*x16374)));
evalcond[2]=(((x16377*x16378))+(((-1.0)*x16373*x16382))+((r02*x16375))+(((-1.0)*x16380*x16381))+((x16370*x16379))+((x16369*x16376)));
evalcond[3]=((((-1.0)*x16386*x16387))+((x16370*x16383))+((x16375*x16384))+(((-1.0)*r12*x16381))+(((-1.0)*x16374*x16388))+((x16369*x16385)));
evalcond[4]=((-1.0)+((x16378*x16384))+(((-1.0)*x16374*x16383))+(((-1.0)*x16373*x16388))+((r12*x16375))+((x16370*x16385))+(((-1.0)*x16381*x16386)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x16381))+(((-1.0)*x16374*x16382))+(((-1.0)*x16373*x16376))+(((-1.0)*x16380*x16387))+((x16369*x16379))+((x16375*x16377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16389=(cj9*r21);
IkReal x16390=(r20*sj9);
IkReal x16391=((1.0)*cj4);
IkReal x16392=(cj9*r01);
IkReal x16393=(r00*sj9);
IkReal x16394=((1.0)*sj4);
IkReal x16395=(cj9*r11);
IkReal x16396=(r10*sj9);
IkReal x16397=(sj4*x16392);
IkReal x16398=(sj4*x16393);
IkReal x16399=((0.03431)*cj4);
IkReal x16400=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x16390))+(((-1.0)*x16389)));
evalcond[2]=((((-1.0)*x16391*x16393))+(((-1.0)*x16394*x16396))+(((-1.0)*x16394*x16395))+(((-1.0)*x16391*x16392)));
evalcond[3]=((0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x16389))+(((0.03431)*x16390)));
evalcond[4]=((((-1.0)*x16391*x16395))+x16398+x16397+(((-1.0)*x16391*x16396)));
evalcond[5]=((0.00337)+(((-1.0)*py*x16394))+((x16392*x16399))+((x16393*x16399))+((x16395*x16400))+(((-1.0)*px*x16391))+((x16396*x16400)));
evalcond[6]=((0.00036)+((px*sj4))+(((-1.0)*py*x16391))+(((-0.03431)*x16398))+((x16396*x16399))+((x16395*x16399))+(((-0.03431)*x16397)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x16401=((1.0)*sj9);
IkReal x16402=((((-1.0)*cj4*r10*x16401))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x16402;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*r21*x16401)))))+(IKabs(r22)));
j8eval[2]=IKsign(x16402);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x16403=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x16403;
j8eval[1]=IKsign(x16403);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x16404=(cj4*r11);
IkReal x16405=((1.0)*r21);
IkReal x16406=(r01*sj4);
IkReal x16407=(cj9*r20*sj9);
IkReal x16408=(cj4*r10);
IkReal x16409=cj9*cj9;
IkReal x16410=(r20*x16409);
IkReal x16411=(((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*x16405*x16406))+(((-1.0)*r00*sj4*x16410))+(((-1.0)*cj4*r11*x16407))+(((-1.0)*r21*x16404*x16409))+((r21*x16406*x16409))+(((-1.0)*r02*r22*sj4))+((x16408*x16410))+(((-1.0)*cj9*r21*sj9*x16408))+((r21*x16404))+((x16406*x16407)));
j8eval[0]=x16411;
j8eval[1]=IKsign(x16411);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*sj9*x16405)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16412=((1.0)*r21);
IkReal x16413=(cj4*r11);
IkReal x16414=(r01*sj4);
IkReal x16415=(cj9*r20*sj9);
IkReal x16416=(cj4*r10);
IkReal x16417=cj9*cj9;
IkReal x16418=(r20*x16417);
CheckValue<IkReal> x16419=IKPowWithIntegerCheck(IKsign((((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+((r21*x16413))+(((-1.0)*r02*r22*sj4))+(((-1.0)*x16412*x16414))+((r21*x16414*x16417))+((x16414*x16415))+(((-1.0)*cj9*r21*sj9*x16416))+((x16416*x16418))+(((-1.0)*r00*sj4*x16418))+(((-1.0)*r21*x16413*x16417))+(((-1.0)*cj4*r11*x16415)))),-1);
if(!x16419.valid){
continue;
}
CheckValue<IkReal> x16420 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x16412))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x16420.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16419.value)))+(x16420.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16421=IKcos(j8);
IkReal x16422=IKsin(j8);
IkReal x16423=(r21*sj9);
IkReal x16424=(cj9*r20);
IkReal x16425=((1.0)*x16422);
IkReal x16426=((1.0)*x16421);
IkReal x16427=(cj4*x16421);
IkReal x16428=(r12*sj4);
IkReal x16429=(r01*sj9);
IkReal x16430=(cj4*x16422);
IkReal x16431=(r11*sj4*sj9);
IkReal x16432=(cj9*r00);
IkReal x16433=((1.0)*cj4*x16422);
IkReal x16434=(cj9*r10*sj4);
IkReal x16435=(r02*sj4);
IkReal x16436=(r11*sj9);
IkReal x16437=(cj9*r00*sj4);
IkReal x16438=(cj9*r10);
IkReal x16439=(r01*sj4*sj9);
IkReal x16440=((1.0)*cj4*x16421);
evalcond[0]=(((x16422*x16423))+((r22*x16421))+(((-1.0)*x16424*x16425)));
evalcond[1]=((((-1.0)*x16424*x16426))+((x16421*x16423))+(((-1.0)*r22*x16425)));
evalcond[2]=((-1.0)+((x16421*x16428))+((x16422*x16431))+(((-1.0)*x16425*x16434))+((x16429*x16430))+((r02*x16427))+(((-1.0)*x16432*x16433)));
evalcond[3]=(((x16430*x16436))+((x16422*x16437))+(((-1.0)*x16433*x16438))+((r12*x16427))+(((-1.0)*x16425*x16439))+(((-1.0)*x16426*x16435)));
evalcond[4]=((((-1.0)*x16432*x16440))+((x16427*x16429))+((x16421*x16431))+(((-1.0)*x16426*x16434))+(((-1.0)*r02*x16433))+(((-1.0)*x16425*x16428)));
evalcond[5]=((1.0)+((x16421*x16437))+((x16427*x16436))+((x16422*x16435))+(((-1.0)*x16426*x16439))+(((-1.0)*r12*x16433))+(((-1.0)*x16438*x16440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x16441 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x16441.valid){
continue;
}
CheckValue<IkReal> x16442=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x16442.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x16441.value)+(((1.5707963267949)*(x16442.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16443=IKcos(j8);
IkReal x16444=IKsin(j8);
IkReal x16445=(r21*sj9);
IkReal x16446=(cj9*r20);
IkReal x16447=((1.0)*x16444);
IkReal x16448=((1.0)*x16443);
IkReal x16449=(cj4*x16443);
IkReal x16450=(r12*sj4);
IkReal x16451=(r01*sj9);
IkReal x16452=(cj4*x16444);
IkReal x16453=(r11*sj4*sj9);
IkReal x16454=(cj9*r00);
IkReal x16455=((1.0)*cj4*x16444);
IkReal x16456=(cj9*r10*sj4);
IkReal x16457=(r02*sj4);
IkReal x16458=(r11*sj9);
IkReal x16459=(cj9*r00*sj4);
IkReal x16460=(cj9*r10);
IkReal x16461=(r01*sj4*sj9);
IkReal x16462=((1.0)*cj4*x16443);
evalcond[0]=(((r22*x16443))+((x16444*x16445))+(((-1.0)*x16446*x16447)));
evalcond[1]=((((-1.0)*r22*x16447))+(((-1.0)*x16446*x16448))+((x16443*x16445)));
evalcond[2]=((-1.0)+((x16451*x16452))+(((-1.0)*x16454*x16455))+((r02*x16449))+((x16443*x16450))+((x16444*x16453))+(((-1.0)*x16447*x16456)));
evalcond[3]=((((-1.0)*x16455*x16460))+((r12*x16449))+((x16452*x16458))+(((-1.0)*x16447*x16461))+(((-1.0)*x16448*x16457))+((x16444*x16459)));
evalcond[4]=(((x16443*x16453))+((x16449*x16451))+(((-1.0)*x16448*x16456))+(((-1.0)*r02*x16455))+(((-1.0)*x16454*x16462))+(((-1.0)*x16447*x16450)));
evalcond[5]=((1.0)+((x16449*x16458))+(((-1.0)*x16448*x16461))+((x16443*x16459))+((x16444*x16457))+(((-1.0)*x16460*x16462))+(((-1.0)*r12*x16455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16463=((1.0)*sj9);
CheckValue<IkReal> x16464=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x16463))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x16464.valid){
continue;
}
CheckValue<IkReal> x16465 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x16463))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x16465.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16464.value)))+(x16465.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16466=IKcos(j8);
IkReal x16467=IKsin(j8);
IkReal x16468=(r21*sj9);
IkReal x16469=(cj9*r20);
IkReal x16470=((1.0)*x16467);
IkReal x16471=((1.0)*x16466);
IkReal x16472=(cj4*x16466);
IkReal x16473=(r12*sj4);
IkReal x16474=(r01*sj9);
IkReal x16475=(cj4*x16467);
IkReal x16476=(r11*sj4*sj9);
IkReal x16477=(cj9*r00);
IkReal x16478=((1.0)*cj4*x16467);
IkReal x16479=(cj9*r10*sj4);
IkReal x16480=(r02*sj4);
IkReal x16481=(r11*sj9);
IkReal x16482=(cj9*r00*sj4);
IkReal x16483=(cj9*r10);
IkReal x16484=(r01*sj4*sj9);
IkReal x16485=((1.0)*cj4*x16466);
evalcond[0]=((((-1.0)*x16469*x16470))+((x16467*x16468))+((r22*x16466)));
evalcond[1]=(((x16466*x16468))+(((-1.0)*x16469*x16471))+(((-1.0)*r22*x16470)));
evalcond[2]=((-1.0)+((x16474*x16475))+(((-1.0)*x16477*x16478))+((x16467*x16476))+(((-1.0)*x16470*x16479))+((r02*x16472))+((x16466*x16473)));
evalcond[3]=(((x16475*x16481))+((x16467*x16482))+(((-1.0)*x16470*x16484))+(((-1.0)*x16478*x16483))+(((-1.0)*x16471*x16480))+((r12*x16472)));
evalcond[4]=(((x16472*x16474))+(((-1.0)*x16477*x16485))+((x16466*x16476))+(((-1.0)*r02*x16478))+(((-1.0)*x16470*x16473))+(((-1.0)*x16471*x16479)));
evalcond[5]=((1.0)+(((-1.0)*x16483*x16485))+(((-1.0)*r12*x16478))+((x16466*x16482))+((x16472*x16481))+(((-1.0)*x16471*x16484))+((x16467*x16480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16486=(cj9*r21);
IkReal x16487=(r20*sj9);
IkReal x16488=((1.0)*cj4);
IkReal x16489=(cj9*r01);
IkReal x16490=(r00*sj9);
IkReal x16491=((1.0)*sj4);
IkReal x16492=(cj9*r11);
IkReal x16493=(r10*sj9);
IkReal x16494=(sj4*x16489);
IkReal x16495=(sj4*x16490);
IkReal x16496=((0.03431)*cj4);
IkReal x16497=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x16486))+(((-1.0)*x16487)));
evalcond[2]=((((-1.0)*x16491*x16492))+(((-1.0)*x16488*x16489))+(((-1.0)*x16488*x16490))+(((-1.0)*x16491*x16493)));
evalcond[3]=((0.4967)+(((0.03431)*x16487))+(((0.03431)*x16486))+(((-1.0)*(1.0)*pz)));
evalcond[4]=((((-1.0)*x16488*x16493))+(((-1.0)*x16488*x16492))+x16495+x16494);
evalcond[5]=((0.00337)+((x16490*x16496))+((x16493*x16497))+((x16492*x16497))+(((-1.0)*py*x16491))+(((-1.0)*px*x16488))+((x16489*x16496)));
evalcond[6]=((-0.00036)+((px*sj4))+((x16492*x16496))+(((-1.0)*py*x16488))+(((-0.03431)*x16495))+(((-0.03431)*x16494))+((x16493*x16496)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x16498=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x16498;
j8eval[1]=IKsign(x16498);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x16499=((1.0)*sj9);
IkReal x16500=(((cj4*cj9*r11))+(((-1.0)*r00*sj4*x16499))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)));
j8eval[0]=x16500;
j8eval[1]=((IKabs(((((-1.0)*r21*x16499))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x16500);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x16501=(r01*sj4);
IkReal x16502=((1.0)*r21);
IkReal x16503=(cj4*r11);
IkReal x16504=(cj9*r20*sj9);
IkReal x16505=cj9*cj9;
IkReal x16506=(r00*sj4);
IkReal x16507=(r20*x16505);
IkReal x16508=((((-1.0)*x16502*x16503))+((r21*x16501))+((x16506*x16507))+(((-1.0)*cj9*r21*sj9*x16506))+((r02*r22*sj4))+(((-1.0)*cj4*r12*r22))+((x16503*x16504))+(((-1.0)*r01*sj4*x16504))+((cj4*cj9*r10*r21*sj9))+((r21*x16503*x16505))+(((-1.0)*cj4*r10*x16507))+(((-1.0)*r21*x16501*x16505)));
j8eval[0]=x16508;
j8eval[1]=IKsign(x16508);
j8eval[2]=((IKabs(((((-1.0)*sj9*x16502))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16509=((1.0)*r21);
IkReal x16510=(r01*sj4);
IkReal x16511=(cj4*r11);
IkReal x16512=(cj9*r20*sj9);
IkReal x16513=cj9*cj9;
IkReal x16514=(r00*sj4);
IkReal x16515=(r20*x16513);
CheckValue<IkReal> x16516=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16509*x16511))+((r21*x16510))+((x16514*x16515))+((x16511*x16512))+((r02*r22*sj4))+((r21*x16511*x16513))+(((-1.0)*cj4*r10*x16515))+(((-1.0)*r01*sj4*x16512))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*r21*x16510*x16513))+(((-1.0)*cj9*r21*sj9*x16514)))),-1);
if(!x16516.valid){
continue;
}
CheckValue<IkReal> x16517 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x16509))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x16517.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16516.value)))+(x16517.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16518=IKcos(j8);
IkReal x16519=IKsin(j8);
IkReal x16520=(r21*sj9);
IkReal x16521=(cj9*r20);
IkReal x16522=((1.0)*x16519);
IkReal x16523=((1.0)*x16518);
IkReal x16524=(cj4*x16518);
IkReal x16525=(r12*sj4);
IkReal x16526=(r01*sj9);
IkReal x16527=(cj4*x16519);
IkReal x16528=(r11*sj4*sj9);
IkReal x16529=(cj9*r00);
IkReal x16530=((1.0)*cj4*x16519);
IkReal x16531=(cj9*r10*sj4);
IkReal x16532=(r02*sj4);
IkReal x16533=(r11*sj9);
IkReal x16534=(cj9*r00*sj4);
IkReal x16535=(cj9*r10);
IkReal x16536=(r01*sj4*sj9);
IkReal x16537=((1.0)*cj4*x16518);
evalcond[0]=(((r22*x16518))+(((-1.0)*x16521*x16522))+((x16519*x16520)));
evalcond[1]=(((x16518*x16520))+(((-1.0)*x16521*x16523))+(((-1.0)*r22*x16522)));
evalcond[2]=((1.0)+((x16518*x16525))+((x16519*x16528))+((r02*x16524))+(((-1.0)*x16529*x16530))+((x16526*x16527))+(((-1.0)*x16522*x16531)));
evalcond[3]=((((-1.0)*x16522*x16536))+(((-1.0)*x16523*x16532))+((r12*x16524))+(((-1.0)*x16530*x16535))+((x16527*x16533))+((x16519*x16534)));
evalcond[4]=((((-1.0)*x16529*x16537))+((x16518*x16528))+(((-1.0)*x16523*x16531))+(((-1.0)*x16522*x16525))+((x16524*x16526))+(((-1.0)*r02*x16530)));
evalcond[5]=((-1.0)+(((-1.0)*x16535*x16537))+((x16524*x16533))+((x16519*x16532))+(((-1.0)*r12*x16530))+(((-1.0)*x16523*x16536))+((x16518*x16534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16538=((1.0)*sj9);
CheckValue<IkReal> x16539=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*r00*sj4*x16538))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x16539.valid){
continue;
}
CheckValue<IkReal> x16540 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x16538))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x16540.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16539.value)))+(x16540.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16541=IKcos(j8);
IkReal x16542=IKsin(j8);
IkReal x16543=(r21*sj9);
IkReal x16544=(cj9*r20);
IkReal x16545=((1.0)*x16542);
IkReal x16546=((1.0)*x16541);
IkReal x16547=(cj4*x16541);
IkReal x16548=(r12*sj4);
IkReal x16549=(r01*sj9);
IkReal x16550=(cj4*x16542);
IkReal x16551=(r11*sj4*sj9);
IkReal x16552=(cj9*r00);
IkReal x16553=((1.0)*cj4*x16542);
IkReal x16554=(cj9*r10*sj4);
IkReal x16555=(r02*sj4);
IkReal x16556=(r11*sj9);
IkReal x16557=(cj9*r00*sj4);
IkReal x16558=(cj9*r10);
IkReal x16559=(r01*sj4*sj9);
IkReal x16560=((1.0)*cj4*x16541);
evalcond[0]=(((x16542*x16543))+(((-1.0)*x16544*x16545))+((r22*x16541)));
evalcond[1]=(((x16541*x16543))+(((-1.0)*x16544*x16546))+(((-1.0)*r22*x16545)));
evalcond[2]=((1.0)+(((-1.0)*x16552*x16553))+((r02*x16547))+((x16549*x16550))+(((-1.0)*x16545*x16554))+((x16541*x16548))+((x16542*x16551)));
evalcond[3]=(((r12*x16547))+((x16550*x16556))+(((-1.0)*x16546*x16555))+(((-1.0)*x16545*x16559))+(((-1.0)*x16553*x16558))+((x16542*x16557)));
evalcond[4]=((((-1.0)*r02*x16553))+((x16541*x16551))+(((-1.0)*x16546*x16554))+((x16547*x16549))+(((-1.0)*x16552*x16560))+(((-1.0)*x16545*x16548)));
evalcond[5]=((-1.0)+((x16541*x16557))+(((-1.0)*x16546*x16559))+((x16542*x16555))+((x16547*x16556))+(((-1.0)*r12*x16553))+(((-1.0)*x16558*x16560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x16561 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x16561.valid){
continue;
}
CheckValue<IkReal> x16562=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x16562.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x16561.value)+(((1.5707963267949)*(x16562.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16563=IKcos(j8);
IkReal x16564=IKsin(j8);
IkReal x16565=(r21*sj9);
IkReal x16566=(cj9*r20);
IkReal x16567=((1.0)*x16564);
IkReal x16568=((1.0)*x16563);
IkReal x16569=(cj4*x16563);
IkReal x16570=(r12*sj4);
IkReal x16571=(r01*sj9);
IkReal x16572=(cj4*x16564);
IkReal x16573=(r11*sj4*sj9);
IkReal x16574=(cj9*r00);
IkReal x16575=((1.0)*cj4*x16564);
IkReal x16576=(cj9*r10*sj4);
IkReal x16577=(r02*sj4);
IkReal x16578=(r11*sj9);
IkReal x16579=(cj9*r00*sj4);
IkReal x16580=(cj9*r10);
IkReal x16581=(r01*sj4*sj9);
IkReal x16582=((1.0)*cj4*x16563);
evalcond[0]=(((r22*x16563))+(((-1.0)*x16566*x16567))+((x16564*x16565)));
evalcond[1]=((((-1.0)*x16566*x16568))+((x16563*x16565))+(((-1.0)*r22*x16567)));
evalcond[2]=((1.0)+((r02*x16569))+((x16563*x16570))+((x16564*x16573))+(((-1.0)*x16574*x16575))+(((-1.0)*x16567*x16576))+((x16571*x16572)));
evalcond[3]=(((x16564*x16579))+(((-1.0)*x16575*x16580))+(((-1.0)*x16567*x16581))+((x16572*x16578))+(((-1.0)*x16568*x16577))+((r12*x16569)));
evalcond[4]=(((x16563*x16573))+(((-1.0)*r02*x16575))+(((-1.0)*x16574*x16582))+((x16569*x16571))+(((-1.0)*x16567*x16570))+(((-1.0)*x16568*x16576)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x16575))+((x16563*x16579))+((x16569*x16578))+(((-1.0)*x16580*x16582))+(((-1.0)*x16568*x16581))+((x16564*x16577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16583=(r21*sj9);
IkReal x16584=(cj4*r21);
IkReal x16585=(r11*x16584);
IkReal x16586=((1.0)*sj4);
IkReal x16587=(r01*r21);
IkReal x16588=(cj9*r20*sj9);
IkReal x16589=cj9*cj9;
IkReal x16590=(r20*x16589);
CheckValue<IkReal> x16591=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*r10*sj9*x16584))+((cj4*r12*r22))+(((-1.0)*x16586*x16587))+(((-1.0)*x16585*x16589))+((sj4*x16587*x16589))+((r01*sj4*x16588))+(((-1.0)*cj4*r11*x16588))+((cj9*r00*sj4*x16583))+x16585+(((-1.0)*r02*r22*x16586))+(((-1.0)*r00*sj4*x16590))+((cj4*r10*x16590)))),-1);
if(!x16591.valid){
continue;
}
CheckValue<IkReal> x16592 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*sj6*x16583))+((sj6*((cj9*r20))))),IKFAST_ATAN2_MAGTHRESH);
if(!x16592.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16591.value)))+(x16592.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16593=IKcos(j8);
IkReal x16594=IKsin(j8);
IkReal x16595=(r21*sj9);
IkReal x16596=(cj9*r20);
IkReal x16597=((1.0)*x16594);
IkReal x16598=((1.0)*x16593);
IkReal x16599=(cj4*x16593);
IkReal x16600=(r02*sj4);
IkReal x16601=(r11*sj9);
IkReal x16602=(cj4*x16594);
IkReal x16603=(cj9*r00*sj4);
IkReal x16604=(cj9*r10);
IkReal x16605=((1.0)*cj4*x16594);
IkReal x16606=(r01*sj4*sj9);
IkReal x16607=((1.0)*cj4*x16593);
IkReal x16608=(r12*sj4);
IkReal x16609=(r01*sj9);
IkReal x16610=(r11*sj4*sj9);
IkReal x16611=(cj9*r00);
IkReal x16612=(cj9*r10*sj4);
evalcond[0]=((((-1.0)*x16596*x16597))+((x16594*x16595))+((r22*x16593)));
evalcond[1]=(((x16593*x16595))+(((-1.0)*r22*x16597))+(((-1.0)*x16596*x16598)));
evalcond[2]=((((-1.0)*x16598*x16600))+(((-1.0)*x16604*x16605))+(((-1.0)*x16597*x16606))+cj6+((x16594*x16603))+((r12*x16599))+((x16601*x16602)));
evalcond[3]=(((x16599*x16601))+(((-1.0)*r12*x16605))+((x16593*x16603))+(((-1.0)*x16598*x16606))+sj6+((x16594*x16600))+(((-1.0)*x16604*x16607)));
evalcond[4]=(((x16602*x16609))+(((-1.0)*x16605*x16611))+(((-1.0)*x16597*x16612))+((x16594*x16610))+((r02*x16599))+(((-1.0)*(1.0)*sj6))+((x16593*x16608)));
evalcond[5]=((((-1.0)*x16597*x16608))+((x16599*x16609))+((x16593*x16610))+(((-1.0)*r02*x16605))+cj6+(((-1.0)*x16598*x16612))+(((-1.0)*x16607*x16611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16613=((1.0)*sj9);
IkReal x16614=((1.0)*cj4);
CheckValue<IkReal> x16615=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*cj9*r01*x16614))+(((-1.0)*r00*sj9*x16614))+(((-1.0)*r10*sj4*x16613)))),-1);
if(!x16615.valid){
continue;
}
CheckValue<IkReal> x16616 = IKatan2WithCheck(IkReal((cj6*r22)),((((-1.0)*cj6*r21*x16613))+((cj6*cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x16616.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16615.value)))+(x16616.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16617=IKcos(j8);
IkReal x16618=IKsin(j8);
IkReal x16619=(r21*sj9);
IkReal x16620=(cj9*r20);
IkReal x16621=((1.0)*x16618);
IkReal x16622=((1.0)*x16617);
IkReal x16623=(cj4*x16617);
IkReal x16624=(r02*sj4);
IkReal x16625=(r11*sj9);
IkReal x16626=(cj4*x16618);
IkReal x16627=(cj9*r00*sj4);
IkReal x16628=(cj9*r10);
IkReal x16629=((1.0)*cj4*x16618);
IkReal x16630=(r01*sj4*sj9);
IkReal x16631=((1.0)*cj4*x16617);
IkReal x16632=(r12*sj4);
IkReal x16633=(r01*sj9);
IkReal x16634=(r11*sj4*sj9);
IkReal x16635=(cj9*r00);
IkReal x16636=(cj9*r10*sj4);
evalcond[0]=(((r22*x16617))+(((-1.0)*x16620*x16621))+((x16618*x16619)));
evalcond[1]=((((-1.0)*r22*x16621))+(((-1.0)*x16620*x16622))+((x16617*x16619)));
evalcond[2]=((((-1.0)*x16628*x16629))+(((-1.0)*x16621*x16630))+((r12*x16623))+cj6+((x16618*x16627))+(((-1.0)*x16622*x16624))+((x16625*x16626)));
evalcond[3]=(((x16623*x16625))+((x16617*x16627))+(((-1.0)*r12*x16629))+((x16618*x16624))+(((-1.0)*x16622*x16630))+(((-1.0)*x16628*x16631))+sj6);
evalcond[4]=(((x16617*x16632))+((x16626*x16633))+((r02*x16623))+(((-1.0)*x16629*x16635))+(((-1.0)*x16621*x16636))+((x16618*x16634))+(((-1.0)*(1.0)*sj6)));
evalcond[5]=(((x16617*x16634))+cj6+(((-1.0)*r02*x16629))+((x16623*x16633))+(((-1.0)*x16622*x16636))+(((-1.0)*x16621*x16632))+(((-1.0)*x16631*x16635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16637=((1.0)*cj4);
CheckValue<IkReal> x16638=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*r11*x16637))+(((-1.0)*r10*sj9*x16637))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x16638.valid){
continue;
}
CheckValue<IkReal> x16639 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x16639.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16638.value)))+(x16639.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16640=IKcos(j8);
IkReal x16641=IKsin(j8);
IkReal x16642=(r21*sj9);
IkReal x16643=(cj9*r20);
IkReal x16644=((1.0)*x16641);
IkReal x16645=((1.0)*x16640);
IkReal x16646=(cj4*x16640);
IkReal x16647=(r02*sj4);
IkReal x16648=(r11*sj9);
IkReal x16649=(cj4*x16641);
IkReal x16650=(cj9*r00*sj4);
IkReal x16651=(cj9*r10);
IkReal x16652=((1.0)*cj4*x16641);
IkReal x16653=(r01*sj4*sj9);
IkReal x16654=((1.0)*cj4*x16640);
IkReal x16655=(r12*sj4);
IkReal x16656=(r01*sj9);
IkReal x16657=(r11*sj4*sj9);
IkReal x16658=(cj9*r00);
IkReal x16659=(cj9*r10*sj4);
evalcond[0]=(((x16641*x16642))+(((-1.0)*x16643*x16644))+((r22*x16640)));
evalcond[1]=((((-1.0)*x16643*x16645))+(((-1.0)*r22*x16644))+((x16640*x16642)));
evalcond[2]=(((r12*x16646))+((x16641*x16650))+cj6+(((-1.0)*x16645*x16647))+((x16648*x16649))+(((-1.0)*x16651*x16652))+(((-1.0)*x16644*x16653)));
evalcond[3]=((((-1.0)*x16651*x16654))+((x16641*x16647))+sj6+((x16640*x16650))+(((-1.0)*x16645*x16653))+(((-1.0)*r12*x16652))+((x16646*x16648)));
evalcond[4]=((((-1.0)*x16652*x16658))+((x16649*x16656))+(((-1.0)*x16644*x16659))+((r02*x16646))+((x16641*x16657))+((x16640*x16655))+(((-1.0)*(1.0)*sj6)));
evalcond[5]=(((x16640*x16657))+(((-1.0)*x16654*x16658))+((x16646*x16656))+cj6+(((-1.0)*x16644*x16655))+(((-1.0)*x16645*x16659))+(((-1.0)*r02*x16652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16660=(cj9*r21);
IkReal x16661=(r20*sj9);
IkReal x16662=((1.0)*cj4);
IkReal x16663=(cj9*r01);
IkReal x16664=(r00*sj9);
IkReal x16665=((1.0)*sj4);
IkReal x16666=(cj9*r11);
IkReal x16667=(r10*sj9);
IkReal x16668=(sj4*x16663);
IkReal x16669=(sj4*x16664);
IkReal x16670=((0.03431)*cj4);
IkReal x16671=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*x16661))+(((-1.0)*x16660)));
evalcond[2]=((((-1.0)*x16665*x16666))+(((-1.0)*x16662*x16664))+(((-1.0)*x16662*x16663))+(((-1.0)*x16665*x16667)));
evalcond[3]=((0.16132)+(((0.03431)*x16660))+(((-1.0)*(1.0)*pz))+(((0.03431)*x16661)));
evalcond[4]=(x16669+x16668+(((-1.0)*x16662*x16666))+(((-1.0)*x16662*x16667)));
evalcond[5]=((0.00337)+(((0.00036)*cj6))+(((-1.0)*px*x16662))+((x16663*x16670))+((x16666*x16671))+((x16664*x16670))+(((-1.0)*py*x16665))+((x16667*x16671)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x16662))+(((-0.03431)*x16668))+((x16666*x16670))+((x16667*x16670))+(((0.00036)*sj6))+(((-0.03431)*x16669)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x16672=((1.0)*cj4);
IkReal x16673=((((-1.0)*r10*sj9*x16672))+((cj9*r01*sj4))+(((-1.0)*cj9*r11*x16672))+((r00*sj4*sj9)));
j8eval[0]=x16673;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x16673);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x16674=((1.0)*cj4);
IkReal x16675=((1.0)*sj9);
IkReal x16676=((((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*cj9*r01*x16674))+(((-1.0)*r00*sj9*x16674))+(((-1.0)*r10*sj4*x16675)));
j8eval[0]=x16676;
j8eval[1]=IKsign(x16676);
j8eval[2]=((IKabs(((((-1.0)*cj6*r21*x16675))+((cj6*cj9*r20)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x16677=(r21*sj4);
IkReal x16678=(r01*x16677);
IkReal x16679=((1.0)*cj4);
IkReal x16680=(r11*r21);
IkReal x16681=(r21*sj9);
IkReal x16682=(cj9*r20*sj9);
IkReal x16683=cj9*cj9;
IkReal x16684=(r20*x16683);
IkReal x16685=(((cj4*r11*x16682))+(((-1.0)*cj4*r10*x16684))+(((-1.0)*x16679*x16680))+(((-1.0)*x16678*x16683))+x16678+(((-1.0)*cj9*r00*sj9*x16677))+(((-1.0)*r12*r22*x16679))+((r02*r22*sj4))+((r00*sj4*x16684))+((cj4*x16680*x16683))+((cj4*cj9*r10*x16681))+(((-1.0)*r01*sj4*x16682)));
j8eval[0]=x16685;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*sj6*x16681))+((sj6*((cj9*r20))))))));
j8eval[2]=IKsign(x16685);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x16686=(cj9*r21);
IkReal x16687=(r20*sj9);
IkReal x16688=((1.0)*cj4);
IkReal x16689=(cj9*r01);
IkReal x16690=(r00*sj9);
IkReal x16691=((1.0)*sj4);
IkReal x16692=(cj9*r11);
IkReal x16693=(r10*sj9);
IkReal x16694=(sj4*x16689);
IkReal x16695=(sj4*x16690);
IkReal x16696=((0.03431)*cj4);
IkReal x16697=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x16686))+(((-1.0)*x16687)));
evalcond[2]=((((-1.0)*x16691*x16693))+(((-1.0)*x16691*x16692))+(((-1.0)*x16688*x16690))+(((-1.0)*x16688*x16689)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x16686))+(((0.03431)*x16687)));
evalcond[4]=(x16694+x16695+(((-1.0)*x16688*x16692))+(((-1.0)*x16688*x16693)));
evalcond[5]=((0.00373)+((x16693*x16697))+(((-1.0)*px*x16688))+((x16689*x16696))+((x16690*x16696))+(((-1.0)*py*x16691))+((x16692*x16697)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x16688))+((x16692*x16696))+(((-0.03431)*x16694))+((x16693*x16696))+(((-0.03431)*x16695)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x16698=((1.0)*cj9);
IkReal x16699=((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x16698))+((r00*sj4*sj9)));
j8eval[0]=x16699;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x16698)))))+(IKabs(r22)));
j8eval[2]=IKsign(x16699);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x16700=((1.0)*cj9);
IkReal x16701=((1.0)*sj9);
IkReal x16702=((((-1.0)*cj4*r00*x16701))+(((-1.0)*r11*sj4*x16700))+(((-1.0)*cj4*r01*x16700))+(((-1.0)*r10*sj4*x16701)));
j8eval[0]=x16702;
j8eval[1]=((IKabs(((((-1.0)*r21*x16701))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x16702);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x16703=((1.0)*r21);
IkReal x16704=(cj4*r01);
IkReal x16705=((1.0)*r22);
IkReal x16706=(r11*sj4);
IkReal x16707=(cj4*r00);
IkReal x16708=(cj9*r21*sj9);
IkReal x16709=(cj9*r20*sj9);
IkReal x16710=(r10*sj4);
IkReal x16711=cj9*cj9;
IkReal x16712=(r21*x16711);
IkReal x16713=((1.0)*r20*x16711);
IkReal x16714=((((-1.0)*x16703*x16706))+((x16706*x16712))+((x16704*x16709))+((x16708*x16710))+((x16704*x16712))+(((-1.0)*x16703*x16704))+(((-1.0)*x16707*x16713))+(((-1.0)*cj4*r02*x16705))+((x16706*x16709))+(((-1.0)*r12*sj4*x16705))+(((-1.0)*x16710*x16713))+((x16707*x16708)));
j8eval[0]=x16714;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*sj9*x16703)))))+(IKabs(r22)));
j8eval[2]=IKsign(x16714);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16715=((1.0)*r21);
IkReal x16716=(cj4*r01);
IkReal x16717=((1.0)*r22);
IkReal x16718=(r11*sj4);
IkReal x16719=(cj4*r00);
IkReal x16720=(cj9*r21*sj9);
IkReal x16721=(cj9*r20*sj9);
IkReal x16722=(r10*sj4);
IkReal x16723=cj9*cj9;
IkReal x16724=(r21*x16723);
IkReal x16725=((1.0)*r20*x16723);
CheckValue<IkReal> x16726=IKPowWithIntegerCheck(IKsign((((x16716*x16721))+(((-1.0)*cj4*r02*x16717))+(((-1.0)*r12*sj4*x16717))+(((-1.0)*x16715*x16718))+((x16718*x16721))+((x16716*x16724))+(((-1.0)*x16715*x16716))+((x16719*x16720))+((x16718*x16724))+(((-1.0)*x16719*x16725))+(((-1.0)*x16722*x16725))+((x16720*x16722)))),-1);
if(!x16726.valid){
continue;
}
CheckValue<IkReal> x16727 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x16715))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x16727.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16726.value)))+(x16727.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16728=IKcos(j8);
IkReal x16729=IKsin(j8);
IkReal x16730=(r21*sj9);
IkReal x16731=(cj9*r20);
IkReal x16732=((1.0)*x16729);
IkReal x16733=((1.0)*x16728);
IkReal x16734=(cj4*x16728);
IkReal x16735=(r12*sj4);
IkReal x16736=(r01*sj9);
IkReal x16737=(cj4*x16729);
IkReal x16738=(r11*sj4*sj9);
IkReal x16739=(cj9*r00);
IkReal x16740=((1.0)*cj4*x16729);
IkReal x16741=(cj9*r10*sj4);
IkReal x16742=(r02*sj4);
IkReal x16743=(r11*sj9);
IkReal x16744=(cj9*r00*sj4);
IkReal x16745=(cj9*r10);
IkReal x16746=((1.0)*cj4*x16728);
IkReal x16747=(r01*sj4*sj9);
evalcond[0]=(((x16729*x16730))+((r22*x16728))+(((-1.0)*x16731*x16732)));
evalcond[1]=(((x16728*x16730))+(((-1.0)*x16731*x16733))+(((-1.0)*r22*x16732)));
evalcond[2]=(((x16728*x16735))+(((-1.0)*x16739*x16740))+((x16736*x16737))+((x16729*x16738))+(((-1.0)*x16732*x16741))+((r02*x16734)));
evalcond[3]=((((-1.0)*x16745*x16746))+((x16734*x16743))+(((-1.0)*r12*x16740))+((x16728*x16744))+(((-1.0)*x16733*x16747))+((x16729*x16742)));
evalcond[4]=((1.0)+(((-1.0)*x16732*x16747))+((r12*x16734))+(((-1.0)*x16733*x16742))+(((-1.0)*x16740*x16745))+((x16737*x16743))+((x16729*x16744)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x16740))+(((-1.0)*x16739*x16746))+((x16734*x16736))+(((-1.0)*x16733*x16741))+(((-1.0)*x16732*x16735))+((x16728*x16738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16748=((1.0)*sj9);
IkReal x16749=((1.0)*cj9);
CheckValue<IkReal> x16750 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x16748))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x16750.valid){
continue;
}
CheckValue<IkReal> x16751=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r01*x16749))+(((-1.0)*r10*sj4*x16748))+(((-1.0)*r11*sj4*x16749))+(((-1.0)*cj4*r00*x16748)))),-1);
if(!x16751.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x16750.value)+(((1.5707963267949)*(x16751.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16752=IKcos(j8);
IkReal x16753=IKsin(j8);
IkReal x16754=(r21*sj9);
IkReal x16755=(cj9*r20);
IkReal x16756=((1.0)*x16753);
IkReal x16757=((1.0)*x16752);
IkReal x16758=(cj4*x16752);
IkReal x16759=(r12*sj4);
IkReal x16760=(r01*sj9);
IkReal x16761=(cj4*x16753);
IkReal x16762=(r11*sj4*sj9);
IkReal x16763=(cj9*r00);
IkReal x16764=((1.0)*cj4*x16753);
IkReal x16765=(cj9*r10*sj4);
IkReal x16766=(r02*sj4);
IkReal x16767=(r11*sj9);
IkReal x16768=(cj9*r00*sj4);
IkReal x16769=(cj9*r10);
IkReal x16770=((1.0)*cj4*x16752);
IkReal x16771=(r01*sj4*sj9);
evalcond[0]=(((r22*x16752))+(((-1.0)*x16755*x16756))+((x16753*x16754)));
evalcond[1]=((((-1.0)*x16755*x16757))+((x16752*x16754))+(((-1.0)*r22*x16756)));
evalcond[2]=((((-1.0)*x16756*x16765))+((x16760*x16761))+((x16752*x16759))+((x16753*x16762))+(((-1.0)*x16763*x16764))+((r02*x16758)));
evalcond[3]=((((-1.0)*r12*x16764))+((x16752*x16768))+((x16758*x16767))+(((-1.0)*x16769*x16770))+((x16753*x16766))+(((-1.0)*x16757*x16771)));
evalcond[4]=((1.0)+(((-1.0)*x16757*x16766))+((x16761*x16767))+((r12*x16758))+(((-1.0)*x16764*x16769))+(((-1.0)*x16756*x16771))+((x16753*x16768)));
evalcond[5]=((-1.0)+(((-1.0)*x16757*x16765))+(((-1.0)*r02*x16764))+((x16758*x16760))+(((-1.0)*x16763*x16770))+((x16752*x16762))+(((-1.0)*x16756*x16759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16772=((1.0)*cj9);
CheckValue<IkReal> x16773=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x16772))+((r00*sj4*sj9)))),-1);
if(!x16773.valid){
continue;
}
CheckValue<IkReal> x16774 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x16772)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x16774.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16773.value)))+(x16774.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16775=IKcos(j8);
IkReal x16776=IKsin(j8);
IkReal x16777=(r21*sj9);
IkReal x16778=(cj9*r20);
IkReal x16779=((1.0)*x16776);
IkReal x16780=((1.0)*x16775);
IkReal x16781=(cj4*x16775);
IkReal x16782=(r12*sj4);
IkReal x16783=(r01*sj9);
IkReal x16784=(cj4*x16776);
IkReal x16785=(r11*sj4*sj9);
IkReal x16786=(cj9*r00);
IkReal x16787=((1.0)*cj4*x16776);
IkReal x16788=(cj9*r10*sj4);
IkReal x16789=(r02*sj4);
IkReal x16790=(r11*sj9);
IkReal x16791=(cj9*r00*sj4);
IkReal x16792=(cj9*r10);
IkReal x16793=((1.0)*cj4*x16775);
IkReal x16794=(r01*sj4*sj9);
evalcond[0]=(((r22*x16775))+((x16776*x16777))+(((-1.0)*x16778*x16779)));
evalcond[1]=((((-1.0)*x16778*x16780))+((x16775*x16777))+(((-1.0)*r22*x16779)));
evalcond[2]=(((x16783*x16784))+(((-1.0)*x16779*x16788))+(((-1.0)*x16786*x16787))+((r02*x16781))+((x16776*x16785))+((x16775*x16782)));
evalcond[3]=((((-1.0)*r12*x16787))+((x16776*x16789))+((x16775*x16791))+(((-1.0)*x16792*x16793))+(((-1.0)*x16780*x16794))+((x16781*x16790)));
evalcond[4]=((1.0)+((r12*x16781))+(((-1.0)*x16780*x16789))+((x16784*x16790))+(((-1.0)*x16787*x16792))+(((-1.0)*x16779*x16794))+((x16776*x16791)));
evalcond[5]=((-1.0)+(((-1.0)*x16779*x16782))+(((-1.0)*r02*x16787))+(((-1.0)*x16780*x16788))+((x16775*x16785))+(((-1.0)*x16786*x16793))+((x16781*x16783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16795=(cj9*r21);
IkReal x16796=(r20*sj9);
IkReal x16797=((1.0)*cj4);
IkReal x16798=(cj9*r01);
IkReal x16799=(r00*sj9);
IkReal x16800=((1.0)*sj4);
IkReal x16801=(cj9*r11);
IkReal x16802=(r10*sj9);
IkReal x16803=(sj4*x16798);
IkReal x16804=(sj4*x16799);
IkReal x16805=((0.03431)*cj4);
IkReal x16806=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x16795))+(((-1.0)*x16796)));
evalcond[2]=((((-1.0)*x16800*x16802))+(((-1.0)*x16797*x16798))+(((-1.0)*x16800*x16801))+(((-1.0)*x16797*x16799)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x16796))+(((0.03431)*x16795)));
evalcond[4]=(x16804+x16803+(((-1.0)*x16797*x16801))+(((-1.0)*x16797*x16802)));
evalcond[5]=((0.00301)+((x16802*x16806))+((x16801*x16806))+((x16798*x16805))+(((-1.0)*py*x16800))+((x16799*x16805))+(((-1.0)*px*x16797)));
evalcond[6]=(((px*sj4))+((x16801*x16805))+(((-0.03431)*x16804))+(((-0.03431)*x16803))+(((-1.0)*py*x16797))+((x16802*x16805)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x16807=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x16807;
j8eval[1]=IKsign(x16807);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x16808=((1.0)*sj9);
IkReal x16809=((((-1.0)*cj4*r10*x16808))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x16809;
j8eval[1]=IKsign(x16809);
j8eval[2]=((IKabs(((((-1.0)*r21*x16808))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x16810=(cj4*r01);
IkReal x16811=(r21*x16810);
IkReal x16812=(r11*sj4);
IkReal x16813=(r21*x16812);
IkReal x16814=(cj4*r00);
IkReal x16815=cj9*cj9;
IkReal x16816=(r20*x16815);
IkReal x16817=(r10*sj4);
IkReal x16818=((1.0)*cj9*r21*sj9);
IkReal x16819=((1.0)*cj9*r20*sj9);
IkReal x16820=((1.0)*x16815);
IkReal x16821=((((-1.0)*x16812*x16819))+(((-1.0)*x16810*x16819))+((x16814*x16816))+(((-1.0)*x16817*x16818))+(((-1.0)*x16813*x16820))+((x16816*x16817))+((r12*r22*sj4))+(((-1.0)*x16814*x16818))+((cj4*r02*r22))+(((-1.0)*x16811*x16820))+x16811+x16813);
j8eval[0]=x16821;
j8eval[1]=IKsign(x16821);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16822=(cj4*r01);
IkReal x16823=(r21*x16822);
IkReal x16824=(r11*sj4);
IkReal x16825=(r21*x16824);
IkReal x16826=(cj4*r00);
IkReal x16827=cj9*cj9;
IkReal x16828=(r20*x16827);
IkReal x16829=(r10*sj4);
IkReal x16830=((1.0)*cj9*r21*sj9);
IkReal x16831=((1.0)*cj9*r20*sj9);
IkReal x16832=((1.0)*x16827);
CheckValue<IkReal> x16833=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16823*x16832))+(((-1.0)*x16822*x16831))+((x16828*x16829))+(((-1.0)*x16826*x16830))+((x16826*x16828))+(((-1.0)*x16824*x16831))+x16825+x16823+(((-1.0)*x16825*x16832))+((r12*r22*sj4))+((cj4*r02*r22))+(((-1.0)*x16829*x16830)))),-1);
if(!x16833.valid){
continue;
}
CheckValue<IkReal> x16834 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x16834.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16833.value)))+(x16834.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16835=IKcos(j8);
IkReal x16836=IKsin(j8);
IkReal x16837=(r21*sj9);
IkReal x16838=(cj9*r20);
IkReal x16839=((1.0)*x16836);
IkReal x16840=((1.0)*x16835);
IkReal x16841=(cj4*x16835);
IkReal x16842=(r12*sj4);
IkReal x16843=(r01*sj9);
IkReal x16844=(cj4*x16836);
IkReal x16845=(r11*sj4*sj9);
IkReal x16846=(cj9*r00);
IkReal x16847=((1.0)*cj4*x16836);
IkReal x16848=(cj9*r10*sj4);
IkReal x16849=(r02*sj4);
IkReal x16850=(r11*sj9);
IkReal x16851=(cj9*r00*sj4);
IkReal x16852=(cj9*r10);
IkReal x16853=((1.0)*cj4*x16835);
IkReal x16854=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x16838*x16839))+((r22*x16835))+((x16836*x16837)));
evalcond[1]=((((-1.0)*x16838*x16840))+(((-1.0)*r22*x16839))+((x16835*x16837)));
evalcond[2]=(((x16836*x16845))+(((-1.0)*x16839*x16848))+(((-1.0)*x16846*x16847))+((x16835*x16842))+((x16843*x16844))+((r02*x16841)));
evalcond[3]=(((x16835*x16851))+((x16841*x16850))+(((-1.0)*r12*x16847))+(((-1.0)*x16852*x16853))+((x16836*x16849))+(((-1.0)*x16840*x16854)));
evalcond[4]=((-1.0)+((r12*x16841))+(((-1.0)*x16840*x16849))+(((-1.0)*x16839*x16854))+((x16836*x16851))+(((-1.0)*x16847*x16852))+((x16844*x16850)));
evalcond[5]=((1.0)+(((-1.0)*x16839*x16842))+(((-1.0)*x16840*x16848))+(((-1.0)*r02*x16847))+((x16841*x16843))+((x16835*x16845))+(((-1.0)*x16846*x16853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16855=((1.0)*sj9);
CheckValue<IkReal> x16856=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x16855))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x16856.valid){
continue;
}
CheckValue<IkReal> x16857 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x16855))+((cj9*r20)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x16857.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16856.value)))+(x16857.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16858=IKcos(j8);
IkReal x16859=IKsin(j8);
IkReal x16860=(r21*sj9);
IkReal x16861=(cj9*r20);
IkReal x16862=((1.0)*x16859);
IkReal x16863=((1.0)*x16858);
IkReal x16864=(cj4*x16858);
IkReal x16865=(r12*sj4);
IkReal x16866=(r01*sj9);
IkReal x16867=(cj4*x16859);
IkReal x16868=(r11*sj4*sj9);
IkReal x16869=(cj9*r00);
IkReal x16870=((1.0)*cj4*x16859);
IkReal x16871=(cj9*r10*sj4);
IkReal x16872=(r02*sj4);
IkReal x16873=(r11*sj9);
IkReal x16874=(cj9*r00*sj4);
IkReal x16875=(cj9*r10);
IkReal x16876=((1.0)*cj4*x16858);
IkReal x16877=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x16861*x16862))+((x16859*x16860))+((r22*x16858)));
evalcond[1]=(((x16858*x16860))+(((-1.0)*x16861*x16863))+(((-1.0)*r22*x16862)));
evalcond[2]=(((x16858*x16865))+((x16859*x16868))+((r02*x16864))+((x16866*x16867))+(((-1.0)*x16869*x16870))+(((-1.0)*x16862*x16871)));
evalcond[3]=((((-1.0)*x16875*x16876))+((x16864*x16873))+(((-1.0)*r12*x16870))+((x16859*x16872))+(((-1.0)*x16863*x16877))+((x16858*x16874)));
evalcond[4]=((-1.0)+(((-1.0)*x16862*x16877))+((x16867*x16873))+(((-1.0)*x16863*x16872))+((r12*x16864))+(((-1.0)*x16870*x16875))+((x16859*x16874)));
evalcond[5]=((1.0)+(((-1.0)*x16863*x16871))+(((-1.0)*x16869*x16876))+(((-1.0)*x16862*x16865))+((x16858*x16868))+(((-1.0)*r02*x16870))+((x16864*x16866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x16878=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x16878.valid){
continue;
}
CheckValue<IkReal> x16879 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x16879.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16878.value)))+(x16879.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16880=IKcos(j8);
IkReal x16881=IKsin(j8);
IkReal x16882=(r21*sj9);
IkReal x16883=(cj9*r20);
IkReal x16884=((1.0)*x16881);
IkReal x16885=((1.0)*x16880);
IkReal x16886=(cj4*x16880);
IkReal x16887=(r12*sj4);
IkReal x16888=(r01*sj9);
IkReal x16889=(cj4*x16881);
IkReal x16890=(r11*sj4*sj9);
IkReal x16891=(cj9*r00);
IkReal x16892=((1.0)*cj4*x16881);
IkReal x16893=(cj9*r10*sj4);
IkReal x16894=(r02*sj4);
IkReal x16895=(r11*sj9);
IkReal x16896=(cj9*r00*sj4);
IkReal x16897=(cj9*r10);
IkReal x16898=((1.0)*cj4*x16880);
IkReal x16899=(r01*sj4*sj9);
evalcond[0]=(((r22*x16880))+((x16881*x16882))+(((-1.0)*x16883*x16884)));
evalcond[1]=((((-1.0)*r22*x16884))+((x16880*x16882))+(((-1.0)*x16883*x16885)));
evalcond[2]=(((r02*x16886))+(((-1.0)*x16891*x16892))+((x16880*x16887))+((x16888*x16889))+(((-1.0)*x16884*x16893))+((x16881*x16890)));
evalcond[3]=(((x16881*x16894))+((x16886*x16895))+((x16880*x16896))+(((-1.0)*r12*x16892))+(((-1.0)*x16885*x16899))+(((-1.0)*x16897*x16898)));
evalcond[4]=((-1.0)+((x16889*x16895))+(((-1.0)*x16892*x16897))+((r12*x16886))+((x16881*x16896))+(((-1.0)*x16884*x16899))+(((-1.0)*x16885*x16894)));
evalcond[5]=((1.0)+((x16886*x16888))+(((-1.0)*x16884*x16887))+(((-1.0)*r02*x16892))+(((-1.0)*x16885*x16893))+(((-1.0)*x16891*x16898))+((x16880*x16890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16900=(cj9*r21);
IkReal x16901=(r20*sj9);
IkReal x16902=((1.0)*cj4);
IkReal x16903=(cj9*r01);
IkReal x16904=(r00*sj9);
IkReal x16905=((1.0)*sj4);
IkReal x16906=(cj9*r11);
IkReal x16907=(r10*sj9);
IkReal x16908=(sj4*x16903);
IkReal x16909=(sj4*x16904);
IkReal x16910=((0.03431)*cj4);
IkReal x16911=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x16900))+(((-1.0)*x16901)));
evalcond[2]=((((-1.0)*x16902*x16904))+(((-1.0)*x16905*x16906))+(((-1.0)*x16905*x16907))+(((-1.0)*x16902*x16903)));
evalcond[3]=((0.16132)+(((0.03431)*x16901))+(((-1.0)*(1.0)*pz))+(((0.03431)*x16900)));
evalcond[4]=((((-1.0)*x16902*x16907))+(((-1.0)*x16902*x16906))+x16909+x16908);
evalcond[5]=((0.00337)+((x16904*x16910))+(((-1.0)*py*x16905))+((x16906*x16911))+(((-1.0)*px*x16902))+((x16907*x16911))+((x16903*x16910)));
evalcond[6]=((0.00036)+((px*sj4))+(((-0.03431)*x16909))+(((-1.0)*py*x16902))+((x16906*x16910))+((x16907*x16910))+(((-0.03431)*x16908)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x16912=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x16912;
j8eval[1]=IKsign(x16912);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x16913=((1.0)*sj9);
IkReal x16914=((((-1.0)*cj4*r10*x16913))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x16914;
j8eval[1]=((IKabs(((((-1.0)*r21*x16913))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x16914);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x16915=(r01*sj4);
IkReal x16916=((1.0)*r21);
IkReal x16917=(cj4*r11);
IkReal x16918=(cj9*r20*sj9);
IkReal x16919=cj9*cj9;
IkReal x16920=(r00*sj4);
IkReal x16921=(r20*x16919);
IkReal x16922=((((-1.0)*x16916*x16917))+(((-1.0)*r01*sj4*x16918))+((r21*x16915))+((x16920*x16921))+(((-1.0)*cj4*r10*x16921))+((r21*x16917*x16919))+((r02*r22*sj4))+(((-1.0)*r21*x16915*x16919))+(((-1.0)*cj4*r12*r22))+(((-1.0)*cj9*r21*sj9*x16920))+((cj4*cj9*r10*r21*sj9))+((x16917*x16918)));
j8eval[0]=x16922;
j8eval[1]=IKsign(x16922);
j8eval[2]=((IKabs(((((-1.0)*sj9*x16916))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16923=((1.0)*r21);
IkReal x16924=(r01*sj4);
IkReal x16925=(cj4*r11);
IkReal x16926=(cj9*r20*sj9);
IkReal x16927=cj9*cj9;
IkReal x16928=(r00*sj4);
IkReal x16929=(r20*x16927);
CheckValue<IkReal> x16930=IKPowWithIntegerCheck(IKsign((((r21*x16924))+((x16925*x16926))+(((-1.0)*cj9*r21*sj9*x16928))+(((-1.0)*r21*x16924*x16927))+(((-1.0)*cj4*r10*x16929))+(((-1.0)*x16923*x16925))+((r02*r22*sj4))+((r21*x16925*x16927))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*r01*sj4*x16926))+((x16928*x16929)))),-1);
if(!x16930.valid){
continue;
}
CheckValue<IkReal> x16931 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x16923))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x16931.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16930.value)))+(x16931.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16932=IKcos(j8);
IkReal x16933=IKsin(j8);
IkReal x16934=(r21*sj9);
IkReal x16935=(cj9*r20);
IkReal x16936=((1.0)*x16933);
IkReal x16937=((1.0)*x16932);
IkReal x16938=(cj4*x16932);
IkReal x16939=(r12*sj4);
IkReal x16940=(r01*sj9);
IkReal x16941=(cj4*x16933);
IkReal x16942=(r11*sj4*sj9);
IkReal x16943=(cj9*r00);
IkReal x16944=((1.0)*cj4*x16933);
IkReal x16945=(cj9*r10*sj4);
IkReal x16946=(r02*sj4);
IkReal x16947=(r11*sj9);
IkReal x16948=(cj9*r00*sj4);
IkReal x16949=(cj9*r10);
IkReal x16950=(r01*sj4*sj9);
IkReal x16951=((1.0)*cj4*x16932);
evalcond[0]=((((-1.0)*x16935*x16936))+((r22*x16932))+((x16933*x16934)));
evalcond[1]=(((x16932*x16934))+(((-1.0)*x16935*x16937))+(((-1.0)*r22*x16936)));
evalcond[2]=((-1.0)+((x16940*x16941))+(((-1.0)*x16943*x16944))+(((-1.0)*x16936*x16945))+((x16933*x16942))+((r02*x16938))+((x16932*x16939)));
evalcond[3]=(((x16941*x16947))+(((-1.0)*x16937*x16946))+((r12*x16938))+((x16933*x16948))+(((-1.0)*x16936*x16950))+(((-1.0)*x16944*x16949)));
evalcond[4]=((((-1.0)*x16937*x16945))+(((-1.0)*x16936*x16939))+(((-1.0)*r02*x16944))+((x16932*x16942))+(((-1.0)*x16943*x16951))+((x16938*x16940)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x16944))+(((-1.0)*x16937*x16950))+(((-1.0)*x16949*x16951))+((x16933*x16946))+((x16932*x16948))+((x16938*x16947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x16952=((1.0)*sj9);
CheckValue<IkReal> x16953=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x16952))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x16953.valid){
continue;
}
CheckValue<IkReal> x16954 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x16952))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x16954.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16953.value)))+(x16954.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16955=IKcos(j8);
IkReal x16956=IKsin(j8);
IkReal x16957=(r21*sj9);
IkReal x16958=(cj9*r20);
IkReal x16959=((1.0)*x16956);
IkReal x16960=((1.0)*x16955);
IkReal x16961=(cj4*x16955);
IkReal x16962=(r12*sj4);
IkReal x16963=(r01*sj9);
IkReal x16964=(cj4*x16956);
IkReal x16965=(r11*sj4*sj9);
IkReal x16966=(cj9*r00);
IkReal x16967=((1.0)*cj4*x16956);
IkReal x16968=(cj9*r10*sj4);
IkReal x16969=(r02*sj4);
IkReal x16970=(r11*sj9);
IkReal x16971=(cj9*r00*sj4);
IkReal x16972=(cj9*r10);
IkReal x16973=(r01*sj4*sj9);
IkReal x16974=((1.0)*cj4*x16955);
evalcond[0]=((((-1.0)*x16958*x16959))+((x16956*x16957))+((r22*x16955)));
evalcond[1]=(((x16955*x16957))+(((-1.0)*x16958*x16960))+(((-1.0)*r22*x16959)));
evalcond[2]=((-1.0)+(((-1.0)*x16966*x16967))+((x16963*x16964))+((x16956*x16965))+(((-1.0)*x16959*x16968))+((r02*x16961))+((x16955*x16962)));
evalcond[3]=((((-1.0)*x16959*x16973))+((x16964*x16970))+((r12*x16961))+((x16956*x16971))+(((-1.0)*x16960*x16969))+(((-1.0)*x16967*x16972)));
evalcond[4]=((((-1.0)*x16959*x16962))+(((-1.0)*r02*x16967))+((x16961*x16963))+(((-1.0)*x16966*x16974))+(((-1.0)*x16960*x16968))+((x16955*x16965)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x16967))+((x16961*x16970))+(((-1.0)*x16960*x16973))+(((-1.0)*x16972*x16974))+((x16955*x16971))+((x16956*x16969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x16975 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x16975.valid){
continue;
}
CheckValue<IkReal> x16976=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x16976.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x16975.value)+(((1.5707963267949)*(x16976.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x16977=IKcos(j8);
IkReal x16978=IKsin(j8);
IkReal x16979=(r21*sj9);
IkReal x16980=(cj9*r20);
IkReal x16981=((1.0)*x16978);
IkReal x16982=((1.0)*x16977);
IkReal x16983=(cj4*x16977);
IkReal x16984=(r12*sj4);
IkReal x16985=(r01*sj9);
IkReal x16986=(cj4*x16978);
IkReal x16987=(r11*sj4*sj9);
IkReal x16988=(cj9*r00);
IkReal x16989=((1.0)*cj4*x16978);
IkReal x16990=(cj9*r10*sj4);
IkReal x16991=(r02*sj4);
IkReal x16992=(r11*sj9);
IkReal x16993=(cj9*r00*sj4);
IkReal x16994=(cj9*r10);
IkReal x16995=(r01*sj4*sj9);
IkReal x16996=((1.0)*cj4*x16977);
evalcond[0]=(((r22*x16977))+(((-1.0)*x16980*x16981))+((x16978*x16979)));
evalcond[1]=(((x16977*x16979))+(((-1.0)*x16980*x16982))+(((-1.0)*r22*x16981)));
evalcond[2]=((-1.0)+(((-1.0)*x16988*x16989))+((r02*x16983))+((x16978*x16987))+((x16985*x16986))+((x16977*x16984))+(((-1.0)*x16981*x16990)));
evalcond[3]=((((-1.0)*x16981*x16995))+((x16978*x16993))+(((-1.0)*x16982*x16991))+(((-1.0)*x16989*x16994))+((r12*x16983))+((x16986*x16992)));
evalcond[4]=((((-1.0)*x16982*x16990))+(((-1.0)*r02*x16989))+(((-1.0)*x16988*x16996))+((x16983*x16985))+(((-1.0)*x16981*x16984))+((x16977*x16987)));
evalcond[5]=((-1.0)+((x16977*x16993))+(((-1.0)*x16982*x16995))+(((-1.0)*r12*x16989))+((x16978*x16991))+(((-1.0)*x16994*x16996))+((x16983*x16992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16997=(cj9*r21);
IkReal x16998=(r20*sj9);
IkReal x16999=((1.0)*cj4);
IkReal x17000=(cj9*r01);
IkReal x17001=(r00*sj9);
IkReal x17002=((1.0)*sj4);
IkReal x17003=(cj9*r11);
IkReal x17004=(r10*sj9);
IkReal x17005=(sj4*x17000);
IkReal x17006=(sj4*x17001);
IkReal x17007=((0.03431)*cj4);
IkReal x17008=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x16998))+(((-1.0)*x16997)));
evalcond[2]=((((-1.0)*x16999*x17000))+(((-1.0)*x17002*x17003))+(((-1.0)*x17002*x17004))+(((-1.0)*x16999*x17001)));
evalcond[3]=((0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x16998))+(((0.03431)*x16997)));
evalcond[4]=((((-1.0)*x16999*x17004))+x17005+x17006+(((-1.0)*x16999*x17003)));
evalcond[5]=((0.00337)+((x17003*x17008))+(((-1.0)*py*x17002))+((x17004*x17008))+((x17000*x17007))+(((-1.0)*px*x16999))+((x17001*x17007)));
evalcond[6]=((-0.00036)+((px*sj4))+((x17004*x17007))+(((-0.03431)*x17005))+(((-1.0)*py*x16999))+(((-0.03431)*x17006))+((x17003*x17007)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x17009=((1.0)*sj9);
IkReal x17010=(((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*x17009)));
j8eval[0]=x17010;
j8eval[1]=((IKabs(((((-1.0)*r21*x17009))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x17010);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x17011=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x17011;
j8eval[1]=IKsign(x17011);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x17012=(cj4*r11);
IkReal x17013=((1.0)*r21);
IkReal x17014=(r01*sj4);
IkReal x17015=(cj9*r20*sj9);
IkReal x17016=(cj4*r10);
IkReal x17017=cj9*cj9;
IkReal x17018=(r20*x17017);
IkReal x17019=(((cj9*r00*r21*sj4*sj9))+((r21*x17012))+((cj4*r12*r22))+(((-1.0)*r02*r22*sj4))+((r21*x17014*x17017))+(((-1.0)*r00*sj4*x17018))+(((-1.0)*r21*x17012*x17017))+((x17014*x17015))+(((-1.0)*x17013*x17014))+((x17016*x17018))+(((-1.0)*cj4*r11*x17015))+(((-1.0)*cj9*r21*sj9*x17016)));
j8eval[0]=x17019;
j8eval[1]=IKsign(x17019);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*sj9*x17013)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17020=((1.0)*r21);
IkReal x17021=(cj4*r11);
IkReal x17022=(r01*sj4);
IkReal x17023=(cj9*r20*sj9);
IkReal x17024=(cj4*r10);
IkReal x17025=cj9*cj9;
IkReal x17026=(r20*x17025);
CheckValue<IkReal> x17027 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x17020))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x17027.valid){
continue;
}
CheckValue<IkReal> x17028=IKPowWithIntegerCheck(IKsign((((x17024*x17026))+((cj9*r00*r21*sj4*sj9))+(((-1.0)*r00*sj4*x17026))+((cj4*r12*r22))+(((-1.0)*cj9*r21*sj9*x17024))+((r21*x17022*x17025))+(((-1.0)*r02*r22*sj4))+((r21*x17021))+(((-1.0)*r21*x17021*x17025))+(((-1.0)*cj4*r11*x17023))+(((-1.0)*x17020*x17022))+((x17022*x17023)))),-1);
if(!x17028.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17027.value)+(((1.5707963267949)*(x17028.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17029=IKcos(j8);
IkReal x17030=IKsin(j8);
IkReal x17031=(r21*sj9);
IkReal x17032=(cj9*r20);
IkReal x17033=((1.0)*x17030);
IkReal x17034=((1.0)*x17029);
IkReal x17035=(cj4*x17029);
IkReal x17036=(r12*sj4);
IkReal x17037=(r01*sj9);
IkReal x17038=(cj4*x17030);
IkReal x17039=(r11*sj4*sj9);
IkReal x17040=(cj9*r00);
IkReal x17041=((1.0)*cj4*x17030);
IkReal x17042=(cj9*r10*sj4);
IkReal x17043=(r02*sj4);
IkReal x17044=(r11*sj9);
IkReal x17045=(cj9*r00*sj4);
IkReal x17046=(cj9*r10);
IkReal x17047=(r01*sj4*sj9);
IkReal x17048=((1.0)*cj4*x17029);
evalcond[0]=((((-1.0)*x17032*x17033))+((x17030*x17031))+((r22*x17029)));
evalcond[1]=((((-1.0)*r22*x17033))+(((-1.0)*x17032*x17034))+((x17029*x17031)));
evalcond[2]=((1.0)+(((-1.0)*x17033*x17042))+((x17030*x17039))+(((-1.0)*x17040*x17041))+((r02*x17035))+((x17037*x17038))+((x17029*x17036)));
evalcond[3]=(((x17030*x17045))+(((-1.0)*x17034*x17043))+((r12*x17035))+(((-1.0)*x17033*x17047))+((x17038*x17044))+(((-1.0)*x17041*x17046)));
evalcond[4]=((((-1.0)*r02*x17041))+((x17029*x17039))+(((-1.0)*x17040*x17048))+((x17035*x17037))+(((-1.0)*x17034*x17042))+(((-1.0)*x17033*x17036)));
evalcond[5]=((1.0)+(((-1.0)*x17034*x17047))+((x17029*x17045))+((x17030*x17043))+((x17035*x17044))+(((-1.0)*r12*x17041))+(((-1.0)*x17046*x17048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x17049 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x17049.valid){
continue;
}
CheckValue<IkReal> x17050=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x17050.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17049.value)+(((1.5707963267949)*(x17050.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17051=IKcos(j8);
IkReal x17052=IKsin(j8);
IkReal x17053=(r21*sj9);
IkReal x17054=(cj9*r20);
IkReal x17055=((1.0)*x17052);
IkReal x17056=((1.0)*x17051);
IkReal x17057=(cj4*x17051);
IkReal x17058=(r12*sj4);
IkReal x17059=(r01*sj9);
IkReal x17060=(cj4*x17052);
IkReal x17061=(r11*sj4*sj9);
IkReal x17062=(cj9*r00);
IkReal x17063=((1.0)*cj4*x17052);
IkReal x17064=(cj9*r10*sj4);
IkReal x17065=(r02*sj4);
IkReal x17066=(r11*sj9);
IkReal x17067=(cj9*r00*sj4);
IkReal x17068=(cj9*r10);
IkReal x17069=(r01*sj4*sj9);
IkReal x17070=((1.0)*cj4*x17051);
evalcond[0]=(((r22*x17051))+((x17052*x17053))+(((-1.0)*x17054*x17055)));
evalcond[1]=(((x17051*x17053))+(((-1.0)*x17054*x17056))+(((-1.0)*r22*x17055)));
evalcond[2]=((1.0)+((x17059*x17060))+((x17051*x17058))+(((-1.0)*x17055*x17064))+((x17052*x17061))+((r02*x17057))+(((-1.0)*x17062*x17063)));
evalcond[3]=((((-1.0)*x17063*x17068))+((x17060*x17066))+((x17052*x17067))+(((-1.0)*x17055*x17069))+((r12*x17057))+(((-1.0)*x17056*x17065)));
evalcond[4]=((((-1.0)*r02*x17063))+(((-1.0)*x17055*x17058))+((x17051*x17061))+((x17057*x17059))+(((-1.0)*x17056*x17064))+(((-1.0)*x17062*x17070)));
evalcond[5]=((1.0)+(((-1.0)*x17068*x17070))+(((-1.0)*x17056*x17069))+((x17057*x17066))+(((-1.0)*r12*x17063))+((x17051*x17067))+((x17052*x17065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17071=((1.0)*sj9);
CheckValue<IkReal> x17072 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x17071))),IKFAST_ATAN2_MAGTHRESH);
if(!x17072.valid){
continue;
}
CheckValue<IkReal> x17073=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*r00*sj4*x17071))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x17073.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17072.value)+(((1.5707963267949)*(x17073.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17074=IKcos(j8);
IkReal x17075=IKsin(j8);
IkReal x17076=(r21*sj9);
IkReal x17077=(cj9*r20);
IkReal x17078=((1.0)*x17075);
IkReal x17079=((1.0)*x17074);
IkReal x17080=(cj4*x17074);
IkReal x17081=(r12*sj4);
IkReal x17082=(r01*sj9);
IkReal x17083=(cj4*x17075);
IkReal x17084=(r11*sj4*sj9);
IkReal x17085=(cj9*r00);
IkReal x17086=((1.0)*cj4*x17075);
IkReal x17087=(cj9*r10*sj4);
IkReal x17088=(r02*sj4);
IkReal x17089=(r11*sj9);
IkReal x17090=(cj9*r00*sj4);
IkReal x17091=(cj9*r10);
IkReal x17092=(r01*sj4*sj9);
IkReal x17093=((1.0)*cj4*x17074);
evalcond[0]=(((r22*x17074))+((x17075*x17076))+(((-1.0)*x17077*x17078)));
evalcond[1]=((((-1.0)*r22*x17078))+(((-1.0)*x17077*x17079))+((x17074*x17076)));
evalcond[2]=((1.0)+((r02*x17080))+((x17075*x17084))+((x17074*x17081))+(((-1.0)*x17078*x17087))+((x17082*x17083))+(((-1.0)*x17085*x17086)));
evalcond[3]=((((-1.0)*x17086*x17091))+((x17083*x17089))+(((-1.0)*x17079*x17088))+((x17075*x17090))+(((-1.0)*x17078*x17092))+((r12*x17080)));
evalcond[4]=(((x17080*x17082))+((x17074*x17084))+(((-1.0)*x17078*x17081))+(((-1.0)*x17079*x17087))+(((-1.0)*x17085*x17093))+(((-1.0)*r02*x17086)));
evalcond[5]=((1.0)+(((-1.0)*x17091*x17093))+((x17075*x17088))+((x17074*x17090))+((x17080*x17089))+(((-1.0)*r12*x17086))+(((-1.0)*x17079*x17092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17094=(r21*sj9);
IkReal x17095=(r21*sj4);
IkReal x17096=(r01*x17095);
IkReal x17097=((1.0)*cj4);
IkReal x17098=(r11*r21);
IkReal x17099=(cj9*r20*sj9);
IkReal x17100=cj9*cj9;
IkReal x17101=(r20*x17100);
CheckValue<IkReal> x17102=IKPowWithIntegerCheck(IKsign((((r00*sj4*x17101))+(((-1.0)*r01*sj4*x17099))+x17096+(((-1.0)*cj4*r10*x17101))+(((-1.0)*cj9*r00*sj9*x17095))+(((-1.0)*r12*r22*x17097))+(((-1.0)*x17096*x17100))+((cj4*cj9*r10*x17094))+((cj4*r11*x17099))+(((-1.0)*x17097*x17098))+((r02*r22*sj4))+((cj4*x17098*x17100)))),-1);
if(!x17102.valid){
continue;
}
CheckValue<IkReal> x17103 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*sj6*x17094))+((sj6*((cj9*r20))))),IKFAST_ATAN2_MAGTHRESH);
if(!x17103.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17102.value)))+(x17103.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17104=IKcos(j8);
IkReal x17105=IKsin(j8);
IkReal x17106=(r21*sj9);
IkReal x17107=(cj9*r20);
IkReal x17108=((1.0)*x17105);
IkReal x17109=((1.0)*x17104);
IkReal x17110=(cj4*x17104);
IkReal x17111=(r02*sj4);
IkReal x17112=(r11*sj9);
IkReal x17113=(cj4*x17105);
IkReal x17114=(cj9*r00*sj4);
IkReal x17115=(cj9*r10);
IkReal x17116=((1.0)*cj4*x17105);
IkReal x17117=(r01*sj4*sj9);
IkReal x17118=((-1.0)*(((1.0)*sj6)));
IkReal x17119=(r12*sj4);
IkReal x17120=(r01*sj9);
IkReal x17121=(r11*sj4*sj9);
IkReal x17122=(cj9*r00);
IkReal x17123=(cj9*r10*sj4);
IkReal x17124=((1.0)*cj4*x17104);
evalcond[0]=(((x17105*x17106))+((r22*x17104))+(((-1.0)*x17107*x17108)));
evalcond[1]=(((x17104*x17106))+(((-1.0)*x17107*x17109))+(((-1.0)*r22*x17108)));
evalcond[2]=((((-1.0)*x17108*x17117))+((x17105*x17114))+((x17112*x17113))+(((-1.0)*x17115*x17116))+(((-1.0)*x17109*x17111))+cj6+((r12*x17110)));
evalcond[3]=((((-1.0)*x17116*x17122))+((x17113*x17120))+((x17104*x17119))+x17118+((r02*x17110))+(((-1.0)*x17108*x17123))+((x17105*x17121)));
evalcond[4]=(((x17105*x17111))+(((-1.0)*x17115*x17124))+((x17104*x17114))+(((-1.0)*x17109*x17117))+((x17110*x17112))+(((-1.0)*r12*x17116))+x17118);
evalcond[5]=((((-1.0)*x17108*x17119))+((x17104*x17121))+(((-1.0)*(1.0)*cj6))+(((-1.0)*r02*x17116))+(((-1.0)*x17122*x17124))+(((-1.0)*x17109*x17123))+((x17110*x17120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17125=((1.0)*sj9);
IkReal x17126=((1.0)*cj4);
CheckValue<IkReal> x17127 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*cj6*r21*x17125))),IKFAST_ATAN2_MAGTHRESH);
if(!x17127.valid){
continue;
}
CheckValue<IkReal> x17128=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x17125))+(((-1.0)*cj9*r01*x17126))+(((-1.0)*(1.0)*cj9*r11*sj4))+(((-1.0)*r00*sj9*x17126)))),-1);
if(!x17128.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17127.value)+(((1.5707963267949)*(x17128.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17129=IKcos(j8);
IkReal x17130=IKsin(j8);
IkReal x17131=(r21*sj9);
IkReal x17132=(cj9*r20);
IkReal x17133=((1.0)*x17130);
IkReal x17134=((1.0)*x17129);
IkReal x17135=(cj4*x17129);
IkReal x17136=(r02*sj4);
IkReal x17137=(r11*sj9);
IkReal x17138=(cj4*x17130);
IkReal x17139=(cj9*r00*sj4);
IkReal x17140=(cj9*r10);
IkReal x17141=((1.0)*cj4*x17130);
IkReal x17142=(r01*sj4*sj9);
IkReal x17143=((-1.0)*(((1.0)*sj6)));
IkReal x17144=(r12*sj4);
IkReal x17145=(r01*sj9);
IkReal x17146=(r11*sj4*sj9);
IkReal x17147=(cj9*r00);
IkReal x17148=(cj9*r10*sj4);
IkReal x17149=((1.0)*cj4*x17129);
evalcond[0]=((((-1.0)*x17132*x17133))+((r22*x17129))+((x17130*x17131)));
evalcond[1]=((((-1.0)*x17132*x17134))+(((-1.0)*r22*x17133))+((x17129*x17131)));
evalcond[2]=((((-1.0)*x17133*x17142))+cj6+((x17130*x17139))+(((-1.0)*x17140*x17141))+((x17137*x17138))+(((-1.0)*x17134*x17136))+((r12*x17135)));
evalcond[3]=((((-1.0)*x17141*x17147))+(((-1.0)*x17133*x17148))+x17143+((r02*x17135))+((x17138*x17145))+((x17130*x17146))+((x17129*x17144)));
evalcond[4]=((((-1.0)*x17140*x17149))+((x17129*x17139))+((x17135*x17137))+(((-1.0)*x17134*x17142))+x17143+(((-1.0)*r12*x17141))+((x17130*x17136)));
evalcond[5]=((((-1.0)*x17147*x17149))+(((-1.0)*r02*x17141))+(((-1.0)*(1.0)*cj6))+((x17129*x17146))+(((-1.0)*x17134*x17148))+(((-1.0)*x17133*x17144))+((x17135*x17145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17150=((1.0)*cj4);
CheckValue<IkReal> x17151=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*r10*sj9*x17150))+(((-1.0)*cj9*r11*x17150))+((r00*sj4*sj9)))),-1);
if(!x17151.valid){
continue;
}
CheckValue<IkReal> x17152 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x17152.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17151.value)))+(x17152.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17153=IKcos(j8);
IkReal x17154=IKsin(j8);
IkReal x17155=(r21*sj9);
IkReal x17156=(cj9*r20);
IkReal x17157=((1.0)*x17154);
IkReal x17158=((1.0)*x17153);
IkReal x17159=(cj4*x17153);
IkReal x17160=(r02*sj4);
IkReal x17161=(r11*sj9);
IkReal x17162=(cj4*x17154);
IkReal x17163=(cj9*r00*sj4);
IkReal x17164=(cj9*r10);
IkReal x17165=((1.0)*cj4*x17154);
IkReal x17166=(r01*sj4*sj9);
IkReal x17167=((-1.0)*(((1.0)*sj6)));
IkReal x17168=(r12*sj4);
IkReal x17169=(r01*sj9);
IkReal x17170=(r11*sj4*sj9);
IkReal x17171=(cj9*r00);
IkReal x17172=(cj9*r10*sj4);
IkReal x17173=((1.0)*cj4*x17153);
evalcond[0]=(((r22*x17153))+(((-1.0)*x17156*x17157))+((x17154*x17155)));
evalcond[1]=(((x17153*x17155))+(((-1.0)*r22*x17157))+(((-1.0)*x17156*x17158)));
evalcond[2]=(((x17161*x17162))+((x17154*x17163))+((r12*x17159))+(((-1.0)*x17164*x17165))+(((-1.0)*x17158*x17160))+cj6+(((-1.0)*x17157*x17166)));
evalcond[3]=(x17167+((r02*x17159))+(((-1.0)*x17165*x17171))+((x17162*x17169))+((x17154*x17170))+((x17153*x17168))+(((-1.0)*x17157*x17172)));
evalcond[4]=(((x17159*x17161))+x17167+((x17154*x17160))+((x17153*x17163))+(((-1.0)*r12*x17165))+(((-1.0)*x17158*x17166))+(((-1.0)*x17164*x17173)));
evalcond[5]=((((-1.0)*x17171*x17173))+((x17153*x17170))+(((-1.0)*x17158*x17172))+(((-1.0)*x17157*x17168))+(((-1.0)*(1.0)*cj6))+((x17159*x17169))+(((-1.0)*r02*x17165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17174=(cj9*r21);
IkReal x17175=(r20*sj9);
IkReal x17176=((1.0)*cj4);
IkReal x17177=(cj9*r01);
IkReal x17178=(r00*sj9);
IkReal x17179=((1.0)*sj4);
IkReal x17180=(cj9*r11);
IkReal x17181=(r10*sj9);
IkReal x17182=(sj4*x17177);
IkReal x17183=(sj4*x17178);
IkReal x17184=((0.03431)*cj4);
IkReal x17185=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*x17174))+(((-1.0)*x17175)));
evalcond[2]=((((-1.0)*x17176*x17178))+(((-1.0)*x17179*x17180))+(((-1.0)*x17179*x17181))+(((-1.0)*x17176*x17177)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x17174))+(((0.03431)*x17175)));
evalcond[4]=((((-1.0)*x17176*x17181))+(((-1.0)*x17176*x17180))+x17182+x17183);
evalcond[5]=((0.00337)+((x17177*x17184))+((x17180*x17185))+(((0.00036)*cj6))+(((-1.0)*px*x17176))+(((-1.0)*py*x17179))+((x17178*x17184))+((x17181*x17185)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x17176))+(((-1.0)*(0.00036)*sj6))+(((-0.03431)*x17182))+((x17181*x17184))+(((-0.03431)*x17183))+((x17180*x17184)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x17186=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x17186;
j8eval[1]=IKsign(x17186);
j8eval[2]=((IKabs((((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x17187=((1.0)*cj4);
IkReal x17188=((((-1.0)*cj9*r11*x17187))+(((-1.0)*r10*sj9*x17187))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x17188;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x17188);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x17189=(r01*((cj4*r21)));
IkReal x17190=(r11*((r21*sj4)));
IkReal x17191=cj9*cj9;
IkReal x17192=(r20*x17191);
IkReal x17193=((1.0)*cj9*sj9);
IkReal x17194=((1.0)*cj9*r20*sj9);
IkReal x17195=((1.0)*x17191);
IkReal x17196=(x17190+(((-1.0)*cj4*r00*r21*x17193))+((r10*sj4*x17192))+(((-1.0)*r11*sj4*x17194))+((cj4*r00*x17192))+(((-1.0)*r10*r21*sj4*x17193))+((r12*r22*sj4))+x17189+(((-1.0)*x17189*x17195))+((cj4*r02*r22))+(((-1.0)*cj4*r01*x17194))+(((-1.0)*x17190*x17195)));
j8eval[0]=x17196;
j8eval[1]=IKsign(x17196);
j8eval[2]=((IKabs((cj6*r22)))+(IKabs((((cj6*((cj9*r20))))+(((-1.0)*cj6*r21*sj9))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x17197=(cj9*r21);
IkReal x17198=(r20*sj9);
IkReal x17199=((1.0)*cj4);
IkReal x17200=(cj9*r01);
IkReal x17201=(r00*sj9);
IkReal x17202=((1.0)*sj4);
IkReal x17203=(cj9*r11);
IkReal x17204=(r10*sj9);
IkReal x17205=(sj4*x17200);
IkReal x17206=(sj4*x17201);
IkReal x17207=((0.03431)*cj4);
IkReal x17208=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x17198))+(((-1.0)*x17197)));
evalcond[2]=((((-1.0)*x17202*x17203))+(((-1.0)*x17202*x17204))+(((-1.0)*x17199*x17201))+(((-1.0)*x17199*x17200)));
evalcond[3]=((-0.4967)+(((0.03431)*x17197))+(((-1.0)*(1.0)*pz))+(((0.03431)*x17198)));
evalcond[4]=((((-1.0)*x17199*x17203))+x17206+x17205+(((-1.0)*x17199*x17204)));
evalcond[5]=((0.00337)+(((-1.0)*py*x17202))+((x17200*x17207))+(((-1.0)*px*x17199))+((x17204*x17208))+((x17203*x17208))+((x17201*x17207)));
evalcond[6]=((-0.00036)+((px*sj4))+(((-0.03431)*x17206))+((x17203*x17207))+((x17204*x17207))+(((-0.03431)*x17205))+(((-1.0)*py*x17199)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x17209=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x17209;
j8eval[1]=IKsign(x17209);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x17210=((1.0)*sj9);
IkReal x17211=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x17210))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x17211;
j8eval[1]=((IKabs(((((-1.0)*r21*x17210))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x17211);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x17212=(r01*sj4);
IkReal x17213=((1.0)*r21);
IkReal x17214=(cj4*r11);
IkReal x17215=(cj9*r20*sj9);
IkReal x17216=cj9*cj9;
IkReal x17217=(r00*sj4);
IkReal x17218=(r20*x17216);
IkReal x17219=((((-1.0)*x17213*x17214))+((x17214*x17215))+((r21*x17214*x17216))+(((-1.0)*cj4*r10*x17218))+((r02*r22*sj4))+(((-1.0)*cj9*r21*sj9*x17217))+(((-1.0)*r21*x17212*x17216))+((x17217*x17218))+(((-1.0)*cj4*r12*r22))+((r21*x17212))+(((-1.0)*r01*sj4*x17215))+((cj4*cj9*r10*r21*sj9)));
j8eval[0]=x17219;
j8eval[1]=IKsign(x17219);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*sj9*x17213)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17220=((1.0)*r21);
IkReal x17221=(r01*sj4);
IkReal x17222=(cj4*r11);
IkReal x17223=(cj9*r20*sj9);
IkReal x17224=cj9*cj9;
IkReal x17225=(r00*sj4);
IkReal x17226=(r20*x17224);
CheckValue<IkReal> x17227 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x17220))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x17227.valid){
continue;
}
CheckValue<IkReal> x17228=IKPowWithIntegerCheck(IKsign((((x17222*x17223))+(((-1.0)*x17220*x17222))+((r21*x17221))+(((-1.0)*cj4*r10*x17226))+((r21*x17222*x17224))+(((-1.0)*r01*sj4*x17223))+(((-1.0)*r21*x17221*x17224))+((r02*r22*sj4))+(((-1.0)*cj4*r12*r22))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*cj9*r21*sj9*x17225))+((x17225*x17226)))),-1);
if(!x17228.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17227.value)+(((1.5707963267949)*(x17228.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17229=IKcos(j8);
IkReal x17230=IKsin(j8);
IkReal x17231=(r21*sj9);
IkReal x17232=(cj9*r20);
IkReal x17233=((1.0)*x17230);
IkReal x17234=((1.0)*x17229);
IkReal x17235=(cj4*x17229);
IkReal x17236=(r12*sj4);
IkReal x17237=(r01*sj9);
IkReal x17238=(cj4*x17230);
IkReal x17239=(r11*sj4*sj9);
IkReal x17240=(cj9*r00);
IkReal x17241=((1.0)*cj4*x17230);
IkReal x17242=(cj9*r10*sj4);
IkReal x17243=(r02*sj4);
IkReal x17244=(r11*sj9);
IkReal x17245=(cj9*r00*sj4);
IkReal x17246=(cj9*r10);
IkReal x17247=(r01*sj4*sj9);
IkReal x17248=((1.0)*cj4*x17229);
evalcond[0]=((((-1.0)*x17232*x17233))+((r22*x17229))+((x17230*x17231)));
evalcond[1]=(((x17229*x17231))+(((-1.0)*x17232*x17234))+(((-1.0)*r22*x17233)));
evalcond[2]=((-1.0)+((x17237*x17238))+((x17229*x17236))+(((-1.0)*x17240*x17241))+((r02*x17235))+(((-1.0)*x17233*x17242))+((x17230*x17239)));
evalcond[3]=((((-1.0)*x17241*x17246))+((x17238*x17244))+((r12*x17235))+((x17230*x17245))+(((-1.0)*x17234*x17243))+(((-1.0)*x17233*x17247)));
evalcond[4]=(((x17229*x17239))+(((-1.0)*x17240*x17248))+((x17235*x17237))+(((-1.0)*x17233*x17236))+(((-1.0)*r02*x17241))+(((-1.0)*x17234*x17242)));
evalcond[5]=((-1.0)+((x17229*x17245))+((x17230*x17243))+(((-1.0)*r12*x17241))+((x17235*x17244))+(((-1.0)*x17234*x17247))+(((-1.0)*x17246*x17248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17249=((1.0)*sj9);
CheckValue<IkReal> x17250=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9))+(((-1.0)*cj4*r10*x17249)))),-1);
if(!x17250.valid){
continue;
}
CheckValue<IkReal> x17251 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x17249))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x17251.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17250.value)))+(x17251.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17252=IKcos(j8);
IkReal x17253=IKsin(j8);
IkReal x17254=(r21*sj9);
IkReal x17255=(cj9*r20);
IkReal x17256=((1.0)*x17253);
IkReal x17257=((1.0)*x17252);
IkReal x17258=(cj4*x17252);
IkReal x17259=(r12*sj4);
IkReal x17260=(r01*sj9);
IkReal x17261=(cj4*x17253);
IkReal x17262=(r11*sj4*sj9);
IkReal x17263=(cj9*r00);
IkReal x17264=((1.0)*cj4*x17253);
IkReal x17265=(cj9*r10*sj4);
IkReal x17266=(r02*sj4);
IkReal x17267=(r11*sj9);
IkReal x17268=(cj9*r00*sj4);
IkReal x17269=(cj9*r10);
IkReal x17270=(r01*sj4*sj9);
IkReal x17271=((1.0)*cj4*x17252);
evalcond[0]=((((-1.0)*x17255*x17256))+((r22*x17252))+((x17253*x17254)));
evalcond[1]=(((x17252*x17254))+(((-1.0)*r22*x17256))+(((-1.0)*x17255*x17257)));
evalcond[2]=((-1.0)+((r02*x17258))+((x17252*x17259))+(((-1.0)*x17263*x17264))+((x17253*x17262))+((x17260*x17261))+(((-1.0)*x17256*x17265)));
evalcond[3]=((((-1.0)*x17257*x17266))+((r12*x17258))+(((-1.0)*x17264*x17269))+(((-1.0)*x17256*x17270))+((x17253*x17268))+((x17261*x17267)));
evalcond[4]=(((x17252*x17262))+(((-1.0)*x17263*x17271))+(((-1.0)*x17256*x17259))+(((-1.0)*r02*x17264))+((x17258*x17260))+(((-1.0)*x17257*x17265)));
evalcond[5]=((-1.0)+((x17258*x17267))+(((-1.0)*r12*x17264))+((x17252*x17268))+(((-1.0)*x17257*x17270))+(((-1.0)*x17269*x17271))+((x17253*x17266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x17272 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x17272.valid){
continue;
}
CheckValue<IkReal> x17273=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x17273.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17272.value)+(((1.5707963267949)*(x17273.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17274=IKcos(j8);
IkReal x17275=IKsin(j8);
IkReal x17276=(r21*sj9);
IkReal x17277=(cj9*r20);
IkReal x17278=((1.0)*x17275);
IkReal x17279=((1.0)*x17274);
IkReal x17280=(cj4*x17274);
IkReal x17281=(r12*sj4);
IkReal x17282=(r01*sj9);
IkReal x17283=(cj4*x17275);
IkReal x17284=(r11*sj4*sj9);
IkReal x17285=(cj9*r00);
IkReal x17286=((1.0)*cj4*x17275);
IkReal x17287=(cj9*r10*sj4);
IkReal x17288=(r02*sj4);
IkReal x17289=(r11*sj9);
IkReal x17290=(cj9*r00*sj4);
IkReal x17291=(cj9*r10);
IkReal x17292=(r01*sj4*sj9);
IkReal x17293=((1.0)*cj4*x17274);
evalcond[0]=(((r22*x17274))+(((-1.0)*x17277*x17278))+((x17275*x17276)));
evalcond[1]=(((x17274*x17276))+(((-1.0)*r22*x17278))+(((-1.0)*x17277*x17279)));
evalcond[2]=((-1.0)+((r02*x17280))+((x17275*x17284))+((x17282*x17283))+((x17274*x17281))+(((-1.0)*x17285*x17286))+(((-1.0)*x17278*x17287)));
evalcond[3]=(((x17283*x17289))+(((-1.0)*x17278*x17292))+(((-1.0)*x17286*x17291))+(((-1.0)*x17279*x17288))+((r12*x17280))+((x17275*x17290)));
evalcond[4]=((((-1.0)*r02*x17286))+((x17274*x17284))+(((-1.0)*x17278*x17281))+(((-1.0)*x17279*x17287))+(((-1.0)*x17285*x17293))+((x17280*x17282)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x17286))+((x17280*x17289))+(((-1.0)*x17279*x17292))+(((-1.0)*x17291*x17293))+((x17274*x17290))+((x17275*x17288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17294=(cj9*r21);
IkReal x17295=(r20*sj9);
IkReal x17296=((1.0)*cj4);
IkReal x17297=(cj9*r01);
IkReal x17298=(r00*sj9);
IkReal x17299=((1.0)*sj4);
IkReal x17300=(cj9*r11);
IkReal x17301=(r10*sj9);
IkReal x17302=(sj4*x17297);
IkReal x17303=(sj4*x17298);
IkReal x17304=((0.03431)*cj4);
IkReal x17305=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x17294))+(((-1.0)*x17295)));
evalcond[2]=((((-1.0)*x17296*x17297))+(((-1.0)*x17299*x17301))+(((-1.0)*x17299*x17300))+(((-1.0)*x17296*x17298)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x17294))+(((0.03431)*x17295)));
evalcond[4]=((((-1.0)*x17296*x17300))+x17302+x17303+(((-1.0)*x17296*x17301)));
evalcond[5]=((0.00337)+((x17297*x17304))+((x17300*x17305))+((x17298*x17304))+(((-1.0)*py*x17299))+(((-1.0)*px*x17296))+((x17301*x17305)));
evalcond[6]=((0.00036)+((px*sj4))+(((-1.0)*py*x17296))+((x17300*x17304))+(((-0.03431)*x17303))+(((-0.03431)*x17302))+((x17301*x17304)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x17306=((1.0)*sj9);
IkReal x17307=(((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*r00*sj4*x17306))+(((-1.0)*(1.0)*cj9*r01*sj4)));
j8eval[0]=x17307;
j8eval[1]=((IKabs(((((-1.0)*r21*x17306))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x17307);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x17308=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x17308;
j8eval[1]=IKsign(x17308);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x17309=(cj4*r11);
IkReal x17310=((1.0)*r21);
IkReal x17311=(r01*sj4);
IkReal x17312=(cj9*r20*sj9);
IkReal x17313=(cj4*r10);
IkReal x17314=cj9*cj9;
IkReal x17315=(r20*x17314);
IkReal x17316=(((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+((x17311*x17312))+(((-1.0)*r00*sj4*x17315))+((x17313*x17315))+(((-1.0)*r02*r22*sj4))+((r21*x17311*x17314))+(((-1.0)*x17310*x17311))+(((-1.0)*cj9*r21*sj9*x17313))+(((-1.0)*r21*x17309*x17314))+((r21*x17309))+(((-1.0)*cj4*r11*x17312)));
j8eval[0]=x17316;
j8eval[1]=IKsign(x17316);
j8eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*sj9*x17310))+((cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17317=((1.0)*r21);
IkReal x17318=(cj4*r11);
IkReal x17319=(r01*sj4);
IkReal x17320=(cj9*r20*sj9);
IkReal x17321=(cj4*r10);
IkReal x17322=cj9*cj9;
IkReal x17323=(r20*x17322);
CheckValue<IkReal> x17324 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x17317))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x17324.valid){
continue;
}
CheckValue<IkReal> x17325=IKPowWithIntegerCheck(IKsign((((cj9*r00*r21*sj4*sj9))+((r21*x17319*x17322))+((cj4*r12*r22))+(((-1.0)*cj9*r21*sj9*x17321))+(((-1.0)*r00*sj4*x17323))+((r21*x17318))+(((-1.0)*r02*r22*sj4))+(((-1.0)*x17317*x17319))+(((-1.0)*r21*x17318*x17322))+(((-1.0)*cj4*r11*x17320))+((x17319*x17320))+((x17321*x17323)))),-1);
if(!x17325.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17324.value)+(((1.5707963267949)*(x17325.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17326=IKcos(j8);
IkReal x17327=IKsin(j8);
IkReal x17328=(r21*sj9);
IkReal x17329=(cj9*r20);
IkReal x17330=((1.0)*x17327);
IkReal x17331=((1.0)*x17326);
IkReal x17332=(cj4*x17326);
IkReal x17333=(r12*sj4);
IkReal x17334=(r01*sj9);
IkReal x17335=(cj4*x17327);
IkReal x17336=(r11*sj4*sj9);
IkReal x17337=(cj9*r00);
IkReal x17338=((1.0)*cj4*x17327);
IkReal x17339=(cj9*r10*sj4);
IkReal x17340=(r02*sj4);
IkReal x17341=(r11*sj9);
IkReal x17342=(cj9*r00*sj4);
IkReal x17343=(cj9*r10);
IkReal x17344=(r01*sj4*sj9);
IkReal x17345=((1.0)*cj4*x17326);
evalcond[0]=(((x17327*x17328))+((r22*x17326))+(((-1.0)*x17329*x17330)));
evalcond[1]=(((x17326*x17328))+(((-1.0)*r22*x17330))+(((-1.0)*x17329*x17331)));
evalcond[2]=((1.0)+((x17326*x17333))+(((-1.0)*x17330*x17339))+(((-1.0)*x17337*x17338))+((x17327*x17336))+((x17334*x17335))+((r02*x17332)));
evalcond[3]=(((x17335*x17341))+(((-1.0)*x17331*x17340))+(((-1.0)*x17338*x17343))+(((-1.0)*x17330*x17344))+((r12*x17332))+((x17327*x17342)));
evalcond[4]=((((-1.0)*x17330*x17333))+(((-1.0)*x17331*x17339))+(((-1.0)*r02*x17338))+((x17332*x17334))+((x17326*x17336))+(((-1.0)*x17337*x17345)));
evalcond[5]=((1.0)+((x17327*x17340))+(((-1.0)*x17343*x17345))+(((-1.0)*x17331*x17344))+((x17332*x17341))+(((-1.0)*r12*x17338))+((x17326*x17342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x17346 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x17346.valid){
continue;
}
CheckValue<IkReal> x17347=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x17347.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17346.value)+(((1.5707963267949)*(x17347.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17348=IKcos(j8);
IkReal x17349=IKsin(j8);
IkReal x17350=(r21*sj9);
IkReal x17351=(cj9*r20);
IkReal x17352=((1.0)*x17349);
IkReal x17353=((1.0)*x17348);
IkReal x17354=(cj4*x17348);
IkReal x17355=(r12*sj4);
IkReal x17356=(r01*sj9);
IkReal x17357=(cj4*x17349);
IkReal x17358=(r11*sj4*sj9);
IkReal x17359=(cj9*r00);
IkReal x17360=((1.0)*cj4*x17349);
IkReal x17361=(cj9*r10*sj4);
IkReal x17362=(r02*sj4);
IkReal x17363=(r11*sj9);
IkReal x17364=(cj9*r00*sj4);
IkReal x17365=(cj9*r10);
IkReal x17366=(r01*sj4*sj9);
IkReal x17367=((1.0)*cj4*x17348);
evalcond[0]=(((r22*x17348))+((x17349*x17350))+(((-1.0)*x17351*x17352)));
evalcond[1]=(((x17348*x17350))+(((-1.0)*r22*x17352))+(((-1.0)*x17351*x17353)));
evalcond[2]=((1.0)+(((-1.0)*x17352*x17361))+(((-1.0)*x17359*x17360))+((r02*x17354))+((x17356*x17357))+((x17348*x17355))+((x17349*x17358)));
evalcond[3]=(((r12*x17354))+((x17349*x17364))+(((-1.0)*x17360*x17365))+(((-1.0)*x17352*x17366))+(((-1.0)*x17353*x17362))+((x17357*x17363)));
evalcond[4]=((((-1.0)*x17353*x17361))+((x17348*x17358))+(((-1.0)*r02*x17360))+((x17354*x17356))+(((-1.0)*x17352*x17355))+(((-1.0)*x17359*x17367)));
evalcond[5]=((1.0)+((x17354*x17363))+((x17349*x17362))+((x17348*x17364))+(((-1.0)*x17353*x17366))+(((-1.0)*r12*x17360))+(((-1.0)*x17365*x17367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17368=((1.0)*sj9);
CheckValue<IkReal> x17369 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x17368))),IKFAST_ATAN2_MAGTHRESH);
if(!x17369.valid){
continue;
}
CheckValue<IkReal> x17370=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*x17368)))),-1);
if(!x17370.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17369.value)+(((1.5707963267949)*(x17370.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17371=IKcos(j8);
IkReal x17372=IKsin(j8);
IkReal x17373=(r21*sj9);
IkReal x17374=(cj9*r20);
IkReal x17375=((1.0)*x17372);
IkReal x17376=((1.0)*x17371);
IkReal x17377=(cj4*x17371);
IkReal x17378=(r12*sj4);
IkReal x17379=(r01*sj9);
IkReal x17380=(cj4*x17372);
IkReal x17381=(r11*sj4*sj9);
IkReal x17382=(cj9*r00);
IkReal x17383=((1.0)*cj4*x17372);
IkReal x17384=(cj9*r10*sj4);
IkReal x17385=(r02*sj4);
IkReal x17386=(r11*sj9);
IkReal x17387=(cj9*r00*sj4);
IkReal x17388=(cj9*r10);
IkReal x17389=(r01*sj4*sj9);
IkReal x17390=((1.0)*cj4*x17371);
evalcond[0]=(((x17372*x17373))+((r22*x17371))+(((-1.0)*x17374*x17375)));
evalcond[1]=((((-1.0)*r22*x17375))+((x17371*x17373))+(((-1.0)*x17374*x17376)));
evalcond[2]=((1.0)+((x17372*x17381))+((x17379*x17380))+(((-1.0)*x17382*x17383))+(((-1.0)*x17375*x17384))+((x17371*x17378))+((r02*x17377)));
evalcond[3]=((((-1.0)*x17383*x17388))+((x17372*x17387))+((x17380*x17386))+((r12*x17377))+(((-1.0)*x17375*x17389))+(((-1.0)*x17376*x17385)));
evalcond[4]=((((-1.0)*r02*x17383))+((x17371*x17381))+(((-1.0)*x17382*x17390))+(((-1.0)*x17376*x17384))+((x17377*x17379))+(((-1.0)*x17375*x17378)));
evalcond[5]=((1.0)+(((-1.0)*x17376*x17389))+(((-1.0)*r12*x17383))+((x17372*x17385))+((x17371*x17387))+((x17377*x17386))+(((-1.0)*x17388*x17390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17391=(cj9*r21);
IkReal x17392=(r20*sj9);
IkReal x17393=((1.0)*cj4);
IkReal x17394=(cj9*r01);
IkReal x17395=(r00*sj9);
IkReal x17396=((1.0)*sj4);
IkReal x17397=(cj9*r11);
IkReal x17398=(r10*sj9);
IkReal x17399=(sj4*x17394);
IkReal x17400=(sj4*x17395);
IkReal x17401=((0.03431)*cj4);
IkReal x17402=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x17391))+(((-1.0)*x17392)));
evalcond[2]=((((-1.0)*x17393*x17394))+(((-1.0)*x17396*x17397))+(((-1.0)*x17396*x17398))+(((-1.0)*x17393*x17395)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x17392))+(((0.03431)*x17391)));
evalcond[4]=(x17400+(((-1.0)*x17393*x17397))+x17399+(((-1.0)*x17393*x17398)));
evalcond[5]=((0.00373)+((x17398*x17402))+(((-1.0)*px*x17393))+((x17394*x17401))+((x17397*x17402))+(((-1.0)*py*x17396))+((x17395*x17401)));
evalcond[6]=(((px*sj4))+(((-1.0)*py*x17393))+(((-0.03431)*x17400))+(((-0.03431)*x17399))+((x17397*x17401))+((x17398*x17401)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x17403=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x17403;
j8eval[1]=IKsign(x17403);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x17404=((1.0)*sj9);
IkReal x17405=((((-1.0)*cj4*r10*x17404))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x17405;
j8eval[1]=IKsign(x17405);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*r21*x17404)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x17406=(cj4*r01);
IkReal x17407=(r21*x17406);
IkReal x17408=(r11*sj4);
IkReal x17409=(r21*x17408);
IkReal x17410=(cj4*r00);
IkReal x17411=cj9*cj9;
IkReal x17412=(r20*x17411);
IkReal x17413=(r10*sj4);
IkReal x17414=((1.0)*cj9*r21*sj9);
IkReal x17415=((1.0)*cj9*r20*sj9);
IkReal x17416=((1.0)*x17411);
IkReal x17417=((((-1.0)*x17408*x17415))+x17407+x17409+((x17410*x17412))+((x17412*x17413))+(((-1.0)*x17407*x17416))+(((-1.0)*x17410*x17414))+((r12*r22*sj4))+(((-1.0)*x17409*x17416))+(((-1.0)*x17406*x17415))+((cj4*r02*r22))+(((-1.0)*x17413*x17414)));
j8eval[0]=x17417;
j8eval[1]=IKsign(x17417);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17418=(cj4*r01);
IkReal x17419=(r21*x17418);
IkReal x17420=(r11*sj4);
IkReal x17421=(r21*x17420);
IkReal x17422=(cj4*r00);
IkReal x17423=cj9*cj9;
IkReal x17424=(r20*x17423);
IkReal x17425=(r10*sj4);
IkReal x17426=((1.0)*cj9*r21*sj9);
IkReal x17427=((1.0)*cj9*r20*sj9);
IkReal x17428=((1.0)*x17423);
CheckValue<IkReal> x17429=IKPowWithIntegerCheck(IKsign(((((-1.0)*x17422*x17426))+(((-1.0)*x17418*x17427))+(((-1.0)*x17419*x17428))+(((-1.0)*x17420*x17427))+x17419+((x17422*x17424))+x17421+((r12*r22*sj4))+(((-1.0)*x17425*x17426))+((cj4*r02*r22))+((x17424*x17425))+(((-1.0)*x17421*x17428)))),-1);
if(!x17429.valid){
continue;
}
CheckValue<IkReal> x17430 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x17430.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17429.value)))+(x17430.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17431=IKcos(j8);
IkReal x17432=IKsin(j8);
IkReal x17433=(r21*sj9);
IkReal x17434=(cj9*r20);
IkReal x17435=((1.0)*x17432);
IkReal x17436=((1.0)*x17431);
IkReal x17437=(cj4*x17431);
IkReal x17438=(r12*sj4);
IkReal x17439=(r01*sj9);
IkReal x17440=(cj4*x17432);
IkReal x17441=(r11*sj4*sj9);
IkReal x17442=(cj9*r00);
IkReal x17443=((1.0)*cj4*x17432);
IkReal x17444=(cj9*r10*sj4);
IkReal x17445=(r02*sj4);
IkReal x17446=(r11*sj9);
IkReal x17447=(cj9*r00*sj4);
IkReal x17448=(cj9*r10);
IkReal x17449=((1.0)*cj4*x17431);
IkReal x17450=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x17434*x17435))+((r22*x17431))+((x17432*x17433)));
evalcond[1]=((((-1.0)*x17434*x17436))+((x17431*x17433))+(((-1.0)*r22*x17435)));
evalcond[2]=((((-1.0)*x17435*x17444))+((x17432*x17441))+((x17431*x17438))+((r02*x17437))+(((-1.0)*x17442*x17443))+((x17439*x17440)));
evalcond[3]=(((x17432*x17445))+((x17431*x17447))+(((-1.0)*x17436*x17450))+(((-1.0)*r12*x17443))+((x17437*x17446))+(((-1.0)*x17448*x17449)));
evalcond[4]=((-1.0)+(((-1.0)*x17443*x17448))+(((-1.0)*x17435*x17450))+((x17440*x17446))+((x17432*x17447))+((r12*x17437))+(((-1.0)*x17436*x17445)));
evalcond[5]=((1.0)+((x17437*x17439))+(((-1.0)*x17435*x17438))+(((-1.0)*x17442*x17449))+(((-1.0)*x17436*x17444))+(((-1.0)*r02*x17443))+((x17431*x17441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17451=((1.0)*sj9);
CheckValue<IkReal> x17452 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*r21*x17451)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x17452.valid){
continue;
}
CheckValue<IkReal> x17453=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r10*x17451))+((cj9*r01*sj4))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x17453.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17452.value)+(((1.5707963267949)*(x17453.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17454=IKcos(j8);
IkReal x17455=IKsin(j8);
IkReal x17456=(r21*sj9);
IkReal x17457=(cj9*r20);
IkReal x17458=((1.0)*x17455);
IkReal x17459=((1.0)*x17454);
IkReal x17460=(cj4*x17454);
IkReal x17461=(r12*sj4);
IkReal x17462=(r01*sj9);
IkReal x17463=(cj4*x17455);
IkReal x17464=(r11*sj4*sj9);
IkReal x17465=(cj9*r00);
IkReal x17466=((1.0)*cj4*x17455);
IkReal x17467=(cj9*r10*sj4);
IkReal x17468=(r02*sj4);
IkReal x17469=(r11*sj9);
IkReal x17470=(cj9*r00*sj4);
IkReal x17471=(cj9*r10);
IkReal x17472=((1.0)*cj4*x17454);
IkReal x17473=(r01*sj4*sj9);
evalcond[0]=(((x17455*x17456))+(((-1.0)*x17457*x17458))+((r22*x17454)));
evalcond[1]=((((-1.0)*r22*x17458))+(((-1.0)*x17457*x17459))+((x17454*x17456)));
evalcond[2]=((((-1.0)*x17458*x17467))+((r02*x17460))+((x17455*x17464))+((x17454*x17461))+((x17462*x17463))+(((-1.0)*x17465*x17466)));
evalcond[3]=(((x17454*x17470))+((x17455*x17468))+(((-1.0)*r12*x17466))+((x17460*x17469))+(((-1.0)*x17471*x17472))+(((-1.0)*x17459*x17473)));
evalcond[4]=((-1.0)+(((-1.0)*x17459*x17468))+((x17455*x17470))+(((-1.0)*x17458*x17473))+((x17463*x17469))+((r12*x17460))+(((-1.0)*x17466*x17471)));
evalcond[5]=((1.0)+((x17454*x17464))+(((-1.0)*x17459*x17467))+((x17460*x17462))+(((-1.0)*x17458*x17461))+(((-1.0)*r02*x17466))+(((-1.0)*x17465*x17472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x17474=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x17474.valid){
continue;
}
CheckValue<IkReal> x17475 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x17475.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17474.value)))+(x17475.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17476=IKcos(j8);
IkReal x17477=IKsin(j8);
IkReal x17478=(r21*sj9);
IkReal x17479=(cj9*r20);
IkReal x17480=((1.0)*x17477);
IkReal x17481=((1.0)*x17476);
IkReal x17482=(cj4*x17476);
IkReal x17483=(r12*sj4);
IkReal x17484=(r01*sj9);
IkReal x17485=(cj4*x17477);
IkReal x17486=(r11*sj4*sj9);
IkReal x17487=(cj9*r00);
IkReal x17488=((1.0)*cj4*x17477);
IkReal x17489=(cj9*r10*sj4);
IkReal x17490=(r02*sj4);
IkReal x17491=(r11*sj9);
IkReal x17492=(cj9*r00*sj4);
IkReal x17493=(cj9*r10);
IkReal x17494=((1.0)*cj4*x17476);
IkReal x17495=(r01*sj4*sj9);
evalcond[0]=(((r22*x17476))+((x17477*x17478))+(((-1.0)*x17479*x17480)));
evalcond[1]=(((x17476*x17478))+(((-1.0)*x17479*x17481))+(((-1.0)*r22*x17480)));
evalcond[2]=((((-1.0)*x17480*x17489))+((r02*x17482))+((x17477*x17486))+(((-1.0)*x17487*x17488))+((x17476*x17483))+((x17484*x17485)));
evalcond[3]=((((-1.0)*x17481*x17495))+((x17476*x17492))+(((-1.0)*x17493*x17494))+(((-1.0)*r12*x17488))+((x17482*x17491))+((x17477*x17490)));
evalcond[4]=((-1.0)+((r12*x17482))+(((-1.0)*x17488*x17493))+(((-1.0)*x17481*x17490))+((x17477*x17492))+(((-1.0)*x17480*x17495))+((x17485*x17491)));
evalcond[5]=((1.0)+(((-1.0)*x17481*x17489))+((x17482*x17484))+(((-1.0)*x17480*x17483))+(((-1.0)*r02*x17488))+(((-1.0)*x17487*x17494))+((x17476*x17486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17496=(cj9*r21);
IkReal x17497=(r20*sj9);
IkReal x17498=((1.0)*cj4);
IkReal x17499=(cj9*r01);
IkReal x17500=(r00*sj9);
IkReal x17501=((1.0)*sj4);
IkReal x17502=(cj9*r11);
IkReal x17503=(r10*sj9);
IkReal x17504=(sj4*x17499);
IkReal x17505=(sj4*x17500);
IkReal x17506=((0.03431)*cj4);
IkReal x17507=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*x17496))+(((-1.0)*x17497)));
evalcond[2]=((((-1.0)*x17498*x17499))+(((-1.0)*x17501*x17502))+(((-1.0)*x17498*x17500))+(((-1.0)*x17501*x17503)));
evalcond[3]=((-0.4967)+(((-1.0)*(1.0)*pz))+(((0.03431)*x17496))+(((0.03431)*x17497)));
evalcond[4]=((((-1.0)*x17498*x17503))+x17504+x17505+(((-1.0)*x17498*x17502)));
evalcond[5]=((0.00301)+(((-1.0)*py*x17501))+((x17499*x17506))+((x17500*x17506))+(((-1.0)*px*x17498))+((x17502*x17507))+((x17503*x17507)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x17505))+(((-0.03431)*x17504))+((x17502*x17506))+((x17503*x17506))+(((-1.0)*py*x17498)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x17508=((1.0)*cj9);
IkReal x17509=((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x17508))+((r00*sj4*sj9)));
j8eval[0]=x17509;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x17508)))))+(IKabs(r22)));
j8eval[2]=IKsign(x17509);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x17510=((1.0)*cj9);
IkReal x17511=((1.0)*sj9);
IkReal x17512=((((-1.0)*r10*sj4*x17511))+(((-1.0)*cj4*r00*x17511))+(((-1.0)*cj4*r01*x17510))+(((-1.0)*r11*sj4*x17510)));
j8eval[0]=x17512;
j8eval[1]=((IKabs(((((-1.0)*r21*x17511))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x17512);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=0;
sj7=0;
cj7=1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x17513=((1.0)*r21);
IkReal x17514=(cj4*r01);
IkReal x17515=((1.0)*r22);
IkReal x17516=(r11*sj4);
IkReal x17517=(cj4*r00);
IkReal x17518=(cj9*r21*sj9);
IkReal x17519=(cj9*r20*sj9);
IkReal x17520=(r10*sj4);
IkReal x17521=cj9*cj9;
IkReal x17522=(r21*x17521);
IkReal x17523=((1.0)*r20*x17521);
IkReal x17524=(((x17516*x17519))+(((-1.0)*cj4*r02*x17515))+(((-1.0)*r12*sj4*x17515))+(((-1.0)*x17513*x17514))+(((-1.0)*x17517*x17523))+((x17517*x17518))+(((-1.0)*x17513*x17516))+((x17518*x17520))+((x17516*x17522))+(((-1.0)*x17520*x17523))+((x17514*x17519))+((x17514*x17522)));
j8eval[0]=x17524;
j8eval[1]=((IKabs(((((-1.0)*sj9*x17513))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x17524);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17525=((1.0)*r21);
IkReal x17526=(cj4*r01);
IkReal x17527=((1.0)*r22);
IkReal x17528=(r11*sj4);
IkReal x17529=(cj4*r00);
IkReal x17530=(cj9*r21*sj9);
IkReal x17531=(cj9*r20*sj9);
IkReal x17532=(r10*sj4);
IkReal x17533=cj9*cj9;
IkReal x17534=(r21*x17533);
IkReal x17535=((1.0)*r20*x17533);
CheckValue<IkReal> x17536 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x17525))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x17536.valid){
continue;
}
CheckValue<IkReal> x17537=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*sj4*x17527))+((x17530*x17532))+((x17529*x17530))+((x17528*x17534))+(((-1.0)*x17525*x17526))+(((-1.0)*x17532*x17535))+((x17526*x17531))+(((-1.0)*x17525*x17528))+(((-1.0)*cj4*r02*x17527))+((x17528*x17531))+((x17526*x17534))+(((-1.0)*x17529*x17535)))),-1);
if(!x17537.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17536.value)+(((1.5707963267949)*(x17537.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17538=IKcos(j8);
IkReal x17539=IKsin(j8);
IkReal x17540=(r21*sj9);
IkReal x17541=(cj9*r20);
IkReal x17542=((1.0)*x17539);
IkReal x17543=((1.0)*x17538);
IkReal x17544=(cj4*x17538);
IkReal x17545=(r12*sj4);
IkReal x17546=(r01*sj9);
IkReal x17547=(cj4*x17539);
IkReal x17548=(r11*sj4*sj9);
IkReal x17549=(cj9*r00);
IkReal x17550=((1.0)*cj4*x17539);
IkReal x17551=(cj9*r10*sj4);
IkReal x17552=(r02*sj4);
IkReal x17553=(r11*sj9);
IkReal x17554=(cj9*r00*sj4);
IkReal x17555=(cj9*r10);
IkReal x17556=((1.0)*cj4*x17538);
IkReal x17557=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x17541*x17542))+((r22*x17538))+((x17539*x17540)));
evalcond[1]=((((-1.0)*r22*x17542))+((x17538*x17540))+(((-1.0)*x17541*x17543)));
evalcond[2]=((((-1.0)*x17542*x17551))+((x17546*x17547))+(((-1.0)*x17549*x17550))+((x17539*x17548))+((x17538*x17545))+((r02*x17544)));
evalcond[3]=((((-1.0)*x17555*x17556))+(((-1.0)*x17543*x17557))+((x17539*x17552))+((x17538*x17554))+((x17544*x17553))+(((-1.0)*r12*x17550)));
evalcond[4]=((1.0)+(((-1.0)*x17550*x17555))+((r12*x17544))+((x17539*x17554))+(((-1.0)*x17543*x17552))+(((-1.0)*x17542*x17557))+((x17547*x17553)));
evalcond[5]=((-1.0)+(((-1.0)*x17549*x17556))+(((-1.0)*x17542*x17545))+(((-1.0)*r02*x17550))+((x17538*x17548))+((x17544*x17546))+(((-1.0)*x17543*x17551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17558=((1.0)*sj9);
IkReal x17559=((1.0)*cj9);
CheckValue<IkReal> x17560 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x17558))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x17560.valid){
continue;
}
CheckValue<IkReal> x17561=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x17558))+(((-1.0)*r11*sj4*x17559))+(((-1.0)*cj4*r00*x17558))+(((-1.0)*cj4*r01*x17559)))),-1);
if(!x17561.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17560.value)+(((1.5707963267949)*(x17561.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17562=IKcos(j8);
IkReal x17563=IKsin(j8);
IkReal x17564=(r21*sj9);
IkReal x17565=(cj9*r20);
IkReal x17566=((1.0)*x17563);
IkReal x17567=((1.0)*x17562);
IkReal x17568=(cj4*x17562);
IkReal x17569=(r12*sj4);
IkReal x17570=(r01*sj9);
IkReal x17571=(cj4*x17563);
IkReal x17572=(r11*sj4*sj9);
IkReal x17573=(cj9*r00);
IkReal x17574=((1.0)*cj4*x17563);
IkReal x17575=(cj9*r10*sj4);
IkReal x17576=(r02*sj4);
IkReal x17577=(r11*sj9);
IkReal x17578=(cj9*r00*sj4);
IkReal x17579=(cj9*r10);
IkReal x17580=((1.0)*cj4*x17562);
IkReal x17581=(r01*sj4*sj9);
evalcond[0]=(((r22*x17562))+(((-1.0)*x17565*x17566))+((x17563*x17564)));
evalcond[1]=(((x17562*x17564))+(((-1.0)*r22*x17566))+(((-1.0)*x17565*x17567)));
evalcond[2]=(((r02*x17568))+((x17563*x17572))+((x17562*x17569))+(((-1.0)*x17566*x17575))+(((-1.0)*x17573*x17574))+((x17570*x17571)));
evalcond[3]=(((x17563*x17576))+((x17562*x17578))+(((-1.0)*r12*x17574))+((x17568*x17577))+(((-1.0)*x17567*x17581))+(((-1.0)*x17579*x17580)));
evalcond[4]=((1.0)+((x17571*x17577))+(((-1.0)*x17567*x17576))+(((-1.0)*x17574*x17579))+((x17563*x17578))+(((-1.0)*x17566*x17581))+((r12*x17568)));
evalcond[5]=((-1.0)+((x17562*x17572))+(((-1.0)*x17567*x17575))+(((-1.0)*x17566*x17569))+((x17568*x17570))+(((-1.0)*x17573*x17580))+(((-1.0)*r02*x17574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17582=((1.0)*cj9);
CheckValue<IkReal> x17583=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+(((-1.0)*cj4*r11*x17582))+((r00*sj4*sj9)))),-1);
if(!x17583.valid){
continue;
}
CheckValue<IkReal> x17584 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x17582)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x17584.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17583.value)))+(x17584.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17585=IKcos(j8);
IkReal x17586=IKsin(j8);
IkReal x17587=(r21*sj9);
IkReal x17588=(cj9*r20);
IkReal x17589=((1.0)*x17586);
IkReal x17590=((1.0)*x17585);
IkReal x17591=(cj4*x17585);
IkReal x17592=(r12*sj4);
IkReal x17593=(r01*sj9);
IkReal x17594=(cj4*x17586);
IkReal x17595=(r11*sj4*sj9);
IkReal x17596=(cj9*r00);
IkReal x17597=((1.0)*cj4*x17586);
IkReal x17598=(cj9*r10*sj4);
IkReal x17599=(r02*sj4);
IkReal x17600=(r11*sj9);
IkReal x17601=(cj9*r00*sj4);
IkReal x17602=(cj9*r10);
IkReal x17603=((1.0)*cj4*x17585);
IkReal x17604=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x17588*x17589))+((x17586*x17587))+((r22*x17585)));
evalcond[1]=(((x17585*x17587))+(((-1.0)*x17588*x17590))+(((-1.0)*r22*x17589)));
evalcond[2]=(((x17593*x17594))+((x17586*x17595))+((x17585*x17592))+((r02*x17591))+(((-1.0)*x17589*x17598))+(((-1.0)*x17596*x17597)));
evalcond[3]=(((x17585*x17601))+((x17586*x17599))+(((-1.0)*r12*x17597))+(((-1.0)*x17590*x17604))+((x17591*x17600))+(((-1.0)*x17602*x17603)));
evalcond[4]=((1.0)+((x17586*x17601))+((x17594*x17600))+(((-1.0)*x17590*x17599))+(((-1.0)*x17589*x17604))+((r12*x17591))+(((-1.0)*x17597*x17602)));
evalcond[5]=((-1.0)+(((-1.0)*x17589*x17592))+(((-1.0)*x17596*x17603))+(((-1.0)*r02*x17597))+((x17585*x17595))+(((-1.0)*x17590*x17598))+((x17591*x17593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17605=(r01*((cj4*r21)));
IkReal x17606=(r11*((r21*sj4)));
IkReal x17607=cj9*cj9;
IkReal x17608=(r20*x17607);
IkReal x17609=((1.0)*cj9*sj9);
IkReal x17610=((1.0)*cj9*r20*sj9);
IkReal x17611=((1.0)*x17607);
CheckValue<IkReal> x17612 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*((cj9*r20))))+(((-1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x17612.valid){
continue;
}
CheckValue<IkReal> x17613=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r01*x17610))+x17605+x17606+((r10*sj4*x17608))+(((-1.0)*r10*r21*sj4*x17609))+(((-1.0)*x17606*x17611))+((r12*r22*sj4))+(((-1.0)*x17605*x17611))+((cj4*r02*r22))+(((-1.0)*r11*sj4*x17610))+((cj4*r00*x17608))+(((-1.0)*cj4*r00*r21*x17609)))),-1);
if(!x17613.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17612.value)+(((1.5707963267949)*(x17613.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17614=IKcos(j8);
IkReal x17615=IKsin(j8);
IkReal x17616=(r21*sj9);
IkReal x17617=(cj9*r20);
IkReal x17618=((1.0)*x17615);
IkReal x17619=((1.0)*x17614);
IkReal x17620=((-1.0)*(((1.0)*sj6)));
IkReal x17621=(cj4*x17614);
IkReal x17622=(r12*sj4);
IkReal x17623=(r01*sj9);
IkReal x17624=(cj4*x17615);
IkReal x17625=(r11*sj4*sj9);
IkReal x17626=(cj9*r00);
IkReal x17627=((1.0)*cj4*x17615);
IkReal x17628=(cj9*r10*sj4);
IkReal x17629=((1.0)*cj4*x17614);
IkReal x17630=(r02*sj4);
IkReal x17631=(r11*sj9);
IkReal x17632=(cj9*r00*sj4);
IkReal x17633=(cj9*r10);
IkReal x17634=(r01*sj4*sj9);
evalcond[0]=(((r22*x17614))+(((-1.0)*x17617*x17618))+((x17615*x17616)));
evalcond[1]=((((-1.0)*r22*x17618))+((x17614*x17616))+(((-1.0)*x17617*x17619)));
evalcond[2]=(((r02*x17621))+((x17623*x17624))+(((-1.0)*x17626*x17627))+x17620+(((-1.0)*x17618*x17628))+((x17614*x17622))+((x17615*x17625)));
evalcond[3]=(cj6+(((-1.0)*x17618*x17622))+(((-1.0)*x17626*x17629))+((x17621*x17623))+(((-1.0)*r02*x17627))+((x17614*x17625))+(((-1.0)*x17619*x17628)));
evalcond[4]=(((x17624*x17631))+(((-1.0)*x17618*x17634))+(((-1.0)*x17619*x17630))+((x17615*x17632))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x17627*x17633))+((r12*x17621)));
evalcond[5]=(((x17621*x17631))+((x17615*x17630))+((x17614*x17632))+(((-1.0)*r12*x17627))+(((-1.0)*x17629*x17633))+x17620+(((-1.0)*x17619*x17634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17635=((1.0)*cj4);
CheckValue<IkReal> x17636 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x17636.valid){
continue;
}
CheckValue<IkReal> x17637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9*x17635))+(((-1.0)*cj9*r11*x17635))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x17637.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17636.value)+(((1.5707963267949)*(x17637.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17638=IKcos(j8);
IkReal x17639=IKsin(j8);
IkReal x17640=(r21*sj9);
IkReal x17641=(cj9*r20);
IkReal x17642=((1.0)*x17639);
IkReal x17643=((1.0)*x17638);
IkReal x17644=((-1.0)*(((1.0)*sj6)));
IkReal x17645=(cj4*x17638);
IkReal x17646=(r12*sj4);
IkReal x17647=(r01*sj9);
IkReal x17648=(cj4*x17639);
IkReal x17649=(r11*sj4*sj9);
IkReal x17650=(cj9*r00);
IkReal x17651=((1.0)*cj4*x17639);
IkReal x17652=(cj9*r10*sj4);
IkReal x17653=((1.0)*cj4*x17638);
IkReal x17654=(r02*sj4);
IkReal x17655=(r11*sj9);
IkReal x17656=(cj9*r00*sj4);
IkReal x17657=(cj9*r10);
IkReal x17658=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x17641*x17642))+((x17639*x17640))+((r22*x17638)));
evalcond[1]=((((-1.0)*x17641*x17643))+(((-1.0)*r22*x17642))+((x17638*x17640)));
evalcond[2]=(((r02*x17645))+((x17647*x17648))+((x17638*x17646))+x17644+(((-1.0)*x17650*x17651))+((x17639*x17649))+(((-1.0)*x17642*x17652)));
evalcond[3]=((((-1.0)*r02*x17651))+((x17645*x17647))+((x17638*x17649))+(((-1.0)*x17650*x17653))+(((-1.0)*x17642*x17646))+cj6+(((-1.0)*x17643*x17652)));
evalcond[4]=(((r12*x17645))+((x17639*x17656))+(((-1.0)*x17643*x17654))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x17642*x17658))+((x17648*x17655))+(((-1.0)*x17651*x17657)));
evalcond[5]=((((-1.0)*x17653*x17657))+(((-1.0)*r12*x17651))+(((-1.0)*x17643*x17658))+x17644+((x17639*x17654))+((x17638*x17656))+((x17645*x17655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x17659 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x17659.valid){
continue;
}
CheckValue<IkReal> x17660=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x17660.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17659.value)+(((1.5707963267949)*(x17660.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17661=IKcos(j8);
IkReal x17662=IKsin(j8);
IkReal x17663=(r21*sj9);
IkReal x17664=(cj9*r20);
IkReal x17665=((1.0)*x17662);
IkReal x17666=((1.0)*x17661);
IkReal x17667=((-1.0)*(((1.0)*sj6)));
IkReal x17668=(cj4*x17661);
IkReal x17669=(r12*sj4);
IkReal x17670=(r01*sj9);
IkReal x17671=(cj4*x17662);
IkReal x17672=(r11*sj4*sj9);
IkReal x17673=(cj9*r00);
IkReal x17674=((1.0)*cj4*x17662);
IkReal x17675=(cj9*r10*sj4);
IkReal x17676=((1.0)*cj4*x17661);
IkReal x17677=(r02*sj4);
IkReal x17678=(r11*sj9);
IkReal x17679=(cj9*r00*sj4);
IkReal x17680=(cj9*r10);
IkReal x17681=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x17664*x17665))+((r22*x17661))+((x17662*x17663)));
evalcond[1]=((((-1.0)*r22*x17665))+((x17661*x17663))+(((-1.0)*x17664*x17666)));
evalcond[2]=(x17667+((x17661*x17669))+((r02*x17668))+((x17670*x17671))+((x17662*x17672))+(((-1.0)*x17673*x17674))+(((-1.0)*x17665*x17675)));
evalcond[3]=((((-1.0)*r02*x17674))+((x17668*x17670))+((x17661*x17672))+cj6+(((-1.0)*x17666*x17675))+(((-1.0)*x17673*x17676))+(((-1.0)*x17665*x17669)));
evalcond[4]=(((r12*x17668))+(((-1.0)*x17674*x17680))+(((-1.0)*(1.0)*cj6))+(((-1.0)*x17666*x17677))+((x17671*x17678))+((x17662*x17679))+(((-1.0)*x17665*x17681)));
evalcond[5]=(x17667+(((-1.0)*x17666*x17681))+((x17662*x17677))+(((-1.0)*x17676*x17680))+((x17661*x17679))+(((-1.0)*r12*x17674))+((x17668*x17678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17682=(cj9*r21);
IkReal x17683=(r20*sj9);
IkReal x17684=((1.0)*cj4);
IkReal x17685=(cj9*r01);
IkReal x17686=(r00*sj9);
IkReal x17687=((1.0)*sj4);
IkReal x17688=(cj9*r11);
IkReal x17689=(r10*sj9);
IkReal x17690=(sj4*x17685);
IkReal x17691=(sj4*x17686);
IkReal x17692=((0.03431)*cj4);
IkReal x17693=((0.03431)*sj4);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*x17682))+(((-1.0)*x17683)));
evalcond[2]=((((-1.0)*x17687*x17688))+(((-1.0)*x17684*x17685))+(((-1.0)*x17684*x17686))+(((-1.0)*x17687*x17689)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x17682))+(((0.03431)*x17683)));
evalcond[4]=((((-1.0)*x17684*x17689))+x17691+x17690+(((-1.0)*x17684*x17688)));
evalcond[5]=((0.00337)+(((0.00036)*cj6))+((x17685*x17692))+((x17688*x17693))+((x17689*x17693))+((x17686*x17692))+(((-1.0)*py*x17687))+(((-1.0)*px*x17684)));
evalcond[6]=(((x17689*x17692))+((px*sj4))+(((-0.03431)*x17691))+(((-1.0)*(0.00036)*sj6))+((x17688*x17692))+(((-0.03431)*x17690))+(((-1.0)*py*x17684)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x17694=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x17694;
j8eval[1]=IKsign(x17694);
j8eval[2]=((IKabs((((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9)))))+(IKabs((cj6*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x17695=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x17695;
j8eval[1]=IKsign(x17695);
j8eval[2]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x17696=((1.0)*cj4);
IkReal x17697=(((cj9*r01*sj4))+(((-1.0)*r10*sj9*x17696))+(((-1.0)*cj9*r11*x17696))+((r00*sj4*sj9)));
j8eval[0]=x17697;
j8eval[1]=((IKabs((r22*sj6)))+(IKabs(((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))))));
j8eval[2]=IKsign(x17697);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x17698=(cj9*r21);
IkReal x17699=(r20*sj9);
IkReal x17700=((1.0)*cj4);
IkReal x17701=(cj9*r01);
IkReal x17702=(r00*sj9);
IkReal x17703=((1.0)*sj4);
IkReal x17704=(cj9*r11);
IkReal x17705=(r10*sj9);
IkReal x17706=(sj4*x17701);
IkReal x17707=(sj4*x17702);
IkReal x17708=((0.03431)*cj4);
IkReal x17709=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x17699))+(((-1.0)*x17698)));
evalcond[2]=((((-1.0)*x17703*x17704))+(((-1.0)*x17700*x17702))+(((-1.0)*x17700*x17701))+(((-1.0)*x17703*x17705)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x17698))+(((0.03431)*x17699)));
evalcond[4]=((((-1.0)*x17700*x17704))+x17706+x17707+(((-1.0)*x17700*x17705)));
evalcond[5]=((0.00373)+((x17705*x17709))+(((-1.0)*py*x17703))+((x17702*x17708))+(((-1.0)*px*x17700))+((x17704*x17709))+((x17701*x17708)));
evalcond[6]=(((px*sj4))+(((-0.03431)*x17707))+(((-1.0)*py*x17700))+((x17704*x17708))+((x17705*x17708))+(((-0.03431)*x17706)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x17710=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x17710;
j8eval[1]=IKsign(x17710);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x17711=((1.0)*cj9);
IkReal x17712=((((-1.0)*cj4*r11*x17711))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)));
j8eval[0]=x17712;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x17711)))))+(IKabs(r22)));
j8eval[2]=IKsign(x17712);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=1.0;
j6=0;
IkReal x17713=((1.0)*r21);
IkReal x17714=(cj4*r01);
IkReal x17715=((1.0)*r22);
IkReal x17716=(r11*sj4);
IkReal x17717=(cj4*r00);
IkReal x17718=(cj9*r21*sj9);
IkReal x17719=(cj9*r20*sj9);
IkReal x17720=(r10*sj4);
IkReal x17721=cj9*cj9;
IkReal x17722=(r21*x17721);
IkReal x17723=((1.0)*r20*x17721);
IkReal x17724=((((-1.0)*x17717*x17723))+(((-1.0)*x17720*x17723))+(((-1.0)*r12*sj4*x17715))+((x17716*x17722))+(((-1.0)*cj4*r02*x17715))+((x17717*x17718))+((x17716*x17719))+((x17718*x17720))+((x17714*x17719))+(((-1.0)*x17713*x17716))+((x17714*x17722))+(((-1.0)*x17713*x17714)));
j8eval[0]=x17724;
j8eval[1]=((IKabs((((cj9*r20))+(((-1.0)*sj9*x17713)))))+(IKabs(r22)));
j8eval[2]=IKsign(x17724);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17725=((1.0)*r21);
IkReal x17726=(cj4*r01);
IkReal x17727=((1.0)*r22);
IkReal x17728=(r11*sj4);
IkReal x17729=(cj4*r00);
IkReal x17730=(cj9*r21*sj9);
IkReal x17731=(cj9*r20*sj9);
IkReal x17732=(r10*sj4);
IkReal x17733=cj9*cj9;
IkReal x17734=(r21*x17733);
IkReal x17735=((1.0)*r20*x17733);
CheckValue<IkReal> x17736=IKPowWithIntegerCheck(IKsign((((x17726*x17734))+((x17730*x17732))+((x17728*x17734))+(((-1.0)*x17729*x17735))+(((-1.0)*x17732*x17735))+(((-1.0)*x17725*x17728))+((x17726*x17731))+(((-1.0)*r12*sj4*x17727))+(((-1.0)*x17725*x17726))+(((-1.0)*cj4*r02*x17727))+((x17728*x17731))+((x17729*x17730)))),-1);
if(!x17736.valid){
continue;
}
CheckValue<IkReal> x17737 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x17725))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x17737.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17736.value)))+(x17737.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17738=IKcos(j8);
IkReal x17739=IKsin(j8);
IkReal x17740=(r21*sj9);
IkReal x17741=(cj9*r20);
IkReal x17742=((1.0)*x17739);
IkReal x17743=((1.0)*x17738);
IkReal x17744=(cj4*x17738);
IkReal x17745=(r12*sj4);
IkReal x17746=(r01*sj9);
IkReal x17747=(cj4*x17739);
IkReal x17748=(r11*sj4*sj9);
IkReal x17749=(cj9*r00);
IkReal x17750=((1.0)*cj4*x17739);
IkReal x17751=(cj9*r10*sj4);
IkReal x17752=(r02*sj4);
IkReal x17753=(r11*sj9);
IkReal x17754=(cj9*r00*sj4);
IkReal x17755=(cj9*r10);
IkReal x17756=((1.0)*cj4*x17738);
IkReal x17757=(r01*sj4*sj9);
evalcond[0]=(((r22*x17738))+((x17739*x17740))+(((-1.0)*x17741*x17742)));
evalcond[1]=((((-1.0)*x17741*x17743))+(((-1.0)*r22*x17742))+((x17738*x17740)));
evalcond[2]=(((x17739*x17748))+(((-1.0)*x17742*x17751))+((r02*x17744))+((x17738*x17745))+(((-1.0)*x17749*x17750))+((x17746*x17747)));
evalcond[3]=(((x17739*x17752))+(((-1.0)*x17743*x17757))+((x17738*x17754))+((x17744*x17753))+(((-1.0)*x17755*x17756))+(((-1.0)*r12*x17750)));
evalcond[4]=((-1.0)+((x17739*x17754))+(((-1.0)*x17742*x17757))+((r12*x17744))+(((-1.0)*x17743*x17752))+((x17747*x17753))+(((-1.0)*x17750*x17755)));
evalcond[5]=((-1.0)+(((-1.0)*x17743*x17751))+(((-1.0)*x17749*x17756))+((x17738*x17748))+((x17744*x17746))+(((-1.0)*x17742*x17745))+(((-1.0)*r02*x17750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17758=((1.0)*cj9);
CheckValue<IkReal> x17759=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r11*x17758))+(((-1.0)*(1.0)*cj4*r10*sj9))+((cj9*r01*sj4))+((r00*sj4*sj9)))),-1);
if(!x17759.valid){
continue;
}
CheckValue<IkReal> x17760 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x17758)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x17760.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17759.value)))+(x17760.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17761=IKcos(j8);
IkReal x17762=IKsin(j8);
IkReal x17763=(r21*sj9);
IkReal x17764=(cj9*r20);
IkReal x17765=((1.0)*x17762);
IkReal x17766=((1.0)*x17761);
IkReal x17767=(cj4*x17761);
IkReal x17768=(r12*sj4);
IkReal x17769=(r01*sj9);
IkReal x17770=(cj4*x17762);
IkReal x17771=(r11*sj4*sj9);
IkReal x17772=(cj9*r00);
IkReal x17773=((1.0)*cj4*x17762);
IkReal x17774=(cj9*r10*sj4);
IkReal x17775=(r02*sj4);
IkReal x17776=(r11*sj9);
IkReal x17777=(cj9*r00*sj4);
IkReal x17778=(cj9*r10);
IkReal x17779=((1.0)*cj4*x17761);
IkReal x17780=(r01*sj4*sj9);
evalcond[0]=(((r22*x17761))+((x17762*x17763))+(((-1.0)*x17764*x17765)));
evalcond[1]=((((-1.0)*r22*x17765))+((x17761*x17763))+(((-1.0)*x17764*x17766)));
evalcond[2]=((((-1.0)*x17772*x17773))+((x17761*x17768))+((r02*x17767))+((x17769*x17770))+((x17762*x17771))+(((-1.0)*x17765*x17774)));
evalcond[3]=((((-1.0)*x17778*x17779))+(((-1.0)*r12*x17773))+((x17762*x17775))+((x17767*x17776))+((x17761*x17777))+(((-1.0)*x17766*x17780)));
evalcond[4]=((-1.0)+((r12*x17767))+(((-1.0)*x17773*x17778))+(((-1.0)*x17765*x17780))+(((-1.0)*x17766*x17775))+((x17762*x17777))+((x17770*x17776)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x17773))+((x17761*x17771))+(((-1.0)*x17766*x17774))+((x17767*x17769))+(((-1.0)*x17765*x17768))+(((-1.0)*x17772*x17779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x17781=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x17781.valid){
continue;
}
CheckValue<IkReal> x17782 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x17782.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17781.value)))+(x17782.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17783=IKcos(j8);
IkReal x17784=IKsin(j8);
IkReal x17785=(r21*sj9);
IkReal x17786=(cj9*r20);
IkReal x17787=((1.0)*x17784);
IkReal x17788=((1.0)*x17783);
IkReal x17789=(cj4*x17783);
IkReal x17790=(r12*sj4);
IkReal x17791=(r01*sj9);
IkReal x17792=(cj4*x17784);
IkReal x17793=(r11*sj4*sj9);
IkReal x17794=(cj9*r00);
IkReal x17795=((1.0)*cj4*x17784);
IkReal x17796=(cj9*r10*sj4);
IkReal x17797=(r02*sj4);
IkReal x17798=(r11*sj9);
IkReal x17799=(cj9*r00*sj4);
IkReal x17800=(cj9*r10);
IkReal x17801=((1.0)*cj4*x17783);
IkReal x17802=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x17786*x17787))+((x17784*x17785))+((r22*x17783)));
evalcond[1]=((((-1.0)*r22*x17787))+(((-1.0)*x17786*x17788))+((x17783*x17785)));
evalcond[2]=(((x17791*x17792))+((r02*x17789))+((x17783*x17790))+(((-1.0)*x17787*x17796))+((x17784*x17793))+(((-1.0)*x17794*x17795)));
evalcond[3]=((((-1.0)*x17788*x17802))+(((-1.0)*x17800*x17801))+((x17783*x17799))+((x17789*x17798))+(((-1.0)*r12*x17795))+((x17784*x17797)));
evalcond[4]=((-1.0)+((r12*x17789))+((x17792*x17798))+(((-1.0)*x17795*x17800))+((x17784*x17799))+(((-1.0)*x17788*x17797))+(((-1.0)*x17787*x17802)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x17795))+(((-1.0)*x17787*x17790))+((x17789*x17791))+(((-1.0)*x17788*x17796))+((x17783*x17793))+(((-1.0)*x17794*x17801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17803=(cj9*r21);
IkReal x17804=(r20*sj9);
IkReal x17805=((1.0)*cj4);
IkReal x17806=(cj9*r01);
IkReal x17807=(r00*sj9);
IkReal x17808=((1.0)*sj4);
IkReal x17809=(cj9*r11);
IkReal x17810=(r10*sj9);
IkReal x17811=(sj4*x17806);
IkReal x17812=(sj4*x17807);
IkReal x17813=((0.03431)*cj4);
IkReal x17814=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x17804))+(((-1.0)*x17803)));
evalcond[2]=((((-1.0)*x17805*x17807))+(((-1.0)*x17808*x17810))+(((-1.0)*x17805*x17806))+(((-1.0)*x17808*x17809)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x17804))+(((0.03431)*x17803)));
evalcond[4]=((((-1.0)*x17805*x17809))+(((-1.0)*x17805*x17810))+x17811+x17812);
evalcond[5]=((0.00301)+((x17810*x17814))+((x17809*x17814))+((x17806*x17813))+((x17807*x17813))+(((-1.0)*px*x17805))+(((-1.0)*py*x17808)));
evalcond[6]=(((px*sj4))+((x17810*x17813))+(((-1.0)*py*x17805))+(((-0.03431)*x17812))+(((-0.03431)*x17811))+((x17809*x17813)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x17815=((1.0)*cj9);
IkReal x17816=((1.0)*sj9);
IkReal x17817=((((-1.0)*r11*sj4*x17815))+(((-1.0)*r10*sj4*x17816))+(((-1.0)*cj4*r01*x17815))+(((-1.0)*cj4*r00*x17816)));
j8eval[0]=x17817;
j8eval[1]=((IKabs(((((-1.0)*r21*x17816))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x17817);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x17818=((1.0)*sj9);
IkReal x17819=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x17818))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x17819;
j8eval[1]=IKsign(x17819);
j8eval[2]=((IKabs(((((-1.0)*r21*x17818))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x17820=(cj4*r01);
IkReal x17821=(r21*x17820);
IkReal x17822=(r11*sj4);
IkReal x17823=(r21*x17822);
IkReal x17824=(cj4*r00);
IkReal x17825=cj9*cj9;
IkReal x17826=(r20*x17825);
IkReal x17827=(r10*sj4);
IkReal x17828=((1.0)*cj9*r21*sj9);
IkReal x17829=((1.0)*cj9*r20*sj9);
IkReal x17830=((1.0)*x17825);
IkReal x17831=((((-1.0)*x17822*x17829))+(((-1.0)*x17824*x17828))+((x17826*x17827))+x17823+x17821+(((-1.0)*x17827*x17828))+(((-1.0)*x17823*x17830))+((r12*r22*sj4))+((cj4*r02*r22))+(((-1.0)*x17820*x17829))+((x17824*x17826))+(((-1.0)*x17821*x17830)));
j8eval[0]=x17831;
j8eval[1]=IKsign(x17831);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17832=(cj4*r01);
IkReal x17833=(r21*x17832);
IkReal x17834=(r11*sj4);
IkReal x17835=(r21*x17834);
IkReal x17836=(cj4*r00);
IkReal x17837=cj9*cj9;
IkReal x17838=(r20*x17837);
IkReal x17839=(r10*sj4);
IkReal x17840=((1.0)*cj9*r21*sj9);
IkReal x17841=((1.0)*cj9*r20*sj9);
IkReal x17842=((1.0)*x17837);
CheckValue<IkReal> x17843=IKPowWithIntegerCheck(IKsign(((((-1.0)*x17836*x17840))+(((-1.0)*x17839*x17840))+((x17838*x17839))+x17835+x17833+(((-1.0)*x17832*x17841))+((x17836*x17838))+(((-1.0)*x17834*x17841))+((r12*r22*sj4))+((cj4*r02*r22))+(((-1.0)*x17835*x17842))+(((-1.0)*x17833*x17842)))),-1);
if(!x17843.valid){
continue;
}
CheckValue<IkReal> x17844 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*(1.0)*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x17844.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17843.value)))+(x17844.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17845=IKcos(j8);
IkReal x17846=IKsin(j8);
IkReal x17847=(r21*sj9);
IkReal x17848=(cj9*r20);
IkReal x17849=((1.0)*x17846);
IkReal x17850=((1.0)*x17845);
IkReal x17851=(cj4*x17845);
IkReal x17852=(r12*sj4);
IkReal x17853=(r01*sj9);
IkReal x17854=(cj4*x17846);
IkReal x17855=(r11*sj4*sj9);
IkReal x17856=(cj9*r00);
IkReal x17857=((1.0)*cj4*x17846);
IkReal x17858=(cj9*r10*sj4);
IkReal x17859=(r02*sj4);
IkReal x17860=(r11*sj9);
IkReal x17861=(cj9*r00*sj4);
IkReal x17862=(cj9*r10);
IkReal x17863=((1.0)*cj4*x17845);
IkReal x17864=(r01*sj4*sj9);
evalcond[0]=(((x17846*x17847))+((r22*x17845))+(((-1.0)*x17848*x17849)));
evalcond[1]=(((x17845*x17847))+(((-1.0)*r22*x17849))+(((-1.0)*x17848*x17850)));
evalcond[2]=(((x17845*x17852))+((x17846*x17855))+((r02*x17851))+(((-1.0)*x17856*x17857))+(((-1.0)*x17849*x17858))+((x17853*x17854)));
evalcond[3]=(((x17846*x17859))+((x17845*x17861))+(((-1.0)*x17850*x17864))+(((-1.0)*x17862*x17863))+((x17851*x17860))+(((-1.0)*r12*x17857)));
evalcond[4]=((1.0)+((x17846*x17861))+(((-1.0)*x17849*x17864))+(((-1.0)*x17857*x17862))+((r12*x17851))+(((-1.0)*x17850*x17859))+((x17854*x17860)));
evalcond[5]=((1.0)+(((-1.0)*x17849*x17852))+(((-1.0)*r02*x17857))+((x17845*x17855))+(((-1.0)*x17856*x17863))+(((-1.0)*x17850*x17858))+((x17851*x17853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17865=((1.0)*sj9);
CheckValue<IkReal> x17866 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*r21*x17865)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x17866.valid){
continue;
}
CheckValue<IkReal> x17867=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x17865))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x17867.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17866.value)+(((1.5707963267949)*(x17867.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17868=IKcos(j8);
IkReal x17869=IKsin(j8);
IkReal x17870=(r21*sj9);
IkReal x17871=(cj9*r20);
IkReal x17872=((1.0)*x17869);
IkReal x17873=((1.0)*x17868);
IkReal x17874=(cj4*x17868);
IkReal x17875=(r12*sj4);
IkReal x17876=(r01*sj9);
IkReal x17877=(cj4*x17869);
IkReal x17878=(r11*sj4*sj9);
IkReal x17879=(cj9*r00);
IkReal x17880=((1.0)*cj4*x17869);
IkReal x17881=(cj9*r10*sj4);
IkReal x17882=(r02*sj4);
IkReal x17883=(r11*sj9);
IkReal x17884=(cj9*r00*sj4);
IkReal x17885=(cj9*r10);
IkReal x17886=((1.0)*cj4*x17868);
IkReal x17887=(r01*sj4*sj9);
evalcond[0]=((((-1.0)*x17871*x17872))+((r22*x17868))+((x17869*x17870)));
evalcond[1]=((((-1.0)*x17871*x17873))+((x17868*x17870))+(((-1.0)*r22*x17872)));
evalcond[2]=(((x17869*x17878))+((r02*x17874))+(((-1.0)*x17879*x17880))+((x17868*x17875))+((x17876*x17877))+(((-1.0)*x17872*x17881)));
evalcond[3]=((((-1.0)*x17885*x17886))+((x17874*x17883))+((x17869*x17882))+(((-1.0)*x17873*x17887))+((x17868*x17884))+(((-1.0)*r12*x17880)));
evalcond[4]=((1.0)+((r12*x17874))+((x17877*x17883))+(((-1.0)*x17880*x17885))+(((-1.0)*x17873*x17882))+(((-1.0)*x17872*x17887))+((x17869*x17884)));
evalcond[5]=((1.0)+(((-1.0)*r02*x17880))+((x17868*x17878))+(((-1.0)*x17873*x17881))+((x17874*x17876))+(((-1.0)*x17872*x17875))+(((-1.0)*x17879*x17886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17888=((1.0)*sj9);
IkReal x17889=((1.0)*cj9);
CheckValue<IkReal> x17890 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x17888))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x17890.valid){
continue;
}
CheckValue<IkReal> x17891=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x17888))+(((-1.0)*cj4*r00*x17888))+(((-1.0)*cj4*r01*x17889))+(((-1.0)*r11*sj4*x17889)))),-1);
if(!x17891.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17890.value)+(((1.5707963267949)*(x17891.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17892=IKcos(j8);
IkReal x17893=IKsin(j8);
IkReal x17894=(r21*sj9);
IkReal x17895=(cj9*r20);
IkReal x17896=((1.0)*x17893);
IkReal x17897=((1.0)*x17892);
IkReal x17898=(cj4*x17892);
IkReal x17899=(r12*sj4);
IkReal x17900=(r01*sj9);
IkReal x17901=(cj4*x17893);
IkReal x17902=(r11*sj4*sj9);
IkReal x17903=(cj9*r00);
IkReal x17904=((1.0)*cj4*x17893);
IkReal x17905=(cj9*r10*sj4);
IkReal x17906=(r02*sj4);
IkReal x17907=(r11*sj9);
IkReal x17908=(cj9*r00*sj4);
IkReal x17909=(cj9*r10);
IkReal x17910=((1.0)*cj4*x17892);
IkReal x17911=(r01*sj4*sj9);
evalcond[0]=(((x17893*x17894))+((r22*x17892))+(((-1.0)*x17895*x17896)));
evalcond[1]=((((-1.0)*x17895*x17897))+((x17892*x17894))+(((-1.0)*r22*x17896)));
evalcond[2]=((((-1.0)*x17896*x17905))+((x17900*x17901))+((r02*x17898))+((x17893*x17902))+((x17892*x17899))+(((-1.0)*x17903*x17904)));
evalcond[3]=(((x17893*x17906))+((x17898*x17907))+((x17892*x17908))+(((-1.0)*x17897*x17911))+(((-1.0)*r12*x17904))+(((-1.0)*x17909*x17910)));
evalcond[4]=((1.0)+((x17901*x17907))+((r12*x17898))+(((-1.0)*x17897*x17906))+((x17893*x17908))+(((-1.0)*x17896*x17911))+(((-1.0)*x17904*x17909)));
evalcond[5]=((1.0)+(((-1.0)*x17903*x17910))+(((-1.0)*r02*x17904))+(((-1.0)*x17896*x17899))+(((-1.0)*x17897*x17905))+((x17892*x17902))+((x17898*x17900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17912=(cj9*r21);
IkReal x17913=(r20*sj9);
IkReal x17914=((1.0)*cj4);
IkReal x17915=(cj9*r01);
IkReal x17916=(r00*sj9);
IkReal x17917=((1.0)*sj4);
IkReal x17918=(cj9*r11);
IkReal x17919=(r10*sj9);
IkReal x17920=(sj4*x17915);
IkReal x17921=(sj4*x17916);
IkReal x17922=((0.03431)*cj4);
IkReal x17923=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x17913))+(((-1.0)*x17912)));
evalcond[2]=((((-1.0)*x17914*x17915))+(((-1.0)*x17917*x17918))+(((-1.0)*x17917*x17919))+(((-1.0)*x17914*x17916)));
evalcond[3]=((-0.16132)+(((-1.0)*(1.0)*pz))+(((0.03431)*x17912))+(((0.03431)*x17913)));
evalcond[4]=(x17921+x17920+(((-1.0)*x17914*x17918))+(((-1.0)*x17914*x17919)));
evalcond[5]=((0.00337)+(((-1.0)*px*x17914))+((x17919*x17923))+((x17915*x17922))+((x17918*x17923))+(((-1.0)*py*x17917))+((x17916*x17922)));
evalcond[6]=((-0.00036)+((px*sj4))+(((-0.03431)*x17920))+(((-0.03431)*x17921))+((x17918*x17922))+((x17919*x17922))+(((-1.0)*py*x17914)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x17924=((1.0)*sj9);
IkReal x17925=(((cj9*r01*sj4))+(((-1.0)*cj4*r10*x17924))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)));
j8eval[0]=x17925;
j8eval[1]=((IKabs(((((-1.0)*r21*x17924))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x17925);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x17926=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x17926;
j8eval[1]=IKsign(x17926);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x17927=(cj4*r11);
IkReal x17928=((1.0)*r21);
IkReal x17929=(r01*sj4);
IkReal x17930=(cj9*r20*sj9);
IkReal x17931=(cj4*r10);
IkReal x17932=cj9*cj9;
IkReal x17933=(r20*x17932);
IkReal x17934=(((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*r00*sj4*x17933))+((r21*x17927))+(((-1.0)*r21*x17927*x17932))+(((-1.0)*r02*r22*sj4))+((x17931*x17933))+(((-1.0)*cj9*r21*sj9*x17931))+(((-1.0)*x17928*x17929))+((r21*x17929*x17932))+(((-1.0)*cj4*r11*x17930))+((x17929*x17930)));
j8eval[0]=x17934;
j8eval[1]=IKsign(x17934);
j8eval[2]=((IKabs(((((-1.0)*sj9*x17928))+((cj9*r20)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17935=((1.0)*r21);
IkReal x17936=(cj4*r11);
IkReal x17937=(r01*sj4);
IkReal x17938=(cj9*r20*sj9);
IkReal x17939=(cj4*r10);
IkReal x17940=cj9*cj9;
IkReal x17941=(r20*x17940);
CheckValue<IkReal> x17942=IKPowWithIntegerCheck(IKsign((((cj9*r00*r21*sj4*sj9))+((cj4*r12*r22))+(((-1.0)*r00*sj4*x17941))+((x17939*x17941))+(((-1.0)*x17935*x17937))+(((-1.0)*r02*r22*sj4))+((r21*x17936))+((x17937*x17938))+(((-1.0)*cj9*r21*sj9*x17939))+(((-1.0)*r21*x17936*x17940))+((r21*x17937*x17940))+(((-1.0)*cj4*r11*x17938)))),-1);
if(!x17942.valid){
continue;
}
CheckValue<IkReal> x17943 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x17935))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x17943.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17942.value)))+(x17943.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17944=IKcos(j8);
IkReal x17945=IKsin(j8);
IkReal x17946=(r21*sj9);
IkReal x17947=(cj9*r20);
IkReal x17948=((1.0)*x17945);
IkReal x17949=((1.0)*x17944);
IkReal x17950=(cj4*x17944);
IkReal x17951=(r12*sj4);
IkReal x17952=(r01*sj9);
IkReal x17953=(cj4*x17945);
IkReal x17954=(r11*sj4*sj9);
IkReal x17955=(cj9*r00);
IkReal x17956=((1.0)*cj4*x17945);
IkReal x17957=(cj9*r10*sj4);
IkReal x17958=(r02*sj4);
IkReal x17959=(r11*sj9);
IkReal x17960=(cj9*r00*sj4);
IkReal x17961=(cj9*r10);
IkReal x17962=(r01*sj4*sj9);
IkReal x17963=((1.0)*cj4*x17944);
evalcond[0]=((((-1.0)*x17947*x17948))+((r22*x17944))+((x17945*x17946)));
evalcond[1]=(((x17944*x17946))+(((-1.0)*x17947*x17949))+(((-1.0)*r22*x17948)));
evalcond[2]=((-1.0)+((x17944*x17951))+(((-1.0)*x17948*x17957))+(((-1.0)*x17955*x17956))+((x17952*x17953))+((x17945*x17954))+((r02*x17950)));
evalcond[3]=(((r12*x17950))+(((-1.0)*x17956*x17961))+(((-1.0)*x17948*x17962))+(((-1.0)*x17949*x17958))+((x17953*x17959))+((x17945*x17960)));
evalcond[4]=((((-1.0)*r02*x17956))+(((-1.0)*x17948*x17951))+(((-1.0)*x17955*x17963))+((x17944*x17954))+((x17950*x17952))+(((-1.0)*x17949*x17957)));
evalcond[5]=((1.0)+((x17950*x17959))+((x17944*x17960))+(((-1.0)*r12*x17956))+((x17945*x17958))+(((-1.0)*x17961*x17963))+(((-1.0)*x17949*x17962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x17964 = IKatan2WithCheck(IkReal((((cj9*r20))+(((-1.0)*(1.0)*r21*sj9)))),((-1.0)*(((1.0)*r22))),IKFAST_ATAN2_MAGTHRESH);
if(!x17964.valid){
continue;
}
CheckValue<IkReal> x17965=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x17965.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x17964.value)+(((1.5707963267949)*(x17965.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17966=IKcos(j8);
IkReal x17967=IKsin(j8);
IkReal x17968=(r21*sj9);
IkReal x17969=(cj9*r20);
IkReal x17970=((1.0)*x17967);
IkReal x17971=((1.0)*x17966);
IkReal x17972=(cj4*x17966);
IkReal x17973=(r12*sj4);
IkReal x17974=(r01*sj9);
IkReal x17975=(cj4*x17967);
IkReal x17976=(r11*sj4*sj9);
IkReal x17977=(cj9*r00);
IkReal x17978=((1.0)*cj4*x17967);
IkReal x17979=(cj9*r10*sj4);
IkReal x17980=(r02*sj4);
IkReal x17981=(r11*sj9);
IkReal x17982=(cj9*r00*sj4);
IkReal x17983=(cj9*r10);
IkReal x17984=(r01*sj4*sj9);
IkReal x17985=((1.0)*cj4*x17966);
evalcond[0]=(((r22*x17966))+(((-1.0)*x17969*x17970))+((x17967*x17968)));
evalcond[1]=((((-1.0)*r22*x17970))+(((-1.0)*x17969*x17971))+((x17966*x17968)));
evalcond[2]=((-1.0)+((x17966*x17973))+(((-1.0)*x17977*x17978))+(((-1.0)*x17970*x17979))+((r02*x17972))+((x17974*x17975))+((x17967*x17976)));
evalcond[3]=((((-1.0)*x17978*x17983))+((x17975*x17981))+((r12*x17972))+(((-1.0)*x17970*x17984))+(((-1.0)*x17971*x17980))+((x17967*x17982)));
evalcond[4]=((((-1.0)*x17970*x17973))+(((-1.0)*x17971*x17979))+((x17972*x17974))+((x17966*x17976))+(((-1.0)*x17977*x17985))+(((-1.0)*r02*x17978)));
evalcond[5]=((1.0)+((x17972*x17981))+(((-1.0)*x17971*x17984))+((x17966*x17982))+(((-1.0)*r12*x17978))+(((-1.0)*x17983*x17985))+((x17967*x17980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x17986=((1.0)*sj9);
CheckValue<IkReal> x17987=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*cj4*r10*x17986))+(((-1.0)*(1.0)*cj4*cj9*r11))+((r00*sj4*sj9)))),-1);
if(!x17987.valid){
continue;
}
CheckValue<IkReal> x17988 = IKatan2WithCheck(IkReal(r22),(((cj9*r20))+(((-1.0)*r21*x17986))),IKFAST_ATAN2_MAGTHRESH);
if(!x17988.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17987.value)))+(x17988.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x17989=IKcos(j8);
IkReal x17990=IKsin(j8);
IkReal x17991=(r21*sj9);
IkReal x17992=(cj9*r20);
IkReal x17993=((1.0)*x17990);
IkReal x17994=((1.0)*x17989);
IkReal x17995=(cj4*x17989);
IkReal x17996=(r12*sj4);
IkReal x17997=(r01*sj9);
IkReal x17998=(cj4*x17990);
IkReal x17999=(r11*sj4*sj9);
IkReal x18000=(cj9*r00);
IkReal x18001=((1.0)*cj4*x17990);
IkReal x18002=(cj9*r10*sj4);
IkReal x18003=(r02*sj4);
IkReal x18004=(r11*sj9);
IkReal x18005=(cj9*r00*sj4);
IkReal x18006=(cj9*r10);
IkReal x18007=(r01*sj4*sj9);
IkReal x18008=((1.0)*cj4*x17989);
evalcond[0]=(((r22*x17989))+(((-1.0)*x17992*x17993))+((x17990*x17991)));
evalcond[1]=((((-1.0)*r22*x17993))+((x17989*x17991))+(((-1.0)*x17992*x17994)));
evalcond[2]=((-1.0)+(((-1.0)*x18000*x18001))+((x17990*x17999))+(((-1.0)*x17993*x18002))+((r02*x17995))+((x17997*x17998))+((x17989*x17996)));
evalcond[3]=(((x17990*x18005))+(((-1.0)*x17993*x18007))+((r12*x17995))+(((-1.0)*x18001*x18006))+((x17998*x18004))+(((-1.0)*x17994*x18003)));
evalcond[4]=(((x17989*x17999))+(((-1.0)*x18000*x18008))+(((-1.0)*x17993*x17996))+((x17995*x17997))+(((-1.0)*x17994*x18002))+(((-1.0)*r02*x18001)));
evalcond[5]=((1.0)+((x17989*x18005))+(((-1.0)*r12*x18001))+((x17995*x18004))+(((-1.0)*x17994*x18007))+((x17990*x18003))+(((-1.0)*x18006*x18008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x18009=(cj9*r21);
IkReal x18010=(r20*sj9);
IkReal x18011=((1.0)*cj4);
IkReal x18012=(cj9*r01);
IkReal x18013=(r00*sj9);
IkReal x18014=((1.0)*sj4);
IkReal x18015=(cj9*r11);
IkReal x18016=(r10*sj9);
IkReal x18017=(sj4*x18012);
IkReal x18018=(sj4*x18013);
IkReal x18019=((0.03431)*cj4);
IkReal x18020=((0.03431)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*x18010))+(((-1.0)*x18009)));
evalcond[2]=((((-1.0)*x18011*x18012))+(((-1.0)*x18014*x18015))+(((-1.0)*x18011*x18013))+(((-1.0)*x18014*x18016)));
evalcond[3]=((-0.16132)+(((0.03431)*x18010))+(((-1.0)*(1.0)*pz))+(((0.03431)*x18009)));
evalcond[4]=((((-1.0)*x18011*x18016))+(((-1.0)*x18011*x18015))+x18018+x18017);
evalcond[5]=((0.00337)+((x18013*x18019))+(((-1.0)*px*x18011))+((x18015*x18020))+(((-1.0)*py*x18014))+((x18012*x18019))+((x18016*x18020)));
evalcond[6]=((0.00036)+(((-0.03431)*x18017))+((px*sj4))+(((-0.03431)*x18018))+(((-1.0)*py*x18011))+((x18015*x18019))+((x18016*x18019)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x18021=(((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)));
j8eval[0]=x18021;
j8eval[1]=IKsign(x18021);
j8eval[2]=((IKabs(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x18022=((1.0)*sj9);
IkReal x18023=(((cj4*cj9*r11))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*x18022)));
j8eval[0]=x18023;
j8eval[1]=((IKabs(((((-1.0)*r21*x18022))+((cj9*r20)))))+(IKabs(r22)));
j8eval[2]=IKsign(x18023);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x18024=(r01*sj4);
IkReal x18025=((1.0)*r21);
IkReal x18026=(cj4*r11);
IkReal x18027=(cj9*r20*sj9);
IkReal x18028=cj9*cj9;
IkReal x18029=(r00*sj4);
IkReal x18030=(r20*x18028);
IkReal x18031=((((-1.0)*r01*sj4*x18027))+((r21*x18026*x18028))+((x18029*x18030))+((x18026*x18027))+(((-1.0)*r21*x18024*x18028))+(((-1.0)*cj4*r10*x18030))+((r21*x18024))+((r02*r22*sj4))+(((-1.0)*cj4*r12*r22))+(((-1.0)*cj9*r21*sj9*x18029))+((cj4*cj9*r10*r21*sj9))+(((-1.0)*x18025*x18026)));
j8eval[0]=x18031;
j8eval[1]=IKsign(x18031);
j8eval[2]=((IKabs((((cj9*r20))+(((-1.0)*sj9*x18025)))))+(IKabs(r22)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x18032=((1.0)*r21);
IkReal x18033=(r01*sj4);
IkReal x18034=(cj4*r11);
IkReal x18035=(cj9*r20*sj9);
IkReal x18036=cj9*cj9;
IkReal x18037=(r00*sj4);
IkReal x18038=(r20*x18036);
CheckValue<IkReal> x18039 = IKatan2WithCheck(IkReal(r22),((((-1.0)*sj9*x18032))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x18039.valid){
continue;
}
CheckValue<IkReal> x18040=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x18033*x18036))+(((-1.0)*r01*sj4*x18035))+((r21*x18034*x18036))+((r21*x18033))+((x18037*x18038))+((r02*r22*sj4))+(((-1.0)*x18032*x18034))+(((-1.0)*cj9*r21*sj9*x18037))+((x18034*x18035))+(((-1.0)*cj4*r12*r22))+(((-1.0)*cj4*r10*x18038))+((cj4*cj9*r10*r21*sj9)))),-1);
if(!x18040.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x18039.value)+(((1.5707963267949)*(x18040.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x18041=IKcos(j8);
IkReal x18042=IKsin(j8);
IkReal x18043=(r21*sj9);
IkReal x18044=(cj9*r20);
IkReal x18045=((1.0)*x18042);
IkReal x18046=((1.0)*x18041);
IkReal x18047=(cj4*x18041);
IkReal x18048=(r12*sj4);
IkReal x18049=(r01*sj9);
IkReal x18050=(cj4*x18042);
IkReal x18051=(r11*sj4*sj9);
IkReal x18052=(cj9*r00);
IkReal x18053=((1.0)*cj4*x18042);
IkReal x18054=(cj9*r10*sj4);
IkReal x18055=(r02*sj4);
IkReal x18056=(r11*sj9);
IkReal x18057=(cj9*r00*sj4);
IkReal x18058=(cj9*r10);
IkReal x18059=(r01*sj4*sj9);
IkReal x18060=((1.0)*cj4*x18041);
evalcond[0]=((((-1.0)*x18044*x18045))+((r22*x18041))+((x18042*x18043)));
evalcond[1]=((((-1.0)*x18044*x18046))+(((-1.0)*r22*x18045))+((x18041*x18043)));
evalcond[2]=((1.0)+(((-1.0)*x18052*x18053))+((x18042*x18051))+((x18049*x18050))+((x18041*x18048))+((r02*x18047))+(((-1.0)*x18045*x18054)));
evalcond[3]=((((-1.0)*x18046*x18055))+((r12*x18047))+(((-1.0)*x18045*x18059))+(((-1.0)*x18053*x18058))+((x18042*x18057))+((x18050*x18056)));
evalcond[4]=(((x18041*x18051))+((x18047*x18049))+(((-1.0)*x18046*x18054))+(((-1.0)*x18045*x18048))+(((-1.0)*r02*x18053))+(((-1.0)*x18052*x18060)));
evalcond[5]=((-1.0)+((x18047*x18056))+((x18041*x18057))+(((-1.0)*r12*x18053))+(((-1.0)*x18046*x18059))+(((-1.0)*x18058*x18060))+((x18042*x18055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x18061=((1.0)*sj9);
CheckValue<IkReal> x18062 = IKatan2WithCheck(IkReal(r22),((((-1.0)*r21*x18061))+((cj9*r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x18062.valid){
continue;
}
CheckValue<IkReal> x18063=IKPowWithIntegerCheck(IKsign((((cj4*cj9*r11))+(((-1.0)*r00*sj4*x18061))+((cj4*r10*sj9))+(((-1.0)*(1.0)*cj9*r01*sj4)))),-1);
if(!x18063.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x18062.value)+(((1.5707963267949)*(x18063.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x18064=IKcos(j8);
IkReal x18065=IKsin(j8);
IkReal x18066=(r21*sj9);
IkReal x18067=(cj9*r20);
IkReal x18068=((1.0)*x18065);
IkReal x18069=((1.0)*x18064);
IkReal x18070=(cj4*x18064);
IkReal x18071=(r12*sj4);
IkReal x18072=(r01*sj9);
IkReal x18073=(cj4*x18065);
IkReal x18074=(r11*sj4*sj9);
IkReal x18075=(cj9*r00);
IkReal x18076=((1.0)*cj4*x18065);
IkReal x18077=(cj9*r10*sj4);
IkReal x18078=(r02*sj4);
IkReal x18079=(r11*sj9);
IkReal x18080=(cj9*r00*sj4);
IkReal x18081=(cj9*r10);
IkReal x18082=(r01*sj4*sj9);
IkReal x18083=((1.0)*cj4*x18064);
evalcond[0]=(((r22*x18064))+(((-1.0)*x18067*x18068))+((x18065*x18066)));
evalcond[1]=((((-1.0)*x18067*x18069))+((x18064*x18066))+(((-1.0)*r22*x18068)));
evalcond[2]=((1.0)+((x18072*x18073))+(((-1.0)*x18068*x18077))+((r02*x18070))+((x18065*x18074))+((x18064*x18071))+(((-1.0)*x18075*x18076)));
evalcond[3]=((((-1.0)*x18069*x18078))+((x18073*x18079))+((r12*x18070))+(((-1.0)*x18068*x18082))+((x18065*x18080))+(((-1.0)*x18076*x18081)));
evalcond[4]=((((-1.0)*x18075*x18083))+(((-1.0)*x18069*x18077))+((x18070*x18072))+((x18064*x18074))+(((-1.0)*r02*x18076))+(((-1.0)*x18068*x18071)));
evalcond[5]=((-1.0)+((x18064*x18080))+(((-1.0)*r12*x18076))+(((-1.0)*x18081*x18083))+(((-1.0)*x18069*x18082))+((x18070*x18079))+((x18065*x18078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x18084 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj9*r20))+((r21*sj9)))),r22,IKFAST_ATAN2_MAGTHRESH);
if(!x18084.valid){
continue;
}
CheckValue<IkReal> x18085=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x18085.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x18084.value)+(((1.5707963267949)*(x18085.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x18086=IKcos(j8);
IkReal x18087=IKsin(j8);
IkReal x18088=(r21*sj9);
IkReal x18089=(cj9*r20);
IkReal x18090=((1.0)*x18087);
IkReal x18091=((1.0)*x18086);
IkReal x18092=(cj4*x18086);
IkReal x18093=(r12*sj4);
IkReal x18094=(r01*sj9);
IkReal x18095=(cj4*x18087);
IkReal x18096=(r11*sj4*sj9);
IkReal x18097=(cj9*r00);
IkReal x18098=((1.0)*cj4*x18087);
IkReal x18099=(cj9*r10*sj4);
IkReal x18100=(r02*sj4);
IkReal x18101=(r11*sj9);
IkReal x18102=(cj9*r00*sj4);
IkReal x18103=(cj9*r10);
IkReal x18104=(r01*sj4*sj9);
IkReal x18105=((1.0)*cj4*x18086);
evalcond[0]=((((-1.0)*x18089*x18090))+((r22*x18086))+((x18087*x18088)));
evalcond[1]=(((x18086*x18088))+(((-1.0)*x18089*x18091))+(((-1.0)*r22*x18090)));
evalcond[2]=((1.0)+(((-1.0)*x18097*x18098))+((r02*x18092))+((x18094*x18095))+((x18087*x18096))+(((-1.0)*x18090*x18099))+((x18086*x18093)));
evalcond[3]=(((r12*x18092))+(((-1.0)*x18091*x18100))+(((-1.0)*x18098*x18103))+(((-1.0)*x18090*x18104))+((x18095*x18101))+((x18087*x18102)));
evalcond[4]=((((-1.0)*x18091*x18099))+(((-1.0)*x18097*x18105))+(((-1.0)*x18090*x18093))+((x18086*x18096))+((x18092*x18094))+(((-1.0)*r02*x18098)));
evalcond[5]=((-1.0)+(((-1.0)*x18103*x18105))+((x18092*x18101))+((x18086*x18102))+(((-1.0)*r12*x18098))+((x18087*x18100))+(((-1.0)*x18091*x18104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x18106=((1.0)*cj4);
CheckValue<IkReal> x18107=IKPowWithIntegerCheck(IKsign((((cj9*r01*sj4))+(((-1.0)*r10*sj9*x18106))+(((-1.0)*cj9*r11*x18106))+((r00*sj4*sj9)))),-1);
if(!x18107.valid){
continue;
}
CheckValue<IkReal> x18108 = IKatan2WithCheck(IkReal((r22*sj6)),((((-1.0)*(1.0)*r21*sj6*sj9))+((cj9*r20*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x18108.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18107.value)))+(x18108.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x18109=IKcos(j8);
IkReal x18110=IKsin(j8);
IkReal x18111=(r21*sj9);
IkReal x18112=(cj9*r20);
IkReal x18113=((1.0)*x18110);
IkReal x18114=((1.0)*x18109);
IkReal x18115=(r02*sj4);
IkReal x18116=((1.0)*cj4*x18110);
IkReal x18117=(r11*sj9);
IkReal x18118=(cj4*x18109);
IkReal x18119=(cj9*r00*sj4);
IkReal x18120=(cj9*r10);
IkReal x18121=((1.0)*cj4*x18109);
IkReal x18122=(r01*sj4*sj9);
IkReal x18123=(r12*sj4);
IkReal x18124=(r01*sj9);
IkReal x18125=(cj4*x18110);
IkReal x18126=(r11*sj4*sj9);
IkReal x18127=(cj9*r00);
IkReal x18128=(cj9*r10*sj4);
IkReal x18129=((-1.0)*(((1.0)*cj6)));
evalcond[0]=((((-1.0)*x18112*x18113))+((r22*x18109))+((x18110*x18111)));
evalcond[1]=((((-1.0)*r22*x18113))+((x18109*x18111))+(((-1.0)*x18112*x18114)));
evalcond[2]=(((x18109*x18119))+((x18117*x18118))+(((-1.0)*x18120*x18121))+((x18110*x18115))+sj6+(((-1.0)*x18114*x18122))+(((-1.0)*r12*x18116)));
evalcond[3]=((((-1.0)*x18116*x18127))+((x18124*x18125))+((r02*x18118))+(((-1.0)*x18113*x18128))+(((-1.0)*(1.0)*sj6))+((x18109*x18123))+((x18110*x18126)));
evalcond[4]=((((-1.0)*x18114*x18115))+(((-1.0)*x18116*x18120))+((x18110*x18119))+((x18117*x18125))+((r12*x18118))+x18129+(((-1.0)*x18113*x18122)));
evalcond[5]=(((x18109*x18126))+(((-1.0)*r02*x18116))+x18129+((x18118*x18124))+(((-1.0)*x18113*x18123))+(((-1.0)*x18114*x18128))+(((-1.0)*x18121*x18127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x18130=((1.0)*sj6);
CheckValue<IkReal> x18131 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj9*x18130))+((cj9*r20*sj6)))),((-1.0)*r22*x18130),IKFAST_ATAN2_MAGTHRESH);
if(!x18131.valid){
continue;
}
CheckValue<IkReal> x18132=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x18132.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x18131.value)+(((1.5707963267949)*(x18132.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x18133=IKcos(j8);
IkReal x18134=IKsin(j8);
IkReal x18135=(r21*sj9);
IkReal x18136=(cj9*r20);
IkReal x18137=((1.0)*x18134);
IkReal x18138=((1.0)*x18133);
IkReal x18139=(r02*sj4);
IkReal x18140=((1.0)*cj4*x18134);
IkReal x18141=(r11*sj9);
IkReal x18142=(cj4*x18133);
IkReal x18143=(cj9*r00*sj4);
IkReal x18144=(cj9*r10);
IkReal x18145=((1.0)*cj4*x18133);
IkReal x18146=(r01*sj4*sj9);
IkReal x18147=(r12*sj4);
IkReal x18148=(r01*sj9);
IkReal x18149=(cj4*x18134);
IkReal x18150=(r11*sj4*sj9);
IkReal x18151=(cj9*r00);
IkReal x18152=(cj9*r10*sj4);
IkReal x18153=((-1.0)*(((1.0)*cj6)));
evalcond[0]=(((r22*x18133))+(((-1.0)*x18136*x18137))+((x18134*x18135)));
evalcond[1]=((((-1.0)*x18136*x18138))+(((-1.0)*r22*x18137))+((x18133*x18135)));
evalcond[2]=((((-1.0)*r12*x18140))+(((-1.0)*x18144*x18145))+((x18141*x18142))+sj6+((x18133*x18143))+(((-1.0)*x18138*x18146))+((x18134*x18139)));
evalcond[3]=((((-1.0)*x18140*x18151))+((r02*x18142))+(((-1.0)*x18137*x18152))+((x18134*x18150))+((x18148*x18149))+((x18133*x18147))+(((-1.0)*(1.0)*sj6)));
evalcond[4]=(((r12*x18142))+(((-1.0)*x18137*x18146))+(((-1.0)*x18140*x18144))+((x18134*x18143))+x18153+((x18141*x18149))+(((-1.0)*x18138*x18139)));
evalcond[5]=((((-1.0)*r02*x18140))+(((-1.0)*x18138*x18152))+(((-1.0)*x18145*x18151))+(((-1.0)*x18137*x18147))+x18153+((x18133*x18150))+((x18142*x18148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x18154 = IKatan2WithCheck(IkReal((cj6*r22)),(((cj6*cj9*r20))+(((-1.0)*(1.0)*cj6*r21*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x18154.valid){
continue;
}
CheckValue<IkReal> x18155=IKPowWithIntegerCheck(IKsign((((cj4*r00*sj9))+((cj4*cj9*r01))+((r10*sj4*sj9))+((cj9*r11*sj4)))),-1);
if(!x18155.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x18154.value)+(((1.5707963267949)*(x18155.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x18156=IKcos(j8);
IkReal x18157=IKsin(j8);
IkReal x18158=(r21*sj9);
IkReal x18159=(cj9*r20);
IkReal x18160=((1.0)*x18157);
IkReal x18161=((1.0)*x18156);
IkReal x18162=(r02*sj4);
IkReal x18163=((1.0)*cj4*x18157);
IkReal x18164=(r11*sj9);
IkReal x18165=(cj4*x18156);
IkReal x18166=(cj9*r00*sj4);
IkReal x18167=(cj9*r10);
IkReal x18168=((1.0)*cj4*x18156);
IkReal x18169=(r01*sj4*sj9);
IkReal x18170=(r12*sj4);
IkReal x18171=(r01*sj9);
IkReal x18172=(cj4*x18157);
IkReal x18173=(r11*sj4*sj9);
IkReal x18174=(cj9*r00);
IkReal x18175=(cj9*r10*sj4);
IkReal x18176=((-1.0)*(((1.0)*cj6)));
evalcond[0]=(((r22*x18156))+((x18157*x18158))+(((-1.0)*x18159*x18160)));
evalcond[1]=(((x18156*x18158))+(((-1.0)*r22*x18160))+(((-1.0)*x18159*x18161)));
evalcond[2]=(((x18164*x18165))+(((-1.0)*r12*x18163))+((x18157*x18162))+sj6+(((-1.0)*x18167*x18168))+((x18156*x18166))+(((-1.0)*x18161*x18169)));
evalcond[3]=(((x18156*x18170))+((x18157*x18173))+(((-1.0)*x18160*x18175))+((r02*x18165))+(((-1.0)*x18163*x18174))+(((-1.0)*(1.0)*sj6))+((x18171*x18172)));
evalcond[4]=(x18176+((x18157*x18166))+(((-1.0)*x18160*x18169))+((r12*x18165))+((x18164*x18172))+(((-1.0)*x18161*x18162))+(((-1.0)*x18163*x18167)));
evalcond[5]=((((-1.0)*x18161*x18175))+x18176+(((-1.0)*r02*x18163))+((x18165*x18171))+((x18156*x18173))+(((-1.0)*x18160*x18170))+(((-1.0)*x18168*x18174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x18177=r21*r21;
IkReal x18178=(cj9*r20);
IkReal x18179=cj9*cj9;
IkReal x18180=(sj5*sj7);
IkReal x18181=(cj5*cj6);
IkReal x18182=(r21*sj9);
IkReal x18183=((1.0)*cj9*r20);
IkReal x18184=(cj5*cj7*sj6);
CheckValue<IkReal> x18185=IKPowWithIntegerCheck(IKsign(((((-1.0)*x18177*x18179))+x18177+((x18179*(r20*r20)))+(((-2.0)*r21*sj9*x18178))+(r22*r22))),-1);
if(!x18185.valid){
continue;
}
CheckValue<IkReal> x18186 = IKatan2WithCheck(IkReal((((x18181*x18182))+(((-1.0)*x18181*x18183))+(((-1.0)*r22*x18184))+((r22*x18180)))),((((-1.0)*x18183*x18184))+((r22*x18181))+(((-1.0)*sj5*sj7*x18182))+((x18178*x18180))+((x18182*x18184))),IKFAST_ATAN2_MAGTHRESH);
if(!x18186.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18185.value)))+(x18186.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x18187=IKcos(j8);
IkReal x18188=IKsin(j8);
IkReal x18189=(r21*sj9);
IkReal x18190=(cj9*r20);
IkReal x18191=((1.0)*x18188);
IkReal x18192=((1.0)*sj6);
IkReal x18193=((1.0)*x18187);
IkReal x18194=(cj4*x18187);
IkReal x18195=(r12*sj4);
IkReal x18196=(r01*sj9);
IkReal x18197=(cj4*x18188);
IkReal x18198=(r11*sj4*sj9);
IkReal x18199=(cj9*r00);
IkReal x18200=((1.0)*cj4*x18188);
IkReal x18201=(cj9*r10*sj4);
IkReal x18202=(r02*sj4);
IkReal x18203=(r11*sj9);
IkReal x18204=(cj9*r00*sj4);
IkReal x18205=(cj9*r10);
IkReal x18206=(r01*sj4*sj9);
IkReal x18207=((1.0)*cj4*x18187);
evalcond[0]=((((-1.0)*x18190*x18191))+((r22*x18187))+(((-1.0)*(1.0)*cj5*cj6))+((x18188*x18189)));
evalcond[1]=(((x18187*x18189))+(((-1.0)*r22*x18191))+(((-1.0)*cj5*cj7*x18192))+((sj5*sj7))+(((-1.0)*x18190*x18193)));
evalcond[2]=(((r02*x18194))+(((-1.0)*x18199*x18200))+(((-1.0)*x18191*x18201))+(((-1.0)*x18192))+((x18188*x18198))+((x18196*x18197))+((x18187*x18195)));
evalcond[3]=((((-1.0)*x18193*x18202))+(((-1.0)*x18191*x18206))+((cj6*sj5))+(((-1.0)*x18200*x18205))+((x18197*x18203))+((r12*x18194))+((x18188*x18204)));
evalcond[4]=((((-1.0)*x18193*x18201))+((x18187*x18198))+((cj6*cj7))+(((-1.0)*r02*x18200))+((x18194*x18196))+(((-1.0)*x18199*x18207))+(((-1.0)*x18191*x18195)));
evalcond[5]=(((cj5*sj7))+((x18194*x18203))+(((-1.0)*x18193*x18206))+((cj7*sj5*sj6))+(((-1.0)*x18205*x18207))+((x18187*x18204))+(((-1.0)*r12*x18200))+((x18188*x18202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x18208=(cj6*sj5);
IkReal x18209=(cj4*cj5*cj6);
IkReal x18210=(cj5*cj6);
CheckValue<IkReal> x18211=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r00*sj9))+(((-1.0)*r10*sj4*sj9))+(((-1.0)*cj9*r11*sj4))+(((-1.0)*cj4*cj9*r01)))),-1);
if(!x18211.valid){
continue;
}
CheckValue<IkReal> x18212 = IKatan2WithCheck(IkReal((((r12*x18209))+(((-1.0)*r02*sj4*x18210))+((r22*x18208)))),(((cj9*r10*x18209))+(((-1.0)*cj9*r00*sj4*x18210))+(((-1.0)*cj4*r11*sj9*x18210))+((cj9*r20*x18208))+((r01*sj4*sj9*x18210))+(((-1.0)*r21*sj9*x18208))),IKFAST_ATAN2_MAGTHRESH);
if(!x18212.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x18211.value)))+(x18212.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x18213=IKcos(j8);
IkReal x18214=IKsin(j8);
IkReal x18215=(r21*sj9);
IkReal x18216=(cj9*r20);
IkReal x18217=((1.0)*x18214);
IkReal x18218=((1.0)*sj6);
IkReal x18219=((1.0)*x18213);
IkReal x18220=(cj4*x18213);
IkReal x18221=(r12*sj4);
IkReal x18222=(r01*sj9);
IkReal x18223=(cj4*x18214);
IkReal x18224=(r11*sj4*sj9);
IkReal x18225=(cj9*r00);
IkReal x18226=((1.0)*cj4*x18214);
IkReal x18227=(cj9*r10*sj4);
IkReal x18228=(r02*sj4);
IkReal x18229=(r11*sj9);
IkReal x18230=(cj9*r00*sj4);
IkReal x18231=(cj9*r10);
IkReal x18232=(r01*sj4*sj9);
IkReal x18233=((1.0)*cj4*x18213);
evalcond[0]=((((-1.0)*(1.0)*cj5*cj6))+(((-1.0)*x18216*x18217))+((x18214*x18215))+((r22*x18213)));
evalcond[1]=((((-1.0)*x18216*x18219))+(((-1.0)*cj5*cj7*x18218))+((sj5*sj7))+(((-1.0)*r22*x18217))+((x18213*x18215)));
evalcond[2]=((((-1.0)*x18218))+((x18214*x18224))+(((-1.0)*x18225*x18226))+(((-1.0)*x18217*x18227))+((r02*x18220))+((x18222*x18223))+((x18213*x18221)));
evalcond[3]=(((x18223*x18229))+((x18214*x18230))+(((-1.0)*x18219*x18228))+((cj6*sj5))+((r12*x18220))+(((-1.0)*x18226*x18231))+(((-1.0)*x18217*x18232)));
evalcond[4]=((((-1.0)*x18225*x18233))+(((-1.0)*r02*x18226))+(((-1.0)*x18219*x18227))+((cj6*cj7))+((x18213*x18224))+(((-1.0)*x18217*x18221))+((x18220*x18222)));
evalcond[5]=((((-1.0)*x18231*x18233))+((cj5*sj7))+((x18220*x18229))+(((-1.0)*x18219*x18232))+((cj7*sj5*sj6))+((x18213*x18230))+(((-1.0)*r12*x18226))+((x18214*x18228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x18234=((1.0)*sj6);
IkReal x18235=(cj5*cj6);
IkReal x18236=(cj5*cj6*sj4);
CheckValue<IkReal> x18237 = IKatan2WithCheck(IkReal((((r12*x18236))+((cj4*r02*x18235))+(((-1.0)*r22*x18234)))),((((-1.0)*cj9*r20*x18234))+((cj9*r10*x18236))+(((-1.0)*cj4*r01*sj9*x18235))+(((-1.0)*r11*sj4*sj9*x18235))+((cj4*cj9*r00*x18235))+((r21*sj6*sj9))),IKFAST_ATAN2_MAGTHRESH);
if(!x18237.valid){
continue;
}
CheckValue<IkReal> x18238=IKPowWithIntegerCheck(IKsign((((r10*((cj4*sj9))))+(((-1.0)*cj9*r01*sj4))+(((-1.0)*r00*sj4*sj9))+((r11*((cj4*cj9)))))),-1);
if(!x18238.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x18237.value)+(((1.5707963267949)*(x18238.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x18239=IKcos(j8);
IkReal x18240=IKsin(j8);
IkReal x18241=(r21*sj9);
IkReal x18242=(cj9*r20);
IkReal x18243=((1.0)*x18240);
IkReal x18244=((1.0)*sj6);
IkReal x18245=((1.0)*x18239);
IkReal x18246=(cj4*x18239);
IkReal x18247=(r12*sj4);
IkReal x18248=(r01*sj9);
IkReal x18249=(cj4*x18240);
IkReal x18250=(r11*sj4*sj9);
IkReal x18251=(cj9*r00);
IkReal x18252=((1.0)*cj4*x18240);
IkReal x18253=(cj9*r10*sj4);
IkReal x18254=(r02*sj4);
IkReal x18255=(r11*sj9);
IkReal x18256=(cj9*r00*sj4);
IkReal x18257=(cj9*r10);
IkReal x18258=(r01*sj4*sj9);
IkReal x18259=((1.0)*cj4*x18239);
evalcond[0]=((((-1.0)*(1.0)*cj5*cj6))+((x18240*x18241))+(((-1.0)*x18242*x18243))+((r22*x18239)));
evalcond[1]=((((-1.0)*r22*x18243))+(((-1.0)*cj5*cj7*x18244))+((x18239*x18241))+((sj5*sj7))+(((-1.0)*x18242*x18245)));
evalcond[2]=(((r02*x18246))+(((-1.0)*x18244))+(((-1.0)*x18243*x18253))+((x18240*x18250))+(((-1.0)*x18251*x18252))+((x18248*x18249))+((x18239*x18247)));
evalcond[3]=((((-1.0)*x18245*x18254))+((x18249*x18255))+((x18240*x18256))+((cj6*sj5))+((r12*x18246))+(((-1.0)*x18252*x18257))+(((-1.0)*x18243*x18258)));
evalcond[4]=(((x18239*x18250))+(((-1.0)*r02*x18252))+((cj6*cj7))+(((-1.0)*x18251*x18259))+(((-1.0)*x18243*x18247))+((x18246*x18248))+(((-1.0)*x18245*x18253)));
evalcond[5]=(((cj5*sj7))+((x18239*x18256))+(((-1.0)*r12*x18252))+(((-1.0)*x18245*x18258))+((x18246*x18255))+((cj7*sj5*sj6))+(((-1.0)*x18257*x18259))+((x18240*x18254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly12qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[24*24]) = {0};
    IkReal IKFAST_ALIGNED16(A[12*12]);
    IkReal IKFAST_ALIGNED16(work[24*24*23]);
    int ipiv[12];
    int info, coeffindex;
    const int worksize=24*24*23;
    const int matrixdim = 12;
    const int matrixdim2 = 24;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 3; ++k) {
            A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 6; ++j) {
            for(int k = 0; k < 9; ++k) {
                IkReal a = matcoeffs[coeffindex+108], b = matcoeffs[coeffindex+54], c = matcoeffs[coeffindex];
                A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 3; ++k) {
                A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[24]);
    IkReal IKFAST_ALIGNED16(wi[24]);
    IkReal IKFAST_ALIGNED16(vr[24*24]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency12(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[3]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[5]/ev[2];
                    rawroots[numroots++] = ev[2]/ev[1];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[9]/ev[6];
                    rawroots[numroots++] = ev[10]/ev[9];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[11]/ev[8];
                    rawroots[numroots++] = ev[11]/ev[10];
                }
            }
        }
    }
}static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}

template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "dc6725ca8537841fafa1f56193170b61"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
